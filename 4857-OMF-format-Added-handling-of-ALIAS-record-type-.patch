From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Gravelbones <bojesen67@gmail.com>
Date: Wed, 28 Dec 2022 13:03:13 +0100
Subject: [PATCH] 4857: OMF format: Added handling of ALIAS record type (Closes
 #4856)

---
 .../util/bin/format/omf/OmfAliasRecord.java   | 41 +++++++++++++++++++
 .../app/util/bin/format/omf/OmfRecord.java    |  4 ++
 2 files changed, 45 insertions(+)
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/omf/OmfAliasRecord.java

diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/omf/OmfAliasRecord.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/omf/OmfAliasRecord.java
new file mode 100644
index 000000000..9180dce0f
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/omf/OmfAliasRecord.java
@@ -0,0 +1,41 @@
+/* ###
+ * IP: GHIDRA
+ * REVIEWED: NO
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package ghidra.app.util.bin.format.omf;
+
+import java.io.IOException;
+import ghidra.app.util.bin.BinaryReader;
+
+public class OmfAliasRecord extends OmfRecord {
+
+	/***
+	 * Read an OMF ALIAS record.
+	 * Aliases is a list of from/to string pairs, used by the linker.
+	 *
+	 * @param reader The byte stream with the alias record
+	 * @throws IOException
+	 */
+	public OmfAliasRecord(BinaryReader reader) throws IOException {
+		readRecordHeader(reader);
+		long max = reader.getPointerIndex() + getRecordLength() - 1;
+		while(reader.getPointerIndex() < max) {
+			OmfRecord.readString(reader); /* From */
+			OmfRecord.readString(reader); /* To */
+		}
+		readCheckSumByte(reader);
+	}
+
+}
\ No newline at end of file
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/omf/OmfRecord.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/omf/OmfRecord.java
index 853c2ace9..1a278acf0 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/omf/OmfRecord.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/omf/OmfRecord.java
@@ -38,6 +38,7 @@ public abstract class OmfRecord {
 	public final static byte LEXTDEF = (byte)0xB4;
 	public final static byte LPUBDEF = (byte)0xB6;
 	public final static byte LCOMDEF = (byte)0xB8;
+	public final static byte ALIAS = (byte)0xC6;
 	protected byte recordType;
 	protected int recordLength;
 	protected byte checkSum;
@@ -153,6 +154,9 @@ public abstract class OmfRecord {
 		case LCOMDEF:
 			res = new OmfComdefRecord(reader,true);
 			break;
+		case ALIAS:
+			res = new OmfAliasRecord(reader);
+			break;
 		default:
 			throw new OmfException("Unrecognized record type");
 		}
-- 
2.39.0

