From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Wiz <95232096+GameCubeGBA@users.noreply.github.com>
Date: Wed, 6 Jul 2022 19:23:34 -0400
Subject: [PATCH] 4419: Make proper Arrays.toString() calls instead of
 .toString, which is improper for arrays

---
 .../agent/gdb/pty/linux/LinuxPtyChild.java    |  2 +-
 .../DelegateGadpClientTargetObject.java       |  2 +-
 .../plugin/core/searchmem/mask/MaskValue.java |  4 +-
 .../format/pe/cli/blobs/CliSigAssembly.java   |  5 +-
 .../pe/cli/blobs/CliSigAssemblyRef.java       |  3 +-
 .../bin/format/xcoff/XCoffOptionalHeader.java | 57 +++++++++----------
 .../pdb/pdbapplicator/PdbAddressManager.java  |  2 +-
 .../shapes/PopupWindowPlacerBuilder.java      |  4 +-
 8 files changed, 42 insertions(+), 37 deletions(-)

diff --git a/Ghidra/Debug/Debugger-agent-gdb/src/main/java/agent/gdb/pty/linux/LinuxPtyChild.java b/Ghidra/Debug/Debugger-agent-gdb/src/main/java/agent/gdb/pty/linux/LinuxPtyChild.java
index cf44c99a1..efa6520f4 100644
--- a/Ghidra/Debug/Debugger-agent-gdb/src/main/java/agent/gdb/pty/linux/LinuxPtyChild.java
+++ b/Ghidra/Debug/Debugger-agent-gdb/src/main/java/agent/gdb/pty/linux/LinuxPtyChild.java
@@ -86,7 +86,7 @@ public class LinuxPtyChild extends LinuxPtyEndpoint implements PtyChild {
 			return new LocalProcessPtySession(builder.start());
 		}
 		catch (Exception e) {
-			Msg.error(this, "Could not start process with args " + args, e);
+			Msg.error(this, "Could not start process with args " + Arrays.toString(args), e);
 			throw e;
 		}
 	}
diff --git a/Ghidra/Debug/Debugger-gadp/src/main/java/ghidra/dbg/gadp/client/DelegateGadpClientTargetObject.java b/Ghidra/Debug/Debugger-gadp/src/main/java/ghidra/dbg/gadp/client/DelegateGadpClientTargetObject.java
index 6f28c6999..6c7ae250a 100644
--- a/Ghidra/Debug/Debugger-gadp/src/main/java/ghidra/dbg/gadp/client/DelegateGadpClientTargetObject.java
+++ b/Ghidra/Debug/Debugger-gadp/src/main/java/ghidra/dbg/gadp/client/DelegateGadpClientTargetObject.java
@@ -81,7 +81,7 @@ public class DelegateGadpClientTargetObject
 				}
 				if (!Arrays.equals(paramClasses, method.getParameterTypes())) {
 					throw new AssertionError("@" + annotationType.getSimpleName() +
-						" methods must have typed parameters: " + paramClasses);
+						" methods must have typed parameters: " + Arrays.toString(paramClasses));
 				}
 				MethodHandle handle;
 				try {
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/searchmem/mask/MaskValue.java b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/searchmem/mask/MaskValue.java
index 159cadc22..570593cd5 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/searchmem/mask/MaskValue.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/searchmem/mask/MaskValue.java
@@ -15,6 +15,8 @@
  */
 package ghidra.app.plugin.core.searchmem.mask;
 
+import java.util.Arrays;
+
 /**
  * Stores information about the instruction and mask.
  * 
@@ -54,7 +56,7 @@ class MaskValue {
 	@Override
 	public String toString() {
 		String rep = textRepresentation == null ? "" : textRepresentation;
-		return getClass().getSimpleName() + " - " + rep + " [mask=" + mask + ", value=" + value +
+		return getClass().getSimpleName() + " - " + rep + " [mask=" + Arrays.toString(mask) + ", value=" + Arrays.toString(value) +
 			"]";
 	}
 
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/pe/cli/blobs/CliSigAssembly.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/pe/cli/blobs/CliSigAssembly.java
index c81d9ea6a..9fcfccdd6 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/pe/cli/blobs/CliSigAssembly.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/pe/cli/blobs/CliSigAssembly.java
@@ -16,6 +16,7 @@
 package ghidra.app.util.bin.format.pe.cli.blobs;
 
 import java.io.IOException;
+import java.util.Arrays;
 
 import ghidra.app.util.bin.BinaryReader;
 import ghidra.app.util.bin.format.pe.cli.streams.CliStreamMetadata;
@@ -23,7 +24,7 @@ import ghidra.program.model.data.*;
 import ghidra.util.Msg;
 
 public class CliSigAssembly extends CliAbstractSig {
-	byte[] sha1Hash = new byte[CLISIGASSEMBLY_SHA1_LENGTH];
+	byte[] sha1Hash;
 	int bitLength;
 	int publicExponent;
 	byte[] publicKeySignature;
@@ -75,7 +76,7 @@ public class CliSigAssembly extends CliAbstractSig {
 	public String getRepresentationCommon(CliStreamMetadata stream, boolean isShort) {
 		return String.format(
 			"Assembly:\r\tSHA1: %s\r\tBit length: %d\r\tPublic exponent: %d\r\tSignature: %s",
-			sha1Hash.toString(), bitLength, publicExponent, publicKeySignature);
+				Arrays.toString(sha1Hash), bitLength, publicExponent, Arrays.toString(publicKeySignature));
 	}
 
 }
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/pe/cli/blobs/CliSigAssemblyRef.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/pe/cli/blobs/CliSigAssemblyRef.java
index 2bb03103f..21de400e0 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/pe/cli/blobs/CliSigAssemblyRef.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/pe/cli/blobs/CliSigAssemblyRef.java
@@ -16,6 +16,7 @@
 package ghidra.app.util.bin.format.pe.cli.blobs;
 
 import java.io.IOException;
+import java.util.Arrays;
 
 import ghidra.app.util.bin.BinaryReader;
 import ghidra.app.util.bin.format.pe.cli.streams.CliStreamMetadata;
@@ -55,6 +56,6 @@ public class CliSigAssemblyRef extends CliAbstractSig {
 
 	@Override
 	public String getRepresentationCommon(CliStreamMetadata stream, boolean isShort) {
-		return content.toString();
+		return Arrays.toString(content);
 	}
 }
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/xcoff/XCoffOptionalHeader.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/xcoff/XCoffOptionalHeader.java
index 2bb6df70b..1886900d0 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/xcoff/XCoffOptionalHeader.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/xcoff/XCoffOptionalHeader.java
@@ -107,35 +107,34 @@ public final class XCoffOptionalHeader implements StructConverter {
 
 	@Override
     public String toString() {
-		StringBuffer buffer = new StringBuffer();
-		buffer.append("OPTIONAL HEADER VALUES").append(NL);
-		buffer.append("magic      = ").append(o_magic).append(NL);
-		buffer.append("vstamp     = ").append(o_vstamp).append(NL);
-		buffer.append("tsize      = ").append(o_tsize).append(NL);
-		buffer.append("dsize      = ").append(o_dsize).append(NL);
-		buffer.append("bsize      = ").append(o_bsize).append(NL);
-		buffer.append("entry      = ").append(o_entry).append(NL);
-		buffer.append("text_start = ").append(o_text_start).append(NL);
-		buffer.append("data_start = ").append(o_data_start).append(NL);
-		buffer.append("o_toc      = ").append(o_toc).append(NL);
-		buffer.append("o_snentry  = ").append(o_snentry).append(NL);
-		buffer.append("o_sntext   = ").append(getSectionNumberForText()).append(NL);
-		buffer.append("o_sndata   = ").append(o_sndata).append(NL);
-		buffer.append("o_sntoc    = ").append(o_sntoc).append(NL);
-		buffer.append("o_snloader = ").append(o_snloader).append(NL);
-		buffer.append("o_snbss    = ").append(o_snbss).append(NL);
-		buffer.append("o_algntext = ").append(o_algntext).append(NL);
-		buffer.append("o_algndata = ").append(o_algndata).append(NL);
-		buffer.append("o_modtype  = ").append(o_modtype).append(NL);
-		buffer.append("o_cpuflag  = ").append(o_cpuflag).append(NL);
-		buffer.append("o_cputype  = ").append(o_cputype).append(NL);
-		buffer.append("o_maxstack = ").append(o_maxstack).append(NL);
-		buffer.append("o_maxdata  = ").append(o_maxdata).append(NL);
-		buffer.append("o_flags    = ").append(o_flags).append(NL);
-		buffer.append("o_debugger = ").append(o_debugger).append(NL);
-		buffer.append("o_sntdata  = ").append(o_sntdata).append(NL);
-		buffer.append("o_sntbss   = ").append(o_sntbss).append(NL);
-		return buffer.toString();
+		String buffer = "OPTIONAL HEADER VALUES" + NL +
+				"magic      = " + o_magic + NL +
+				"vstamp     = " + o_vstamp + NL +
+				"tsize      = " + o_tsize + NL +
+				"dsize      = " + o_dsize + NL +
+				"bsize      = " + o_bsize + NL +
+				"entry      = " + o_entry + NL +
+				"text_start = " + o_text_start + NL +
+				"data_start = " + o_data_start + NL +
+				"o_toc      = " + o_toc + NL +
+				"o_snentry  = " + o_snentry + NL +
+				"o_sntext   = " + getSectionNumberForText() + NL +
+				"o_sndata   = " + o_sndata + NL +
+				"o_sntoc    = " + o_sntoc + NL +
+				"o_snloader = " + o_snloader + NL +
+				"o_snbss    = " + o_snbss + NL +
+				"o_algntext = " + o_algntext + NL +
+				"o_algndata = " + o_algndata + NL +
+				"o_modtype  = " + o_modtype + NL +
+				"o_cpuflag  = " + o_cpuflag + NL +
+				"o_cputype  = " + o_cputype + NL +
+				"o_maxstack = " + o_maxstack + NL +
+				"o_maxdata  = " + o_maxdata + NL +
+				"o_flags    = " + o_flags + NL +
+				"o_debugger = " + o_debugger + NL +
+				"o_sntdata  = " + o_sntdata + NL +
+				"o_sntbss   = " + o_sntbss + NL;
+		return buffer;
 	}
 
 	/**
diff --git a/Ghidra/Features/PDB/src/main/java/ghidra/app/util/pdb/pdbapplicator/PdbAddressManager.java b/Ghidra/Features/PDB/src/main/java/ghidra/app/util/pdb/pdbapplicator/PdbAddressManager.java
index 7fe758a90..96c9e078e 100644
--- a/Ghidra/Features/PDB/src/main/java/ghidra/app/util/pdb/pdbapplicator/PdbAddressManager.java
+++ b/Ghidra/Features/PDB/src/main/java/ghidra/app/util/pdb/pdbapplicator/PdbAddressManager.java
@@ -371,7 +371,7 @@ public class PdbAddressManager {
 		SymbolIterator iter = program.getSymbolTable().getAllSymbols(false);
 		while (iter.hasNext()) {
 			Symbol symbol = iter.next();
-			String name = symbol.getPath().toString();
+			String name = Arrays.toString(symbol.getPath());
 			Address address = symbol.getAddress();
 			Address existingAddress = addressByPreExistingSymbolName.get(name);
 			if (existingAddress == null) {
diff --git a/Ghidra/Framework/Docking/src/main/java/docking/widgets/shapes/PopupWindowPlacerBuilder.java b/Ghidra/Framework/Docking/src/main/java/docking/widgets/shapes/PopupWindowPlacerBuilder.java
index f49f3e4c2..187e52627 100644
--- a/Ghidra/Framework/Docking/src/main/java/docking/widgets/shapes/PopupWindowPlacerBuilder.java
+++ b/Ghidra/Framework/Docking/src/main/java/docking/widgets/shapes/PopupWindowPlacerBuilder.java
@@ -17,6 +17,8 @@ package docking.widgets.shapes;
 
 import docking.widgets.shapes.PopupWindowPlacer.*;
 
+import java.util.Arrays;
+
 /**
  * This class builds a PopWindowPlacer that can have subsequent PopWindowPlacers.
  * <p>
@@ -279,7 +281,7 @@ public class PopupWindowPlacerBuilder {
 	 */
 	public PopupWindowPlacerBuilder edge(Location major, Location... minors) {
 		if (minors.length > 3) {
-			throw new IllegalArgumentException("Too many preferred Locations: " + minors);
+			throw new IllegalArgumentException("Too many preferred Locations: " + Arrays.toString(minors));
 		}
 		for (Location minor : minors) {
 			if (!major.validMinor(minor)) {
-- 
2.39.1

