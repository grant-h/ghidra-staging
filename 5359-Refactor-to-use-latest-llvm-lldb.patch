From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Guido Scalise <guido.scalise@gmail.com>
Date: Tue, 16 May 2023 22:22:22 +0100
Subject: [PATCH] 5359: Refactor to use latest llvm/lldb

---
 .../Debugger-swig-lldb/buildNatives.gradle    |  5 +-
 .../src/main/cpp/LLDBWrapJava.cpp             | 54 +---------------
 .../java/SWIG/InstructionControlFlowKind.java | 63 +++++++++++++++++++
 .../SWIG/TraceInstructionControlFlowType.java | 60 ------------------
 .../src/main/java/SWIG/lldbJNI.java           |  6 +-
 5 files changed, 71 insertions(+), 117 deletions(-)
 create mode 100644 Ghidra/Debug/Debugger-swig-lldb/src/main/java/SWIG/InstructionControlFlowKind.java
 delete mode 100644 Ghidra/Debug/Debugger-swig-lldb/src/main/java/SWIG/TraceInstructionControlFlowType.java

diff --git a/Ghidra/Debug/Debugger-swig-lldb/buildNatives.gradle b/Ghidra/Debug/Debugger-swig-lldb/buildNatives.gradle
index 6471028bd..d3998e3c7 100644
--- a/Ghidra/Debug/Debugger-swig-lldb/buildNatives.gradle
+++ b/Ghidra/Debug/Debugger-swig-lldb/buildNatives.gradle
@@ -40,7 +40,7 @@ task generateSwig {
 			def exe = "swig"
 			exec {
 				commandLine exe, "-c++", "-features",  "autodoc", "-D__STDC_LIMIT_MACROS", "-D__STDC_CONSTANT_MACROS",
-		    		"-I$llvm_dir/lldb/include", "-I$llvm_dir/lldb/bindings", "-java", "-package", "SWIG", "-c++",
+				"-I$llvm_dir/lldb/include", "-I$llvm_dir/include/lldb", "-I$llvm_dir/lldb/bindings", "-java", "-package", "SWIG", "-c++",
 		    		"-outdir", "$outdir_java/SWIG", "-o", "$outdir_cpp/LLDBWrapJava.cpp" 
 				args "$srcdir/java.swig"
 			}
@@ -88,6 +88,7 @@ if (System.env.LLVM_HOME) {
 				}
 				if (b.toolChain in Gcc) {
 					b.cppCompiler.args "-I$llvm_dir/lldb/include"
+					b.cppCompiler.args "-I$llvm_dir/include"
 					b.cppCompiler.args "-I${JAVA_HOME}/include"
 					b.linker.args "-L$llvm_build_dir/lib"			
 					b.linker.args "-llldb"			
@@ -97,6 +98,7 @@ if (System.env.LLVM_HOME) {
 				}
 				else if (b.toolChain in Clang) {
 					b.cppCompiler.args "-I$llvm_dir/lldb/include"
+					b.cppCompiler.args "-I$llvm_dir/include"
 					b.cppCompiler.args "-I${JAVA_HOME}/include"
 					b.linker.args "-L$llvm_build_dir/lib"			
 					b.linker.args "-llldb"			
@@ -106,6 +108,7 @@ if (System.env.LLVM_HOME) {
 				}
 		 		else if (b.toolChain in VisualCpp) {
 					b.cppCompiler.args "/I$llvm_dir/lldb/include"
+					b.cppCompiler.args "-I$llvm_dir/include"
 					b.cppCompiler.args "-I${JAVA_HOME}/include"
 					b.linker.args "/LIBPATH:$llvm_build_dir/lib"			
 					b.linker.args "liblldb.lib"			
diff --git a/Ghidra/Debug/Debugger-swig-lldb/src/main/cpp/LLDBWrapJava.cpp b/Ghidra/Debug/Debugger-swig-lldb/src/main/cpp/LLDBWrapJava.cpp
index 351cba06f..d70b65475 100644
--- a/Ghidra/Debug/Debugger-swig-lldb/src/main/cpp/LLDBWrapJava.cpp
+++ b/Ghidra/Debug/Debugger-swig-lldb/src/main/cpp/LLDBWrapJava.cpp
@@ -4102,61 +4102,13 @@ SWIGEXPORT jint JNICALL Java_SWIG_lldbJNI_eExpressionEvaluationParse_1get(JNIEnv
 }
 
 
-SWIGEXPORT jint JNICALL Java_SWIG_lldbJNI_eTraceInstructionControlFlowTypeInstruction_1get(JNIEnv *jenv, jclass jcls) {
+SWIGEXPORT jint JNICALL Java_SWIG_lldbJNI_eInstructionControlFlowKindUnknown_1get(JNIEnv *jenv, jclass jcls) {
   jint jresult = 0 ;
-  lldb::TraceInstructionControlFlowType result;
+  lldb::InstructionControlFlowKind result;
   
   (void)jenv;
   (void)jcls;
-  result = (lldb::TraceInstructionControlFlowType)lldb::eTraceInstructionControlFlowTypeInstruction;
-  jresult = (jint)result; 
-  return jresult;
-}
-
-
-SWIGEXPORT jint JNICALL Java_SWIG_lldbJNI_eTraceInstructionControlFlowTypeBranch_1get(JNIEnv *jenv, jclass jcls) {
-  jint jresult = 0 ;
-  lldb::TraceInstructionControlFlowType result;
-  
-  (void)jenv;
-  (void)jcls;
-  result = (lldb::TraceInstructionControlFlowType)lldb::eTraceInstructionControlFlowTypeBranch;
-  jresult = (jint)result; 
-  return jresult;
-}
-
-
-SWIGEXPORT jint JNICALL Java_SWIG_lldbJNI_eTraceInstructionControlFlowTypeTakenBranch_1get(JNIEnv *jenv, jclass jcls) {
-  jint jresult = 0 ;
-  lldb::TraceInstructionControlFlowType result;
-  
-  (void)jenv;
-  (void)jcls;
-  result = (lldb::TraceInstructionControlFlowType)lldb::eTraceInstructionControlFlowTypeTakenBranch;
-  jresult = (jint)result; 
-  return jresult;
-}
-
-
-SWIGEXPORT jint JNICALL Java_SWIG_lldbJNI_eTraceInstructionControlFlowTypeCall_1get(JNIEnv *jenv, jclass jcls) {
-  jint jresult = 0 ;
-  lldb::TraceInstructionControlFlowType result;
-  
-  (void)jenv;
-  (void)jcls;
-  result = (lldb::TraceInstructionControlFlowType)lldb::eTraceInstructionControlFlowTypeCall;
-  jresult = (jint)result; 
-  return jresult;
-}
-
-
-SWIGEXPORT jint JNICALL Java_SWIG_lldbJNI_eTraceInstructionControlFlowTypeReturn_1get(JNIEnv *jenv, jclass jcls) {
-  jint jresult = 0 ;
-  lldb::TraceInstructionControlFlowType result;
-  
-  (void)jenv;
-  (void)jcls;
-  result = (lldb::TraceInstructionControlFlowType)lldb::eTraceInstructionControlFlowTypeReturn;
+  result = (lldb::InstructionControlFlowKind)lldb::eInstructionControlFlowKindUnknown;
   jresult = (jint)result; 
   return jresult;
 }
diff --git a/Ghidra/Debug/Debugger-swig-lldb/src/main/java/SWIG/InstructionControlFlowKind.java b/Ghidra/Debug/Debugger-swig-lldb/src/main/java/SWIG/InstructionControlFlowKind.java
new file mode 100644
index 000000000..2120c46c9
--- /dev/null
+++ b/Ghidra/Debug/Debugger-swig-lldb/src/main/java/SWIG/InstructionControlFlowKind.java
@@ -0,0 +1,63 @@
+/* ###
+ * IP: Apache License 2.0 with LLVM Exceptions
+ */
+/* ----------------------------------------------------------------------------
+ * This file was automatically generated by SWIG (http://www.swig.org).
+ * Version 4.0.1
+ *
+ * Do not make changes to this file unless you know what you are doing--modify
+ * the SWIG interface file instead.
+ * ----------------------------------------------------------------------------- */
+
+package SWIG;
+
+public final class InstructionControlFlowKind {
+  public final static InstructionControlFlowKind eInstructionControlFlowKindUnknown = new InstructionControlFlowKind("eInstructionControlFlowKindUnknown", lldbJNI.eInstructionControlFlowKindUnknown_get());
+  public final static InstructionControlFlowKind eInstructionControlFlowKindOther = new InstructionControlFlowKind("eInstructionControlFlowKindOther");
+  public final static InstructionControlFlowKind eInstructionControlFlowKindCall = new InstructionControlFlowKind("eInstructionControlFlowKindCall");
+  public final static InstructionControlFlowKind eInstructionControlFlowKindReturn = new InstructionControlFlowKind("eInstructionControlFlowKindReturn");
+  public final static InstructionControlFlowKind eInstructionControlFlowKindJump = new InstructionControlFlowKind("eInstructionControlFlowKindJump");
+  public final static InstructionControlFlowKind eInstructionControlFlowKindCondJump = new InstructionControlFlowKind("eInstructionControlFlowKindCondJump");
+  public final static InstructionControlFlowKind eInstructionControlFlowKindFarCall = new InstructionControlFlowKind("eInstructionControlFlowKindFarCall");
+  public final static InstructionControlFlowKind eInstructionControlFlowKindFarReturn = new InstructionControlFlowKind("eInstructionControlFlowKindFarReturn");
+  public final static InstructionControlFlowKind eInstructionControlFlowKindFarJump = new InstructionControlFlowKind("eInstructionControlFlowKindFarJump");
+
+  public final int swigValue() {
+    return swigValue;
+  }
+
+  public String toString() {
+    return swigName;
+  }
+
+  public static InstructionControlFlowKind swigToEnum(int swigValue) {
+    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
+      return swigValues[swigValue];
+    for (int i = 0; i < swigValues.length; i++)
+      if (swigValues[i].swigValue == swigValue)
+        return swigValues[i];
+    throw new IllegalArgumentException("No enum " + InstructionControlFlowKind.class + " with value " + swigValue);
+  }
+
+  private InstructionControlFlowKind(String swigName) {
+    this.swigName = swigName;
+    this.swigValue = swigNext++;
+  }
+
+  private InstructionControlFlowKind(String swigName, int swigValue) {
+    this.swigName = swigName;
+    this.swigValue = swigValue;
+    swigNext = swigValue+1;
+  }
+
+  private InstructionControlFlowKind(String swigName, InstructionControlFlowKind swigEnum) {
+    this.swigName = swigName;
+    this.swigValue = swigEnum.swigValue;
+    swigNext = this.swigValue+1;
+  }
+
+  private static InstructionControlFlowKind[] swigValues = { eInstructionControlFlowKindUnknown, eInstructionControlFlowKindOther, eInstructionControlFlowKindCall, eInstructionControlFlowKindReturn, eInstructionControlFlowKindJump, eInstructionControlFlowKindCondJump, eInstructionControlFlowKindFarCall, eInstructionControlFlowKindFarReturn, eInstructionControlFlowKindFarJump };
+  private static int swigNext = 0;
+  private final int swigValue;
+  private final String swigName;
+}
diff --git a/Ghidra/Debug/Debugger-swig-lldb/src/main/java/SWIG/TraceInstructionControlFlowType.java b/Ghidra/Debug/Debugger-swig-lldb/src/main/java/SWIG/TraceInstructionControlFlowType.java
deleted file mode 100644
index 79b14277e..000000000
--- a/Ghidra/Debug/Debugger-swig-lldb/src/main/java/SWIG/TraceInstructionControlFlowType.java
+++ /dev/null
@@ -1,60 +0,0 @@
-/* ###
- * IP: Apache License 2.0 with LLVM Exceptions
- */
-/* ----------------------------------------------------------------------------
- * This file was automatically generated by SWIG (http://www.swig.org).
- * Version 4.0.1
- *
- * Do not make changes to this file unless you know what you are doing--modify
- * the SWIG interface file instead.
- * ----------------------------------------------------------------------------- */
-
-package SWIG;
-
-public final class TraceInstructionControlFlowType {
-  public final static TraceInstructionControlFlowType eTraceInstructionControlFlowTypeInstruction = new TraceInstructionControlFlowType("eTraceInstructionControlFlowTypeInstruction", lldbJNI.eTraceInstructionControlFlowTypeInstruction_get());
-  public final static TraceInstructionControlFlowType eTraceInstructionControlFlowTypeBranch = new TraceInstructionControlFlowType("eTraceInstructionControlFlowTypeBranch", lldbJNI.eTraceInstructionControlFlowTypeBranch_get());
-  public final static TraceInstructionControlFlowType eTraceInstructionControlFlowTypeTakenBranch = new TraceInstructionControlFlowType("eTraceInstructionControlFlowTypeTakenBranch", lldbJNI.eTraceInstructionControlFlowTypeTakenBranch_get());
-  public final static TraceInstructionControlFlowType eTraceInstructionControlFlowTypeCall = new TraceInstructionControlFlowType("eTraceInstructionControlFlowTypeCall", lldbJNI.eTraceInstructionControlFlowTypeCall_get());
-  public final static TraceInstructionControlFlowType eTraceInstructionControlFlowTypeReturn = new TraceInstructionControlFlowType("eTraceInstructionControlFlowTypeReturn", lldbJNI.eTraceInstructionControlFlowTypeReturn_get());
-
-  public final int swigValue() {
-    return swigValue;
-  }
-
-  public String toString() {
-    return swigName;
-  }
-
-  public static TraceInstructionControlFlowType swigToEnum(int swigValue) {
-    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
-      return swigValues[swigValue];
-    for (int i = 0; i < swigValues.length; i++)
-      if (swigValues[i].swigValue == swigValue)
-        return swigValues[i];
-    throw new IllegalArgumentException("No enum " + TraceInstructionControlFlowType.class + " with value " + swigValue);
-  }
-
-  private TraceInstructionControlFlowType(String swigName) {
-    this.swigName = swigName;
-    this.swigValue = swigNext++;
-  }
-
-  private TraceInstructionControlFlowType(String swigName, int swigValue) {
-    this.swigName = swigName;
-    this.swigValue = swigValue;
-    swigNext = swigValue+1;
-  }
-
-  private TraceInstructionControlFlowType(String swigName, TraceInstructionControlFlowType swigEnum) {
-    this.swigName = swigName;
-    this.swigValue = swigEnum.swigValue;
-    swigNext = this.swigValue+1;
-  }
-
-  private static TraceInstructionControlFlowType[] swigValues = { eTraceInstructionControlFlowTypeInstruction, eTraceInstructionControlFlowTypeBranch, eTraceInstructionControlFlowTypeTakenBranch, eTraceInstructionControlFlowTypeCall, eTraceInstructionControlFlowTypeReturn };
-  private static int swigNext = 0;
-  private final int swigValue;
-  private final String swigName;
-}
-
diff --git a/Ghidra/Debug/Debugger-swig-lldb/src/main/java/SWIG/lldbJNI.java b/Ghidra/Debug/Debugger-swig-lldb/src/main/java/SWIG/lldbJNI.java
index 798ede81a..230af931b 100644
--- a/Ghidra/Debug/Debugger-swig-lldb/src/main/java/SWIG/lldbJNI.java
+++ b/Ghidra/Debug/Debugger-swig-lldb/src/main/java/SWIG/lldbJNI.java
@@ -281,11 +281,7 @@ public class lldbJNI {
   public final static native int eQueueItemKindUnknown_get();
   public final static native int eQueueKindUnknown_get();
   public final static native int eExpressionEvaluationParse_get();
-  public final static native int eTraceInstructionControlFlowTypeInstruction_get();
-  public final static native int eTraceInstructionControlFlowTypeBranch_get();
-  public final static native int eTraceInstructionControlFlowTypeTakenBranch_get();
-  public final static native int eTraceInstructionControlFlowTypeCall_get();
-  public final static native int eTraceInstructionControlFlowTypeReturn_get();
+  public final static native int eInstructionControlFlowKindUnknown_get();
   public final static native int eWatchpointKindWrite_get();
   public final static native int eWatchpointKindRead_get();
   public final static native int eGdbSignalBadAccess_get();
-- 
2.40.1

