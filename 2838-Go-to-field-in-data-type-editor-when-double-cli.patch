From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Vladimir Panteleev <git@thecybershadow.net>
Date: Sat, 13 Mar 2021 14:08:04 +0000
Subject: [PATCH] 2838: Go to field in data type editor when double clicking in
 decompiler

CompositeEditorPanel: Add selectComponentWithOffset

This implements finding and focusing the row corresponding to the data
type component with a given offset.

Following commits will be adding glue code to allow this to be done
on a double click from a decompiler panel.

Squashed:
StructureEditorProvider: Add goToOffset

Glue between DataTypeEditorManager and CompositeEditorPanel.

DataTypeEditorManager: Add edit method with offset

Glue between DataTypeManagerPlugin and StructureEditorProvider.

DataTypeManagerService: Add edit method with offset and implementations

Glue between DecompilerCallbackHandler and DataTypeEditorManager.

DecompilerCallbackHandler: Add goToField and implementation

Glue between DecompilerController and DataTypeManagerService.

DecompilerController: Add goToField

Glue between DecompilerPanel and DecompilerCallbackHandler.

DecompilerPanel: Call DecompilerController.goToField for ClangFieldToken

This implements the Enter / double-click action for ClangFieldToken,
which invokes the goToField / goToOffset / ... glue chain added in the
previous commits.
---
 .../DefaultDataTypeManagerService.java        |  5 ++
 .../compositeeditor/CompositeEditorPanel.java | 16 ++++++
 .../StructureEditorProvider.java              |  8 +++
 .../core/datamgr/DataTypeManagerPlugin.java   |  7 ++-
 .../datamgr/editor/DataTypeEditorManager.java | 56 ++++++++++++-------
 .../app/services/DataTypeManagerService.java  | 10 ++++
 .../TestDoubleDataTypeManagerService.java     |  5 ++
 .../decompiler/component/CDisplayPanel.java   |  6 ++
 .../component/DecompilerCallbackHandler.java  |  3 +
 .../component/DecompilerController.java       |  5 ++
 .../decompiler/component/DecompilerPanel.java | 10 ++++
 .../core/decompile/DecompilerProvider.java    | 16 ++++++
 12 files changed, 126 insertions(+), 21 deletions(-)

diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/analysis/DefaultDataTypeManagerService.java b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/analysis/DefaultDataTypeManagerService.java
index 176b7e00b..49ee829a3 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/analysis/DefaultDataTypeManagerService.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/analysis/DefaultDataTypeManagerService.java
@@ -145,6 +145,11 @@ public class DefaultDataTypeManagerService implements DataTypeManagerService {
 		throw new UnsupportedOperationException();
 	}
 
+	@Override
+	public void edit(DataType dt, int offset) {
+		throw new UnsupportedOperationException();
+	}
+
 	@Override
 	public DataTypeManager getBuiltInDataTypesManager() {
 		return builtInDataTypesManager;
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/compositeeditor/CompositeEditorPanel.java b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/compositeeditor/CompositeEditorPanel.java
index 450ab47ec..41b114c31 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/compositeeditor/CompositeEditorPanel.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/compositeeditor/CompositeEditorPanel.java
@@ -1157,6 +1157,22 @@ public abstract class CompositeEditorPanel extends JPanel
 		clsm.setLeadSelectionIndex(column);
 	}
 
+	/**
+	 * Select and scroll to the component at the given offset.
+	 * @param offset The offset of the component to scroll to.
+	 */
+	public void selectComponentWithOffset(int offset) {
+		int num = model.getNumComponents();
+		for (int i = 0; i < num; i++) {
+			DataTypeComponent dtc = model.getComponent(i);
+			if (dtc.getOffset() >= offset) {
+				model.setSelection(new int[]{i});
+				scrollToCell(i, 0);
+				return;
+			}
+		}
+	}
+
 	private class ComponentStringCellEditor extends ComponentCellEditor {
 		public ComponentStringCellEditor(JTextField textField) {
 			super(textField);
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/compositeeditor/StructureEditorProvider.java b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/compositeeditor/StructureEditorProvider.java
index 05723a839..15c0bbe66 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/compositeeditor/StructureEditorProvider.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/compositeeditor/StructureEditorProvider.java
@@ -89,4 +89,12 @@ public class StructureEditorProvider extends CompositeEditorProvider {
 	public String getHelpTopic() {
 		return "DataTypeEditors";
 	}
+
+	/**
+	 * Scroll to the field at the given offset.
+	 * @param offset The offset of the field to scroll to.
+	 */
+	public void goToOffset(int offset) {
+		editorPanel.selectComponentWithOffset(offset);
+	}
 }
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/datamgr/DataTypeManagerPlugin.java b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/datamgr/DataTypeManagerPlugin.java
index f2727b03f..35233d52e 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/datamgr/DataTypeManagerPlugin.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/datamgr/DataTypeManagerPlugin.java
@@ -499,6 +499,11 @@ public class DataTypeManagerPlugin extends ProgramPlugin
 
 	@Override
 	public void edit(DataType dt) {
+		edit(dt, -1);
+	}
+
+	@Override
+	public void edit(DataType dt, int offset) {
 		DataTypeManager dataTypeManager = dt.getDataTypeManager();
 		if (dataTypeManager == null) {
 			throw new IllegalArgumentException(
@@ -510,7 +515,7 @@ public class DataTypeManagerPlugin extends ProgramPlugin
 			throw new IllegalArgumentException(
 				"DataType " + dt.getName() + " has no category path!");
 		}
-		editorManager.edit(dt);
+		editorManager.edit(dt, offset);
 	}
 
 	@Override
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/datamgr/editor/DataTypeEditorManager.java b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/datamgr/editor/DataTypeEditorManager.java
index d05f007a9..4cfded934 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/datamgr/editor/DataTypeEditorManager.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/datamgr/editor/DataTypeEditorManager.java
@@ -97,8 +97,9 @@ public class DataTypeEditorManager
 	 * is already being edited then it is brought to the front. Otherwise, a new editor is created
 	 * and displayed.
 	 * @param dataType the data type to edit.
+	 * @param offset Scroll to the field with this offset, if it is non-negative.
 	 */
-	public void edit(DataType dataType) {
+	public void edit(DataType dataType, int offset) {
 
 		DataTypeManager dataTypeManager = dataType.getDataTypeManager();
 		if (dataTypeManager == null) {
@@ -111,27 +112,42 @@ public class DataTypeEditorManager
 			ComponentProvider componentProvider = editor.getComponentProvider();
 			plugin.getTool().showComponentProvider(componentProvider, true);
 			componentProvider.toFront();
-			return;
-		}
-
-		if (dataType instanceof Enum) {
-			editor = new EnumEditorProvider(plugin, (Enum) dataType);
-		}
-		else if (dataType instanceof Union) {
-			editor = new UnionEditorProvider(plugin, (Union) dataType, showUnionNumbersInHex());
-		}
-		else if (dataType instanceof Structure) {
-			editor = new StructureEditorProvider(plugin, (Structure) dataType,
-				showStructureNumbersInHex());
-		}
-		else if (dataType instanceof FunctionDefinition) {
-			editFunctionSignature((FunctionDefinition) dataType);
+		} else {
+			if (dataType instanceof Enum) {
+				editor = new EnumEditorProvider(plugin, (Enum) dataType);
+			}
+			else if (dataType instanceof Union) {
+				editor = new UnionEditorProvider(plugin, (Union) dataType, showUnionNumbersInHex());
+			}
+			else if (dataType instanceof Structure) {
+				editor = new StructureEditorProvider(plugin, (Structure) dataType,
+					showStructureNumbersInHex());
+			}
+			else if (dataType instanceof FunctionDefinition) {
+				editFunctionSignature((FunctionDefinition) dataType);
+			}
+			if (editor == null) {
+				return;
+			}
+			editor.addEditorListener(this);
+			editorList.add(editor);
 		}
-		if (editor == null) {
-			return;
+		if (offset >= 0) {
+			if (editor instanceof StructureEditorProvider)
+				((StructureEditorProvider) editor).goToOffset(offset);
+			else
+				throw new IllegalArgumentException("Cannot navigate to an offset with this data type.");
 		}
-		editor.addEditorListener(this);
-		editorList.add(editor);
+	}
+
+	/**
+	 * Displays a data type editor for editing the indicated data type. If the data type is
+	 * is already being edited then it is brought to the front. Otherwise, a new editor is created
+	 * and displayed.
+	 * @param dataType the data type to edit.
+	 */
+	public void edit(DataType dataType) {
+		edit(dataType, -1);
 	}
 
 	private void installEditorActions() {
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/services/DataTypeManagerService.java b/Ghidra/Features/Base/src/main/java/ghidra/app/services/DataTypeManagerService.java
index d9e38f26a..7ff71efd1 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/services/DataTypeManagerService.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/services/DataTypeManagerService.java
@@ -101,6 +101,16 @@ public interface DataTypeManagerService extends DataTypeQueryService {
 	 */
 	public void edit(DataType dt);
 
+	/**
+	 * Pop up an editor dialog for the given data type and offset.
+	 *
+	 * @param dt data type that either a Structure or a Union; built in types cannot be edited
+	 * @param offset offset of the field within dt to edit / focus
+	 * @throws IllegalArgumentException if the given has not been resolved by a DataTypeManager;
+	 *         in other words, if {@link DataType#getDataTypeManager()} returns null.
+	 */
+	public void edit(DataType dt, int offset);
+
 	/**
 	 * Closes the archive for the given {@link DataTypeManager}.  This will ignore request to 
 	 * close the open Program's manager and the built-in manager.  
diff --git a/Ghidra/Features/Base/src/test/java/ghidra/app/services/TestDoubleDataTypeManagerService.java b/Ghidra/Features/Base/src/test/java/ghidra/app/services/TestDoubleDataTypeManagerService.java
index 730109c1f..b41a7bb39 100644
--- a/Ghidra/Features/Base/src/test/java/ghidra/app/services/TestDoubleDataTypeManagerService.java
+++ b/Ghidra/Features/Base/src/test/java/ghidra/app/services/TestDoubleDataTypeManagerService.java
@@ -94,6 +94,11 @@ public class TestDoubleDataTypeManagerService implements DataTypeManagerService
 		throw new UnsupportedOperationException();
 	}
 
+	@Override
+	public void edit(DataType dt, int offset) {
+		throw new UnsupportedOperationException();
+	}
+
 	@Override
 	public void closeArchive(DataTypeManager dtm) {
 		throw new UnsupportedOperationException();
diff --git a/Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/component/CDisplayPanel.java b/Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/component/CDisplayPanel.java
index dd4a231bb..19f35ed0d 100644
--- a/Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/component/CDisplayPanel.java
+++ b/Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/component/CDisplayPanel.java
@@ -24,6 +24,7 @@ import ghidra.app.decompiler.DecompileOptions;
 import ghidra.app.plugin.core.decompile.DecompilerClipboardProvider;
 import ghidra.app.util.viewer.listingpanel.ProgramLocationListener;
 import ghidra.program.model.address.Address;
+import ghidra.program.model.data.DataType;
 import ghidra.program.model.listing.Function;
 import ghidra.program.model.listing.Program;
 import ghidra.program.util.ProgramLocation;
@@ -140,6 +141,11 @@ public class CDisplayPanel extends JPanel implements DecompilerCallbackHandler {
 		// stub
 	}
 
+	@Override
+	public void goToField(DataType dataType, int offset) {
+		// stub
+	}
+
 	@Override
 	public void locationChanged(ProgramLocation programLocation) {
 		if (locationListener == null) {
diff --git a/Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/component/DecompilerCallbackHandler.java b/Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/component/DecompilerCallbackHandler.java
index 91aa164dd..486448688 100644
--- a/Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/component/DecompilerCallbackHandler.java
+++ b/Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/component/DecompilerCallbackHandler.java
@@ -16,6 +16,7 @@
 package ghidra.app.decompiler.component;
 
 import ghidra.program.model.address.Address;
+import ghidra.program.model.data.DataType;
 import ghidra.program.model.listing.Function;
 import ghidra.program.util.ProgramLocation;
 import ghidra.program.util.ProgramSelection;
@@ -47,4 +48,6 @@ public interface DecompilerCallbackHandler {
 	void goToFunction(Function function, boolean newWindow);
 
 	void doWhenNotBusy(Callback c);
+
+	void goToField(DataType dataType, int offset);
 }
diff --git a/Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/component/DecompilerController.java b/Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/component/DecompilerController.java
index 58ebcb3eb..4830d402d 100644
--- a/Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/component/DecompilerController.java
+++ b/Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/component/DecompilerController.java
@@ -25,6 +25,7 @@ import docking.widgets.fieldpanel.support.ViewerPosition;
 import ghidra.app.decompiler.*;
 import ghidra.app.plugin.core.decompile.DecompilerClipboardProvider;
 import ghidra.program.model.address.Address;
+import ghidra.program.model.data.DataType;
 import ghidra.program.model.listing.*;
 import ghidra.program.model.pcode.HighFunction;
 import ghidra.program.util.ProgramLocation;
@@ -295,6 +296,10 @@ public class DecompilerController {
 		callbackHandler.goToScalar(value, newWindow);
 	}
 
+	public void goToField(DataType dataType, int offset) {
+		callbackHandler.goToField(dataType, offset);
+	}
+
 	public DecompileData getDecompileData() {
 		return currentDecompileData;
 	}
diff --git a/Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/component/DecompilerPanel.java b/Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/component/DecompilerPanel.java
index 86fc41927..be1ead939 100644
--- a/Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/component/DecompilerPanel.java
+++ b/Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/component/DecompilerPanel.java
@@ -45,6 +45,7 @@ import ghidra.app.plugin.core.decompile.DecompilerClipboardProvider;
 import ghidra.app.plugin.core.decompile.actions.FieldBasedSearchLocation;
 import ghidra.app.util.viewer.util.ScrollpaneAlignedHorizontalLayout;
 import ghidra.program.model.address.*;
+import ghidra.program.model.data.DataType;
 import ghidra.program.model.listing.Function;
 import ghidra.program.model.listing.Program;
 import ghidra.program.model.pcode.*;
@@ -733,6 +734,9 @@ public class DecompilerPanel extends JPanel implements FieldMouseListener, Field
 		else if (token instanceof ClangSyntaxToken) {
 			tryGoToSyntaxToken((ClangSyntaxToken) token);
 		}
+		else if (token instanceof ClangFieldToken) {
+			tryGoToFieldToken((ClangFieldToken) token);
+		}
 	}
 
 	private void tryGoToComment(FieldLocation location, MouseEvent event, ClangTextField textField,
@@ -864,6 +868,12 @@ public class DecompilerPanel extends JPanel implements FieldMouseListener, Field
 		}
 	}
 
+	private void tryGoToFieldToken(ClangFieldToken token) {
+		DataType dataType = token.getDataType();
+		int offset = token.getOffset();
+		controller.goToField(dataType, offset);
+	}
+
 	Program getProgram() {
 		return decompileData.getProgram();
 	}
diff --git a/Ghidra/Features/Decompiler/src/main/java/ghidra/app/plugin/core/decompile/DecompilerProvider.java b/Ghidra/Features/Decompiler/src/main/java/ghidra/app/plugin/core/decompile/DecompilerProvider.java
index 6a0571ca0..283422b0e 100644
--- a/Ghidra/Features/Decompiler/src/main/java/ghidra/app/plugin/core/decompile/DecompilerProvider.java
+++ b/Ghidra/Features/Decompiler/src/main/java/ghidra/app/plugin/core/decompile/DecompilerProvider.java
@@ -34,6 +34,7 @@ import ghidra.app.decompiler.*;
 import ghidra.app.decompiler.component.*;
 import ghidra.app.decompiler.component.margin.DecompilerMarginProvider;
 import ghidra.app.nav.*;
+import ghidra.app.plugin.core.datamgr.util.DataTypeUtils;
 import ghidra.app.plugin.core.decompile.actions.*;
 import ghidra.app.services.*;
 import ghidra.app.util.HelpTopics;
@@ -44,6 +45,8 @@ import ghidra.framework.plugintool.NavigatableComponentProviderAdapter;
 import ghidra.framework.plugintool.util.ServiceListener;
 import ghidra.program.database.SpecExtension;
 import ghidra.program.model.address.*;
+import ghidra.program.model.data.DataType;
+import ghidra.program.model.data.DataTypeManager;
 import ghidra.program.model.listing.Function;
 import ghidra.program.model.listing.Program;
 import ghidra.program.model.symbol.*;
@@ -652,6 +655,19 @@ public class DecompilerProvider extends NavigatableComponentProviderAdapter
 		}
 	}
 
+	@Override
+	public void goToField(DataType dataType, int offset) {
+		DataType baseDataType = DataTypeUtils.getBaseDataType(dataType);
+		DataTypeManager dataTypeManager = program.getDataTypeManager();
+		DataTypeManager baseDtDTM = baseDataType.getDataTypeManager();
+		if (baseDtDTM != dataTypeManager) {
+			baseDataType = baseDataType.clone(dataTypeManager);
+		}
+		final DataTypeManagerService service =
+			tool.getService(DataTypeManagerService.class);
+		service.edit(baseDataType, offset);
+	}
+
 	@Override
 	public void doWhenNotBusy(Callback c) {
 		followUpWork.offer(c);
-- 
2.38.1

