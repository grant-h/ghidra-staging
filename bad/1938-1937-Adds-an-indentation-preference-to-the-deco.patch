From ab00a61771a2e714331ca259f87eb9f6f9746155 Mon Sep 17 00:00:00 2001
From: Jack S <jack53867@gchq.gov.uk>
Date: Wed, 3 Mar 2021 14:17:49 +0000
Subject: [PATCH] 1938: 1937 Adds an indentation preference to the decompiler
 output

This change also adds support for two indentation styles:

K&R style,

while (x == y) {
    something();
    somethingelse();
}

Allman style,

while (x == y)
{
    something();
    somethingelse();
}

The default style is K&R.
---
 .../Decompiler/src/decompile/cpp/options.cc   | 13 ++++
 .../Decompiler/src/decompile/cpp/options.hh   |  6 ++
 .../Decompiler/src/decompile/cpp/printc.cc    | 58 ++++++++++++++---
 .../Decompiler/src/decompile/cpp/printc.hh    |  8 +++
 .../src/decompile/cpp/printlanguage.hh        |  5 ++
 .../app/decompiler/DecompileOptions.java      | 44 +++++++++++++
 .../ghidra/program/model/pcode/ElementId.java | 63 ++++++++++---------
 7 files changed, 156 insertions(+), 41 deletions(-)

diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/options.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/options.cc
index 9061947c5..b85d0ea43 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/options.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/options.cc
@@ -112,6 +112,7 @@ OptionDatabase::OptionDatabase(Architecture *g)
   registerOption(new OptionCommentStyle());
   registerOption(new OptionCommentHeader());
   registerOption(new OptionCommentInstruction());
+  registerOption(new OptionIndentationStyle());
   registerOption(new OptionIntegerFormat());
   registerOption(new OptionCurrentAction());
   registerOption(new OptionAllowContextSet());
@@ -576,6 +577,18 @@ string OptionCommentInstruction::apply(Architecture *glb,const string &p1,const
   return "Instruction comment type "+p1+" turned "+prop;
 }
 
+/// \class OptionIndentationStyle
+/// \brief Set the style of indentation emitted by the decompiler
+///
+/// The first parameter is either "allman", or "kr", other styles could be
+/// supported in the future
+string OptionIndentationStyle::apply(Architecture *glb,const string &p1,const string &p2,const string &p3) const
+
+{
+	glb->print->setIndentationStyle(p1);
+	return "Indentation style set to "+p1;
+}
+
 /// \class OptionIntegerFormat
 /// \brief Set the formatting strategy used by the decompiler to emit integers
 ///
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/options.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/options.hh
index 474ee7071..75d79f4c8 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/options.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/options.hh
@@ -230,6 +230,12 @@ public:
  virtual string apply(Architecture *glb,const string &p1,const string &p2,const string &p3) const;
 };
 
+class OptionIndentationStyle : public ArchOption {
+public:
+  OptionIndentationStyle(void) { name = "indentationstyle"; }	///< Constructor
+  virtual string apply(Architecture *glb,const string &p1,const string &p2,const string &p3) const;
+};
+
 class OptionIntegerFormat : public ArchOption {
 public:
   OptionIntegerFormat(void) { name = "integerformat"; }	///< Constructor
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/printc.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/printc.cc
index f0d4c3f45..055668a37 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/printc.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/printc.cc
@@ -2037,7 +2037,7 @@ void PrintC::emitStructDefinition(const TypeStruct *ct)
   emit->print("typedef struct",EmitMarkup::keyword_color);
   emit->spaces(1);
   int4 id = emit->startIndent();
-  emit->print(OPEN_CURLY);
+  emitFormattedStartBrace(id);
   emit->tagLine();
   iter = ct->beginField();
   while(iter!=ct->endField()) {
@@ -2076,7 +2076,7 @@ void PrintC::emitEnumDefinition(const TypeEnum *ct)
   emit->print("typedef enum",EmitMarkup::keyword_color);
   emit->spaces(1);
   int4 id = emit->startIndent();
-  emit->print(OPEN_CURLY);
+  emitFormattedStartBrace(id);
   emit->tagLine();
   iter = ct->beginEnum();
   while(iter!=ct->endEnum()) {
@@ -2275,6 +2275,17 @@ void PrintC::setCommentStyle(const string &nm)
     throw LowlevelError("Unknown comment style. Use \"c\" or \"cplusplus\"");
 }
 
+void PrintC::setIndentationStyle(const string &nm)
+
+{
+  if (nm=="kr")
+    option_indentationStyle = indentation_style_kr;
+  else if (nm=="allman")
+    option_indentationStyle = indentation_style_allman;
+  else
+    throw LowlevelError("Unknown indentation style. Use \"kr\" or \"allman\"");
+}
+
 /// \brief Emit the definition of the given data-type
 ///
 /// This is currently limited to a 'struct' or 'enum' definitions. The
@@ -2609,6 +2620,8 @@ void PrintC::docFunction(const Funcdata *fd)
     emit->tagLine();
     emit->tagLine();
     int4 id = emit->startIndent();
+    // Intentionally not using a formatted start brace
+    // Currently supported indentation styles both place a function's opening brace on a new line
     emit->print(OPEN_CURLY);
     emitLocalVarDecls(fd);
     if (isSet(flat))
@@ -2877,7 +2890,7 @@ void PrintC::emitBlockIf(const BlockIf *bl)
     setMod(no_branch);
     emit->spaces(1);
     int4 id = emit->startIndent();
-    emit->print(OPEN_CURLY);
+    emitFormattedStartBrace(id);
     int4 id1 = emit->beginBlock(bl->getBlock(1));
     bl->getBlock(1)->emit(this);
     emit->endBlock(id1);
@@ -2898,7 +2911,7 @@ void PrintC::emitBlockIf(const BlockIf *bl)
       }
       else {
 	int4 id2 = emit->startIndent();
-	emit->print(OPEN_CURLY);
+	emitFormattedStartBrace(id2);
 	int4 id3 = emit->beginBlock(elseBlock);
 	elseBlock->emit(this);
 	emit->endBlock(id3);
@@ -2959,7 +2972,7 @@ void PrintC::emitForLoop(const BlockWhileDo *bl)
   emit->closeParen(CLOSE_PAREN,id1);
   emit->spaces(1);
   indent = emit->startIndent();
-  emit->print(OPEN_CURLY);
+  emitFormattedStartBrace(indent);
   setMod(no_branch); // Dont print goto at bottom of clause
   int4 id2 = emit->beginBlock(bl->getBlock(1));
   bl->getBlock(1)->emit(this);
@@ -3000,7 +3013,7 @@ void PrintC::emitBlockWhileDo(const BlockWhileDo *bl)
     emit->closeParen(CLOSE_PAREN,id1);
     emit->spaces(1);
     indent = emit->startIndent();
-    emit->print(OPEN_CURLY);
+    emitFormattedStartBrace(indent);
     pushMod();
     setMod(no_branch);
     condBlock->emit(this);
@@ -3031,7 +3044,7 @@ void PrintC::emitBlockWhileDo(const BlockWhileDo *bl)
     emit->closeParen(CLOSE_PAREN,id1);
     emit->spaces(1);
     indent = emit->startIndent();
-    emit->print(OPEN_CURLY);
+    emitFormattedStartBrace(indent);
   }
   setMod(no_branch); // Dont print goto at bottom of clause
   int4 id2 = emit->beginBlock(bl->getBlock(1));
@@ -3056,7 +3069,7 @@ void PrintC::emitBlockDoWhile(const BlockDoWhile *bl)
   emit->print(KEYWORD_DO,EmitMarkup::keyword_color);
   emit->spaces(1);
   int4 id = emit->startIndent();
-  emit->print(OPEN_CURLY);
+  emitFormattedStartBrace(id);
   pushMod();
   int4 id2 = emit->beginBlock(bl->getBlock(0));
   setMod(no_branch);
@@ -3088,7 +3101,7 @@ void PrintC::emitBlockInfLoop(const BlockInfLoop *bl)
   emit->print(KEYWORD_DO,EmitMarkup::keyword_color);
   emit->spaces(1);
   int4 id = emit->startIndent();
-  emit->print(OPEN_CURLY);
+  emitFormattedStartBrace(id);
   int4 id1 = emit->beginBlock(bl->getBlock(0));
   bl->getBlock(0)->emit(this);
   emit->endBlock(id1);
@@ -3314,7 +3327,7 @@ void PrintC::emitBlockSwitch(const BlockSwitch *bl)
   bl->getSwitchBlock()->emit(this);
   popMod();
   emit->spaces(1);
-  emit->print(OPEN_CURLY);
+  emitFormattedStartBrace(0);
 
   for(int4 i=0;i<bl->getNumCaseBlocks();++i) {
     emitSwitchCase(i,bl);
@@ -3340,6 +3353,31 @@ void PrintC::emitBlockSwitch(const BlockSwitch *bl)
   popMod();
 }
 
+/// \brief Emits an opening brace according to the indentation style selected in options
+///
+/// \param indent is the current indent level
+void PrintC::emitFormattedStartBrace(int4 indent)
+
+{
+  switch(option_indentationStyle) {
+  case indentation_style_allman:
+    // Reduce one layer of indentation, emit new line, emit opening brace, update new indentation
+    if (indent) {
+      emit->stopIndent(indent);
+    }
+    emit->tagLine();
+    emit->print(OPEN_CURLY);
+    emit->startIndent();
+    break;
+  case indentation_style_kr:
+    // Emit opening brace, indentation is unaffected
+    emit->print(OPEN_CURLY);
+    break;
+  default:
+    throw LowlevelError("Unknown indentation style");
+  }
+}
+
 /// \brief Create a generic function name base on the entry point address
 ///
 /// \param addr is the entry point address of the function
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/printc.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/printc.hh
index 3b0645b09..929790a03 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/printc.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/printc.hh
@@ -62,6 +62,11 @@ struct PartialSymbolEntry {
 ///  - etc.
 class PrintC : public PrintLanguage {
 protected:
+  /// \brief Possible types of indentation style
+  enum indentation_style {
+    indentation_style_kr = 0,		/// K&R style indentation
+    indentation_style_allman = 1    /// Allman styles indentation
+  };
   static OpToken hidden;		///< Hidden functional (that may force parentheses)
   static OpToken scope;			///< The sub-scope/namespace operator
   static OpToken object_member;		///< The \e member operator
@@ -150,6 +155,7 @@ protected:
   bool option_nocasts;		///< Don't print a cast if \b true
   bool option_unplaced;		///< Set to \b true if we should display unplaced comments
   bool option_hide_exts;	///< Set to \b true if we should hide implied extension operations
+  indentation_style option_indentationStyle;  ///< Set to the prefered type of indentation style
   string nullToken;		///< Token to use for 'null'
   string sizeSuffix;		///< Characters to print to indicate a \e long integer token
   CommentSorter commsorter;	///< Container/organizer for comments in the current function
@@ -246,6 +252,7 @@ public:
   virtual void adjustTypeOperators(void);
   virtual void setCommentStyle(const string &nm);
   virtual void docTypeDefinitions(const TypeFactory *typegrp);
+  virtual void setIndentationStyle(const string &nm);
   virtual void docAllGlobals(void);
   virtual void docSingleGlobal(const Symbol *sym);
   virtual void docFunction(const Funcdata *fd);
@@ -261,6 +268,7 @@ public:
   virtual void emitBlockDoWhile(const BlockDoWhile *bl);
   virtual void emitBlockInfLoop(const BlockInfLoop *bl);
   virtual void emitBlockSwitch(const BlockSwitch *bl);
+  virtual void emitFormattedStartBrace(int4 indent);
 
   virtual void opCopy(const PcodeOp *op);
   virtual void opLoad(const PcodeOp *op);
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/printlanguage.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/printlanguage.hh
index 9439d1827..69e21786d 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/printlanguage.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/printlanguage.hh
@@ -454,6 +454,11 @@ public:
   /// \param nm is the configuration description
   virtual void setCommentStyle(const string &nm)=0;
 
+  /// \brief Set the indentation style used in the decompiler output
+  ///
+  /// \param nm is the configuration description
+  virtual void setIndentationStyle(const string &nm)=0;
+
   /// \brief Emit definitions of data-types
   ///
   /// \param typegrp is the container for the data-types that should be defined
diff --git a/Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/DecompileOptions.java b/Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/DecompileOptions.java
index 1ec659039..eb1bd97de 100644
--- a/Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/DecompileOptions.java
+++ b/Ghidra/Features/Decompiler/src/main/java/ghidra/app/decompiler/DecompileOptions.java
@@ -245,6 +245,34 @@ public class DecompileOptions {
 	private final static boolean COMMENTHEAD_OPTIONDEFAULT = true;	// Must match PrintLanguage::resetDefaultsInternal
 	private boolean commentHeadInclude;
 
+	private final static String INDENTATIONSTYLE_OPTIONSTRING = "Display.Indentation style";
+	private final static String INDENTATIONSTYLE_OPTIONDESCRIPTION = "The indentation style to be used";
+
+	public enum IndentationStyleEnum {
+
+		KR("kr", "K&R style"), Allman("allman", "Allman style");
+
+		private String label;
+		private String optionString;
+
+		private IndentationStyleEnum(String optString, String label) {
+			this.label = label;
+			this.optionString = optString;
+		}
+
+		public String getOptionString() {
+			return optionString;
+		}
+
+		@Override
+		public String toString() {
+			return label;
+		}
+	}
+
+	private final static IndentationStyleEnum INDENTATIONSTYLE_OPTIONDEFAULT = IndentationStyleEnum.KR;
+	private IndentationStyleEnum indentationStyle;
+
 	public enum NamespaceStrategy {
 		Minimal("minimal", "Minimally"), All("all", "Always"), Never("none", "Never");
 
@@ -399,6 +427,7 @@ public class DecompileOptions {
 		commentWARNInclude = COMMENTWARN_OPTIONDEFAULT;
 		commentHeadInclude = COMMENTHEAD_OPTIONDEFAULT;
 		namespaceStrategy = NAMESPACE_OPTIONDEFAULT;
+		indentationStyle = INDENTATIONSTYLE_OPTIONDEFAULT;
 		integerFormat = INTEGERFORMAT_OPTIONDEFAULT;
 		displayLineNumbers = LINE_NUMBER_DEF;
 		displayLanguage = ProgramCompilerSpec.DECOMPILER_OUTPUT_DEF;
@@ -451,6 +480,7 @@ public class DecompileOptions {
 		commentWARNInclude = opt.getBoolean(COMMENTWARN_OPTIONSTRING, COMMENTWARN_OPTIONDEFAULT);
 		commentHeadInclude = opt.getBoolean(COMMENTHEAD_OPTIONSTRING, COMMENTHEAD_OPTIONDEFAULT);
 		namespaceStrategy = opt.getEnum(NAMESPACE_OPTIONSTRING, NAMESPACE_OPTIONDEFAULT);
+		indentationStyle = opt.getEnum(INDENTATIONSTYLE_OPTIONSTRING, INDENTATIONSTYLE_OPTIONDEFAULT);
 		integerFormat = opt.getEnum(INTEGERFORMAT_OPTIONSTRING, INTEGERFORMAT_OPTIONDEFAULT);
 
 		displayLineNumbers = opt.getBoolean(LINE_NUMBER_MSG, LINE_NUMBER_DEF);
@@ -583,6 +613,9 @@ public class DecompileOptions {
 		opt.registerOption(NAMESPACE_OPTIONSTRING, NAMESPACE_OPTIONDEFAULT,
 			new HelpLocation(HelpTopics.DECOMPILER, "DisplayNamespaces"),
 			NAMESPACE_OPTIONDESCRIPTION);
+		opt.registerOption(INDENTATIONSTYLE_OPTIONSTRING, INDENTATIONSTYLE_OPTIONDEFAULT,
+			new HelpLocation(HelpTopics.DECOMPILER, "IndendationStyle"),
+			INDENTATIONSTYLE_OPTIONDESCRIPTION);
 		opt.registerOption(INTEGERFORMAT_OPTIONSTRING, INTEGERFORMAT_OPTIONDEFAULT,
 			new HelpLocation(HelpTopics.DECOMPILER, "DisplayIntegerFormat"),
 			INTEGERFORMAT_OPTIONDESCRIPTION);
@@ -766,6 +799,9 @@ public class DecompileOptions {
 			appendOption(encoder, ELEM_MAXINSTRUCTION, Integer.toString(maxIntructionsPer), "", "");
 		}
 		appendOption(encoder, ELEM_PROTOEVAL, protoEvalModel, "", "");
+		if (indentationStyle != INDENTATIONSTYLE_OPTIONDEFAULT) {
+			appendOption(encoder, ELEM_INDENTATIONSTYLE, indentationStyle.getOptionString(), "", "");
+		}
 		encoder.closeElement(ELEM_OPTIONSLIST);
 	}
 
@@ -1014,6 +1050,14 @@ public class DecompileOptions {
 		this.commentStyle = commentStyle;
 	}
 
+	public IndentationStyleEnum getIndentationStyle() {
+		return indentationStyle;
+	}
+
+	public void setIndentationStyle(IndentationStyleEnum indentationStyle) {
+		this.indentationStyle = indentationStyle;
+	}
+
 	public int getCacheSize() {
 		return cachedResultsSize;
 	}
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/ElementId.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/ElementId.java
index 82a38f6b2..977e9c460 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/ElementId.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/ElementId.java
@@ -308,59 +308,60 @@ public record ElementId(String name, int id) {
 	public static final ElementId ELEM_PARAM2 = new ElementId("param2", 203);
 	public static final ElementId ELEM_PARAM3 = new ElementId("param3", 204);
 	public static final ElementId ELEM_PROTOEVAL = new ElementId("protoeval", 205);
-	public static final ElementId ELEM_SETACTION = new ElementId("setaction", 206);
-	public static final ElementId ELEM_SETLANGUAGE = new ElementId("setlanguage", 207);
-	public static final ElementId ELEM_STRUCTALIGN = new ElementId("structalign", 208);
-	public static final ElementId ELEM_TOGGLERULE = new ElementId("togglerule", 209);
-	public static final ElementId ELEM_WARNING = new ElementId("warning", 210);
+	public static final ElementId ELEM_INDENTATIONSTYLE = new ElementId("indentationstyle", 206);
+	public static final ElementId ELEM_SETACTION = new ElementId("setaction", 207);
+	public static final ElementId ELEM_SETLANGUAGE = new ElementId("setlanguage", 208);
+	public static final ElementId ELEM_STRUCTALIGN = new ElementId("structalign", 209);
+	public static final ElementId ELEM_TOGGLERULE = new ElementId("togglerule", 210);
+	public static final ElementId ELEM_WARNING = new ElementId("warning", 211);
 
 	// jumptable
-	public static final ElementId ELEM_BASICOVERRIDE = new ElementId("basicoverride", 211);
-	public static final ElementId ELEM_DEST = new ElementId("dest", 212);
-	public static final ElementId ELEM_JUMPTABLE = new ElementId("jumptable", 213);
-	public static final ElementId ELEM_LOADTABLE = new ElementId("loadtable", 214);
-	public static final ElementId ELEM_NORMADDR = new ElementId("normaddr", 215);
-	public static final ElementId ELEM_NORMHASH = new ElementId("normhash", 216);
-	public static final ElementId ELEM_STARTVAL = new ElementId("startval", 217);
+	public static final ElementId ELEM_BASICOVERRIDE = new ElementId("basicoverride", 212);
+	public static final ElementId ELEM_DEST = new ElementId("dest", 213);
+	public static final ElementId ELEM_JUMPTABLE = new ElementId("jumptable", 214);
+	public static final ElementId ELEM_LOADTABLE = new ElementId("loadtable", 215);
+	public static final ElementId ELEM_NORMADDR = new ElementId("normaddr", 216);
+	public static final ElementId ELEM_NORMHASH = new ElementId("normhash", 217);
+	public static final ElementId ELEM_STARTVAL = new ElementId("startval", 218);
 
 	// override
-	public static final ElementId ELEM_DEADCODEDELAY = new ElementId("deadcodedelay", 218);
-	public static final ElementId ELEM_FLOW = new ElementId("flow", 219);
-	public static final ElementId ELEM_FORCEGOTO = new ElementId("forcegoto", 220);
+	public static final ElementId ELEM_DEADCODEDELAY = new ElementId("deadcodedelay", 219);
+	public static final ElementId ELEM_FLOW = new ElementId("flow", 220);
+	public static final ElementId ELEM_FORCEGOTO = new ElementId("forcegoto", 221);
 	public static final ElementId ELEM_INDIRECTOVERRIDE = new ElementId("indirectoverride", 221);
-	public static final ElementId ELEM_MULTISTAGEJUMP = new ElementId("multistagejump", 222);
-	public static final ElementId ELEM_OVERRIDE = new ElementId("override", 223);
-	public static final ElementId ELEM_PROTOOVERRIDE = new ElementId("protooverride", 224);
+	public static final ElementId ELEM_MULTISTAGEJUMP = new ElementId("multistagejump", 223);
+	public static final ElementId ELEM_OVERRIDE = new ElementId("override", 224);
+	public static final ElementId ELEM_PROTOOVERRIDE = new ElementId("protooverride", 225);
 
 	// prefersplit
-	public static final ElementId ELEM_PREFERSPLIT = new ElementId("prefersplit", 225);
+	public static final ElementId ELEM_PREFERSPLIT = new ElementId("prefersplit", 226);
 
 	// callgraph
-	public static final ElementId ELEM_CALLGRAPH = new ElementId("callgraph", 226);
-	public static final ElementId ELEM_NODE = new ElementId("node", 227);
+	public static final ElementId ELEM_CALLGRAPH = new ElementId("callgraph", 227);
+	public static final ElementId ELEM_NODE = new ElementId("node", 228);
 
 	// varmap
-	public static final ElementId ELEM_LOCALDB = new ElementId("localdb", 228);
+	public static final ElementId ELEM_LOCALDB = new ElementId("localdb", 229);
 
 	// ghidra_process
-	public static final ElementId ELEM_DOC = new ElementId("doc", 229);
+	public static final ElementId ELEM_DOC = new ElementId("doc", 230);
 
 	// loadimage_xml
-//	public static final ElementId ELEM_BINARYIMAGE = new ElementId("binaryimage", 230);
-//	public static final ElementId ELEM_BYTECHUNK = new ElementId("bytechunk", 231);
+//	public static final ElementId ELEM_BINARYIMAGE = new ElementId("binaryimage", 231);
+//	public static final ElementId ELEM_BYTECHUNK = new ElementId("bytechunk", 232);
 
 	// sleigh_arch
-//	public static final ElementId ELEM_COMPILER = new ElementId("compiler", 232);
-//	public static final ElementId ELEM_DESCRIPTION = new ElementId("description", 233);
-//	public static final ElementId ELEM_LANGUAGE = new ElementId("language", 234);
+//	public static final ElementId ELEM_COMPILER = new ElementId("compiler", 233);
+//	public static final ElementId ELEM_DESCRIPTION = new ElementId("description", 234);
+//	public static final ElementId ELEM_LANGUAGE = new ElementId("language", 235);
 //	public static final ElementId ELEM_LANGUAGE_DEFINITIONS =
-//		new ElementId("language_definitions", 235);
+//		new ElementId("language_definitions", 236);
 
 	// xml_arch
-//	public static final ElementId ELEM_XML_SAVEFILE = new ElementId("xml_savefile", 236);
+//	public static final ElementId ELEM_XML_SAVEFILE = new ElementId("xml_savefile", 237);
 
 	// raw_arch
-//	public static final ElementId ELEM_RAW_SAVEFILE = new ElementId("raw_savefile", 237);
+//	public static final ElementId ELEM_RAW_SAVEFILE = new ElementId("raw_savefile", 238);
 
 	// ghidra_arch
 	public static final int COMMAND_ISNAMEUSED = 239;
-- 
2.38.1

