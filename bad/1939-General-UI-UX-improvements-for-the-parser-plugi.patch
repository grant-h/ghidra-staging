diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/cparser/CParserPlugin.java b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/cparser/CParserPlugin.java
index 1130564c6e8..9464ffb9e12 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/cparser/CParserPlugin.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/cparser/CParserPlugin.java
@@ -277,7 +277,7 @@ public void doCParser() {
 	 */
 	protected void parse(String[] filenames, String options, String dataFilename) {
 		CParserTask parseTask = new CParserTask(this, filenames, options, dataFilename);
-		this.getTool().execute(parseTask, 500);
+		parseDialog.executeProgressTask(parseTask, 500);
 	}
 
 	/*
@@ -286,6 +286,7 @@ protected void parse(String[] filenames, String options, String dataFilename) {
 	protected void parse(String[] filenames, String options, DataTypeManager dtMgr,
 			TaskMonitor monitor) throws ghidra.app.util.cparser.C.ParseException,
 			ghidra.app.util.cparser.CPP.ParseException {
+		monitor.initialize(filenames.length + 1);
 		String[] args = parseOptions(options);
 
 		DataTypeManager openDTmanagers[] = null;
@@ -313,7 +314,8 @@ protected void parse(String[] filenames, String options, DataTypeManager dtMgr,
 					"</ul>" + "<p><b>The new archive will become dependent on these archives<br>" +
 					"for any datatypes already defined in them </b>(only unique <br>" +
 					"data types will be added to the new archive).",
-				"Continue?", OptionDialog.QUESTION_MESSAGE) != OptionDialog.OPTION_ONE) {
+				"Continue", OptionDialog.QUESTION_MESSAGE) != OptionDialog.OPTION_ONE) {
+				monitor.cancel();
 				return;
 			}
 		}
@@ -349,15 +351,18 @@ protected void parse(String[] filenames, String options, DataTypeManager dtMgr,
 					if (children == null) {
 						continue;
 					}
+					monitor.setMaximum(monitor.getMaximum() + children.length);
 					for (String element : children) {
 						File child = new File(file.getAbsolutePath() + "/" + element);
 						if (child.getName().endsWith(".h")) {
 							parseFile(child.getAbsolutePath(), monitor, cpp);
 						}
+						monitor.incrementProgress(1);
 					}
 				}
 				else {
 					parseFile(filename, monitor, cpp);
+					monitor.incrementProgress(1);
 				}
 			}
 		}
@@ -395,6 +400,7 @@ protected void parse(String[] filenames, String options, DataTypeManager dtMgr,
 					parseDialog.setDialogText("Successfully parsed header file(s).");
 				}
 			});
+			monitor.incrementProgress(1);
 		}
 
 	}
@@ -429,7 +435,7 @@ protected void parse(String[] filenames, String options) {
 		CParserTask parseTask =
 			new CParserTask(this, filenames, options, currentProgram.getDataTypeManager());
 
-		tool.execute(parseTask);
+		parseDialog.executeProgressTask(parseTask, 500);
 	}
 
 	ParseDialog getDialog() {
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/cparser/CParserTask.java b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/cparser/CParserTask.java
index f7fdc10f9be..1f4615be906 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/cparser/CParserTask.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/cparser/CParserTask.java
@@ -22,7 +22,6 @@
 import ghidra.program.model.data.DataTypeManager;
 import ghidra.program.model.data.FileDataTypeManager;
 import ghidra.util.Msg;
-import ghidra.util.exception.DuplicateFileException;
 import ghidra.util.task.Task;
 import ghidra.util.task.TaskMonitor;
 
@@ -39,7 +38,7 @@ class CParserTask extends Task {
 	private DataTypeManager dtMgr;
 
 	CParserTask(CParserPlugin plugin, String[] filenames, String options, String dataFileName) {
-		super("Parsing C Files", true, false, false);
+		super("Parsing C Files", true, true, false);
 
 		this.plugin = plugin;
 		this.filenames = filenames;
@@ -49,7 +48,7 @@ class CParserTask extends Task {
 
 	public CParserTask(CParserPlugin plugin, String[] filenames, String options,
 			DataTypeManager dataTypeManager) {
-		super("Parsing C Files", true, false, false);
+		super("Parsing C Files", true, true, false);
 
 		this.plugin = plugin;
 		this.filenames = filenames;
@@ -59,76 +58,53 @@ public CParserTask(CParserPlugin plugin, String[] filenames, String options,
 
 	@Override
 	public void run(TaskMonitor monitor) {
-		DataTypeManager fileDtMgr = null;
 		try {
-			if (dtMgr == null) {
+			if (dataFileName != null) {
 				File file = new File(dataFileName);
 				dtMgr = FileDataTypeManager.createFileArchive(file);
-				fileDtMgr = dtMgr;
 			}
 
 			plugin.parse(filenames, options, dtMgr, monitor);
+			if (monitor.isCancelled()) {
+				SwingUtilities.invokeLater(() -> {
+					Msg.showInfo(getClass(),
+						plugin.getDialog().getComponent(), "Cancelled", "Task was cancelled.");
+				});
+			}
+
 			if (dataFileName != null) {
 				if (dtMgr.getDataTypeCount(true) != 0) {
 					try {
 						((FileDataTypeManager) dtMgr).save();
-						dtMgr.close();
-						SwingUtilities.invokeLater(new Runnable() {
-							@Override
-							public void run() {
-								Msg.showInfo(
-									getClass(), plugin.getDialog().getComponent(),
-									"Created Archive File", "Successfully created archive file\n" +
-										((FileDataTypeManager) dtMgr).getFilename());
-							}
-
+						SwingUtilities.invokeLater(() -> {
+							Msg.showInfo(getClass(),
+								plugin.getDialog().getComponent(),
+								"Created Archive File", "Successfully created archive file\n" +
+									((FileDataTypeManager) dtMgr).getFilename());
 						});
 					}
-					catch (DuplicateFileException e) {
-						Msg.showError(this, plugin.getDialog().getComponent(), "Error During Save",
-							e.getMessage());
-					}
 					catch (Exception e) {
 						Msg.showError(this, plugin.getDialog().getComponent(), "Error During Save",
 							"Could not save to file " + dataFileName, e);
 					}
 					finally {
-						if (dtMgr instanceof FileDataTypeManager) {
-							dtMgr.close();
-						}
+						dtMgr.close();
 					}
 				}
-				else {
-					SwingUtilities.invokeLater(new Runnable() {
-						@Override
-						public void run() {
-							Msg.showInfo(getClass(),
-								plugin.getDialog().getComponent(), "Parse Errors", "File was not created due to parse errors.");
-						}
+				else if (!monitor.isCancelled()) {
+					SwingUtilities.invokeLater(() -> {
+						Msg.showInfo(getClass(),
+							plugin.getDialog().getComponent(), "Parse Errors", "No datatypes were found");
 					});
 				}
 			}
 		}
-		catch (ghidra.app.util.cparser.C.ParseException e) {
+		catch (ghidra.app.util.cparser.C.ParseException | ghidra.app.util.cparser.CPP.ParseException e) {
 			final String errMsg = e.getMessage();
 			System.err.println(errMsg);
-			SwingUtilities.invokeLater(new Runnable() {
-				@Override
-				public void run() {
-					Msg.showInfo(getClass(),
-						plugin.getDialog().getComponent(), "Parse Errors", errMsg);
-				}
-			});
-		}
-		catch (ghidra.app.util.cparser.CPP.ParseException e) {
-			final String errMsg = e.getMessage();
-			System.err.println(errMsg);
-			SwingUtilities.invokeLater(new Runnable() {
-				@Override
-				public void run() {
-					Msg.showInfo(getClass(),
-						plugin.getDialog().getComponent(), "Parse Errors", errMsg);
-				}
+			SwingUtilities.invokeLater(() -> {
+				Msg.showInfo(getClass(),
+					plugin.getDialog().getComponent(), "Parse Errors", errMsg);
 			});
 		}
 		catch (Exception e) {
@@ -136,8 +112,8 @@ public void run() {
 				"Parse header files failed", e);
 		}
 		finally {
-			if (fileDtMgr != null) {
-				fileDtMgr.close();
+			if (dataFileName != null && dtMgr != null) {
+				dtMgr.close();
 			}
 		}
 	}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/cparser/ParseDialog.java b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/cparser/ParseDialog.java
index 61a8977002b..424a074a462 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/cparser/ParseDialog.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/cparser/ParseDialog.java
@@ -43,6 +43,7 @@
 import ghidra.util.HelpLocation;
 import ghidra.util.Msg;
 import ghidra.util.filechooser.ExtensionFileFilter;
+import ghidra.util.task.Task;
 import resources.Icons;
 import resources.ResourceManager;
 
@@ -94,7 +95,7 @@ class ParseDialog extends DialogComponentProvider {
 	private boolean saveAsInProgress;
 
 	ParseDialog(CParserPlugin plugin) {
-		super("Parse C Source", false);
+		super("Parse C Source", false, true, true, true);
 
 		this.plugin = plugin;
 		itemList = new ArrayList<>();
@@ -685,6 +686,8 @@ void setDialogText(String text) {
 
 	@Override
 	public void close() {
+		if(pathPanel.getTable().isEditing())
+			pathPanel.getTable().getCellEditor().cancelCellEditing();
 		cancelCurrentTask();
 		super.close();
 	}
@@ -693,6 +696,10 @@ public String getParseOptions() {
 		return parseOptionsField.getText();
 	}
 
+	public void executeProgressTask(Task task, int delay) {
+		super.executeProgressTask(task, delay);
+	}
+
 	private class ComboBoxItem {
 		private ResourceFile file;
 		private boolean isUserDefined;
diff --git a/Ghidra/Framework/Docking/src/main/java/docking/widgets/pathmanager/PathnameTablePanel.java b/Ghidra/Framework/Docking/src/main/java/docking/widgets/pathmanager/PathnameTablePanel.java
index 97ad8a24f59..e0f68779304 100644
--- a/Ghidra/Framework/Docking/src/main/java/docking/widgets/pathmanager/PathnameTablePanel.java
+++ b/Ghidra/Framework/Docking/src/main/java/docking/widgets/pathmanager/PathnameTablePanel.java
@@ -226,6 +226,7 @@ private void create() {
 		pathnameTable.setSelectionForeground(Color.BLACK);
 		pathnameTable.setTableHeader(null);
 		pathnameTable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
+		pathnameTable.putClientProperty("terminateEditOnFocusLost", true);
 		JScrollPane scrollPane = new JScrollPane(pathnameTable);
 		scrollPane.getViewport().setBackground(pathnameTable.getBackground());
 
