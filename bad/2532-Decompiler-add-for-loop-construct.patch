diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/block.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/block.cc
index 9b6d8d87e57..1a4bf68fa17 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/block.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/block.cc
@@ -324,6 +324,33 @@ const FlowBlock *FlowBlock::getFrontLeaf(void) const
   return bl;
 }
 
+FlowBlock *FlowBlock::getBackBasicLeaf(void)
+
+{
+  FlowBlock *bl = this;
+
+  if (getType() == FlowBlock::t_basic) return bl; // already at leaf
+  if (getType() == FlowBlock::t_plain) return bl; // has no sub blocks
+
+  // bl must be a BlockGraph or one of its subclasses
+  while (bl->getType() != FlowBlock::t_copy) {
+    BlockGraph * bg = (BlockGraph*)bl;
+
+    if (bg->getSize() == 0) break;
+
+    FlowBlock * newbl = bl->subBlock(bg->getSize()-1);
+
+    // Only descend through list blocks (consider other structures irreducible)
+    if (newbl->getType() != FlowBlock::t_ls && newbl->getType() != FlowBlock::t_copy)
+      return (FlowBlock*)0;
+
+    bl = newbl;
+  }
+
+  return bl;
+}
+
+
 /// Keep descending tree hierarchy, taking the front block,
 /// until we get to the bottom copy block
 /// \return the first leaf FlowBlock to execute
@@ -648,6 +675,8 @@ string FlowBlock::typeToName(FlowBlock::block_type bt)
     return "properif";
   case t_whiledo:
     return "whiledo";
+  case t_for:
+    return "for";
   case t_dowhile:
     return "dowhile";
   case t_switch:
@@ -1142,6 +1171,33 @@ void BlockGraph::forceFalseEdge(const FlowBlock *out0)
     throw LowlevelError("Unable to preserve condition");
 }
 
+/// The indicated block is pulled out of the component list and edges are removed.
+/// \param bl is the indicated block
+/// \param newparent is the new parent graph
+void BlockGraph::reparent(FlowBlock *bl,BlockGraph *newparent)
+
+{
+#ifdef BLOCKCONSISTENT_DEBUG
+  if ((bl->parent != this)||(bl->parent == newparent))
+    throw LowlevelError("Bad reparent");
+#endif
+
+  vector<FlowBlock *>::iterator iter;
+  while(bl->sizeIn()>0)		// Rip the block out of the graph
+    removeEdge(bl->getIn(0),bl);
+  while(bl->sizeOut()>0)
+    removeEdge(bl,bl->getOut(0));
+
+  for(iter=list.begin();iter!=list.end();++iter)
+    if (*iter == bl) {
+      list.erase(iter);
+      break;
+    }
+
+  newparent->addBlock(bl);
+}
+
+
 /// \param i is the position of the first FlowBlock to swap
 /// \param j is the position of the second
 void BlockGraph::swapBlocks(int4 i,int4 j)
@@ -1762,6 +1818,28 @@ BlockWhileDo *BlockGraph::newBlockWhileDo(FlowBlock *cond,FlowBlock *cl)
   return ret;
 }
 
+/// Add the new BlockFor to \b this, collapsing the condition, clause, and an optional initializer list
+/// \param cond is the condition FlowBlock
+/// \param cl is the clause FlowBlock
+/// \param init is the optional initializer FlowBlock
+/// \return the new BlockFor
+BlockFor *BlockGraph::newBlockFor(FlowBlock *cond,FlowBlock *cl,FlowBlock *init)
+
+{
+  vector<FlowBlock *> nodes;
+  BlockFor *ret = new BlockFor();
+  nodes.push_back(cond);
+  nodes.push_back(cl);
+
+  if (init)
+    nodes.push_back(init);
+
+  identifyInternal(ret,nodes);
+  addBlock(ret);
+  ret->forceOutputNum(1);
+  return ret;
+}
+
 /// Add the new BlockDoWhile to \b this, collapsing the condition clause FlowBlock into it.
 /// \param condcl is the condition clause FlowBlock
 /// \return the new BlockDoWhile
@@ -2953,6 +3031,43 @@ FlowBlock *BlockWhileDo::nextFlowAfter(const FlowBlock *bl) const
   return nextbl;
 }
 
+void BlockFor::markLabelBumpUp(bool bump)
+
+{
+  BlockGraph::markLabelBumpUp(true); // whiledos steal lower blocks labels
+  if (!bump)
+    clearFlag(f_label_bumpup);
+}
+
+void BlockFor::scopeBreak(int4 curexit,int4 curloopexit)
+
+{
+  // A new loop scope (current loop exit becomes curexit)
+  getBlock(0)->scopeBreak(-1,curexit); // Top block has multiple exits
+  getBlock(1)->scopeBreak(getBlock(0)->getIndex(),curexit); // Exits into topblock
+}
+
+void BlockFor::printHeader(ostream &s) const
+
+{
+  s << "For block ";
+  if (hasOverflowSyntax())
+    s << "(overflow) ";
+  FlowBlock::printHeader(s);
+}
+
+FlowBlock *BlockFor::nextFlowAfter(const FlowBlock *bl) const
+
+{
+  if (getBlock(0) == bl)
+    return (FlowBlock *)0;	// Don't know what will execute next
+
+  FlowBlock *nextbl = getBlock(0); // Will execute first block of while
+  if (nextbl != (FlowBlock *)0)
+    nextbl = nextbl->getFrontLeaf();
+  return nextbl;
+}
+
 void BlockDoWhile::markLabelBumpUp(bool bump)
 
 {
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/block.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/block.hh
index 30f867a35ef..c7b92296600 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/block.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/block.hh
@@ -63,7 +63,7 @@ public:
   /// \brief The possible block types
   enum block_type {
     t_plain, t_basic, t_graph, t_copy, t_goto, t_multigoto, t_ls,
-    t_condition, t_if, t_whiledo, t_dowhile, t_switch, t_infloop
+    t_condition, t_if, t_whiledo, t_dowhile, t_switch, t_infloop, t_for
   };
   /// \brief Boolean properties of blocks
   ///
@@ -213,6 +213,7 @@ public:
   int4 getInRevIndex(int4 i) const { return intothis[i].reverse_index; }	///< Get the output index of the i-th input FlowBlock
   const FlowBlock *getFrontLeaf(void) const;				///< Get the first leaf FlowBlock
   FlowBlock *getFrontLeaf(void);					///< Get the first leaf FlowBlock
+  FlowBlock *getBackBasicLeaf(void);			///< Get the last basic or copy leaf FlowBlock
   int4 calcDepth(const FlowBlock *leaf) const;		///< Get the depth of the given component FlowBlock
   bool dominates(const FlowBlock *subBlock) const;	///< Does \b this block dominate the given block
   bool restrictedByConditional(const FlowBlock *cond) const;
@@ -306,6 +307,7 @@ public:
   void switchEdge(FlowBlock *in,FlowBlock *outbefore,FlowBlock *outafter);	///< Move an edge from one out FlowBlock to another
   void moveOutEdge(FlowBlock *blold,int4 slot,FlowBlock *blnew);	///< Move indicated \e out edge to a new FlowBlock
   void removeBlock(FlowBlock *bl);				///< Remove a FlowBlock from \b this BlockGraph
+  void reparent(FlowBlock *bl,BlockGraph *newparent);		///< Migrate an internal block to a new parent
   void removeFromFlow(FlowBlock *bl);				///< Remove given FlowBlock preserving flow in \b this
   void removeFromFlowSplit(FlowBlock *bl,bool flipflow);	///< Remove FlowBlock splitting flow between input and output edges
   void spliceBlock(FlowBlock *bl);		///< Splice given FlowBlock together with its output
@@ -325,6 +327,7 @@ public:
   BlockIf *newBlockIf(FlowBlock *cond,FlowBlock *tc);				///< Build a new BlockIf
   BlockIf *newBlockIfElse(FlowBlock *cond,FlowBlock *tc,FlowBlock *fc);		///< Build a new BlockIfElse
   BlockWhileDo *newBlockWhileDo(FlowBlock *cond,FlowBlock *cl);			///< Build a new BlockWhileDo
+  BlockFor *newBlockFor(FlowBlock *cond,FlowBlock *cl,FlowBlock *init);		///< Build a new BlockFor
   BlockDoWhile *newBlockDoWhile(FlowBlock *condcl);				///< Build a new BlockDoWhile
   BlockInfLoop *newBlockInfLoop(FlowBlock *body);				///< Build a new BlockInfLoop
   BlockSwitch *newBlockSwitch(const vector<FlowBlock *> &cs,bool hasExit);	///< Build a new BlockSwitch
@@ -400,6 +403,8 @@ public:
   list<PcodeOp *>::iterator endOp(void) { return op.end(); }		///< Return an iterator to the end of the PcodeOps
   list<PcodeOp *>::const_iterator beginOp(void) const { return op.begin(); }	///< Return an iterator to the beginning of the PcodeOps
   list<PcodeOp *>::const_iterator endOp(void) const { return op.end(); }	///< Return an iterator to the end of the PcodeOps
+  list<PcodeOp *>::reverse_iterator rbeginOp(void) { return op.rbegin(); }	///< Return a reverse iterator to the end of the PcodeOps
+  list<PcodeOp *>::reverse_iterator rendOp(void) { return op.rend(); }	///< Return a reverse iterator to the beginning of the PcodeOps
   bool emptyOp(void) const { return op.empty(); }		///< Return \b true if \b block contains no operations
   static bool noInterveningStatement(PcodeOp *first,int4 path,PcodeOp *last);
 };
@@ -592,6 +597,20 @@ public:
   virtual FlowBlock *nextFlowAfter(const FlowBlock *bl) const;
 };
 
+/// \brief A loop structure with an initializer list, condition block, and post-body block statement
+///
+class BlockFor : public BlockGraph {
+public:
+  bool hasOverflowSyntax(void) const { return ((getFlags() & f_whiledo_overflow)!=0); }	///< Does \b this require overflow syntax
+  void setOverflowSyntax(void) { setFlag(f_whiledo_overflow); }		///< Set that \b this requires overflow syntax
+  virtual block_type getType(void) const { return t_for; }
+  virtual void markLabelBumpUp(bool bump);
+  virtual void scopeBreak(int4 curexit,int4 curloopexit);
+  virtual void printHeader(ostream &s) const;
+  virtual void emit(PrintLanguage *lng) const { lng->emitBlockFor(this); }
+  virtual FlowBlock *nextFlowAfter(const FlowBlock *bl) const;
+};
+
 /// \brief A loop structure where the condition is checked at the bottom.
 ///
 /// This has exactly one component with two outgoing edges: one edge flows to itself,
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/blockaction.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/blockaction.cc
index 86489e4e945..40334f67fe1 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/blockaction.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/blockaction.cc
@@ -1528,6 +1528,142 @@ bool CollapseStructure::ruleBlockWhileDo(FlowBlock *bl)
   return false;
 }
 
+
+bool CollapseStructure::ruleBlockFor(FlowBlock *bl)
+
+{
+  FlowBlock *clauseblock;
+  int4 i;
+
+  if (bl->sizeOut() != 2) return false; // Must be binary condition
+  if (bl->isSwitchOut()) return false;
+  if (bl->getOut(0) == bl) return false; // No loops at this point
+  if (bl->getOut(1) == bl) return false;
+  if (bl->isInteriorGotoTarget()) return false;
+  if (bl->isGotoOut(0)) return false;
+  if (bl->isGotoOut(1)) return false;
+  if (bl->isComplex()) return false; // complex conditions don't work well for `for'
+
+  bool clauseokay = false;
+
+  for(i=0;i<2;++i) {
+    clauseblock = bl->getOut(i);
+    if (clauseblock->sizeIn() != 1) continue; // Nothing else must hit clause
+    if (clauseblock->sizeOut() != 1) continue; // Only one way out of clause
+    if (clauseblock->isSwitchOut()) continue;
+    if (clauseblock->getOut(0) != bl) continue; // Clause must loop back to bl
+
+    clauseokay = true;
+    break;
+  }
+
+  if (!clauseokay) return false;
+
+  // Find the last basic block of the for loop body to promote to post-loop statements
+  FlowBlock *blpost = clauseblock->getBackBasicLeaf();
+
+  // Find the last basic block that will execute right before bl, if any
+
+  FlowBlock *blin = NULL, *blinit = NULL;
+
+  for (i=0; i < bl->sizeIn(); i++) {
+    FlowBlock *blinCandidate = bl->getIn(i);
+
+    if (blinCandidate == clauseblock) continue;
+    if (blinCandidate->getOut(0) != bl) continue;
+
+    blin = blinCandidate;
+    blinit = blin->getBackBasicLeaf();
+    break;
+  }
+
+  // filter out unsuitable initializers
+  if (blinit) {
+    if (blinit->isInteriorGotoTarget()) blinit = NULL;
+  }
+
+  int4 blinitStatements = 0;
+  int4 blpostStatements = 0;
+  
+  if (blinit) {
+    BlockBasic * bb = (BlockBasic*)blinit->subBlock(0);
+    list<PcodeOp *>::reverse_iterator iter;
+
+    // skip last op as its control flow
+    for (iter=bb->rbeginOp();iter!=bb->rendOp();++iter) {
+      PcodeOp *inst = *iter;
+
+      // TODO: include calls that assign to varnode of interest
+      if (inst->isCallOrBranch()) break;
+      if (inst->notPrinted()) continue;
+
+      const Varnode *vn = inst->getOut();
+
+      // we are only interested in assignments
+      if (vn == 0) continue;
+      if ((vn!=(const Varnode *)0)&&(vn->isImplied())) continue;
+
+      blinitStatements++;
+    }
+  }
+
+  if (blpost) {
+    BlockBasic * bb = (BlockBasic*)blpost->subBlock(0);
+    list<PcodeOp *>::reverse_iterator iter;
+
+    // skip last op as its control flow
+    for (iter=++(bb->rbeginOp());iter!=bb->rendOp();++iter) {
+      PcodeOp *inst = *iter;
+
+      // TODO: include calls that assign to varnode of interest
+      if (inst->isCallOrBranch()) break;
+      if (inst->notPrinted()) continue;
+
+      const Varnode *vn = inst->getOut();
+
+      // we are only interested in assignments
+      if (vn == 0) continue;
+      if ((vn!=(const Varnode *)0)&&(vn->isImplied())) continue;
+
+      blpostStatements++;
+    }
+  }
+
+  if (!blinitStatements) {
+    // nothing would be printed, so don't include it
+    blinit = NULL;
+  }
+
+  if (!blpostStatements) {
+    // nothing would be printed, so don't include it
+    blpost = NULL;
+  }
+
+  if (!blinit && !blpost) return false;
+
+  // The found basic block is owned by another structured node (can only be a list)
+  // Safely steal it and reparent it to bl's parent
+  if (blinit && blinit->getParent() != bl->getParent()) {
+    BlockGraph *parent = (BlockGraph*)blinit->getParent();
+
+    parent->reparent(blinit, (BlockGraph*)bl->getParent());
+
+    // Rewire it into the graph as all edge info was cleared
+    graph.addEdge(blin, blinit);
+    graph.addEdge(blinit, bl);
+
+  }
+
+  if (i==0) {	// clause must be true out of bl
+    if (bl->negateCondition(true))
+      dataflow_changecount += 1;
+  }
+
+  graph.newBlockFor(bl, clauseblock, blinit);
+  return true;
+
+}
+
 /// Try to find a do/while structure, starting with the given FlowBlock.
 /// Any \e break and \e continue must have already been collapsed as some form of \e goto.
 /// \param bl is the given FlowBlock
@@ -1790,6 +1926,10 @@ int4 CollapseStructure::collapseInternal(FlowBlock *targetbl)
 	  change = true;
 	  continue;
 	}
+	if (ruleBlockFor(bl)) {
+	  change = true;
+	  continue;
+	}
 	if (ruleBlockWhileDo(bl)) {
 	  change = true;
 	  continue;
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/blockaction.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/blockaction.hh
index abb04b91bb6..cca77ddb407 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/blockaction.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/blockaction.hh
@@ -211,6 +211,7 @@ class CollapseStructure {
   bool ruleBlockIfElse(FlowBlock *bl);		///< Attempt to apply a 3 component form of BlockIf
   bool ruleBlockIfNoExit(FlowBlock *bl);	///< Attempt to apply BlockIf where the body does not exit
   bool ruleBlockWhileDo(FlowBlock *bl);		///< Attempt to apply the BlockWhileDo structure
+  bool ruleBlockFor(FlowBlock *bl);		///< TODO
   bool ruleBlockDoWhile(FlowBlock *bl);		///< Attempt to apply the BlockDoWhile structure
   bool ruleBlockInfLoop(FlowBlock *bl);		///< Attempt to apply the BlockInfLoop structure
   bool ruleBlockSwitch(FlowBlock *bl);		///< Attempt to apply the BlockSwitch structure
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/funcdata.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/funcdata.hh
index f062b474157..c71e278798f 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/funcdata.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/funcdata.hh
@@ -439,6 +439,7 @@ public:
   void opMarkStartBasic(PcodeOp *op) { op->setFlag(PcodeOp::startbasic); }	///< Mark PcodeOp as starting a basic block
   void opMarkStartInstruction(PcodeOp *op) { op->setFlag(PcodeOp::startmark); }	///< Mark PcodeOp as starting its instruction
   void opMarkNonPrinting(PcodeOp *op) { op->setFlag(PcodeOp::nonprinting); }	///< Mark PcodeOp as not being printed
+  void opClearNonPrinting(PcodeOp *op) { op->clearFlag(PcodeOp::nonprinting); }	///< Unmark PcodeOp as being non printingptr
   void opMarkSpecialPrint(PcodeOp *op) { op->setAdditionalFlag(PcodeOp::special_print); }	///< Mark PcodeOp as needing special printing
   void opMarkNoCollapse(PcodeOp *op) { op->setFlag(PcodeOp::nocollapse); }	///< Mark PcodeOp as not collapsible
   void opMarkCpoolTransformed(PcodeOp *op) { op->setAdditionalFlag(PcodeOp::is_cpool_transformed); }	///< Mark cpool record was visited
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/printc.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/printc.cc
index 430c64e324e..7d6884c6528 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/printc.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/printc.cc
@@ -2693,6 +2693,149 @@ void PrintC::emitBlockWhileDo(const BlockWhileDo *bl)
   popMod();
 }
 
+void PrintC::emitBlockFor(const BlockFor *bl)
+
+{
+  const PcodeOp *op;
+  int4 indent;
+
+  list<PcodeOp *> printList;
+
+  if (bl->getSize() >= 3) {
+    FlowBlock *blinit = bl->getBlock(2);
+    BlockBasic *bb = (BlockBasic*)blinit->subBlock(0);
+    list<PcodeOp *>::reverse_iterator iter;
+    Funcdata * data = bb->getFuncdata();
+
+    for (iter=bb->rbeginOp();iter!=bb->rendOp();++iter) {
+      PcodeOp *inst = *iter;
+
+      // TODO: include calls that assign to varnode of interest
+      if (inst->isCallOrBranch()) break;
+      if (inst->notPrinted()) continue;
+
+      const Varnode *vn = inst->getOut();
+
+      // we are only interested in assignments
+      if (vn == 0) continue;
+      if ((vn!=(const Varnode *)0)&&(vn->isImplied())) continue;
+
+      printList.push_back(inst);
+      data->opMarkNonPrinting(inst);
+    }
+
+    // emit the initializers not included in the for loop
+    bl->getBlock(2)->emit(this);
+  }
+
+  pushMod();
+  // for block NEVER prints final branch
+  unsetMod(no_branch|only_branch);
+  emitAnyLabelStatement(bl);
+  emit->tagLine();
+  op = bl->getBlock(0)->lastOp();
+
+  emit->tagOp("for",EmitXml::keyword_color,op);
+  emit->spaces(1);
+  int4 id1 = emit->openParen('(');
+
+  if (bl->getSize() >= 3) {
+    FlowBlock *blinit = bl->getBlock(2);
+    BlockBasic *bb = (BlockBasic*)blinit->subBlock(0);
+    list<PcodeOp *>::reverse_iterator iter;
+    Funcdata * data = bb->getFuncdata();
+    bool separator = false;
+
+    pushMod();
+    setMod(comma_separate);
+    // iterate in reverse order to maintain execution order
+    for (iter=printList.rbegin();iter!=printList.rend(); iter++) {
+      if (separator) {
+        emit->print(",");
+        emit->spaces(1);
+      }
+
+      data->opClearNonPrinting(*iter);
+      emitExpression(*iter);
+      separator = true;
+    }
+    popMod();
+
+    printList.clear();
+  }
+
+  emit->print(";");
+  emit->spaces(1);
+
+  pushMod();
+  setMod(comma_separate);
+  bl->getBlock(0)->emit(this);
+  popMod();
+  emit->print(";");
+  emit->spaces(1);
+
+  FlowBlock *lastBl = bl->getBlock(1);
+
+  // hoist last basic block within flowblock
+  while (lastBl->getType() != FlowBlock::t_copy) {
+    BlockGraph * bg = (BlockGraph*)lastBl;
+    lastBl = lastBl->subBlock(bg->getSize()-1);
+  }
+
+  BlockBasic * bb = (BlockBasic*)lastBl->subBlock(0);
+
+  list<PcodeOp *>::reverse_iterator iter;
+  Funcdata * data = bb->getFuncdata();
+
+  for(iter=++bb->rbeginOp();iter!=bb->rendOp();++iter) {
+    PcodeOp *inst = *iter;
+    const Varnode *vn = inst->getOut();
+
+    if (inst->isCallOrBranch()) break;
+    if (inst->notPrinted()) continue;
+    if ((vn!=(const Varnode *)0)&&(vn->isImplied()))
+      continue;
+    if (vn == 0) continue;
+
+    printList.push_back(inst);
+    data->opMarkNonPrinting(inst);
+  }
+
+  bool separator = false;
+
+  pushMod();
+  setMod(comma_separate);
+  // iterate in reverse order to maintain execution order
+  for (iter=printList.rbegin();iter!=printList.rend(); iter++) {
+    if (separator) {
+      emit->print(",");
+      emit->spaces(1);
+    }
+
+    //data->opClearNonPrinting(*iter);
+    emitExpression(*iter);
+    separator = true;
+  }
+  popMod();
+
+  emit->closeParen(')',id1);
+  emit->spaces(1);
+  indent = emit->startIndent();
+
+  emit->print("{");
+  setMod(no_branch); // Dont print goto at bottom of clause
+  int4 id2 = emit->beginBlock(bl->getBlock(1));
+  bl->getBlock(1)->emit(this);
+  emit->endBlock(id2);
+  emit->stopIndent(indent);
+  emit->tagLine();
+  emit->print("}");
+  popMod();
+
+  for (iter=printList.rbegin();iter!=printList.rend();iter++)
+    data->opClearNonPrinting(*iter);
+}
+
 void PrintC::emitBlockDoWhile(const BlockDoWhile *bl)
 
 {
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/printc.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/printc.hh
index 54162016f54..3a0dc4a9c87 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/printc.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/printc.hh
@@ -220,6 +220,7 @@ public:
   virtual void emitBlockCondition(const BlockCondition *bl);
   virtual void emitBlockIf(const BlockIf *bl);
   virtual void emitBlockWhileDo(const BlockWhileDo *bl);
+  virtual void emitBlockFor(const BlockFor *bl);
   virtual void emitBlockDoWhile(const BlockDoWhile *bl);
   virtual void emitBlockInfLoop(const BlockInfLoop *bl);
   virtual void emitBlockSwitch(const BlockSwitch *bl);
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/printlanguage.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/printlanguage.hh
index e06c7c4abdb..bdaf3cb99d1 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/printlanguage.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/printlanguage.hh
@@ -63,6 +63,7 @@ class BlockCopy;
 class BlockGoto;
 class BlockIf;
 class BlockCondition;
+class BlockFor;
 class BlockWhileDo;
 class BlockDoWhile;
 class BlockInfLoop;
@@ -465,6 +466,7 @@ public:
   virtual void emitBlockCondition(const BlockCondition *bl)=0;		///< Emit a conditional statement
   virtual void emitBlockIf(const BlockIf *bl)=0;			///< Emit an if/else style construct
   virtual void emitBlockWhileDo(const BlockWhileDo *bl)=0;		///< Emit a loop structure, check at top
+  virtual void emitBlockFor(const BlockFor *bl)=0;			///< TODO
   virtual void emitBlockDoWhile(const BlockDoWhile *bl)=0;		///< Emit a loop structure, check at bottom
   virtual void emitBlockInfLoop(const BlockInfLoop *bl)=0;		///< Emit an infinite loop structure
   virtual void emitBlockSwitch(const BlockSwitch *bl)=0;		///< Emit a switch structure
