diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/ConsistencyChecker.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/ConsistencyChecker.java
index 98a3bf1c3ff..a19101db41b 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/ConsistencyChecker.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/ConsistencyChecker.java
@@ -690,7 +690,7 @@ boolean checkSectionTruncations(Constructor ct,ConstructTpl cttpl,boolean isbige
 	}
 
 	boolean checkSubtable(SubtableSymbol sym) {
-		int tablesize = 0;
+		int tablesize = -1;
 		int numconstruct = sym.getNumConstructors();
 		Constructor ct;
 		boolean testresult = true;
@@ -722,9 +722,20 @@ boolean checkSubtable(SubtableSymbol sym) {
 				}
 				seennonemptyexport = true;
 				int exsize = recoverSize(exportres.getSize(), ct);
-				if (tablesize == 0) {
+
+				if (!((exportres.getSize().getReal() == tablesize) &&
+						(exportres.getSize().getReal() == exsize)) &&
+						(tablesize != -1) &&
+						exportres.getSize().getType() == const_type.real) {
+					compiler.reportError(ct.location, String.format(
+						"Table '%s' has inconsistent export size; Constructor at %s is first conflict",
+						sym.getName(), ct.location));
+					testresult = false;
+				}
+				if (tablesize == -1) {
 					tablesize = exsize;
 				}
+
 				if ((exsize != 0) && (exsize != tablesize)) {
 					compiler.reportError(ct.location, String.format(
 						"Table '%s' has inconsistent export size; Constructor at %s is first conflict",
@@ -743,9 +754,9 @@ boolean checkSubtable(SubtableSymbol sym) {
 			}
 		}
 		if (seennonemptyexport) {
-			if (tablesize == 0) {
+			if (tablesize == 0 || tablesize == -1) {
 				compiler.reportWarning(sym.location,
-					"Table '" + sym.getName() + "' exports size 0");
+					"Table '" + sym.getName() + "' exports size " + tablesize);
 
 			}
 			sizemap.put(sym, tablesize);	// Remember recovered size
