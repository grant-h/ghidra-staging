diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Category.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Category.java
index d84b4bdccf4..becd32d7f3d 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Category.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Category.java
@@ -152,19 +152,19 @@ public DataType toDataType() throws DuplicateNameException, IOException {
 
 		Structure struct = new StructureDataType(buffer.toString(), 0);
 
-		struct.add(new PointerDataType(STRING), _state.pointerSize, "name", null);
+		struct.add(new PointerDataType(STRING, _state.pointerSize), _state.pointerSize, "name", null);
 
 		if (cls == null) {
-			struct.add(new PointerDataType(VOID), _state.pointerSize, "cls", null);
+			struct.add(new PointerDataType(VOID, _state.pointerSize), _state.pointerSize, "cls", null);
 		}
 		else {
-			struct.add(new PointerDataType(cls.toDataType()), _state.pointerSize, "cls", null);
+			struct.add(new PointerDataType(cls.toDataType(), _state.pointerSize), _state.pointerSize, "cls", null);
 		}
 
-		struct.add(new PointerDataType(ObjectiveC2_MethodList.toGenericDataType()),         _state.pointerSize, "instanceMethods", null);
-		struct.add(new PointerDataType(ObjectiveC2_MethodList.toGenericDataType()),         _state.pointerSize, "classMethods", null);
-		struct.add(new PointerDataType(ObjectiveC2_ProtocolList.toGenericDataType(_state)), _state.pointerSize, "protocols", null);
-		struct.add(new PointerDataType(ObjectiveC2_PropertyList.toGenericDataType()),       _state.pointerSize, "instanceProperties", null);
+		struct.add(new PointerDataType(ObjectiveC2_MethodList.toGenericDataType(), _state.pointerSize), _state.pointerSize, "instanceMethods", null);
+		struct.add(new PointerDataType(ObjectiveC2_MethodList.toGenericDataType(), _state.pointerSize), _state.pointerSize, "classMethods", null);
+		struct.add(new PointerDataType(ObjectiveC2_ProtocolList.toGenericDataType(_state), _state.pointerSize), _state.pointerSize, "protocols", null);
+		struct.add(new PointerDataType(ObjectiveC2_PropertyList.toGenericDataType(), _state.pointerSize), _state.pointerSize, "instanceProperties", null);
 
 		struct.setCategoryPath(ObjectiveC2_Constants.CATEGORY_PATH);
 		return struct;
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Class.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Class.java
index 97950e629dc..151deaa2125 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Class.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Class.java
@@ -178,17 +178,17 @@ private void readISA(BinaryReader reader) throws IOException {
 	public DataType toDataType() throws DuplicateNameException, IOException {
 		Structure struct = new StructureDataType(NAME, 0);
 
-		struct.add(new PointerDataType(struct), _state.pointerSize, "isa", null);
-		struct.add(new PointerDataType(struct), _state.pointerSize, "superclass", null);
+		struct.add(new PointerDataType(struct, _state.pointerSize), _state.pointerSize, "isa", null);
+		struct.add(new PointerDataType(struct, _state.pointerSize), _state.pointerSize, "superclass", null);
 		struct.add(cache.toDataType(), "cache", null);
 		struct.add(vtable.toDataType(), "vtable", null);
 
 		if (data == null) {
 			ObjectiveC2_ClassRW fakeData = new ObjectiveC2_ClassRW();
-			struct.add(new PointerDataType(fakeData.toDataType()), _state.pointerSize, "data", null);
+			struct.add(new PointerDataType(fakeData.toDataType(), _state.pointerSize), _state.pointerSize, "data", null);
 		}
 		else {
-			struct.add(new PointerDataType(data.toDataType()), _state.pointerSize, "data", null);
+			struct.add(new PointerDataType(data.toDataType(), _state.pointerSize), _state.pointerSize, "data", null);
 		}
 
 		struct.setCategoryPath(ObjectiveC2_Constants.CATEGORY_PATH);
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_ClassRW.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_ClassRW.java
index 2c2c4d48fb6..0c4e6521500 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_ClassRW.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_ClassRW.java
@@ -176,10 +176,10 @@ public DataType toDataType() throws DuplicateNameException, IOException {
 			struct.add(QWORD, "instanceSize", null);
 		}
 
-		struct.add(new PointerDataType(ASCII),                                                _state.pointerSize, "name", null);
-		struct.add(new PointerDataType(ObjectiveC2_MethodList.toGenericDataType()),           _state.pointerSize, "baseMethods", null);
-		struct.add(new PointerDataType(ObjectiveC2_ProtocolList.toGenericDataType(_state)),   _state.pointerSize, "baseProtocols", null);
-		struct.add(new PointerDataType(ObjectiveC2_InstanceVariableList.toGenericDataType()), _state.pointerSize, "ivars", null);
+		struct.add(new PointerDataType(ASCII, _state.pointerSize), _state.pointerSize, "name", null);
+		struct.add(new PointerDataType(ObjectiveC2_MethodList.toGenericDataType(), _state.pointerSize), _state.pointerSize, "baseMethods", null);
+		struct.add(new PointerDataType(ObjectiveC2_ProtocolList.toGenericDataType(_state), _state.pointerSize), _state.pointerSize, "baseProtocols", null);
+		struct.add(new PointerDataType(ObjectiveC2_InstanceVariableList.toGenericDataType(), _state.pointerSize), _state.pointerSize, "ivars", null);
 
 		if (_state.is32bit) {
 			struct.add(DWORD, "weakIvarLayout", null);
@@ -188,7 +188,7 @@ public DataType toDataType() throws DuplicateNameException, IOException {
 			struct.add(QWORD, "weakIvarLayout", null);
 		}
 
-		struct.add(new PointerDataType(ObjectiveC2_PropertyList.toGenericDataType()), _state.pointerSize, "baseProperties", null);
+		struct.add(new PointerDataType(ObjectiveC2_PropertyList.toGenericDataType(), _state.pointerSize), _state.pointerSize, "baseProperties", null);
 
 		struct.setCategoryPath(ObjectiveC2_Constants.CATEGORY_PATH);
 		return struct;
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_InstanceVariable.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_InstanceVariable.java
index e64d819817e..bd7cfc8b6e2 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_InstanceVariable.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_InstanceVariable.java
@@ -83,14 +83,14 @@ public int getSize() {
 	public DataType toDataType() throws DuplicateNameException, IOException {
 		Structure struct = new StructureDataType("ivar_t", 0);
 		if (_state.is32bit) {
-			struct.add(new PointerDataType(DWORD), _state.pointerSize, "offset", null);
-			struct.add(new PointerDataType(STRING), _state.pointerSize, "name", null);
-			struct.add(new PointerDataType(STRING), _state.pointerSize, "type", null);
+			struct.add(new PointerDataType(DWORD, _state.pointerSize), _state.pointerSize, "offset", null);
+			struct.add(new PointerDataType(STRING, _state.pointerSize), _state.pointerSize, "name", null);
+			struct.add(new PointerDataType(STRING, _state.pointerSize), _state.pointerSize, "type", null);
 		}
 		else {
-			struct.add(new PointerDataType(QWORD), _state.pointerSize, "offset", null);
-			struct.add(new PointerDataType(STRING), _state.pointerSize, "name", null);
-			struct.add(new PointerDataType(STRING), _state.pointerSize, "type", null);
+			struct.add(new PointerDataType(QWORD, _state.pointerSize), _state.pointerSize, "offset", null);
+			struct.add(new PointerDataType(STRING, _state.pointerSize), _state.pointerSize, "name", null);
+			struct.add(new PointerDataType(STRING, _state.pointerSize), _state.pointerSize, "type", null);
 		}
 		struct.add(DWORD, "alignment", null);
 		struct.add(DWORD, "size", null);
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_MessageReference.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_MessageReference.java
index 2c6e16a3d60..7d9f614040b 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_MessageReference.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_MessageReference.java
@@ -63,8 +63,8 @@ public String getSelector() {
 
 	public DataType toDataType() throws DuplicateNameException, IOException {
 		Structure struct = new StructureDataType(NAME, 0);
-		struct.add(new PointerDataType(VOID),  _state.pointerSize, "imp", null);
-		struct.add(new PointerDataType(ASCII), _state.pointerSize, "sel", null);
+		struct.add(new PointerDataType(VOID, _state.pointerSize), _state.pointerSize, "imp", null);
+		struct.add(new PointerDataType(ASCII, _state.pointerSize), _state.pointerSize, "sel", null);
 		return struct;
 	}
 }
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Method.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Method.java
index d0fef75c0ea..66aac3e350c 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Method.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Method.java
@@ -55,9 +55,9 @@ public long getImplementation() {
 
 	public DataType toDataType() throws DuplicateNameException, IOException {
 		Structure struct = new StructureDataType("method_t", 0);
-		struct.add(new PointerDataType(STRING), _state.pointerSize, "name",  null);
-		struct.add(new PointerDataType(STRING), _state.pointerSize, "types", null);
-		struct.add(new PointerDataType(VOID),   _state.pointerSize, "imp",   null);
+		struct.add(new PointerDataType(STRING, _state.pointerSize), _state.pointerSize, "name",  null);
+		struct.add(new PointerDataType(STRING, _state.pointerSize), _state.pointerSize, "types", null);
+		struct.add(new PointerDataType(VOID, _state.pointerSize), _state.pointerSize, "imp",   null);
 		struct.setCategoryPath(ObjectiveC2_Constants.CATEGORY_PATH);
 		return struct;
 	}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Property.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Property.java
index 5fd786d3343..e03d1d269d8 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Property.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Property.java
@@ -52,8 +52,8 @@ public String getAttributes() {
 	public DataType toDataType() throws DuplicateNameException, IOException {
 		Structure struct = new StructureDataType("objc_property", 0);
 
-		struct.add(new PointerDataType(ASCII), _state.pointerSize, "name", null);
-		struct.add(new PointerDataType(ASCII), _state.pointerSize, "name", null);
+		struct.add(new PointerDataType(ASCII, _state.pointerSize), _state.pointerSize, "name", null);
+		struct.add(new PointerDataType(ASCII, _state.pointerSize), _state.pointerSize, "name", null);
 
 		struct.setCategoryPath(ObjectiveC2_Constants.CATEGORY_PATH);
 		return struct;
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Protocol.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Protocol.java
index bd23e9edbf7..8048a7e4eb7 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Protocol.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_Protocol.java
@@ -191,18 +191,18 @@ public DataType toDataType() throws DuplicateNameException, IOException {
 			struct.add(QWORD, "isa", null);
 		}
 
-		struct.add(new PointerDataType(STRING), _state.pointerSize, "name", null);
-		struct.add(new PointerDataType(ObjectiveC2_ProtocolList.toGenericDataType(_state)),
+		struct.add(new PointerDataType(STRING, _state.pointerSize), _state.pointerSize, "name", null);
+		struct.add(new PointerDataType(ObjectiveC2_ProtocolList.toGenericDataType(_state), _state.pointerSize),
 			_state.pointerSize, "protocols", null);
-		struct.add(new PointerDataType(ObjectiveC2_MethodList.toGenericDataType()),
+		struct.add(new PointerDataType(ObjectiveC2_MethodList.toGenericDataType(), _state.pointerSize),
 			_state.pointerSize, "instanceMethods", null);
-		struct.add(new PointerDataType(ObjectiveC2_MethodList.toGenericDataType()),
+		struct.add(new PointerDataType(ObjectiveC2_MethodList.toGenericDataType(), _state.pointerSize),
 			_state.pointerSize, "classMethods", null);
-		struct.add(new PointerDataType(ObjectiveC2_MethodList.toGenericDataType()),
+		struct.add(new PointerDataType(ObjectiveC2_MethodList.toGenericDataType(), _state.pointerSize),
 			_state.pointerSize, "optionalInstanceMethods", null);
-		struct.add(new PointerDataType(ObjectiveC2_MethodList.toGenericDataType()),
+		struct.add(new PointerDataType(ObjectiveC2_MethodList.toGenericDataType(), _state.pointerSize),
 			_state.pointerSize, "optionalClassMethods", null);
-		struct.add(new PointerDataType(ObjectiveC2_PropertyList.toGenericDataType()),
+		struct.add(new PointerDataType(ObjectiveC2_PropertyList.toGenericDataType(), _state.pointerSize),
 			_state.pointerSize, "instanceProperties", null);
 
 		if (_state.is32bit) {
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_ProtocolList.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_ProtocolList.java
index c29dcef40a6..31329f50bd4 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_ProtocolList.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/objc2/ObjectiveC2_ProtocolList.java
@@ -89,7 +89,7 @@ public DataType toDataType() throws DuplicateNameException, IOException {
 
 		for (int i = 0 ; i < protocols.size() ; ++i) {
 			DataType dataType = protocols.get(i).toDataType();
-			struct.add(new PointerDataType(dataType), _state.pointerSize, "protocol"+i, null);
+			struct.add(new PointerDataType(dataType, _state.pointerSize), _state.pointerSize, "protocol"+i, null);
 		}
 
 		struct.setCategoryPath(ObjectiveC2_Constants.CATEGORY_PATH);
diff --git a/Ghidra/Features/Decompiler/src/main/java/ghidra/app/plugin/core/analysis/ObjectiveC2_DecompilerMessageAnalyzer.java b/Ghidra/Features/Decompiler/src/main/java/ghidra/app/plugin/core/analysis/ObjectiveC2_DecompilerMessageAnalyzer.java
index c04d6eef58c..066451c8f17 100644
--- a/Ghidra/Features/Decompiler/src/main/java/ghidra/app/plugin/core/analysis/ObjectiveC2_DecompilerMessageAnalyzer.java
+++ b/Ghidra/Features/Decompiler/src/main/java/ghidra/app/plugin/core/analysis/ObjectiveC2_DecompilerMessageAnalyzer.java
@@ -485,31 +485,35 @@ private String getClassNameFromQualifiedName(String qualifiedName) {
 
 	private String getNameFromData(Program program, Varnode input, boolean isClass,
 			boolean isMethod, Address address, Data nameData) {
-		long offset;
-		String name;
+//		String name;
 		if (!nameData.isDefined()) {
-			name = getLabelFromUndefinedData(program, address);
+			return getLabelFromUndefinedData(program, address);
 		}
 		else {
 			Object dataValue = nameData.getValue();
 			if (dataValue instanceof String) {
-				name = (String) dataValue;
+				String name = (String) dataValue;
 				if (!isClass && !isMethod) {
-					name = "\"" + name + "\"";
+					return "\"" + name + "\"";
+				}
+				else {
+					return name;
 				}
 			}
 			else if (dataValue instanceof Address) {
-				offset = ((Address) dataValue).getOffset();
-				name = getNameFromOffset(program, offset, input, isClass, isMethod);
+				long offset = ((Address) dataValue).getOffset();
+				return getNameFromOffset(program, offset, input, isClass, isMethod);
 			}
 			else {
-				name = getClassName(program, address);
+				String name = getClassName(program, address);
 				if (name == null) {
-					name = getValueAtAddress(program, address);
+					return getValueAtAddress(program, address);
+				}
+				else {
+					return name;
 				}
 			}
 		}
-		return name;
 	}
 
 	private String getDataName(Program program, Address address) {
