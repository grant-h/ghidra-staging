From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: mumbel <22204578+mumbel@users.noreply.github.com>
Date: Sat, 25 Jul 2020 15:32:23 -0500
Subject: [PATCH] 2138: Attempt to track inconsistent export sizes

---
 .../slgh_compile/ConsistencyChecker.java          | 15 +++++++++++++--
 1 file changed, 13 insertions(+), 2 deletions(-)

diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/ConsistencyChecker.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/ConsistencyChecker.java
index 1ebf014e9..33d864244 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/ConsistencyChecker.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/ConsistencyChecker.java
@@ -760,9 +760,20 @@ class ConsistencyChecker {
 				}
 				seennonemptyexport = true;
 				int exsize = recoverSize(exportres.getSize(), ct);
+
+				if (!((exportres.getSize().getReal() == tablesize) &&
+						(exportres.getSize().getReal() == exsize)) &&
+						(tablesize != -1) &&
+						exportres.getSize().getType() == const_type.real) {
+					compiler.reportError(ct.location, String.format(
+						"Table '%s' has inconsistent export size; Constructor at %s is first conflict",
+						sym.getName(), ct.location));
+					testresult = false;
+				}
 				if (tablesize == -1) {
 					tablesize = exsize;
 				}
+
 				if (exsize != tablesize) {
 					compiler.reportError(ct.location, String.format(
 						"Table '%s' has inconsistent export size; Constructor at %s is first conflict",
@@ -781,9 +792,9 @@ class ConsistencyChecker {
 			}
 		}
 		if (seennonemptyexport) {
-			if (tablesize == 0) {
+			if (tablesize == 0 || tablesize == -1) {
 				compiler.reportWarning(sym.location,
-					"Table '" + sym.getName() + "' exports size 0");
+					"Table '" + sym.getName() + "' exports size " + tablesize);
 
 			}
 			sizemap.put(sym, tablesize);	// Remember recovered size
-- 
2.39.1

