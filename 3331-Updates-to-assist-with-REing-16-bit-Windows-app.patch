From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Allan F Wall <Allan.F.Wall@users.noreply.github.com>
Date: Tue, 29 Sep 2020 10:20:23 +0100
Subject: [PATCH] 3331: Updates to assist with REing 16-bit Windows
 applications

"#2315: Support for mixed-size pointers, PASCAL calling convention, 'based' types +"
---
 Ghidra/Features/Base/certification.manifest   |    1 +
 .../Base/data/FunctionNames.properties        | 2308 +++++++++++++++++
 .../FixPascalCallingConvention.java           |  280 ++
 .../FixWin16LibraryFunctionNames.java         |  171 ++
 .../Base/ghidra_scripts/MakeUnionsForLPs.java |  587 +++++
 .../_GetAllFunctionsCallingConvention.java    |  106 +
 .../_SetFunctonNameFromLPSTR.java             |  249 ++
 .../ghidra_scripts/_SetSSRegForAllFuncs.java  |  112 +
 .../function/ApplyFunctionSignatureCmd.java   |    2 +-
 .../SegmentedCallingConventionAnalyzer.java   |   21 +-
 .../actions/CreateLPUnionStructAction.java    |  314 +++
 .../function/editor/FunctionEditorModel.java  |    2 +-
 .../app/util/cparser/C/Declaration.java       |   80 +-
 .../app/util/opinion/LibraryExport.java       |   85 +
 .../app/util/opinion/LibraryLookupTable.java  |   16 +-
 .../app/util/opinion/LibrarySymbolTable.java  |   66 +-
 .../ghidra/app/util/opinion/NeLoader.java     |    9 +-
 .../util/parser/FunctionSignatureParser.java  |   16 +-
 .../javacc/ghidra/app/util/cparser/C/C.jj     |  180 +-
 .../EditFunctionSignatureDialogTest.java      |   33 +
 .../program/database/data/AddressModelDB.java |  211 ++
 .../database/data/AddressModelDBAdapter.java  |  189 ++
 .../data/AddressModelDBAdapterNoTable.java    |   70 +
 .../data/AddressModelDBAdapterV0.java         |  111 +
 .../program/database/data/DataTypeDB.java     |   11 +
 .../program/database/function/FunctionDB.java |    6 +-
 .../program/model/data/AbstractDataType.java  |   17 +-
 .../program/model/data/AddressModel.java      |   71 +
 .../model/data/AddressModelDataType.java      |  120 +
 .../ghidra/program/model/data/DataType.java   |    4 +
 .../ghidra/program/model/data/DataTypeDB.java |    0
 .../model/data/GenericCallingConvention.java  |   13 +-
 .../model/data/OffsetCodePointerDataType.java |  100 +
 .../data/SegmentCodePointerDataType.java      |  101 +
 .../program/model/lang/PrototypeModel.java    |   29 +-
 .../model/listing/FunctionSignature.java      |    5 +
 .../model/TestDoubleFunctionSignature.java    |    5 +
 .../program/model/data/StubDataType.java      |   10 +
 .../x86/data/languages/x86-16.cspec           |  207 +-
 .../x86/data/languages/x86-16.cspec.afw       |  382 +++
 .../.antlr-generator-3.2.0-patch.jar          |  Bin 0 -> 139246 bytes
 debug.log4j.xml                               |   77 +
 42 files changed, 6289 insertions(+), 88 deletions(-)
 create mode 100644 Ghidra/Features/Base/data/FunctionNames.properties
 create mode 100644 Ghidra/Features/Base/ghidra_scripts/FixPascalCallingConvention.java
 create mode 100644 Ghidra/Features/Base/ghidra_scripts/FixWin16LibraryFunctionNames.java
 create mode 100644 Ghidra/Features/Base/ghidra_scripts/MakeUnionsForLPs.java
 create mode 100644 Ghidra/Features/Base/ghidra_scripts/_GetAllFunctionsCallingConvention.java
 create mode 100644 Ghidra/Features/Base/ghidra_scripts/_SetFunctonNameFromLPSTR.java
 create mode 100644 Ghidra/Features/Base/ghidra_scripts/_SetSSRegForAllFuncs.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/datamgr/actions/CreateLPUnionStructAction.java
 create mode 100644 Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/LibraryExport.java
 create mode 100644 Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/data/AddressModelDB.java
 create mode 100644 Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/data/AddressModelDBAdapter.java
 create mode 100644 Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/data/AddressModelDBAdapterNoTable.java
 create mode 100644 Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/data/AddressModelDBAdapterV0.java
 create mode 100644 Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/AddressModel.java
 create mode 100644 Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/AddressModelDataType.java
 create mode 100644 Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/DataTypeDB.java
 create mode 100644 Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/OffsetCodePointerDataType.java
 create mode 100644 Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/SegmentCodePointerDataType.java
 create mode 100644 Ghidra/Processors/x86/data/languages/x86-16.cspec.afw
 create mode 100644 GhidraBuild/EclipsePlugins/GhidraSleighEditor/ghidra.xtext.sleigh/.antlr-generator-3.2.0-patch.jar
 create mode 100644 debug.log4j.xml

diff --git a/Ghidra/Features/Base/certification.manifest b/Ghidra/Features/Base/certification.manifest
index 11f798028..08daec273 100644
--- a/Ghidra/Features/Base/certification.manifest
+++ b/Ghidra/Features/Base/certification.manifest
@@ -51,6 +51,7 @@ data/symbols/win16/toolhelp.exports||GHIDRA||||END|
 data/symbols/win16/user.exports||GHIDRA||||END|
 data/symbols/win16/ver.exports||GHIDRA||||END|
 data/symbols/win16/win87em.exports||GHIDRA||||END|
+data/FunctionNames.properties||GHIDRA||||END|
 data/symbols/win32/kernel32.hints||GHIDRA||||END|
 data/symbols/win32/mfc100.exports||GHIDRA||||END|
 data/symbols/win32/mfc100u.exports||GHIDRA||||END|
diff --git a/Ghidra/Features/Base/data/FunctionNames.properties b/Ghidra/Features/Base/data/FunctionNames.properties
new file mode 100644
index 000000000..e94e6c933
--- /dev/null
+++ b/Ghidra/Features/Base/data/FunctionNames.properties
@@ -0,0 +1,2308 @@
+COMMDLG\:\:CHOOSEFONT=ChooseFont
+COMMDLG\:\:COMMDLGEXTENDEDERROR=CommDlgExtendedError
+COMMDLG\:\:GETSAVEFILENAME=GetSaveFileName
+COMMDLG\:\:CHOOSECOLOR=ChooseColor
+COMMDLG\:\:GETOPENFILENAME=GetOpenFileName
+COMMDLG\:\:REPLACETEXT=ReplaceText
+COMMDLG\:\:PRINTDLG=PrintDlg
+COMMDLG\:\:GETFILETITLE=GetFileTitle
+COMMDLG\:\:FINDTEXT=FindText
+GDI\:\:lineto=LineTo
+GDI\:\:moveto=MoveTo
+GDI\:\:ABORTDOC=AbortDoc
+GDI\:\:ADDFONTRESOURCE=AddFontResource
+GDI\:\:ANIMATEPALETTE=AnimatePalette
+GDI\:\:ARC=Arc
+GDI\:\:BITBLT=BitBlt
+GDI\:\:CHORD=Chord
+GDI\:\:CLOSEJOB=CloseJob
+GDI\:\:CLOSEMETAFILE=CloseMetaFile
+GDI\:\:COMBINERGN=CombineRgn
+GDI\:\:COPY=Copy
+GDI\:\:COPYMETAFILE=CopyMetaFile
+GDI\:\:CREATEBITMAP=CreateBitmap
+GDI\:\:CREATEBITMAPINDIRECT=CreateBitmapIndirect
+GDI\:\:CREATEBRUSHINDIRECT=CreateBrushIndirect
+GDI\:\:CREATECOMPATIBLEBITMAP=CreateCompatibleBitmap
+GDI\:\:CREATECOMPATIBLEDC=CreateCompatibleDC
+GDI\:\:CREATEDC=CreateDC
+GDI\:\:CREATEDIBITMAP=CreateDIBitmap
+GDI\:\:CREATEDIBPATTERNBRUSH=CreateDIBPatternBrush
+GDI\:\:CREATEDISCARDABLEBITMAP=CreateDiscardableBitmap
+GDI\:\:CREATEELLIPTICRGN=CreateEllipticRgn
+GDI\:\:CREATEELLIPTICRGNINDIRECT=CreateEllipticRgnIndirect
+GDI\:\:CREATEFONT=CreateFont
+GDI\:\:CREATEFONTINDIRECT=CreateFontIndirect
+GDI\:\:CREATEHATCHBRUSH=CreateHatchBrush
+GDI\:\:CREATEIC=CreateIC
+GDI\:\:CREATEMETAFILE=CreateMetaFile
+GDI\:\:CREATEPALETTE=CreatePalette
+GDI\:\:CREATEPATTERNBRUSH=CreatePatternBrush
+GDI\:\:CREATEPEN=CreatePen
+GDI\:\:CREATEPENINDIRECT=CreatePenIndirect
+GDI\:\:CREATEPOLYGONRGN=CreatePolygonRgn
+GDI\:\:CREATEPOLYPOLYGONRGN=CreatePolyPolygonRgn
+GDI\:\:CREATEPQ=CreatePQ
+GDI\:\:CREATERECTRGN=CreateRectRgn
+GDI\:\:CREATERECTRGNINDIRECT=CreateRectRgnIndirect
+GDI\:\:CREATEROUNDRECTRGN=CreateRoundRectRgn
+GDI\:\:CREATESCALABLEFONTRESOURCE=CreateScalableFontResource
+GDI\:\:CREATESOLIDBRUSH=CreateSolidBrush
+GDI\:\:DELETEDC=DeleteDC
+GDI\:\:DELETEJOB=DeleteJob
+GDI\:\:DELETEMETAFILE=DeleteMetaFile
+GDI\:\:DELETEOBJECT=DeleteObject
+GDI\:\:DELETEPQ=DeletePQ
+GDI\:\:DELETESPOOLPAGE=DeleteSpoolPage
+GDI\:\:DPTOLP=DPtoLP
+GDI\:\:ELLIPSE=Ellipse
+GDI\:\:ENDDOC=EndDoc
+GDI\:\:ENDPAGE=EndPage
+GDI\:\:ENDSPOOLPAGE=EndSpoolPage
+GDI\:\:ENUMFONTFAMILIES=EnumFontFamilies
+GDI\:\:ENUMFONTS=EnumFonts
+GDI\:\:ENUMMETAFILE=EnumMetaFile
+GDI\:\:ENUMOBJECTS=EnumObjects
+GDI\:\:EQUALRGN=EqualRgn
+GDI\:\:ESCAPE=Escape
+GDI\:\:EXCLUDECLIPRECT=ExcludeClipRect
+GDI\:\:EXTFLOODFILL=ExtFloodFill
+GDI\:\:EXTRACTPQ=ExtractPQ
+GDI\:\:EXTTEXTOUT=ExtTextOut
+GDI\:\:FILLRGN=FillRgn
+GDI\:\:FLOODFILL=FloodFill
+GDI\:\:FRAMERGN=FrameRgn
+GDI\:\:GETASPECTRATIOFILTER=GetAspectRatioFilter
+GDI\:\:GETASPECTRATIOFILTEREX=GetAspectRatioFilterEx
+GDI\:\:GETBITMAPBITS=GetBitmapBits
+GDI\:\:GETBITMAPDIMENSION=GetBitmapDimension
+GDI\:\:GETBITMAPDIMENSIONEX=GetBitmapDimensionEx
+GDI\:\:GETBKCOLOR=GetBkColor
+GDI\:\:GETBKMODE=GetBkMode
+GDI\:\:GETBOUNDSRECT=GetBoundsRect
+GDI\:\:GETBRUSHORG=GetBrushOrg
+GDI\:\:GETBRUSHORGEX=GetBrushOrgEx
+GDI\:\:GETCHARABCWIDTHS=GetCharABCWidths
+GDI\:\:GETCHARWIDTH=GetCharWidth
+GDI\:\:GETCLIPBOX=GetClipBox
+GDI\:\:GETCLIPRGN=GetClipRgn
+GDI\:\:GETCURRENTPOSITION=GetCurrentPosition
+GDI\:\:GETCURRENTPOSITIONEX=GetCurrentPositionEx
+GDI\:\:GETDCORG=GetDCOrg
+GDI\:\:GETDEVICECAPS=GetDeviceCaps
+GDI\:\:GETDIBITS=GetDIBits
+GDI\:\:GETENVIRONMENT=GetEnvironment
+GDI\:\:GETFONTDATA=GetFontData
+GDI\:\:GETGLYPHOUTLINE=GetGlyphOutline
+GDI\:\:GETKERNINGPAIRS=GetKerningPairs
+GDI\:\:GETMAPMODE=GetMapMode
+GDI\:\:GETMETAFILE=GetMetaFile
+GDI\:\:GETMETAFILEBITS=GetMetaFileBits
+GDI\:\:GETNEARESTCOLOR=GetNearestColor
+GDI\:\:GETNEARESTPALETTEINDEX=GetNearestPaletteIndex
+GDI\:\:GETOBJECT=GetObject
+GDI\:\:GETOUTLINETEXTMETRICS=GetOutlineTextMetrics
+GDI\:\:GETPALETTEENTRIES=GetPaletteEntries
+GDI\:\:GETPIXEL=GetPixel
+GDI\:\:GETPOLYFILLMODE=GetPolyFillMode
+GDI\:\:GETRASTERIZERCAPS=GetRasterizerCaps
+GDI\:\:GETRGNBOX=GetRgnBox
+GDI\:\:GETROP2=GetROP2
+GDI\:\:GETSTOCKOBJECT=GetStockObject
+GDI\:\:GETSTRETCHBLTMODE=GetStretchBltMode
+GDI\:\:GETSYSTEMPALETTEENTRIES=GetSystemPaletteEntries
+GDI\:\:GETSYSTEMPALETTEUSE=GetSystemPaletteUse
+GDI\:\:GETTEXTALIGN=GetTextAlign
+GDI\:\:GETTEXTCHARACTEREXTRA=GetTextCharacterExtra
+GDI\:\:GETTEXTCOLOR=GetTextColor
+GDI\:\:GETTEXTEXTENT=GetTextExtent
+GDI\:\:GETTEXTEXTENTPOINT=GetTextExtentPoint
+GDI\:\:GETTEXTFACE=GetTextFace
+GDI\:\:GETTEXTMETRICS=GetTextMetrics
+GDI\:\:GETVIEWPORTEXT=GetViewportExt
+GDI\:\:GETVIEWPORTEXTEX=GetViewportExtEx
+GDI\:\:GETVIEWPORTORG=GetViewportOrg
+GDI\:\:GETVIEWPORTORGEX=GetViewportOrgEx
+GDI\:\:GETWINDOWEXT=GetWindowExt
+GDI\:\:GETWINDOWEXTEX=GetWindowExtEx
+GDI\:\:GETWINDOWORG=GetWindowOrg
+GDI\:\:GETWINDOWORGEX=GetWindowOrgEx
+GDI\:\:INSERTPQ=InsertPQ
+GDI\:\:INTERSECTCLIPRECT=IntersectClipRect
+GDI\:\:INVERTRGN=InvertRgn
+GDI\:\:ISGDIOBJECT=IsGDIObject
+GDI\:\:LINEDDA=LineDDA
+GDI\:\:LINETO=LineTo
+GDI\:\:LPTODP=LPtoDP
+GDI\:\:MINPQ=MinPQ
+GDI\:\:MOVETO=MoveTo
+GDI\:\:MOVETOEX=MoveToEx
+GDI\:\:MULDIV=MulDiv
+GDI\:\:OFFSETCLIPRGN=OffsetClipRgn
+GDI\:\:OFFSETRGN=OffsetRgn
+GDI\:\:OFFSETVIEWPORTORG=OffsetViewportOrg
+GDI\:\:OFFSETVIEWPORTORGEX=OffsetViewportOrgEx
+GDI\:\:OFFSETWINDOWORG=OffsetWindowOrg
+GDI\:\:OFFSETWINDOWORGEX=OffsetWindowOrgEx
+GDI\:\:OPENJOB=OpenJob
+GDI\:\:PAINTRGN=PaintRgn
+GDI\:\:PATBLT=PatBlt
+GDI\:\:PIE=Pie
+GDI\:\:PLAYMETAFILE=PlayMetaFile
+GDI\:\:PLAYMETAFILERECORD=PlayMetaFileRecord
+GDI\:\:POLYGON=Polygon
+GDI\:\:POLYLINE=Polyline
+GDI\:\:POLYPOLYGON=PolyPolygon
+GDI\:\:PTINREGION=PtInRegion
+GDI\:\:PTVISIBLE=PtVisible
+GDI\:\:QUERYABORT=QueryAbort
+GDI\:\:RECTANGLE=Rectangle
+GDI\:\:RECTINREGION=RectInRegion
+GDI\:\:RECTVISIBLE=RectVisible
+GDI\:\:REMOVEFONTRESOURCE=RemoveFontResource
+GDI\:\:RESETDC=ResetDC
+GDI\:\:RESIZEPALETTE=ResizePalette
+GDI\:\:RESTOREDC=RestoreDC
+GDI\:\:ROUNDRECT=RoundRect
+GDI\:\:SAVEDC=SaveDC
+GDI\:\:SCALEVIEWPORTEXT=ScaleViewportExt
+GDI\:\:SCALEVIEWPORTEXTEX=ScaleViewportExtEx
+GDI\:\:SCALEWINDOWEXT=ScaleWindowExt
+GDI\:\:SCALEWINDOWEXTEX=ScaleWindowExtEx
+GDI\:\:SELECTBITMAP=SelectBitmap
+GDI\:\:SELECTCLIPRGN=SelectClipRgn
+GDI\:\:SELECTOBJECT=SelectObject
+GDI\:\:SETABORTPROC=SetAbortProc
+GDI\:\:SETBITMAPBITS=SetBitmapBits
+GDI\:\:SETBITMAPDIMENSION=SetBitmapDimension
+GDI\:\:SETBITMAPDIMENSIONEX=SetBitmapDimensionEx
+GDI\:\:SETBKCOLOR=SetBkColor
+GDI\:\:SETBKMODE=SetBkMode
+GDI\:\:SETBOUNDSRECT=SetBoundsRect
+GDI\:\:SETBRUSHORG=SetBrushOrg
+GDI\:\:SETDIBITS=SetDIBits
+GDI\:\:SETDIBITSTODEVICE=SetDIBitsToDevice
+GDI\:\:SETENVIRONMENT=SetEnvironment
+GDI\:\:SETMAPMODE=SetMapMode
+GDI\:\:SETMAPPERFLAGS=SetMapperFlags
+GDI\:\:SETMETAFILEBITS=SetMetaFileBits
+GDI\:\:SETMETAFILEBITSBETTER=SetMetaFileBitsBetter
+GDI\:\:SETPALETTEENTRIES=SetPaletteEntries
+GDI\:\:SETPIXEL=SetPixel
+GDI\:\:SETPOLYFILLMODE=SetPolyFillMode
+GDI\:\:SETRECTRGN=SetRectRgn
+GDI\:\:SETROP2=SetROP2
+GDI\:\:SETSTRETCHBLTMODE=SetStretchBltMode
+GDI\:\:SETSYSTEMPALETTEUSE=SetSystemPaletteUse
+GDI\:\:SETTEXTALIGN=SetTextAlign
+GDI\:\:SETTEXTCHARACTEREXTRA=SetTextCharacterExtra
+GDI\:\:SETTEXTCOLOR=SetTextColor
+GDI\:\:SETTEXTJUSTIFICATION=SetTextJustification
+GDI\:\:SETVIEWPORTEXT=SetViewportExt
+GDI\:\:SETVIEWPORTEXTEX=SetViewportExtEx
+GDI\:\:SETVIEWPORTORG=SetViewportOrg
+GDI\:\:SETVIEWPORTORGEX=SetViewportOrgEx
+GDI\:\:SETWINDOWEXT=SetWindowExt
+GDI\:\:SETWINDOWEXTEX=SetWindowExtEx
+GDI\:\:SETWINDOWORG=SetWindowOrg
+GDI\:\:SETWINDOWORGEX=SetWindowOrgEx
+GDI\:\:SIZEPQ=SizePQ
+GDI\:\:SPOOLFILE=SpoolFile
+GDI\:\:STARTDOC=StartDoc
+GDI\:\:STARTPAGE=StartPage
+GDI\:\:STARTSPOOLPAGE=StartSpoolPage
+GDI\:\:STRETCHBLT=StretchBlt
+GDI\:\:STRETCHDIBITS=StretchDIBits
+GDI\:\:TEXTOUT=TextOut
+GDI\:\:UNREALIZEOBJECT=UnrealizeObject
+GDI\:\:UPDATECOLORS=UpdateColors
+GDI\:\:WEP=WEP
+GDI\:\:WRITEDIALOG=WriteDialog
+GDI\:\:WRITESPOOL=WriteSpool
+KERNEL\:\:FATALEXIT=FatalExit
+KERNEL\:\:GETVERSION=GetVersion
+KERNEL\:\:LOCALINIT=LocalInit
+KERNEL\:\:LOCALALLOC=LocalAlloc
+KERNEL\:\:LOCALREALLOC=LocalReAlloc
+KERNEL\:\:LOCALFREE=LocalFree
+KERNEL\:\:LOCALLOCK=LocalLock
+KERNEL\:\:LOCALUNLOCK=LocalUnlock
+KERNEL\:\:LOCALSIZE=LocalSize
+KERNEL\:\:LOCALHANDLE=LocalHandle
+KERNEL\:\:LOCALFLAGS=LocalFlags
+KERNEL\:\:LOCALCOMPACT=LocalCompact
+KERNEL\:\:GLOBALALLOC=GlobalAlloc
+KERNEL\:\:GLOBALREALLOC=GlobalReAlloc
+KERNEL\:\:GLOBALFREE=GlobalFree
+KERNEL\:\:GLOBALLOCK=GlobalLock
+KERNEL\:\:GLOBALUNLOCK=GlobalUnlock
+KERNEL\:\:GLOBALSIZE=GlobalSize
+KERNEL\:\:GLOBALHANDLE=GlobalHandle
+KERNEL\:\:GLOBALFLAGS=GlobalFlags
+KERNEL\:\:LOCKSEGMENT=LockSegment
+KERNEL\:\:UNLOCKSEGMENT=UnlockSegment
+KERNEL\:\:GLOBALCOMPACT=GlobalCompact
+KERNEL\:\:YIELD=Yield
+KERNEL\:\:GETCURRENTTASK=GetCurrentTask
+KERNEL\:\:GETCURRENTPDB=GetCurrentPDB
+KERNEL\:\:LOADMODULE=LoadModule
+KERNEL\:\:FREEMODULE=FreeModule
+KERNEL\:\:GETMODULEHANDLE=GetModuleHandle
+KERNEL\:\:GETMODULEUSAGE=GetModuleUsage
+KERNEL\:\:GETMODULEFILENAME=GetModuleFileName
+KERNEL\:\:GETPROCADDRESS=GetProcAddress
+KERNEL\:\:MAKEPROCINSTANCE=MakeProcInstance
+KERNEL\:\:FREEPROCINSTANCE=FreeProcInstance
+KERNEL\:\:GETINSTANCEDATA=GetInstanceData
+KERNEL\:\:CATCH=Catch
+KERNEL\:\:THROW=THROW
+KERNEL\:\:GETPROFILEINT=GetProfileInt
+KERNEL\:\:GETPROFILESTRING=GetProfileString
+KERNEL\:\:WRITEPROFILESTRING=WriteProfileString
+KERNEL\:\:FINDRESOURCE=FindResource
+KERNEL\:\:LOADRESOURCE=LoadResource
+KERNEL\:\:LOCKRESOURCE=LockResource
+KERNEL\:\:FREERESOURCE=FreeResource
+KERNEL\:\:ACCESSRESOURCE=AccessResource
+KERNEL\:\:SIZEOFRESOURCE=SizeofResource
+KERNEL\:\:ALLOCRESOURCE=AllocResource
+KERNEL\:\:SETRESOURCEHANDLER=SetResourceHandler
+KERNEL\:\:INITATOMTABLE=InitAtomTable
+KERNEL\:\:FINDATOM=FindAtom
+KERNEL\:\:ADDATOM=AddAtom
+KERNEL\:\:DELETEATOM=DeleteAtom
+KERNEL\:\:GETATOMNAME=GetAtomName
+KERNEL\:\:GETATOMHANDLE=GetAtomHandle
+KERNEL\:\:OPENFILE=OpenFile
+KERNEL\:\:_LCLOSE=_lclose
+KERNEL\:\:_LREAD=_lread
+KERNEL\:\:_LCREAT=_lcreat
+KERNEL\:\:_LLSEEK=_llseek
+KERNEL\:\:_LOPEN=_lopen
+KERNEL\:\:_LWRITE=_lwrite
+KERNEL\:\:LSTRCPY=lstrcpy
+KERNEL\:\:LSTRCAT=lstrcat
+KERNEL\:\:LSTRLEN=lstrlen
+KERNEL\:\:GETTEMPDRIVE=GetTempDrive
+KERNEL\:\:GETCODEHANDLE=GetCodeHandle
+KERNEL\:\:DEFINEHANDLETABLE=DefineHandleTable
+KERNEL\:\:LOADLIBRARY=LoadLibrary
+KERNEL\:\:FREELIBRARY=FreeLibrary
+KERNEL\:\:GETTEMPFILENAME=GetTempFileName
+KERNEL\:\:VALIDATECODESEGMENTS=ValidateCodeSegments
+KERNEL\:\:GETCODEINFO=GetCodeInfo
+KERNEL\:\:SETSWAPAREASIZE=SetSwapAreaSize
+KERNEL\:\:SETERRORMODE=SetErrorMode
+KERNEL\:\:SWITCHSTACKTO=SwitchStackTo
+KERNEL\:\:SWITCHSTACKBACK=SwitchStackBack
+KERNEL\:\:GLOBALWIRE=GlobalWire
+KERNEL\:\:GLOBALUNWIRE=GlobalUnWire
+KERNEL\:\:OUTPUTDEBUGSTRING=OutputDebugString
+KERNEL\:\:LOCALSHRINK=LocalShrink
+KERNEL\:\:GETPRIVATEPROFILEINT=GetPrivateProfileInt
+KERNEL\:\:GETPRIVATEPROFILESTRING=GetPrivateProfileString
+KERNEL\:\:WRITEPRIVATEPROFILESTRING=WritePrivateProfileString
+KERNEL\:\:GETDOSENVIRONMENT=GetDOSEnvironment
+KERNEL\:\:GETWINFLAGS=GetWinFlags
+KERNEL\:\:GETWINDOWSDIRECTORY=GetWindowsDirectory
+KERNEL\:\:GETSYSTEMDIRECTORY=GetSystemDirectory
+KERNEL\:\:GETDRIVETYPE=GetDriveType
+KERNEL\:\:FATALAPPEXIT=FatalAppExit
+KERNEL\:\:DIRECTEDYIELD=DirectedYield
+KERNEL\:\:GETNUMTASKS=GetNumTasks
+KERNEL\:\:GLOBALNOTIFY=GlobalNotify
+KERNEL\:\:LIMITEMSPAGES=LimitEmsPages
+KERNEL\:\:GLOBALLRUOLDEST=GlobalLRUOldest
+KERNEL\:\:GLOBALLRUNEWEST=GlobalLRUNewest
+KERNEL\:\:WINEXEC=WinExec
+KERNEL\:\:GETFREESPACE=GetFreeSpace
+KERNEL\:\:ALLOCDSTOCSALIAS=AllocDStoCSAlias
+KERNEL\:\:ALLOCSELECTOR=AllocSelector
+KERNEL\:\:FREESELECTOR=FreeSelector
+KERNEL\:\:PRESTOCHANGOSELECTOR=PrestoChangoSelector
+KERNEL\:\:GLOBALDOSALLOC=GlobalDosAlloc
+KERNEL\:\:GLOBALDOSFREE=GlobalDosFree
+KERNEL\:\:GETSELECTORBASE=GetSelectorBase
+KERNEL\:\:SETSELECTORBASE=SetSelectorBase
+KERNEL\:\:GETSELECTORLIMIT=GetSelectorLimit
+KERNEL\:\:SETSELECTORLIMIT=SetSelectorLimit
+KERNEL\:\:GLOBALPAGELOCK=GlobalPageLock
+KERNEL\:\:GLOBALPAGEUNLOCK=GlobalPageUnlock
+KERNEL\:\:GLOBALFIX=GlobalFix
+KERNEL\:\:GLOBALUNFIX=GlobalUnfix
+KERNEL\:\:SETHANDLECOUNT=SetHandleCount
+KERNEL\:\:VALIDATEFREESPACES=ValidateFreeSpaces
+KERNEL\:\:DEBUGBREAK=DebugBreak
+KERNEL\:\:SWAPRECORDING=SwapRecording
+KERNEL\:\:ISDBCSLEADBYTE=IsDBCSLeadByte
+KERNEL\:\:ISTASK=IsTask
+KERNEL\:\:LOGERROR=LOGERROR
+KERNEL\:\:LOGPARAMERROR=LogParamError
+KERNEL\:\:ISBADREADPTR=IsBadReadPtr
+KERNEL\:\:ISBADWRITEPTR=IsBadWritePtr
+KERNEL\:\:ISBADCODEPTR=IsBadCodePtr
+KERNEL\:\:ISBADSTRINGPTR=IsBadStringPtr
+KERNEL\:\:ISBADHUGEREADPTR=IsBadHugeReadPtr
+KERNEL\:\:ISBADHUGEWRITEPTR=IsBadHugeWritePtr
+KERNEL\:\:HMEMCPY=hmemcpy
+KERNEL\:\:_HREAD=_hread
+KERNEL\:\:_HWRITE=_hwrite
+KERNEL\:\:LSTRCPYN=lstrcpyn
+KERNEL\:\:GETWINDEBUGINFO=GetWinDebugInfo
+KERNEL\:\:SETWINDEBUGINFO=SetWinDebugInfo
+KEYBOARD\:\:ENABLE=Enable
+KEYBOARD\:\:DISABLE=disable
+KEYBOARD\:\:TOASCII=toascii
+KEYBOARD\:\:ANSITOOEM=AnsiToOem
+KEYBOARD\:\:OEMTOANSI=OemToAnsi
+KEYBOARD\:\:WEP=WEP
+KEYBOARD\:\:OEMKEYSCAN=OemKeyScan
+KEYBOARD\:\:VKKEYSCAN=VkKeyScan
+KEYBOARD\:\:GETKEYBOARDTYPE=GetKeyboardType
+KEYBOARD\:\:MAPVIRTUALKEY=MapVirtualKey
+KEYBOARD\:\:GETKBCODEPAGE=GetKBCodePage
+KEYBOARD\:\:GETKEYNAMETEXT=GetKeyNameText
+KEYBOARD\:\:ANSITOOEMBUFF=AnsiToOemBuff
+KEYBOARD\:\:OEMTOANSIBUFF=OemToAnsiBuff
+LZEXPAND\:\:LZREAD=LZRead
+LZEXPAND\:\:LZCOPY=LZCopy
+LZEXPAND\:\:LZCLOSE=LZClose
+LZEXPAND\:\:LZINIT=LZInit
+LZEXPAND\:\:GETEXPANDEDNAME=GetExpandedName
+LZEXPAND\:\:LZSEEK=LZSeek
+LZEXPAND\:\:LZOPENFILE=LZOpenFile
+LZEXPAND\:\:COPYLZFILE=CopyLZFile
+LZEXPAND\:\:LZDONE=LZDone
+LZEXPAND\:\:LZSTART=LZStart
+LZEXPAND\:\:WEP=WEP
+MMSYSTEM\:\:WEP=WEP
+MMSYSTEM\:\:SNDPLAYSOUND=sndPlaySound
+MMSYSTEM\:\:MMSYSTEMGETVERSION=mmsystemGetVersion
+MMSYSTEM\:\:DRIVERPROC=DriverProc
+MMSYSTEM\:\:OUTPUTDEBUGSTR=OutputDebugStr
+MMSYSTEM\:\:JOYGETNUMDEVS=joyGetNumDevs
+MMSYSTEM\:\:JOYGETDEVCAPS=joyGetDevCaps
+MMSYSTEM\:\:JOYGETPOS=joyGetPos
+MMSYSTEM\:\:JOYGETTHRESHOLD=joyGetThreshold
+MMSYSTEM\:\:JOYRELEASECAPTURE=joyReleaseCapture
+MMSYSTEM\:\:JOYSETCAPTURE=joySetCapture
+MMSYSTEM\:\:JOYSETTHRESHOLD=joySetThreshold
+MMSYSTEM\:\:JOYSETCALIBRATION=joySetCalibration
+MMSYSTEM\:\:MIDIOUTGETNUMDEVS=midiOutGetNumDevs
+MMSYSTEM\:\:MIDIOUTGETDEVCAPS=midiOutGetDevCaps
+MMSYSTEM\:\:MIDIOUTGETERRORTEXT=midiOutGetErrorText
+MMSYSTEM\:\:MIDIOUTOPEN=midiOutOpen
+MMSYSTEM\:\:MIDIOUTCLOSE=midiOutClose
+MMSYSTEM\:\:MIDIOUTPREPAREHEADER=midiOutPrepareHeader
+MMSYSTEM\:\:MIDIOUTUNPREPAREHEADER=midiOutUnprepareHeader
+MMSYSTEM\:\:MIDIOUTSHORTMSG=midiOutShortMsg
+MMSYSTEM\:\:MIDIOUTLONGMSG=midiOutLongMsg
+MMSYSTEM\:\:MIDIOUTRESET=midiOutReset
+MMSYSTEM\:\:MIDIOUTGETVOLUME=midiOutGetVolume
+MMSYSTEM\:\:MIDIOUTSETVOLUME=midiOutSetVolume
+MMSYSTEM\:\:MIDIOUTCACHEPATCHES=midiOutCachePatches
+MMSYSTEM\:\:MIDIOUTCACHEDRUMPATCHES=midiOutCacheDrumPatches
+MMSYSTEM\:\:MIDIOUTGETID=midiOutGetID
+MMSYSTEM\:\:MIDIOUTMESSAGE=midiOutMessage
+MMSYSTEM\:\:MIDIINGETNUMDEVS=midiInGetNumDevs
+MMSYSTEM\:\:MIDIINGETDEVCAPS=midiInGetDevCaps
+MMSYSTEM\:\:MIDIINGETERRORTEXT=midiInGetErrorText
+MMSYSTEM\:\:MIDIINOPEN=midiInOpen
+MMSYSTEM\:\:MIDIINCLOSE=midiInClose
+MMSYSTEM\:\:MIDIINPREPAREHEADER=midiInPrepareHeader
+MMSYSTEM\:\:MIDIINUNPREPAREHEADER=midiInUnprepareHeader
+MMSYSTEM\:\:MIDIINADDBUFFER=midiInAddBuffer
+MMSYSTEM\:\:MIDIINSTART=midiInStart
+MMSYSTEM\:\:MIDIINSTOP=midiInStop
+MMSYSTEM\:\:MIDIINRESET=midiInReset
+MMSYSTEM\:\:MIDIINGETID=midiInGetID
+MMSYSTEM\:\:MIDIINMESSAGE=midiInMessage
+MMSYSTEM\:\:AUXGETNUMDEVS=auxGetNumDevs
+MMSYSTEM\:\:AUXGETDEVCAPS=auxGetDevCaps
+MMSYSTEM\:\:AUXGETVOLUME=auxGetVolume
+MMSYSTEM\:\:AUXSETVOLUME=auxSetVolume
+MMSYSTEM\:\:AUXOUTMESSAGE=auxOutMessage
+MMSYSTEM\:\:WAVEOUTGETNUMDEVS=waveOutGetNumDevs
+MMSYSTEM\:\:WAVEOUTGETDEVCAPS=waveOutGetDevCaps
+MMSYSTEM\:\:WAVEOUTGETERRORTEXT=waveOutGetErrorText
+MMSYSTEM\:\:WAVEOUTOPEN=waveOutOpen
+MMSYSTEM\:\:WAVEOUTCLOSE=waveOutClose
+MMSYSTEM\:\:WAVEOUTPREPAREHEADER=waveOutPrepareHeader
+MMSYSTEM\:\:WAVEOUTUNPREPAREHEADER=waveOutUnprepareHeader
+MMSYSTEM\:\:WAVEOUTWRITE=waveOutWrite
+MMSYSTEM\:\:WAVEOUTPAUSE=waveOutPause
+MMSYSTEM\:\:WAVEOUTRESTART=waveOutRestart
+MMSYSTEM\:\:WAVEOUTRESET=waveOutReset
+MMSYSTEM\:\:WAVEOUTGETPOSITION=waveOutGetPosition
+MMSYSTEM\:\:WAVEOUTGETPITCH=waveOutGetPitch
+MMSYSTEM\:\:WAVEOUTSETPITCH=waveOutSetPitch
+MMSYSTEM\:\:WAVEOUTGETVOLUME=waveOutGetVolume
+MMSYSTEM\:\:WAVEOUTSETVOLUME=waveOutSetVolume
+MMSYSTEM\:\:WAVEOUTGETPLAYBACKRATE=waveOutGetPlaybackRate
+MMSYSTEM\:\:WAVEOUTSETPLAYBACKRATE=waveOutSetPlaybackRate
+MMSYSTEM\:\:WAVEOUTBREAKLOOP=waveOutBreakLoop
+MMSYSTEM\:\:WAVEOUTGETID=waveOutGetID
+MMSYSTEM\:\:WAVEOUTMESSAGE=waveOutMessage
+MMSYSTEM\:\:WAVEINGETNUMDEVS=waveInGetNumDevs
+MMSYSTEM\:\:WAVEINGETDEVCAPS=waveInGetDevCaps
+MMSYSTEM\:\:WAVEINGETERRORTEXT=waveInGetErrorText
+MMSYSTEM\:\:WAVEINOPEN=waveInOpen
+MMSYSTEM\:\:WAVEINCLOSE=waveInClose
+MMSYSTEM\:\:WAVEINPREPAREHEADER=waveInPrepareHeader
+MMSYSTEM\:\:WAVEINUNPREPAREHEADER=waveInUnprepareHeader
+MMSYSTEM\:\:WAVEINADDBUFFER=waveInAddBuffer
+MMSYSTEM\:\:WAVEINSTART=waveInStart
+MMSYSTEM\:\:WAVEINSTOP=waveInStop
+MMSYSTEM\:\:WAVEINRESET=waveInReset
+MMSYSTEM\:\:WAVEINGETPOSITION=waveInGetPosition
+MMSYSTEM\:\:WAVEINGETID=waveInGetID
+MMSYSTEM\:\:WAVEINMESSAGE=waveInMessage
+MMSYSTEM\:\:TIMEGETSYSTEMTIME=timeGetSystemTime
+MMSYSTEM\:\:TIMESETEVENT=timeSetEvent
+MMSYSTEM\:\:TIMEKILLEVENT=timeKillEvent
+MMSYSTEM\:\:TIMEGETDEVCAPS=timeGetDevCaps
+MMSYSTEM\:\:TIMEBEGINPERIOD=timeBeginPeriod
+MMSYSTEM\:\:TIMEENDPERIOD=timeEndPeriod
+MMSYSTEM\:\:TIMEGETTIME=timeGetTime
+MMSYSTEM\:\:MCISENDCOMMAND=mciSendCommand
+MMSYSTEM\:\:MCISENDSTRING=mciSendString
+MMSYSTEM\:\:MCIGETDEVICEID=mciGetDeviceID
+MMSYSTEM\:\:MCIGETERRORSTRING=mciGetErrorString
+MMSYSTEM\:\:MCIEXECUTE=mciExecute
+MMSYSTEM\:\:MCISETYIELDPROC=mciSetYieldProc
+MMSYSTEM\:\:MCIGETDEVICEIDFROMELEMENTID=mciGetDeviceIDFromElementID
+MMSYSTEM\:\:MCIGETYIELDPROC=mciGetYieldProc
+MMSYSTEM\:\:MCIGETCREATORTASK=mciGetCreatorTask
+MMSYSTEM\:\:DRVOPEN=DrvOpen
+MMSYSTEM\:\:DRVCLOSE=DrvClose
+MMSYSTEM\:\:DRVSENDMESSAGE=DrvSendMessage
+MMSYSTEM\:\:DRVGETMODULEHANDLE=DrvGetModuleHandle
+MMSYSTEM\:\:DRVDEFDRIVERPROC=DrvDefDriverProc
+MMSYSTEM\:\:MMIOOPEN=mmioOpen
+MMSYSTEM\:\:MMIOCLOSE=mmioClose
+MMSYSTEM\:\:MMIOREAD=mmioRead
+MMSYSTEM\:\:MMIOWRITE=mmioWrite
+MMSYSTEM\:\:MMIOSEEK=mmioSeek
+MMSYSTEM\:\:MMIOGETINFO=mmioGetInfo
+MMSYSTEM\:\:MMIOSETINFO=mmioSetInfo
+MMSYSTEM\:\:MMIOSETBUFFER=mmioSetBuffer
+MMSYSTEM\:\:MMIOFLUSH=mmioFlush
+MMSYSTEM\:\:MMIOADVANCE=mmioAdvance
+MMSYSTEM\:\:MMIOSTRINGTOFOURCC=mmioStringToFOURCC
+MMSYSTEM\:\:MMIOINSTALLIOPROC=mmioInstallIOProc
+MMSYSTEM\:\:MMIOSENDMESSAGE=mmioSendMessage
+MMSYSTEM\:\:MMIODESCEND=mmioDescend
+MMSYSTEM\:\:MMIOASCEND=mmioAscend
+MMSYSTEM\:\:MMIOCREATECHUNK=mmioCreateChunk
+MMSYSTEM\:\:MMIORENAME=mmioRename
+SHELL\:\:REGOPENKEY=RegOpenKey
+SHELL\:\:REGCREATEKEY=RegCreateKey
+SHELL\:\:REGCLOSEKEY=RegCloseKey
+SHELL\:\:REGDELETEKEY=RegDeleteKey
+SHELL\:\:REGSETVALUE=RegSetValue
+SHELL\:\:REGQUERYVALUE=RegQueryValue
+SHELL\:\:REGENUMKEY=RegEnumKey
+SHELL\:\:WEP=WEP
+SHELL\:\:DRAGACCEPTFILES=DragAcceptFiles
+SHELL\:\:DRAGQUERYFILE=DragQueryFile
+SHELL\:\:DRAGFINISH=DragFinish
+SHELL\:\:DRAGQUERYPOINT=DragQueryPoint
+SHELL\:\:SHELLEXECUTE=ShellExecute
+SHELL\:\:FINDEXECUTABLE=FindExecutable
+SHELL\:\:SHELLABOUT=ShellAbout
+SHELL\:\:EXTRACTICON=ExtractIcon
+SHELL\:\:EXTRACTASSOCIATEDICON=ExtractAssociatedIcon
+TOOLHELP\:\:WEP=WEP
+TOOLHELP\:\:GLOBALHANDLETOSEL=GlobalHandleToSel
+TOOLHELP\:\:GLOBALFIRST=GlobalFirst
+TOOLHELP\:\:GLOBALNEXT=GlobalNext
+TOOLHELP\:\:GLOBALINFO=GlobalInfo
+TOOLHELP\:\:GLOBALENTRYHANDLE=GlobalEntryHandle
+TOOLHELP\:\:GLOBALENTRYMODULE=GlobalEntryModule
+TOOLHELP\:\:LOCALINFO=LocalInfo
+TOOLHELP\:\:LOCALFIRST=LocalFirst
+TOOLHELP\:\:LOCALNEXT=LocalNext
+TOOLHELP\:\:MODULEFIRST=ModuleFirst
+TOOLHELP\:\:MODULENEXT=ModuleNext
+TOOLHELP\:\:MODULEFINDNAME=ModuleFindName
+TOOLHELP\:\:MODULEFINDHANDLE=ModuleFindHandle
+TOOLHELP\:\:TASKFIRST=TaskFirst
+TOOLHELP\:\:TASKNEXT=TaskNext
+TOOLHELP\:\:TASKFINDHANDLE=TaskFindHandle
+TOOLHELP\:\:STACKTRACEFIRST=StackTraceFirst
+TOOLHELP\:\:STACKTRACECSIPFIRST=StackTraceCSIPFirst
+TOOLHELP\:\:STACKTRACENEXT=StackTraceNext
+TOOLHELP\:\:CLASSFIRST=ClassFirst
+TOOLHELP\:\:CLASSNEXT=ClassNext
+TOOLHELP\:\:SYSTEMHEAPINFO=SystemHeapInfo
+TOOLHELP\:\:MEMMANINFO=MemManInfo
+TOOLHELP\:\:NOTIFYREGISTER=NotifyRegister
+TOOLHELP\:\:NOTIFYUNREGISTER=NotifyUnRegister
+TOOLHELP\:\:INTERRUPTREGISTER=InterruptRegister
+TOOLHELP\:\:INTERRUPTUNREGISTER=InterruptUnRegister
+TOOLHELP\:\:TERMINATEAPP=TerminateApp
+TOOLHELP\:\:MEMORYREAD=MemoryRead
+TOOLHELP\:\:MEMORYWRITE=MemoryWrite
+TOOLHELP\:\:TIMERCOUNT=TimerCount
+TOOLHELP\:\:TASKSETCSIP=TaskSetCSIP
+TOOLHELP\:\:TASKGETCSIP=TaskGetCSIP
+TOOLHELP\:\:TASKSWITCH=TaskSwitch
+USER\:\:MESSAGEBOX=MessageBox
+USER\:\:POSTQUITMESSAGE=PostQuitMessage
+USER\:\:EXITWINDOWS=ExitWindows
+USER\:\:WEP=WEP
+USER\:\:SETTIMER=SetTimer
+USER\:\:KILLTIMER=KillTimer
+USER\:\:GETCURRENTTIME=GetCurrentTime
+USER\:\:GETTIMERRESOLUTION=GetTimerResolution
+USER\:\:GETTICKCOUNT=GetTickCount
+USER\:\:CLIPCURSOR=ClipCursor
+USER\:\:GETCURSORPOS=GetCursorPos
+USER\:\:SETCAPTURE=SetCapture
+USER\:\:RELEASECAPTURE=ReleaseCapture
+USER\:\:SETDOUBLECLICKTIME=SetDoubleClickTime
+USER\:\:GETDOUBLECLICKTIME=GetDoubleClickTime
+USER\:\:SETFOCUS=SetFocus
+USER\:\:GETFOCUS=GetFocus
+USER\:\:REMOVEPROP=RemoveProp
+USER\:\:GETPROP=GetProp
+USER\:\:SETPROP=SetProp
+USER\:\:ENUMPROPS=EnumProps
+USER\:\:CLIENTTOSCREEN=ClientToScreen
+USER\:\:SCREENTOCLIENT=ScreenToClient
+USER\:\:WINDOWFROMPOINT=WindowFromPoint
+USER\:\:ISICONIC=IsIconic
+USER\:\:GETWINDOWRECT=GetWindowRect
+USER\:\:GETCLIENTRECT=GetClientRect
+USER\:\:ENABLEWINDOW=EnableWindow
+USER\:\:ISWINDOWENABLED=IsWindowEnabled
+USER\:\:GETWINDOWTEXT=GetWindowText
+USER\:\:SETWINDOWTEXT=SetWindowText
+USER\:\:GETWINDOWTEXTLENGTH=GetWindowTextLength
+USER\:\:BEGINPAINT=BeginPaint
+USER\:\:ENDPAINT=EndPaint
+USER\:\:CREATEWINDOW=CreateWindow
+USER\:\:SHOWWINDOW=ShowWindow
+USER\:\:CLOSEWINDOW=CloseWindow
+USER\:\:OPENICON=OpenIcon
+USER\:\:BRINGWINDOWTOTOP=BringWindowToTop
+USER\:\:GETPARENT=GetParent
+USER\:\:ISWINDOW=IsWindow
+USER\:\:ISCHILD=IsChild
+USER\:\:ISWINDOWVISIBLE=IsWindowVisible
+USER\:\:FINDWINDOW=FindWindow
+USER\:\:ANYPOPUP=AnyPopup
+USER\:\:DESTROYWINDOW=DestroyWindow
+USER\:\:ENUMWINDOWS=EnumWindows
+USER\:\:ENUMCHILDWINDOWS=EnumChildWindows
+USER\:\:MOVEWINDOW=MoveWindow
+USER\:\:REGISTERCLASS=RegisterClass
+USER\:\:GETCLASSNAME=GetClassName
+USER\:\:SETACTIVEWINDOW=SetActiveWindow
+USER\:\:GETACTIVEWINDOW=GetActiveWindow
+USER\:\:SCROLLWINDOW=ScrollWindow
+USER\:\:SETSCROLLPOS=SetScrollPos
+USER\:\:GETSCROLLPOS=GetScrollPos
+USER\:\:SETSCROLLRANGE=SetScrollRange
+USER\:\:GETSCROLLRANGE=GetScrollRange
+USER\:\:GETDC=GetDC
+USER\:\:GETWINDOWDC=GetWindowDC
+USER\:\:RELEASEDC=ReleaseDC
+USER\:\:SETCURSOR=setcursor
+USER\:\:SETCURSORPOS=SetCursorPos
+USER\:\:SHOWCURSOR=ShowCursor
+USER\:\:SETRECT=SetRect
+USER\:\:SETRECTEMPTY=SetRectEmpty
+USER\:\:COPYRECT=CopyRect
+USER\:\:ISRECTEMPTY=IsRectEmpty
+USER\:\:PTINRECT=PtInRect
+USER\:\:OFFSETRECT=OffsetRect
+USER\:\:INFLATERECT=InflateRect
+USER\:\:INTERSECTRECT=IntersectRect
+USER\:\:UNIONRECT=UnionRect
+USER\:\:FILLRECT=FillRect
+USER\:\:INVERTRECT=InvertRect
+USER\:\:FRAMERECT=FrameRect
+USER\:\:DRAWICON=DrawIcon
+USER\:\:DRAWTEXT=DRAWTEXT
+USER\:\:DIALOGBOX=DialogBox
+USER\:\:ENDDIALOG=EndDialog
+USER\:\:CREATEDIALOG=CreateDialog
+USER\:\:ISDIALOGMESSAGE=IsDialogMessage
+USER\:\:GETDLGITEM=GetDlgItem
+USER\:\:SETDLGITEMTEXT=SetDlgItemText
+USER\:\:GETDLGITEMTEXT=GetDlgItemText
+USER\:\:SETDLGITEMINT=SetDlgItemInt
+USER\:\:GETDLGITEMINT=GetDlgItemInt
+USER\:\:CHECKRADIOBUTTON=CheckRadioButton
+USER\:\:CHECKDLGBUTTON=CheckDlgButton
+USER\:\:ISDLGBUTTONCHECKED=IsDlgButtonChecked
+USER\:\:DLGDIRSELECT=DlgDirSelect
+USER\:\:DLGDIRLIST=DlgDirList
+USER\:\:SENDDLGITEMMESSAGE=SendDlgItemMessage
+USER\:\:ADJUSTWINDOWRECT=AdjustWindowRect
+USER\:\:MAPDIALOGRECT=MapDialogRect
+USER\:\:MESSAGEBEEP=MessageBeep
+USER\:\:FLASHWINDOW=FlashWindow
+USER\:\:GETKEYSTATE=GetKeyState
+USER\:\:DEFWINDOWPROC=DefWindowProc
+USER\:\:GETMESSAGE=GetMessage
+USER\:\:PEEKMESSAGE=PeekMessage
+USER\:\:POSTMESSAGE=PostMessage
+USER\:\:SENDMESSAGE=SendMessage
+USER\:\:WAITMESSAGE=WaitMessage
+USER\:\:TRANSLATEMESSAGE=TranslateMessage
+USER\:\:DISPATCHMESSAGE=DispatchMessage
+USER\:\:REPLYMESSAGE=ReplyMessage
+USER\:\:POSTAPPMESSAGE=PostAppMessage
+USER\:\:REGISTERCLIPBOARDFORMAT=RegisterClipboardFormat
+USER\:\:GETMESSAGEPOS=GetMessagePos
+USER\:\:GETMESSAGETIME=GetMessageTime
+USER\:\:SETWINDOWSHOOK=SetWindowsHook
+USER\:\:CALLWINDOWPROC=CallWindowProc
+USER\:\:CALLMSGFILTER=CallMsgFilter
+USER\:\:UPDATEWINDOW=UpdateWindow
+USER\:\:INVALIDATERECT=InvalidateRect
+USER\:\:INVALIDATERGN=InvalidateRgn
+USER\:\:VALIDATERECT=ValidateRect
+USER\:\:VALIDATERGN=ValidateRgn
+USER\:\:GETCLASSWORD=GetClassWord
+USER\:\:SETCLASSWORD=SetClassWord
+USER\:\:GETCLASSLONG=GetClassLong
+USER\:\:SETCLASSLONG=SetClassLong
+USER\:\:GETWINDOWWORD=GetWindowWord
+USER\:\:SETWINDOWWORD=SetWindowWord
+USER\:\:GETWINDOWLONG=GetWindowLong
+USER\:\:SETWINDOWLONG=SetWindowLong
+USER\:\:OPENCLIPBOARD=OpenClipboard
+USER\:\:CLOSECLIPBOARD=CloseClipboard
+USER\:\:EMPTYCLIPBOARD=EmptyClipboard
+USER\:\:GETCLIPBOARDOWNER=GetClipboardOwner
+USER\:\:SETCLIPBOARDDATA=SetClipboardData
+USER\:\:GETCLIPBOARDDATA=GetClipboardData
+USER\:\:COUNTCLIPBOARDFORMATS=CountClipboardFormats
+USER\:\:ENUMCLIPBOARDFORMATS=EnumClipboardFormats
+USER\:\:REGISTERWINDOWMESSAGE=RegisterWindowMessage
+USER\:\:GETCLIPBOARDFORMATNAME=GetClipboardFormatName
+USER\:\:SETCLIPBOARDVIEWER=SetClipboardViewer
+USER\:\:GETCLIPBOARDVIEWER=GetClipboardViewer
+USER\:\:CHANGECLIPBOARDCHAIN=ChangeClipboardChain
+USER\:\:LOADMENU=LoadMenu
+USER\:\:CREATEMENU=CreateMenu
+USER\:\:DESTROYMENU=DestroyMenu
+USER\:\:CHANGEMENU=ChangeMenu
+USER\:\:CHECKMENUITEM=CheckMenuItem
+USER\:\:ENABLEMENUITEM=EnableMenuItem
+USER\:\:GETSYSTEMMENU=GetSystemMenu
+USER\:\:GETMENU=GetMenu
+USER\:\:SETMENU=SetMenu
+USER\:\:GETSUBMENU=GetSubMenu
+USER\:\:DRAWMENUBAR=DrawMenuBar
+USER\:\:GETMENUSTRING=GetMenuString
+USER\:\:HILITEMENUITEM=HiliteMenuItem
+USER\:\:CREATECARET=CreateCaret
+USER\:\:DESTROYCARET=DestroyCaret
+USER\:\:SETCARETPOS=SetCaretPos
+USER\:\:HIDECARET=HideCaret
+USER\:\:SHOWCARET=ShowCaret
+USER\:\:SETCARETBLINKTIME=SetCaretBlinkTime
+USER\:\:GETCARETBLINKTIME=GetCaretBlinkTime
+USER\:\:ARRANGEICONICWINDOWS=ArrangeIconicWindows
+USER\:\:WINHELP=WinHelp
+USER\:\:LOADCURSOR=LoadCursor
+USER\:\:LOADICON=LoadIcon
+USER\:\:LOADBITMAP=LoadBitmap
+USER\:\:LOADSTRING=LoadString
+USER\:\:LOADACCELERATORS=LoadAccelerators
+USER\:\:TRANSLATEACCELERATOR=TranslateAccelerator
+USER\:\:GETSYSTEMMETRICS=GetSystemMetrics
+USER\:\:GETSYSCOLOR=GetSysColor
+USER\:\:SETSYSCOLORS=SetSysColors
+USER\:\:GETCARETPOS=GetCaretPos
+USER\:\:QUERYSENDMESSAGE=QuerySendMessage
+USER\:\:GRAYSTRING=GRAYSTRING
+USER\:\:SWAPMOUSEBUTTON=SwapMouseButton
+USER\:\:SETSYSMODALWINDOW=SetSysModalWindow
+USER\:\:GETSYSMODALWINDOW=GetSysModalWindow
+USER\:\:GETUPDATERECT=GetUpdateRect
+USER\:\:CHILDWINDOWFROMPOINT=ChildWindowFromPoint
+USER\:\:INSENDMESSAGE=InSendMessage
+USER\:\:ISCLIPBOARDFORMATAVAILABLE=IsClipboardFormatAvailable
+USER\:\:DLGDIRSELECTCOMBOBOX=DlgDirSelectComboBox
+USER\:\:DLGDIRLISTCOMBOBOX=DlgDirListComboBox
+USER\:\:TABBEDTEXTOUT=TabbedTextOut
+USER\:\:GETTABBEDTEXTEXTENT=GetTabbedTextExtent
+USER\:\:OPENCOMM=OpenComm
+USER\:\:SETCOMMSTATE=SetCommState
+USER\:\:GETCOMMSTATE=GetCommState
+USER\:\:GETCOMMERROR=GetCommError
+USER\:\:READCOMM=ReadComm
+USER\:\:WRITECOMM=WriteComm
+USER\:\:TRANSMITCOMMCHAR=TransmitCommChar
+USER\:\:CLOSECOMM=CloseComm
+USER\:\:SETCOMMEVENTMASK=SetCommEventMask
+USER\:\:GETCOMMEVENTMASK=GetCommEventMask
+USER\:\:SETCOMMBREAK=SetCommBreak
+USER\:\:CLEARCOMMBREAK=ClearCommBreak
+USER\:\:UNGETCOMMCHAR=UngetCommChar
+USER\:\:BUILDCOMMDCB=BuildCommDCB
+USER\:\:ESCAPECOMMFUNCTION=EscapeCommFunction
+USER\:\:FLUSHCOMM=FlushComm
+USER\:\:DIALOGBOXINDIRECT=DialogBoxIndirect
+USER\:\:CREATEDIALOGINDIRECT=CreateDialogIndirect
+USER\:\:LOADMENUINDIRECT=LoadMenuIndirect
+USER\:\:SCROLLDC=ScrollDC
+USER\:\:GETKEYBOARDSTATE=GetKeyboardState
+USER\:\:SETKEYBOARDSTATE=SetKeyboardState
+USER\:\:GETWINDOWTASK=GetWindowTask
+USER\:\:ENUMTASKWINDOWS=EnumTaskWindows
+USER\:\:LOCKINPUT=LockInput
+USER\:\:GETNEXTDLGGROUPITEM=GetNextDlgGroupItem
+USER\:\:GETNEXTDLGTABITEM=GetNextDlgTabItem
+USER\:\:GETTOPWINDOW=GetTopWindow
+USER\:\:GETNEXTWINDOW=GetNextWindow
+USER\:\:GETSYSTEMDEBUGSTATE=GetSystemDebugState
+USER\:\:SETWINDOWPOS=SetWindowPos
+USER\:\:SETPARENT=SetParent
+USER\:\:UNHOOKWINDOWSHOOK=UnhookWindowsHook
+USER\:\:DEFHOOKPROC=DefHookProc
+USER\:\:GETCAPTURE=GetCapture
+USER\:\:GETUPDATERGN=GetUpdateRgn
+USER\:\:EXCLUDEUPDATERGN=ExcludeUpdateRgn
+USER\:\:DIALOGBOXPARAM=DialogBoxParam
+USER\:\:DIALOGBOXINDIRECTPARAM=DialogBoxIndirectParam
+USER\:\:CREATEDIALOGPARAM=CreateDialogParam
+USER\:\:CREATEDIALOGINDIRECTPARAM=CreateDialogIndirectParam
+USER\:\:GETDIALOGBASEUNITS=GetDialogBaseUnits
+USER\:\:EQUALRECT=EqualRect
+USER\:\:ENABLECOMMNOTIFICATION=EnableCommNotification
+USER\:\:EXITWINDOWSEXEC=ExitWindowsExec
+USER\:\:GETCURSOR=GetCursor
+USER\:\:GETOPENCLIPBOARDWINDOW=GetOpenClipboardWindow
+USER\:\:GETASYNCKEYSTATE=GetAsyncKeyState
+USER\:\:GETMENUSTATE=GetMenuState
+USER\:\:SENDDRIVERMESSAGE=SendDriverMessage
+USER\:\:OPENDRIVER=OpenDriver
+USER\:\:CLOSEDRIVER=CloseDriver
+USER\:\:GETDRIVERMODULEHANDLE=GetDriverModuleHandle
+USER\:\:DEFDRIVERPROC=DefDriverProc
+USER\:\:GETDRIVERINFO=GetDriverInfo
+USER\:\:GETNEXTDRIVER=GetNextDriver
+USER\:\:MAPWINDOWPOINTS=MapWindowPoints
+USER\:\:BEGINDEFERWINDOWPOS=BeginDeferWindowPos
+USER\:\:DEFERWINDOWPOS=DeferWindowPos
+USER\:\:ENDDEFERWINDOWPOS=EndDeferWindowPos
+USER\:\:GETWINDOW=GetWindow
+USER\:\:GETMENUITEMCOUNT=GetMenuItemCount
+USER\:\:GETMENUITEMID=GetMenuItemID
+USER\:\:SHOWOWNEDPOPUPS=ShowOwnedPopups
+USER\:\:SETMESSAGEQUEUE=SetMessageQueue
+USER\:\:SHOWSCROLLBAR=ShowScrollBar
+USER\:\:GLOBALADDATOM=GlobalAddAtom
+USER\:\:GLOBALDELETEATOM=GlobalDeleteAtom
+USER\:\:GLOBALFINDATOM=GlobalFindAtom
+USER\:\:GLOBALGETATOMNAME=GlobalGetAtomName
+USER\:\:ISZOOMED=IsZoomed
+USER\:\:GETDLGCTRLID=GetDlgCtrlID
+USER\:\:GETDESKTOPHWND=GetDesktopHWND
+USER\:\:GETDESKTOPWINDOW=GetDesktopWindow
+USER\:\:SELECTPALETTE=SelectPalette
+USER\:\:REALIZEPALETTE=RealizePalette
+USER\:\:GETFREESYSTEMRESOURCES=GetFreeSystemResources
+USER\:\:GETLASTACTIVEPOPUP=GetLastActivePopup
+USER\:\:GETMESSAGEEXTRAINFO=GetMessageExtraInfo
+USER\:\:REDRAWWINDOW=RedrawWindow
+USER\:\:SETWINDOWSHOOKEX=SetWindowsHookEx
+USER\:\:UNHOOKWINDOWSHOOKEX=UnhookWindowsHookEx
+USER\:\:CALLNEXTHOOKEX=CallNextHookEx
+USER\:\:LOCKWINDOWUPDATE=LockWindowUpdate
+USER\:\:DEFDLGPROC=DefDlgProc
+USER\:\:GETCLIPCURSOR=GetClipCursor
+USER\:\:SCROLLWINDOWEX=ScrollWindowEx
+USER\:\:ENABLEHARDWAREINPUT=EnableHardwareInput
+USER\:\:GETQUEUESTATUS=GetQueueStatus
+USER\:\:GETINPUTSTATE=GetInputState
+USER\:\:ISMENU=IsMenu
+USER\:\:GETDCEX=GetDCEx
+USER\:\:COPYICON=CopyIcon
+USER\:\:COPYCURSOR=CopyCursor
+USER\:\:GETWINDOWPLACEMENT=GetWindowPlacement
+USER\:\:SETWINDOWPLACEMENT=SetWindowPlacement
+USER\:\:SUBTRACTRECT=SubtractRect
+USER\:\:GETPRIORITYCLIPBOARDFORMAT=GetPriorityClipboardFormat
+USER\:\:UNREGISTERCLASS=UnregisterClass
+USER\:\:GETCLASSINFO=GetClassInfo
+USER\:\:CREATECURSOR=CreateCursor
+USER\:\:CREATEICON=CreateIcon
+USER\:\:INSERTMENU=InsertMenu
+USER\:\:APPENDMENU=AppendMenu
+USER\:\:REMOVEMENU=RemoveMenu
+USER\:\:DELETEMENU=DeleteMenu
+USER\:\:MODIFYMENU=ModifyMenu
+USER\:\:CREATEPOPUPMENU=CreatePopupMenu
+USER\:\:TRACKPOPUPMENU=TrackPopupMenu
+USER\:\:GETMENUCHECKMARKDIMENSIONS=GetMenuCheckMarkDimensions
+USER\:\:SETMENUITEMBITMAPS=SetMenuItemBitmaps
+USER\:\:WVSPRINTF=wvsprintf
+USER\:\:DLGDIRSELECTEX=DlgDirSelectEx
+USER\:\:DLGDIRSELECTCOMBOBOXEX=DlgDirSelectComboBoxEx
+USER\:\:LSTRCMP=lstrcmp
+USER\:\:ANSIUPPER=AnsiUpper
+USER\:\:ANSILOWER=AnsiLower
+USER\:\:ISCHARALPHA=IsCharAlpha
+USER\:\:ISCHARALPHANUMERIC=IsCharAlphaNumeric
+USER\:\:ISCHARUPPER=IsCharUpper
+USER\:\:ISCHARLOWER=IsCharLower
+USER\:\:ANSIUPPERBUFF=AnsiUpperBuff
+USER\:\:ANSILOWERBUFF=AnsiLowerBuff
+USER\:\:DEFFRAMEPROC=DefFrameProc
+USER\:\:DEFMDICHILDPROC=DefMDIChildProc
+USER\:\:TRANSLATEMDISYSACCEL=TranslateMDISysAccel
+USER\:\:CREATEWINDOWEX=CreateWindowEx
+USER\:\:ADJUSTWINDOWRECTEX=AdjustWindowRectEx
+USER\:\:DESTROYICON=DestroyIcon
+USER\:\:DESTROYCURSOR=DestroyCursor
+USER\:\:DRAWFOCUSRECT=DrawFocusRect
+USER\:\:LSTRCMPI=lstrcmpi
+USER\:\:ANSINEXT=AnsiNext
+USER\:\:ANSIPREV=AnsiPrev
+USER\:\:ENABLESCROLLBAR=EnableScrollBar
+USER\:\:SYSTEMPARAMETERSINFO=SystemParametersInfo
+USER\:\:WNETGETCONNECTION=WNetGetConnection
+USER\:\:WNETADDCONNECTION=WNetAddConnection
+USER\:\:WNETCANCELCONNECTION=WNetCancelConnection
+USER\:\:WNETDISCONNECTDIALOG=WNetDisconnectDialog
+USER\:\:WNETCONNECTIONDIALOG=WNetConnectionDialog
+VER\:\:WEP=WEP
+VER\:\:GETFILERESOURCESIZE=GetFileResourceSize
+VER\:\:GETFILERESOURCE=GetFileResource
+VER\:\:GETFILEVERSIONINFOSIZE=GetFileVersionInfoSize
+VER\:\:GETFILEVERSIONINFO=GetFileVersionInfo
+VER\:\:VERFINDFILE=VerFindFile
+VER\:\:VERINSTALLFILE=VerInstallFile
+VER\:\:VERLANGUAGENAME=VerLanguageName
+VER\:\:VERQUERYVALUE=VerQueryValue
+
+
+COMMDLG\:\:Ordinal_15=ChooseFont
+COMMDLG\:\:Ordinal_26=CommDlgExtendedError
+COMMDLG\:\:Ordinal_2=GetSaveFileName
+COMMDLG\:\:Ordinal_5=ChooseColor
+COMMDLG\:\:Ordinal_1=GetOpenFileName
+COMMDLG\:\:Ordinal_12=ReplaceText
+COMMDLG\:\:Ordinal_20=PrintDlg
+COMMDLG\:\:Ordinal_27=GetFileTitle
+COMMDLG\:\:Ordinal_11=FindText
+COMMDLG\:\:Ordinal_28=WEP
+GDI\:\:Ordinal_382=AbortDoc
+GDI\:\:Ordinal_119=AddFontResource
+GDI\:\:Ordinal_367=AnimatePalette
+GDI\:\:Ordinal_23=Arc
+GDI\:\:Ordinal_34=BitBlt
+GDI\:\:Ordinal_348=Chord
+GDI\:\:Ordinal_243=CloseJob
+GDI\:\:Ordinal_126=CloseMetaFile
+GDI\:\:Ordinal_47=CombineRgn
+GDI\:\:Ordinal_250=Copy
+GDI\:\:Ordinal_151=CopyMetaFile
+GDI\:\:Ordinal_48=CreateBitmap
+GDI\:\:Ordinal_49=CreateBitmapIndirect
+GDI\:\:Ordinal_50=CreateBrushIndirect
+GDI\:\:Ordinal_51=CreateCompatibleBitmap
+GDI\:\:Ordinal_52=CreateCompatibleDC
+GDI\:\:Ordinal_53=CreateDC
+GDI\:\:Ordinal_442=CreateDIBitmap
+GDI\:\:Ordinal_445=CreateDIBPatternBrush
+GDI\:\:Ordinal_156=CreateDiscardableBitmap
+GDI\:\:Ordinal_54=CreateEllipticRgn
+GDI\:\:Ordinal_55=CreateEllipticRgnIndirect
+GDI\:\:Ordinal_56=CreateFont
+GDI\:\:Ordinal_57=CreateFontIndirect
+GDI\:\:Ordinal_58=CreateHatchBrush
+GDI\:\:Ordinal_153=CreateIC
+GDI\:\:Ordinal_125=CreateMetaFile
+GDI\:\:Ordinal_360=CreatePalette
+GDI\:\:Ordinal_60=CreatePatternBrush
+GDI\:\:Ordinal_61=CreatePen
+GDI\:\:Ordinal_62=CreatePenIndirect
+GDI\:\:Ordinal_63=CreatePolygonRgn
+GDI\:\:Ordinal_451=CreatePolyPolygonRgn
+GDI\:\:Ordinal_230=CreatePQ
+GDI\:\:Ordinal_64=CreateRectRgn
+GDI\:\:Ordinal_65=CreateRectRgnIndirect
+GDI\:\:Ordinal_444=CreateRoundRectRgn
+GDI\:\:Ordinal_310=CreateScalableFontResource
+GDI\:\:Ordinal_66=CreateSolidBrush
+GDI\:\:Ordinal_68=DeleteDC
+GDI\:\:Ordinal_244=DeleteJob
+GDI\:\:Ordinal_127=DeleteMetaFile
+GDI\:\:Ordinal_69=DeleteObject
+GDI\:\:Ordinal_235=DeletePQ
+GDI\:\:Ordinal_253=DeleteSpoolPage
+GDI\:\:Ordinal_67=DPtoLP
+GDI\:\:Ordinal_24=Ellipse
+GDI\:\:Ordinal_378=EndDoc
+GDI\:\:Ordinal_380=EndPage
+GDI\:\:Ordinal_247=EndSpoolPage
+GDI\:\:Ordinal_330=EnumFontFamilies
+GDI\:\:Ordinal_70=EnumFonts
+GDI\:\:Ordinal_175=EnumMetaFile
+GDI\:\:Ordinal_71=EnumObjects
+GDI\:\:Ordinal_72=EqualRgn
+GDI\:\:Ordinal_38=Escape
+GDI\:\:Ordinal_21=ExcludeClipRect
+GDI\:\:Ordinal_372=ExtFloodFill
+GDI\:\:Ordinal_232=ExtractPQ
+GDI\:\:Ordinal_351=ExtTextOut
+GDI\:\:Ordinal_40=FillRgn
+GDI\:\:Ordinal_25=FloodFill
+GDI\:\:Ordinal_41=FrameRgn
+GDI\:\:Ordinal_353=GetAspectRatioFilter
+GDI\:\:Ordinal_486=GetAspectRatioFilterEx
+GDI\:\:Ordinal_74=GetBitmapBits
+GDI\:\:Ordinal_162=GetBitmapDimension
+GDI\:\:Ordinal_468=GetBitmapDimensionEx
+GDI\:\:Ordinal_75=GetBkColor
+GDI\:\:Ordinal_76=GetBkMode
+GDI\:\:Ordinal_194=GetBoundsRect
+GDI\:\:Ordinal_149=GetBrushOrg
+GDI\:\:Ordinal_469=GetBrushOrgEx
+GDI\:\:Ordinal_307=GetCharABCWidths
+GDI\:\:Ordinal_350=GetCharWidth
+GDI\:\:Ordinal_77=GetClipBox
+GDI\:\:Ordinal_173=GetClipRgn
+GDI\:\:Ordinal_78=GetCurrentPosition
+GDI\:\:Ordinal_470=GetCurrentPositionEx
+GDI\:\:Ordinal_79=GetDCOrg
+GDI\:\:Ordinal_80=GetDeviceCaps
+GDI\:\:Ordinal_441=GetDIBits
+GDI\:\:Ordinal_133=GetEnvironment
+GDI\:\:Ordinal_311=GetFontData
+GDI\:\:Ordinal_309=GetGlyphOutline
+GDI\:\:Ordinal_332=GetKerningPairs
+GDI\:\:Ordinal_81=GetMapMode
+GDI\:\:Ordinal_124=GetMetaFile
+GDI\:\:Ordinal_159=GetMetaFileBits
+GDI\:\:Ordinal_154=GetNearestColor
+GDI\:\:Ordinal_370=GetNearestPaletteIndex
+GDI\:\:Ordinal_82=GetObject
+GDI\:\:Ordinal_308=GetOutlineTextMetrics
+GDI\:\:Ordinal_363=GetPaletteEntries
+GDI\:\:Ordinal_83=GetPixel
+GDI\:\:Ordinal_84=GetPolyFillMode
+GDI\:\:Ordinal_313=GetRasterizerCaps
+GDI\:\:Ordinal_134=GetRgnBox
+GDI\:\:Ordinal_85=GetROP2
+GDI\:\:Ordinal_87=GetStockObject
+GDI\:\:Ordinal_88=GetStretchBltMode
+GDI\:\:Ordinal_375=GetSystemPaletteEntries
+GDI\:\:Ordinal_374=GetSystemPaletteUse
+GDI\:\:Ordinal_345=GetTextAlign
+GDI\:\:Ordinal_89=GetTextCharacterExtra
+GDI\:\:Ordinal_90=GetTextColor
+GDI\:\:Ordinal_91=GetTextExtent
+GDI\:\:Ordinal_471=GetTextExtentPoint
+GDI\:\:Ordinal_92=GetTextFace
+GDI\:\:Ordinal_93=GetTextMetrics
+GDI\:\:Ordinal_94=GetViewportExt
+GDI\:\:Ordinal_472=GetViewportExtEx
+GDI\:\:Ordinal_95=GetViewportOrg
+GDI\:\:Ordinal_473=GetViewportOrgEx
+GDI\:\:Ordinal_96=GetWindowExt
+GDI\:\:Ordinal_474=GetWindowExtEx
+GDI\:\:Ordinal_97=GetWindowOrg
+GDI\:\:Ordinal_475=GetWindowOrgEx
+GDI\:\:Ordinal_233=InsertPQ
+GDI\:\:Ordinal_22=IntersectClipRect
+GDI\:\:Ordinal_42=InvertRgn
+GDI\:\:Ordinal_462=IsGDIObject
+GDI\:\:Ordinal_100=LineDDA
+GDI\:\:Ordinal_19=LineTo
+GDI\:\:Ordinal_99=LPtoDP
+GDI\:\:Ordinal_231=MinPQ
+GDI\:\:Ordinal_20=MoveTo
+GDI\:\:Ordinal_483=MoveToEx
+GDI\:\:Ordinal_128=MulDiv
+GDI\:\:Ordinal_32=OffsetClipRgn
+GDI\:\:Ordinal_101=OffsetRgn
+GDI\:\:Ordinal_17=OffsetViewportOrg
+GDI\:\:Ordinal_476=OffsetViewportOrgEx
+GDI\:\:Ordinal_15=OffsetWindowOrg
+GDI\:\:Ordinal_477=OffsetWindowOrgEx
+GDI\:\:Ordinal_240=OpenJob
+GDI\:\:Ordinal_43=PaintRgn
+GDI\:\:Ordinal_29=PatBlt
+GDI\:\:Ordinal_26=Pie
+GDI\:\:Ordinal_123=PlayMetaFile
+GDI\:\:Ordinal_176=PlayMetaFileRecord
+GDI\:\:Ordinal_36=Polygon
+GDI\:\:Ordinal_37=Polyline
+GDI\:\:Ordinal_450=PolyPolygon
+GDI\:\:Ordinal_161=PtInRegion
+GDI\:\:Ordinal_103=PtVisible
+GDI\:\:Ordinal_155=QueryAbort
+GDI\:\:Ordinal_27=Rectangle
+GDI\:\:Ordinal_181=RectInRegion
+GDI\:\:Ordinal_104=RectVisible
+GDI\:\:Ordinal_136=RemoveFontResource
+GDI\:\:Ordinal_376=ResetDC
+GDI\:\:Ordinal_368=ResizePalette
+GDI\:\:Ordinal_39=RestoreDC
+GDI\:\:Ordinal_28=RoundRect
+GDI\:\:Ordinal_30=SaveDC
+GDI\:\:Ordinal_18=ScaleViewportExt
+GDI\:\:Ordinal_484=ScaleViewportExtEx
+GDI\:\:Ordinal_16=ScaleWindowExt
+GDI\:\:Ordinal_485=ScaleWindowExtEx
+GDI\:\:Ordinal_195=SelectBitmap
+GDI\:\:Ordinal_44=SelectClipRgn
+GDI\:\:Ordinal_45=SelectObject
+GDI\:\:Ordinal_381=SetAbortProc
+GDI\:\:Ordinal_106=SetBitmapBits
+GDI\:\:Ordinal_163=SetBitmapDimension
+GDI\:\:Ordinal_478=SetBitmapDimensionEx
+GDI\:\:Ordinal_1=SetBkColor
+GDI\:\:Ordinal_2=SetBkMode
+GDI\:\:Ordinal_193=SetBoundsRect
+GDI\:\:Ordinal_148=SetBrushOrg
+GDI\:\:Ordinal_440=SetDIBits
+GDI\:\:Ordinal_443=SetDIBitsToDevice
+GDI\:\:Ordinal_132=SetEnvironment
+GDI\:\:Ordinal_3=SetMapMode
+GDI\:\:Ordinal_349=SetMapperFlags
+GDI\:\:Ordinal_160=SetMetaFileBits
+GDI\:\:Ordinal_196=SetMetaFileBitsBetter
+GDI\:\:Ordinal_364=SetPaletteEntries
+GDI\:\:Ordinal_31=SetPixel
+GDI\:\:Ordinal_6=SetPolyFillMode
+GDI\:\:Ordinal_172=SetRectRgn
+GDI\:\:Ordinal_4=SetROP2
+GDI\:\:Ordinal_7=SetStretchBltMode
+GDI\:\:Ordinal_373=SetSystemPaletteUse
+GDI\:\:Ordinal_346=SetTextAlign
+GDI\:\:Ordinal_8=SetTextCharacterExtra
+GDI\:\:Ordinal_9=SetTextColor
+GDI\:\:Ordinal_10=SetTextJustification
+GDI\:\:Ordinal_14=SetViewportExt
+GDI\:\:Ordinal_479=SetViewportExtEx
+GDI\:\:Ordinal_13=SetViewportOrg
+GDI\:\:Ordinal_480=SetViewportOrgEx
+GDI\:\:Ordinal_12=SetWindowExt
+GDI\:\:Ordinal_481=SetWindowExtEx
+GDI\:\:Ordinal_11=SetWindowOrg
+GDI\:\:Ordinal_482=SetWindowOrgEx
+GDI\:\:Ordinal_234=SizePQ
+GDI\:\:Ordinal_254=SpoolFile
+GDI\:\:Ordinal_377=StartDoc
+GDI\:\:Ordinal_379=StartPage
+GDI\:\:Ordinal_246=StartSpoolPage
+GDI\:\:Ordinal_35=StretchBlt
+GDI\:\:Ordinal_439=StretchDIBits
+GDI\:\:Ordinal_33=TextOut
+GDI\:\:Ordinal_150=UnrealizeObject
+GDI\:\:Ordinal_366=UpdateColors
+GDI\:\:Ordinal_59=WEP
+GDI\:\:Ordinal_242=WriteDialog
+GDI\:\:Ordinal_241=WriteSpool
+KERNEL\:\:Ordinal_1=FatalExit
+KERNEL\:\:Ordinal_3=GetVersion
+KERNEL\:\:Ordinal_4=LocalInit
+KERNEL\:\:Ordinal_5=LocalAlloc
+KERNEL\:\:Ordinal_6=LocalReAlloc
+KERNEL\:\:Ordinal_7=LocalFree
+KERNEL\:\:Ordinal_8=LocalLock
+KERNEL\:\:Ordinal_9=LocalUnlock
+KERNEL\:\:Ordinal_10=LocalSize
+KERNEL\:\:Ordinal_11=LocalHandle
+KERNEL\:\:Ordinal_12=LocalFlags
+KERNEL\:\:Ordinal_13=LocalCompact
+KERNEL\:\:Ordinal_15=GlobalAlloc
+KERNEL\:\:Ordinal_16=GlobalReAlloc
+KERNEL\:\:Ordinal_17=GlobalFree
+KERNEL\:\:Ordinal_18=GlobalLock
+KERNEL\:\:Ordinal_19=GlobalUnlock
+KERNEL\:\:Ordinal_20=GlobalSize
+KERNEL\:\:Ordinal_21=GlobalHandle
+KERNEL\:\:Ordinal_22=GlobalFlags
+KERNEL\:\:Ordinal_23=LockSegment
+KERNEL\:\:Ordinal_24=UnlockSegment
+KERNEL\:\:Ordinal_25=GlobalCompact
+KERNEL\:\:Ordinal_29=Yield
+KERNEL\:\:Ordinal_36=GetCurrentTask
+KERNEL\:\:Ordinal_37=GetCurrentPDB
+KERNEL\:\:Ordinal_45=LoadModule
+KERNEL\:\:Ordinal_46=FreeModule
+KERNEL\:\:Ordinal_47=GetModuleHandle
+KERNEL\:\:Ordinal_48=GetModuleUsage
+KERNEL\:\:Ordinal_49=GetModuleFileName
+KERNEL\:\:Ordinal_50=GetProcAddress
+KERNEL\:\:Ordinal_51=MakeProcInstance
+KERNEL\:\:Ordinal_52=FreeProcInstance
+KERNEL\:\:Ordinal_54=GetInstanceData
+KERNEL\:\:Ordinal_55=Catch
+KERNEL\:\:Ordinal_56=THROW
+KERNEL\:\:Ordinal_57=GetProfileInt
+KERNEL\:\:Ordinal_58=GetProfileString
+KERNEL\:\:Ordinal_59=WriteProfileString
+KERNEL\:\:Ordinal_60=FindResource
+KERNEL\:\:Ordinal_61=LoadResource
+KERNEL\:\:Ordinal_62=LockResource
+KERNEL\:\:Ordinal_63=FreeResource
+KERNEL\:\:Ordinal_64=AccessResource
+KERNEL\:\:Ordinal_65=SizeofResource
+KERNEL\:\:Ordinal_66=AllocResource
+KERNEL\:\:Ordinal_67=SetResourceHandler
+KERNEL\:\:Ordinal_68=InitAtomTable
+KERNEL\:\:Ordinal_69=FindAtom
+KERNEL\:\:Ordinal_70=AddAtom
+KERNEL\:\:Ordinal_71=DeleteAtom
+KERNEL\:\:Ordinal_72=GetAtomName
+KERNEL\:\:Ordinal_73=GetAtomHandle
+KERNEL\:\:Ordinal_74=OpenFile
+KERNEL\:\:Ordinal_81=_lclose
+KERNEL\:\:Ordinal_82=_lread
+KERNEL\:\:Ordinal_83=_lcreat
+KERNEL\:\:Ordinal_84=_llseek
+KERNEL\:\:Ordinal_85=_lopen
+KERNEL\:\:Ordinal_86=_lwrite
+KERNEL\:\:Ordinal_88=lstrcpy
+KERNEL\:\:Ordinal_89=lstrcat
+KERNEL\:\:Ordinal_90=lstrlen
+KERNEL\:\:Ordinal_92=GetTempDrive
+KERNEL\:\:Ordinal_93=GetCodeHandle
+KERNEL\:\:Ordinal_94=DefineHandleTable
+KERNEL\:\:Ordinal_95=LoadLibrary
+KERNEL\:\:Ordinal_96=FreeLibrary
+KERNEL\:\:Ordinal_97=GetTempFileName
+KERNEL\:\:Ordinal_100=ValidateCodeSegments
+KERNEL\:\:Ordinal_104=GetCodeInfo
+KERNEL\:\:Ordinal_106=SetSwapAreaSize
+KERNEL\:\:Ordinal_107=SetErrorMode
+KERNEL\:\:Ordinal_108=SwitchStackTo
+KERNEL\:\:Ordinal_109=SwitchStackBack
+KERNEL\:\:Ordinal_111=GlobalWire
+KERNEL\:\:Ordinal_112=GlobalUnWire
+KERNEL\:\:Ordinal_115=OutputDebugString
+KERNEL\:\:Ordinal_121=LocalShrink
+KERNEL\:\:Ordinal_127=GetPrivateProfileInt
+KERNEL\:\:Ordinal_128=GetPrivateProfileString
+KERNEL\:\:Ordinal_129=WritePrivateProfileString
+KERNEL\:\:Ordinal_131=GetDOSEnvironment
+KERNEL\:\:Ordinal_132=GetWinFlags
+KERNEL\:\:Ordinal_134=GetWindowsDirectory
+KERNEL\:\:Ordinal_135=GetSystemDirectory
+KERNEL\:\:Ordinal_136=GetDriveType
+KERNEL\:\:Ordinal_137=FatalAppExit
+KERNEL\:\:Ordinal_150=DirectedYield
+KERNEL\:\:Ordinal_152=GetNumTasks
+KERNEL\:\:Ordinal_154=GlobalNotify
+KERNEL\:\:Ordinal_156=LimitEmsPages
+KERNEL\:\:Ordinal_163=GlobalLRUOldest
+KERNEL\:\:Ordinal_164=GlobalLRUNewest
+KERNEL\:\:Ordinal_166=WinExec
+KERNEL\:\:Ordinal_169=GetFreeSpace
+KERNEL\:\:Ordinal_171=AllocDStoCSAlias
+KERNEL\:\:Ordinal_175=AllocSelector
+KERNEL\:\:Ordinal_176=FreeSelector
+KERNEL\:\:Ordinal_177=PrestoChangoSelector
+KERNEL\:\:Ordinal_184=GlobalDosAlloc
+KERNEL\:\:Ordinal_185=GlobalDosFree
+KERNEL\:\:Ordinal_186=GetSelectorBase
+KERNEL\:\:Ordinal_187=SetSelectorBase
+KERNEL\:\:Ordinal_188=GetSelectorLimit
+KERNEL\:\:Ordinal_189=SetSelectorLimit
+KERNEL\:\:Ordinal_191=GlobalPageLock
+KERNEL\:\:Ordinal_192=GlobalPageUnlock
+KERNEL\:\:Ordinal_197=GlobalFix
+KERNEL\:\:Ordinal_198=GlobalUnfix
+KERNEL\:\:Ordinal_199=SetHandleCount
+KERNEL\:\:Ordinal_200=ValidateFreeSpaces
+KERNEL\:\:Ordinal_203=DebugBreak
+KERNEL\:\:Ordinal_204=SwapRecording
+KERNEL\:\:Ordinal_207=IsDBCSLeadByte
+KERNEL\:\:Ordinal_320=IsTask
+KERNEL\:\:Ordinal_324=LOGERROR
+KERNEL\:\:Ordinal_325=LogParamError
+KERNEL\:\:Ordinal_334=IsBadReadPtr
+KERNEL\:\:Ordinal_335=IsBadWritePtr
+KERNEL\:\:Ordinal_336=IsBadCodePtr
+KERNEL\:\:Ordinal_337=IsBadStringPtr
+KERNEL\:\:Ordinal_346=IsBadHugeReadPtr
+KERNEL\:\:Ordinal_347=IsBadHugeWritePtr
+KERNEL\:\:Ordinal_348=hmemcpy
+KERNEL\:\:Ordinal_349=_hread
+KERNEL\:\:Ordinal_350=_hwrite
+KERNEL\:\:Ordinal_353=lstrcpyn
+KERNEL\:\:Ordinal_355=GetWinDebugInfo
+KERNEL\:\:Ordinal_356=SetWinDebugInfo
+KEYBOARD\:\:Ordinal_2=Enable
+KEYBOARD\:\:Ordinal_3=disable
+KEYBOARD\:\:Ordinal_4=toascii
+KEYBOARD\:\:Ordinal_5=AnsiToOem
+KEYBOARD\:\:Ordinal_6=OemToAnsi
+KEYBOARD\:\:Ordinal_8=WEP
+KEYBOARD\:\:Ordinal_128=OemKeyScan
+KEYBOARD\:\:Ordinal_129=VkKeyScan
+KEYBOARD\:\:Ordinal_130=GetKeyboardType
+KEYBOARD\:\:Ordinal_131=MapVirtualKey
+KEYBOARD\:\:Ordinal_132=GetKBCodePage
+KEYBOARD\:\:Ordinal_133=GetKeyNameText
+KEYBOARD\:\:Ordinal_134=AnsiToOemBuff
+KEYBOARD\:\:Ordinal_135=OemToAnsiBuff
+LZEXPAND\:\:Ordinal_5=LZRead
+LZEXPAND\:\:Ordinal_1=LZCopy
+LZEXPAND\:\:Ordinal_6=LZClose
+LZEXPAND\:\:Ordinal_3=LZInit
+LZEXPAND\:\:Ordinal_10=GetExpandedName
+LZEXPAND\:\:Ordinal_4=LZSeek
+LZEXPAND\:\:Ordinal_2=LZOpenFile
+LZEXPAND\:\:Ordinal_8=CopyLZFile
+LZEXPAND\:\:Ordinal_9=LZDone
+LZEXPAND\:\:Ordinal_7=LZStart
+LZEXPAND\:\:Ordinal_11=WEP
+MMSYSTEM\:\:Ordinal_1=WEP
+MMSYSTEM\:\:Ordinal_2=sndPlaySound
+MMSYSTEM\:\:Ordinal_5=mmsystemGetVersion
+MMSYSTEM\:\:Ordinal_6=DriverProc
+MMSYSTEM\:\:Ordinal_30=OutputDebugStr
+MMSYSTEM\:\:Ordinal_101=joyGetNumDevs
+MMSYSTEM\:\:Ordinal_102=joyGetDevCaps
+MMSYSTEM\:\:Ordinal_103=joyGetPos
+MMSYSTEM\:\:Ordinal_104=joyGetThreshold
+MMSYSTEM\:\:Ordinal_105=joyReleaseCapture
+MMSYSTEM\:\:Ordinal_106=joySetCapture
+MMSYSTEM\:\:Ordinal_107=joySetThreshold
+MMSYSTEM\:\:Ordinal_109=joySetCalibration
+MMSYSTEM\:\:Ordinal_201=midiOutGetNumDevs
+MMSYSTEM\:\:Ordinal_202=midiOutGetDevCaps
+MMSYSTEM\:\:Ordinal_203=midiOutGetErrorText
+MMSYSTEM\:\:Ordinal_204=midiOutOpen
+MMSYSTEM\:\:Ordinal_205=midiOutClose
+MMSYSTEM\:\:Ordinal_206=midiOutPrepareHeader
+MMSYSTEM\:\:Ordinal_207=midiOutUnprepareHeader
+MMSYSTEM\:\:Ordinal_208=midiOutShortMsg
+MMSYSTEM\:\:Ordinal_209=midiOutLongMsg
+MMSYSTEM\:\:Ordinal_210=midiOutReset
+MMSYSTEM\:\:Ordinal_211=midiOutGetVolume
+MMSYSTEM\:\:Ordinal_212=midiOutSetVolume
+MMSYSTEM\:\:Ordinal_213=midiOutCachePatches
+MMSYSTEM\:\:Ordinal_214=midiOutCacheDrumPatches
+MMSYSTEM\:\:Ordinal_215=midiOutGetID
+MMSYSTEM\:\:Ordinal_216=midiOutMessage
+MMSYSTEM\:\:Ordinal_301=midiInGetNumDevs
+MMSYSTEM\:\:Ordinal_302=midiInGetDevCaps
+MMSYSTEM\:\:Ordinal_303=midiInGetErrorText
+MMSYSTEM\:\:Ordinal_304=midiInOpen
+MMSYSTEM\:\:Ordinal_305=midiInClose
+MMSYSTEM\:\:Ordinal_306=midiInPrepareHeader
+MMSYSTEM\:\:Ordinal_307=midiInUnprepareHeader
+MMSYSTEM\:\:Ordinal_308=midiInAddBuffer
+MMSYSTEM\:\:Ordinal_309=midiInStart
+MMSYSTEM\:\:Ordinal_310=midiInStop
+MMSYSTEM\:\:Ordinal_311=midiInReset
+MMSYSTEM\:\:Ordinal_312=midiInGetID
+MMSYSTEM\:\:Ordinal_313=midiInMessage
+MMSYSTEM\:\:Ordinal_350=auxGetNumDevs
+MMSYSTEM\:\:Ordinal_351=auxGetDevCaps
+MMSYSTEM\:\:Ordinal_352=auxGetVolume
+MMSYSTEM\:\:Ordinal_353=auxSetVolume
+MMSYSTEM\:\:Ordinal_354=auxOutMessage
+MMSYSTEM\:\:Ordinal_401=waveOutGetNumDevs
+MMSYSTEM\:\:Ordinal_402=waveOutGetDevCaps
+MMSYSTEM\:\:Ordinal_403=waveOutGetErrorText
+MMSYSTEM\:\:Ordinal_404=waveOutOpen
+MMSYSTEM\:\:Ordinal_405=waveOutClose
+MMSYSTEM\:\:Ordinal_406=waveOutPrepareHeader
+MMSYSTEM\:\:Ordinal_407=waveOutUnprepareHeader
+MMSYSTEM\:\:Ordinal_408=waveOutWrite
+MMSYSTEM\:\:Ordinal_409=waveOutPause
+MMSYSTEM\:\:Ordinal_410=waveOutRestart
+MMSYSTEM\:\:Ordinal_411=waveOutReset
+MMSYSTEM\:\:Ordinal_412=waveOutGetPosition
+MMSYSTEM\:\:Ordinal_413=waveOutGetPitch
+MMSYSTEM\:\:Ordinal_414=waveOutSetPitch
+MMSYSTEM\:\:Ordinal_415=waveOutGetVolume
+MMSYSTEM\:\:Ordinal_416=waveOutSetVolume
+MMSYSTEM\:\:Ordinal_417=waveOutGetPlaybackRate
+MMSYSTEM\:\:Ordinal_418=waveOutSetPlaybackRate
+MMSYSTEM\:\:Ordinal_419=waveOutBreakLoop
+MMSYSTEM\:\:Ordinal_420=waveOutGetID
+MMSYSTEM\:\:Ordinal_421=waveOutMessage
+MMSYSTEM\:\:Ordinal_501=waveInGetNumDevs
+MMSYSTEM\:\:Ordinal_502=waveInGetDevCaps
+MMSYSTEM\:\:Ordinal_503=waveInGetErrorText
+MMSYSTEM\:\:Ordinal_504=waveInOpen
+MMSYSTEM\:\:Ordinal_505=waveInClose
+MMSYSTEM\:\:Ordinal_506=waveInPrepareHeader
+MMSYSTEM\:\:Ordinal_507=waveInUnprepareHeader
+MMSYSTEM\:\:Ordinal_508=waveInAddBuffer
+MMSYSTEM\:\:Ordinal_509=waveInStart
+MMSYSTEM\:\:Ordinal_510=waveInStop
+MMSYSTEM\:\:Ordinal_511=waveInReset
+MMSYSTEM\:\:Ordinal_512=waveInGetPosition
+MMSYSTEM\:\:Ordinal_513=waveInGetID
+MMSYSTEM\:\:Ordinal_514=waveInMessage
+MMSYSTEM\:\:Ordinal_601=timeGetSystemTime
+MMSYSTEM\:\:Ordinal_602=timeSetEvent
+MMSYSTEM\:\:Ordinal_603=timeKillEvent
+MMSYSTEM\:\:Ordinal_604=timeGetDevCaps
+MMSYSTEM\:\:Ordinal_605=timeBeginPeriod
+MMSYSTEM\:\:Ordinal_606=timeEndPeriod
+MMSYSTEM\:\:Ordinal_607=timeGetTime
+MMSYSTEM\:\:Ordinal_701=mciSendCommand
+MMSYSTEM\:\:Ordinal_702=mciSendString
+MMSYSTEM\:\:Ordinal_703=mciGetDeviceID
+MMSYSTEM\:\:Ordinal_706=mciGetErrorString
+MMSYSTEM\:\:Ordinal_712=mciExecute
+MMSYSTEM\:\:Ordinal_714=mciSetYieldProc
+MMSYSTEM\:\:Ordinal_715=mciGetDeviceIDFromElementID
+MMSYSTEM\:\:Ordinal_716=mciGetYieldProc
+MMSYSTEM\:\:Ordinal_717=mciGetCreatorTask
+MMSYSTEM\:\:Ordinal_1100=DrvOpen
+MMSYSTEM\:\:Ordinal_1101=DrvClose
+MMSYSTEM\:\:Ordinal_1102=DrvSendMessage
+MMSYSTEM\:\:Ordinal_1103=DrvGetModuleHandle
+MMSYSTEM\:\:Ordinal_1104=DrvDefDriverProc
+MMSYSTEM\:\:Ordinal_1210=mmioOpen
+MMSYSTEM\:\:Ordinal_1211=mmioClose
+MMSYSTEM\:\:Ordinal_1212=mmioRead
+MMSYSTEM\:\:Ordinal_1213=mmioWrite
+MMSYSTEM\:\:Ordinal_1214=mmioSeek
+MMSYSTEM\:\:Ordinal_1215=mmioGetInfo
+MMSYSTEM\:\:Ordinal_1216=mmioSetInfo
+MMSYSTEM\:\:Ordinal_1217=mmioSetBuffer
+MMSYSTEM\:\:Ordinal_1218=mmioFlush
+MMSYSTEM\:\:Ordinal_1219=mmioAdvance
+MMSYSTEM\:\:Ordinal_1220=mmioStringToFOURCC
+MMSYSTEM\:\:Ordinal_1221=mmioInstallIOProc
+MMSYSTEM\:\:Ordinal_1222=mmioSendMessage
+MMSYSTEM\:\:Ordinal_1223=mmioDescend
+MMSYSTEM\:\:Ordinal_1224=mmioAscend
+MMSYSTEM\:\:Ordinal_1225=mmioCreateChunk
+MMSYSTEM\:\:Ordinal_1226=mmioRename
+SHELL\:\:Ordinal_1=RegOpenKey
+SHELL\:\:Ordinal_2=RegCreateKey
+SHELL\:\:Ordinal_3=RegCloseKey
+SHELL\:\:Ordinal_4=RegDeleteKey
+SHELL\:\:Ordinal_5=RegSetValue
+SHELL\:\:Ordinal_6=RegQueryValue
+SHELL\:\:Ordinal_7=RegEnumKey
+SHELL\:\:Ordinal_8=WEP
+SHELL\:\:Ordinal_9=DragAcceptFiles
+SHELL\:\:Ordinal_11=DragQueryFile
+SHELL\:\:Ordinal_12=DragFinish
+SHELL\:\:Ordinal_13=DragQueryPoint
+SHELL\:\:Ordinal_20=ShellExecute
+SHELL\:\:Ordinal_21=FindExecutable
+SHELL\:\:Ordinal_22=ShellAbout
+SHELL\:\:Ordinal_34=ExtractIcon
+SHELL\:\:Ordinal_36=ExtractAssociatedIcon
+TOOLHELP\:\:Ordinal_1=WEP
+TOOLHELP\:\:Ordinal_50=GlobalHandleToSel
+TOOLHELP\:\:Ordinal_51=GlobalFirst
+TOOLHELP\:\:Ordinal_52=GlobalNext
+TOOLHELP\:\:Ordinal_53=GlobalInfo
+TOOLHELP\:\:Ordinal_54=GlobalEntryHandle
+TOOLHELP\:\:Ordinal_55=GlobalEntryModule
+TOOLHELP\:\:Ordinal_56=LocalInfo
+TOOLHELP\:\:Ordinal_57=LocalFirst
+TOOLHELP\:\:Ordinal_58=LocalNext
+TOOLHELP\:\:Ordinal_59=ModuleFirst
+TOOLHELP\:\:Ordinal_60=ModuleNext
+TOOLHELP\:\:Ordinal_61=ModuleFindName
+TOOLHELP\:\:Ordinal_62=ModuleFindHandle
+TOOLHELP\:\:Ordinal_63=TaskFirst
+TOOLHELP\:\:Ordinal_64=TaskNext
+TOOLHELP\:\:Ordinal_65=TaskFindHandle
+TOOLHELP\:\:Ordinal_66=StackTraceFirst
+TOOLHELP\:\:Ordinal_67=StackTraceCSIPFirst
+TOOLHELP\:\:Ordinal_68=StackTraceNext
+TOOLHELP\:\:Ordinal_69=ClassFirst
+TOOLHELP\:\:Ordinal_70=ClassNext
+TOOLHELP\:\:Ordinal_71=SystemHeapInfo
+TOOLHELP\:\:Ordinal_72=MemManInfo
+TOOLHELP\:\:Ordinal_73=NotifyRegister
+TOOLHELP\:\:Ordinal_74=NotifyUnRegister
+TOOLHELP\:\:Ordinal_75=InterruptRegister
+TOOLHELP\:\:Ordinal_76=InterruptUnRegister
+TOOLHELP\:\:Ordinal_77=TerminateApp
+TOOLHELP\:\:Ordinal_78=MemoryRead
+TOOLHELP\:\:Ordinal_79=MemoryWrite
+TOOLHELP\:\:Ordinal_80=TimerCount
+TOOLHELP\:\:Ordinal_81=TaskSetCSIP
+TOOLHELP\:\:Ordinal_82=TaskGetCSIP
+TOOLHELP\:\:Ordinal_83=TaskSwitch
+USER\:\:Ordinal_1=MessageBox
+USER\:\:Ordinal_6=PostQuitMessage
+USER\:\:Ordinal_7=ExitWindows
+USER\:\:Ordinal_8=WEP
+USER\:\:Ordinal_10=SetTimer
+USER\:\:Ordinal_12=KillTimer
+USER\:\:Ordinal_13=GetCurrentTime
+USER\:\:Ordinal_14=GetTimerResolution
+USER\:\:Ordinal_15=GetTickCount
+USER\:\:Ordinal_16=ClipCursor
+USER\:\:Ordinal_17=GetCursorPos
+USER\:\:Ordinal_18=SetCapture
+USER\:\:Ordinal_19=ReleaseCapture
+USER\:\:Ordinal_20=SetDoubleClickTime
+USER\:\:Ordinal_21=GetDoubleClickTime
+USER\:\:Ordinal_22=SetFocus
+USER\:\:Ordinal_23=GetFocus
+USER\:\:Ordinal_24=RemoveProp
+USER\:\:Ordinal_25=GetProp
+USER\:\:Ordinal_26=SetProp
+USER\:\:Ordinal_27=EnumProps
+USER\:\:Ordinal_28=ClientToScreen
+USER\:\:Ordinal_29=ScreenToClient
+USER\:\:Ordinal_30=WindowFromPoint
+USER\:\:Ordinal_31=IsIconic
+USER\:\:Ordinal_32=GetWindowRect
+USER\:\:Ordinal_33=GetClientRect
+USER\:\:Ordinal_34=EnableWindow
+USER\:\:Ordinal_35=IsWindowEnabled
+USER\:\:Ordinal_36=GetWindowText
+USER\:\:Ordinal_37=SetWindowText
+USER\:\:Ordinal_38=GetWindowTextLength
+USER\:\:Ordinal_39=BeginPaint
+USER\:\:Ordinal_40=EndPaint
+USER\:\:Ordinal_41=CreateWindow
+USER\:\:Ordinal_42=ShowWindow
+USER\:\:Ordinal_43=CloseWindow
+USER\:\:Ordinal_44=OpenIcon
+USER\:\:Ordinal_45=BringWindowToTop
+USER\:\:Ordinal_46=GetParent
+USER\:\:Ordinal_47=IsWindow
+USER\:\:Ordinal_48=IsChild
+USER\:\:Ordinal_49=IsWindowVisible
+USER\:\:Ordinal_50=FindWindow
+USER\:\:Ordinal_52=AnyPopup
+USER\:\:Ordinal_53=DestroyWindow
+USER\:\:Ordinal_54=EnumWindows
+USER\:\:Ordinal_55=EnumChildWindows
+USER\:\:Ordinal_56=MoveWindow
+USER\:\:Ordinal_57=RegisterClass
+USER\:\:Ordinal_58=GetClassName
+USER\:\:Ordinal_59=SetActiveWindow
+USER\:\:Ordinal_60=GetActiveWindow
+USER\:\:Ordinal_61=ScrollWindow
+USER\:\:Ordinal_62=SetScrollPos
+USER\:\:Ordinal_63=GetScrollPos
+USER\:\:Ordinal_64=SetScrollRange
+USER\:\:Ordinal_65=GetScrollRange
+USER\:\:Ordinal_66=GetDC
+USER\:\:Ordinal_67=GetWindowDC
+USER\:\:Ordinal_68=ReleaseDC
+USER\:\:Ordinal_69=setcursor
+USER\:\:Ordinal_70=SetCursorPos
+USER\:\:Ordinal_71=ShowCursor
+USER\:\:Ordinal_72=SetRect
+USER\:\:Ordinal_73=SetRectEmpty
+USER\:\:Ordinal_74=CopyRect
+USER\:\:Ordinal_75=IsRectEmpty
+USER\:\:Ordinal_76=PtInRect
+USER\:\:Ordinal_77=OffsetRect
+USER\:\:Ordinal_78=InflateRect
+USER\:\:Ordinal_79=IntersectRect
+USER\:\:Ordinal_80=UnionRect
+USER\:\:Ordinal_81=FillRect
+USER\:\:Ordinal_82=InvertRect
+USER\:\:Ordinal_83=FrameRect
+USER\:\:Ordinal_84=DrawIcon
+USER\:\:Ordinal_85=DRAWTEXT
+USER\:\:Ordinal_87=DialogBox
+USER\:\:Ordinal_88=EndDialog
+USER\:\:Ordinal_89=CreateDialog
+USER\:\:Ordinal_90=IsDialogMessage
+USER\:\:Ordinal_91=GetDlgItem
+USER\:\:Ordinal_92=SetDlgItemText
+USER\:\:Ordinal_93=GetDlgItemText
+USER\:\:Ordinal_94=SetDlgItemInt
+USER\:\:Ordinal_95=GetDlgItemInt
+USER\:\:Ordinal_96=CheckRadioButton
+USER\:\:Ordinal_97=CheckDlgButton
+USER\:\:Ordinal_98=IsDlgButtonChecked
+USER\:\:Ordinal_99=DlgDirSelect
+USER\:\:Ordinal_100=DlgDirList
+USER\:\:Ordinal_101=SendDlgItemMessage
+USER\:\:Ordinal_102=AdjustWindowRect
+USER\:\:Ordinal_103=MapDialogRect
+USER\:\:Ordinal_104=MessageBeep
+USER\:\:Ordinal_105=FlashWindow
+USER\:\:Ordinal_106=GetKeyState
+USER\:\:Ordinal_107=DefWindowProc
+USER\:\:Ordinal_108=GetMessage
+USER\:\:Ordinal_109=PeekMessage
+USER\:\:Ordinal_110=PostMessage
+USER\:\:Ordinal_111=SendMessage
+USER\:\:Ordinal_112=WaitMessage
+USER\:\:Ordinal_113=TranslateMessage
+USER\:\:Ordinal_114=DispatchMessage
+USER\:\:Ordinal_115=ReplyMessage
+USER\:\:Ordinal_116=PostAppMessage
+USER\:\:Ordinal_118=RegisterClipboardFormat
+USER\:\:Ordinal_119=GetMessagePos
+USER\:\:Ordinal_120=GetMessageTime
+USER\:\:Ordinal_121=SetWindowsHook
+USER\:\:Ordinal_122=CallWindowProc
+USER\:\:Ordinal_123=CallMsgFilter
+USER\:\:Ordinal_124=UpdateWindow
+USER\:\:Ordinal_125=InvalidateRect
+USER\:\:Ordinal_126=InvalidateRgn
+USER\:\:Ordinal_127=ValidateRect
+USER\:\:Ordinal_128=ValidateRgn
+USER\:\:Ordinal_129=GetClassWord
+USER\:\:Ordinal_130=SetClassWord
+USER\:\:Ordinal_131=GetClassLong
+USER\:\:Ordinal_132=SetClassLong
+USER\:\:Ordinal_133=GetWindowWord
+USER\:\:Ordinal_134=SetWindowWord
+USER\:\:Ordinal_135=GetWindowLong
+USER\:\:Ordinal_136=SetWindowLong
+USER\:\:Ordinal_137=OpenClipboard
+USER\:\:Ordinal_138=CloseClipboard
+USER\:\:Ordinal_139=EmptyClipboard
+USER\:\:Ordinal_140=GetClipboardOwner
+USER\:\:Ordinal_141=SetClipboardData
+USER\:\:Ordinal_142=GetClipboardData
+USER\:\:Ordinal_143=CountClipboardFormats
+USER\:\:Ordinal_144=EnumClipboardFormats
+USER\:\:Ordinal_145=RegisterWindowMessage
+USER\:\:Ordinal_146=GetClipboardFormatName
+USER\:\:Ordinal_147=SetClipboardViewer
+USER\:\:Ordinal_148=GetClipboardViewer
+USER\:\:Ordinal_149=ChangeClipboardChain
+USER\:\:Ordinal_150=LoadMenu
+USER\:\:Ordinal_151=CreateMenu
+USER\:\:Ordinal_152=DestroyMenu
+USER\:\:Ordinal_153=ChangeMenu
+USER\:\:Ordinal_154=CheckMenuItem
+USER\:\:Ordinal_155=EnableMenuItem
+USER\:\:Ordinal_156=GetSystemMenu
+USER\:\:Ordinal_157=GetMenu
+USER\:\:Ordinal_158=SetMenu
+USER\:\:Ordinal_159=GetSubMenu
+USER\:\:Ordinal_160=DrawMenuBar
+USER\:\:Ordinal_161=GetMenuString
+USER\:\:Ordinal_162=HiliteMenuItem
+USER\:\:Ordinal_163=CreateCaret
+USER\:\:Ordinal_164=DestroyCaret
+USER\:\:Ordinal_165=SetCaretPos
+USER\:\:Ordinal_166=HideCaret
+USER\:\:Ordinal_167=ShowCaret
+USER\:\:Ordinal_168=SetCaretBlinkTime
+USER\:\:Ordinal_169=GetCaretBlinkTime
+USER\:\:Ordinal_170=ArrangeIconicWindows
+USER\:\:Ordinal_171=WinHelp
+USER\:\:Ordinal_173=LoadCursor
+USER\:\:Ordinal_174=LoadIcon
+USER\:\:Ordinal_175=LoadBitmap
+USER\:\:Ordinal_176=LoadString
+USER\:\:Ordinal_177=LoadAccelerators
+USER\:\:Ordinal_178=TranslateAccelerator
+USER\:\:Ordinal_179=GetSystemMetrics
+USER\:\:Ordinal_180=GetSysColor
+USER\:\:Ordinal_181=SetSysColors
+USER\:\:Ordinal_183=GetCaretPos
+USER\:\:Ordinal_184=QuerySendMessage
+USER\:\:Ordinal_185=GRAYSTRING
+USER\:\:Ordinal_186=SwapMouseButton
+USER\:\:Ordinal_188=SetSysModalWindow
+USER\:\:Ordinal_189=GetSysModalWindow
+USER\:\:Ordinal_190=GetUpdateRect
+USER\:\:Ordinal_191=ChildWindowFromPoint
+USER\:\:Ordinal_192=InSendMessage
+USER\:\:Ordinal_193=IsClipboardFormatAvailable
+USER\:\:Ordinal_194=DlgDirSelectComboBox
+USER\:\:Ordinal_195=DlgDirListComboBox
+USER\:\:Ordinal_196=TabbedTextOut
+USER\:\:Ordinal_197=GetTabbedTextExtent
+USER\:\:Ordinal_200=OpenComm
+USER\:\:Ordinal_201=SetCommState
+USER\:\:Ordinal_202=GetCommState
+USER\:\:Ordinal_203=GetCommError
+USER\:\:Ordinal_204=ReadComm
+USER\:\:Ordinal_205=WriteComm
+USER\:\:Ordinal_206=TransmitCommChar
+USER\:\:Ordinal_207=CloseComm
+USER\:\:Ordinal_208=SetCommEventMask
+USER\:\:Ordinal_209=GetCommEventMask
+USER\:\:Ordinal_210=SetCommBreak
+USER\:\:Ordinal_211=ClearCommBreak
+USER\:\:Ordinal_212=UngetCommChar
+USER\:\:Ordinal_213=BuildCommDCB
+USER\:\:Ordinal_214=EscapeCommFunction
+USER\:\:Ordinal_215=FlushComm
+USER\:\:Ordinal_218=DialogBoxIndirect
+USER\:\:Ordinal_219=CreateDialogIndirect
+USER\:\:Ordinal_220=LoadMenuIndirect
+USER\:\:Ordinal_221=ScrollDC
+USER\:\:Ordinal_222=GetKeyboardState
+USER\:\:Ordinal_223=SetKeyboardState
+USER\:\:Ordinal_224=GetWindowTask
+USER\:\:Ordinal_225=EnumTaskWindows
+USER\:\:Ordinal_226=LockInput
+USER\:\:Ordinal_227=GetNextDlgGroupItem
+USER\:\:Ordinal_228=GetNextDlgTabItem
+USER\:\:Ordinal_229=GetTopWindow
+USER\:\:Ordinal_230=GetNextWindow
+USER\:\:Ordinal_231=GetSystemDebugState
+USER\:\:Ordinal_232=SetWindowPos
+USER\:\:Ordinal_233=SetParent
+USER\:\:Ordinal_234=UnhookWindowsHook
+USER\:\:Ordinal_235=DefHookProc
+USER\:\:Ordinal_236=GetCapture
+USER\:\:Ordinal_237=GetUpdateRgn
+USER\:\:Ordinal_238=ExcludeUpdateRgn
+USER\:\:Ordinal_239=DialogBoxParam
+USER\:\:Ordinal_240=DialogBoxIndirectParam
+USER\:\:Ordinal_241=CreateDialogParam
+USER\:\:Ordinal_242=CreateDialogIndirectParam
+USER\:\:Ordinal_243=GetDialogBaseUnits
+USER\:\:Ordinal_244=EqualRect
+USER\:\:Ordinal_245=EnableCommNotification
+USER\:\:Ordinal_246=ExitWindowsExec
+USER\:\:Ordinal_247=GetCursor
+USER\:\:Ordinal_248=GetOpenClipboardWindow
+USER\:\:Ordinal_249=GetAsyncKeyState
+USER\:\:Ordinal_250=GetMenuState
+USER\:\:Ordinal_251=SendDriverMessage
+USER\:\:Ordinal_252=OpenDriver
+USER\:\:Ordinal_253=CloseDriver
+USER\:\:Ordinal_254=GetDriverModuleHandle
+USER\:\:Ordinal_255=DefDriverProc
+USER\:\:Ordinal_256=GetDriverInfo
+USER\:\:Ordinal_257=GetNextDriver
+USER\:\:Ordinal_258=MapWindowPoints
+USER\:\:Ordinal_259=BeginDeferWindowPos
+USER\:\:Ordinal_260=DeferWindowPos
+USER\:\:Ordinal_261=EndDeferWindowPos
+USER\:\:Ordinal_262=GetWindow
+USER\:\:Ordinal_263=GetMenuItemCount
+USER\:\:Ordinal_264=GetMenuItemID
+USER\:\:Ordinal_265=ShowOwnedPopups
+USER\:\:Ordinal_266=SetMessageQueue
+USER\:\:Ordinal_267=ShowScrollBar
+USER\:\:Ordinal_268=GlobalAddAtom
+USER\:\:Ordinal_269=GlobalDeleteAtom
+USER\:\:Ordinal_270=GlobalFindAtom
+USER\:\:Ordinal_271=GlobalGetAtomName
+USER\:\:Ordinal_272=IsZoomed
+USER\:\:Ordinal_277=GetDlgCtrlID
+USER\:\:Ordinal_278=GetDesktopWindow
+USER\:\:Ordinal_282=SelectPalette
+USER\:\:Ordinal_283=RealizePalette
+USER\:\:Ordinal_284=GetFreeSystemResources
+USER\:\:Ordinal_286=GetDesktopHWND
+USER\:\:Ordinal_287=GetLastActivePopup
+USER\:\:Ordinal_288=GetMessageExtraInfo
+USER\:\:Ordinal_290=RedrawWindow
+USER\:\:Ordinal_291=SetWindowsHookEx
+USER\:\:Ordinal_292=UnhookWindowsHookEx
+USER\:\:Ordinal_293=CallNextHookEx
+USER\:\:Ordinal_294=LockWindowUpdate
+USER\:\:Ordinal_308=DefDlgProc
+USER\:\:Ordinal_309=GetClipCursor
+USER\:\:Ordinal_319=ScrollWindowEx
+USER\:\:Ordinal_331=EnableHardwareInput
+USER\:\:Ordinal_334=GetQueueStatus
+USER\:\:Ordinal_335=GetInputState
+USER\:\:Ordinal_358=IsMenu
+USER\:\:Ordinal_359=GetDCEx
+USER\:\:Ordinal_368=CopyIcon
+USER\:\:Ordinal_369=CopyCursor
+USER\:\:Ordinal_370=GetWindowPlacement
+USER\:\:Ordinal_371=SetWindowPlacement
+USER\:\:Ordinal_373=SubtractRect
+USER\:\:Ordinal_402=GetPriorityClipboardFormat
+USER\:\:Ordinal_403=UnregisterClass
+USER\:\:Ordinal_404=GetClassInfo
+USER\:\:Ordinal_406=CreateCursor
+USER\:\:Ordinal_407=CreateIcon
+USER\:\:Ordinal_410=InsertMenu
+USER\:\:Ordinal_411=AppendMenu
+USER\:\:Ordinal_412=RemoveMenu
+USER\:\:Ordinal_413=DeleteMenu
+USER\:\:Ordinal_414=ModifyMenu
+USER\:\:Ordinal_415=CreatePopupMenu
+USER\:\:Ordinal_416=TrackPopupMenu
+USER\:\:Ordinal_417=GetMenuCheckMarkDimensions
+USER\:\:Ordinal_418=SetMenuItemBitmaps
+USER\:\:Ordinal_421=wvsprintf
+USER\:\:Ordinal_422=DlgDirSelectEx
+USER\:\:Ordinal_423=DlgDirSelectComboBoxEx
+USER\:\:Ordinal_430=lstrcmp
+USER\:\:Ordinal_431=AnsiUpper
+USER\:\:Ordinal_432=AnsiLower
+USER\:\:Ordinal_433=IsCharAlpha
+USER\:\:Ordinal_434=IsCharAlphaNumeric
+USER\:\:Ordinal_435=IsCharUpper
+USER\:\:Ordinal_436=IsCharLower
+USER\:\:Ordinal_437=AnsiUpperBuff
+USER\:\:Ordinal_438=AnsiLowerBuff
+USER\:\:Ordinal_445=DefFrameProc
+USER\:\:Ordinal_447=DefMDIChildProc
+USER\:\:Ordinal_451=TranslateMDISysAccel
+USER\:\:Ordinal_452=CreateWindowEx
+USER\:\:Ordinal_454=AdjustWindowRectEx
+USER\:\:Ordinal_457=DestroyIcon
+USER\:\:Ordinal_458=DestroyCursor
+USER\:\:Ordinal_466=DrawFocusRect
+USER\:\:Ordinal_471=lstrcmpi
+USER\:\:Ordinal_472=AnsiNext
+USER\:\:Ordinal_473=AnsiPrev
+USER\:\:Ordinal_482=EnableScrollBar
+USER\:\:Ordinal_483=SystemParametersInfo
+USER\:\:Ordinal_512=WNetGetConnection
+USER\:\:Ordinal_517=WNetAddConnection
+USER\:\:Ordinal_518=WNetCancelConnection
+USER\:\:Ordinal_526=WNetDisconnectDialog
+USER\:\:Ordinal_527=WNetConnectionDialog
+VER\:\:Ordinal_1=WEP
+VER\:\:Ordinal_2=GetFileResourceSize
+VER\:\:Ordinal_3=GetFileResource
+VER\:\:Ordinal_6=GetFileVersionInfoSize
+VER\:\:Ordinal_7=GetFileVersionInfo
+VER\:\:Ordinal_8=VerFindFile
+VER\:\:Ordinal_9=VerInstallFile
+VER\:\:Ordinal_10=VerLanguageName
+VER\:\:Ordinal_11=VerQueryValue
+
+DGNSCRIP\:\:Ordinal_1=DGNSCRIPT_COMPILE
+DGNSCRIP\:\:Ordinal_2=DGNSCRIPT_GETERRORTEXT
+DGNSCRIP\:\:Ordinal_3=LIBMAIN
+DGNSCRIP\:\:Ordinal_4=DGNSCRIPT_INTERPRET
+DGNSCRIP\:\:Ordinal_5=DGNSCRIPT_GETSTATUS
+DGNSCRIP\:\:Ordinal_6=DGNINTERP_GETSTATE
+DGNSCRIP\:\:Ordinal_7=DGNINTERP_SETSTATE
+DGNSCRIP\:\:Ordinal_8=DGNINTERP_CLEARSTATE
+DGNSCRIP\:\:Ordinal_9=DGNSCRIPT_CHECKSTATE
+DGNSCRIP\:\:Ordinal_10=DGNSCRIPT_GETCMDNAME
+DGNSCRIP\:\:Ordinal_11=DGNINTERP_FORMATERRORTEXT
+DGNSCRIP\:\:Ordinal_12=DGNINTERP_GETTHREADLIST
+DGNSCRIP\:\:Ordinal_13=WEP
+DGNSCRIP\:\:Ordinal_14=DGNSCRIPT_COMPILESENTENCE
+DGNSCRIP\:\:Ordinal_15=DGNSCRIPT_FREESENTENCE
+DGNSRVR\:\:Ordinal_1=DGNSERVER_INITIALIZE
+DGNSRVR\:\:Ordinal_2=DGNSERVER_UNINITIALIZE
+DGNSRVR\:\:Ordinal_3=DGNSERVER_REGISTERMESSAGE
+DGNSRVR\:\:Ordinal_4=DGNSERVER_OPENVOC
+DGNSRVR\:\:Ordinal_5=DGNAP_DETACH
+DGNSRVR\:\:Ordinal_6=DGNAP_DESTROY
+DGNSRVR\:\:Ordinal_7=DGNAPVOC_CREATE
+DGNSRVR\:\:Ordinal_8=DGNAPSTATE_CREATE
+DGNSRVR\:\:Ordinal_9=DGNAPWORD_CREATE
+DGNSRVR\:\:Ordinal_10=DGNAP_ATTACHTOVOC
+DGNSRVR\:\:Ordinal_11=DGNAP_ATTACHTOSTATE
+DGNSRVR\:\:Ordinal_12=DGNAP_ATTACHTOWORD
+DGNSRVR\:\:Ordinal_13=DGNAP_ISATTACHEDTOVOC
+DGNSRVR\:\:Ordinal_14=DGNAP_ISATTACHEDTOSTATE
+DGNSRVR\:\:Ordinal_15=DGNAP_ISATTACHEDTOWORD
+DGNSRVR\:\:Ordinal_16=DGNVOC_CLOSE
+DGNSRVR\:\:Ordinal_17=DGNVOC_SAVE
+DGNSRVR\:\:Ordinal_18=DGNVOC_FINDSTATE
+DGNSRVR\:\:Ordinal_19=DGNAP_GETTYPE
+DGNSRVR\:\:Ordinal_20=DGNDAEMON_INITIALIZE
+DGNSRVR\:\:Ordinal_21=DGNDAEMON_UNINITIALIZE
+DGNSRVR\:\:Ordinal_22=DGNDAEMON_MICSETSTATE
+DGNSRVR\:\:Ordinal_23=DGNDAEMON_TIMERSETEVENT
+DGNSRVR\:\:Ordinal_24=DGNDAEMON_UTTSTART
+DGNSRVR\:\:Ordinal_25=DGNSERVER_SETCURRENTUSER
+DGNSRVR\:\:Ordinal_26=DGNSERVER_GETPARAMETER
+DGNSRVR\:\:Ordinal_27=DGNSERVER_SETPARAMETER
+DGNSRVR\:\:Ordinal_28=DGNWORD_GETPROP
+DGNSRVR\:\:Ordinal_29=DGNUTT_GETWORD
+DGNSRVR\:\:Ordinal_30=DGNVOC_CREATESTATE
+DGNSRVR\:\:Ordinal_31=DGNSTATE_ADDWORD
+DGNSRVR\:\:Ordinal_32=DGNSERVER_DEFPROC
+DGNSRVR\:\:Ordinal_33=DGNSERVER_SETMIC
+DGNSRVR\:\:Ordinal_34=DGNSERVER_SETRECOGSTATES
+DGNSRVR\:\:Ordinal_35=DGNINPUT_LOCK
+DGNSRVR\:\:Ordinal_36=DGNINPUT_GENEVENTS
+DGNSRVR\:\:Ordinal_37=DGNINPUT_PLAYEVENTS
+DGNSRVR\:\:Ordinal_38=DGNINPUT_PLAYSTRING
+DGNSRVR\:\:Ordinal_39=DGNUTT_GETINFO
+DGNSRVR\:\:Ordinal_40=DGNWORD_GETNAME
+DGNSRVR\:\:Ordinal_41=DGNSERVER_GETCURRENTUSER
+DGNSRVR\:\:Ordinal_42=DGNSERVER_ISVALID
+DGNSRVR\:\:Ordinal_43=DGNWORD_SETPROP
+DGNSRVR\:\:Ordinal_44=DGNWORD_FIRST
+DGNSRVR\:\:Ordinal_45=DGNWORD_LAST
+DGNSRVR\:\:Ordinal_46=DGNWORD_NEXT
+DGNSRVR\:\:Ordinal_47=DGNWORD_PREV
+DGNSRVR\:\:Ordinal_48=DGNSERVER_GETERRTEXT
+DGNSRVR\:\:Ordinal_49=DGNTASKMAP_FINDBYNAME
+DGNSRVR\:\:Ordinal_50=DGNTASKMAP_FINDBYEXENAME
+DGNSRVR\:\:Ordinal_51=DGNTASKMAP_EXEC
+DGNSRVR\:\:Ordinal_52=DGNSTATE_GETNAME
+DGNSRVR\:\:Ordinal_53=DGNSTATE_FIRST
+DGNSRVR\:\:Ordinal_54=DGNSTATE_LAST
+DGNSRVR\:\:Ordinal_55=DGNSTATE_NEXT
+DGNSRVR\:\:Ordinal_56=DGNSTATE_PREV
+DGNSRVR\:\:Ordinal_57=DGNSTATE_SETORDER
+DGNSRVR\:\:Ordinal_58=DGNSTATE_GETINFO
+DGNSRVR\:\:Ordinal_59=DGNSTATE_DESTROY
+DGNSRVR\:\:Ordinal_60=DGNSTATE_ADDINCLUDE
+DGNSRVR\:\:Ordinal_61=DGNSTATE_REMOVEINCLUDE
+DGNSRVR\:\:Ordinal_62=DGNSTATE_FIRSTINCLUDE
+DGNSRVR\:\:Ordinal_63=DGNSTATE_LASTINCLUDE
+DGNSRVR\:\:Ordinal_64=DGNSTATE_NEXTINCLUDE
+DGNSRVR\:\:Ordinal_65=DGNSTATE_PREVINCLUDE
+DGNSRVR\:\:Ordinal_66=DGNTASKMAP_SETNAME
+DGNSRVR\:\:Ordinal_67=DGNTASKMAP_GETNAME
+DGNSRVR\:\:Ordinal_68=DGNTASKMAP_GETCURRENTWINDOW
+DGNSRVR\:\:Ordinal_69=DGNSERVER_DISABLETRACKING
+DGNSRVR\:\:Ordinal_70=DGNSTATE_FINDWORD
+DGNSRVR\:\:Ordinal_71=DGNSTATE_FINDWORDBYINDEX
+DGNSRVR\:\:Ordinal_72=DGNWORD_GETINDEX
+DGNSRVR\:\:Ordinal_73=VLISTBOXWNDPROC
+DGNSRVR\:\:Ordinal_74=LBSUBCLASSPROC
+DGNSRVR\:\:Ordinal_75=WLISTWNDPROC
+DGNSRVR\:\:Ordinal_76=DGNTASKMAP_GETEXEFROMALIAS
+DGNSRVR\:\:Ordinal_77=DGNTASKMAP_GETALIASFROMEXE
+DGNSRVR\:\:Ordinal_78=DGNTASKMAP_GETACTIVETASK
+DGNSRVR\:\:Ordinal_79=DGNTASKMAP_GETEXENAME
+DGNSRVR\:\:Ordinal_80=DGNPRIVATE_GETMOVEMODEWINDOW
+DGNSRVR\:\:Ordinal_81=DGNSTATE_GETPROP
+DGNSRVR\:\:Ordinal_82=DGNSTATE_SETPROP
+DGNSRVR\:\:Ordinal_83=DGNPRIVATE_SETTUTORIALHOOK
+DGNSRVR\:\:Ordinal_84=DGNPRIVATE_GETTUTORIALHOOK
+DGNSRVR\:\:Ordinal_85=DGNDAEMON_RECOGBEGIN
+DGNSRVR\:\:Ordinal_86=DGNINPUT_PLAYBACKCOUNT
+DGNSRVR\:\:Ordinal_87=DGNSERVER_FINDVOC
+DGNSRVR\:\:Ordinal_88=DGNSERVER_GETINFO
+DGNSRVR\:\:Ordinal_89=DGNSERVER_CREATEUSER
+DGNSRVR\:\:Ordinal_90=DGNSERVER_GETVERSION
+DGNSRVR\:\:Ordinal_91=DGNSERVER_DESTROYUSER
+DGNSRVR\:\:Ordinal_92=DGNSERVER_SAVEUSER
+DGNSRVR\:\:Ordinal_93=DGNSERVER_SAVEALLUSERS
+DGNSRVR\:\:Ordinal_94=DGNSERVER_ISLOADEDUSER
+DGNSRVR\:\:Ordinal_95=DGNSERVER_GETUSERNAMES
+DGNSRVR\:\:Ordinal_96=DGNSERVER_UNLOADUSER
+DGNSRVR\:\:Ordinal_97=DGNWORD_DESTROY
+DGNSRVR\:\:Ordinal_98=DGNPRIVATE_LOGINVOCMAN
+DGNSRVR\:\:Ordinal_99=DGNPRIVATE_GETVOCMANINFO
+DGNSRVR\:\:Ordinal_100=DGNWORD_GETPROPNAMES
+DGNSRVR\:\:Ordinal_101=DGNSTATE_GETPROPNAMES
+DGNSRVR\:\:Ordinal_102=DGNAP_ISATTACHEDTOAVOC
+DGNSRVR\:\:Ordinal_103=DGNAP_ISATTACHEDTOASTATE
+DGNSRVR\:\:Ordinal_104=DGNAP_ISATTACHEDTOAWORD
+DGNSRVR\:\:Ordinal_105=DGNAP_ISDETACHED
+DGNSRVR\:\:Ordinal_106=DGNWORD_HASSAMEWORDNAME
+DGNSRVR\:\:Ordinal_107=DGNVOC_COPYSTATE
+DGNSRVR\:\:Ordinal_108=DGNSTATE_COPYWORD
+DGNSRVR\:\:Ordinal_109=DGNINPUT_FORCEUNLOCK
+DGNSRVR\:\:Ordinal_110=DGNSTATE_SETNAME
+DGNSRVR\:\:Ordinal_111=DGNSTATE_TRAIN
+DGNSRVR\:\:Ordinal_112=DGNPRIVATE_SETENVSOUNDSSTATE
+DGNSRVR\:\:Ordinal_113=DGNWORD_TRAIN
+DGNSRVR\:\:Ordinal_114=DGNVOC_TRAINWORD
+DGNSRVR\:\:Ordinal_115=DGNUTT_ISSAMEAS
+DGNSRVR\:\:Ordinal_116=DGNSTATE_FINDWORDGE
+DGNSRVR\:\:Ordinal_117=DGNVOC_FIRST
+DGNSRVR\:\:Ordinal_118=DGNVOC_NEXT
+DGNSRVR\:\:Ordinal_119=DGNVOC_LAST
+DGNSRVR\:\:Ordinal_120=DGNVOC_PREV
+DGNSRVR\:\:Ordinal_121=DGNVOC_GETPROP
+DGNSRVR\:\:Ordinal_122=DGNVOC_SETPROP
+DGNSRVR\:\:Ordinal_123=DGNVOC_SETNAME
+DGNSRVR\:\:Ordinal_124=DGNVOC_GETPROPNAMES
+DGNSRVR\:\:Ordinal_125=DGNPRIVATE_DESTROYTRAINSTATE
+DGNSRVR\:\:Ordinal_126=DGNVOC_GETNAME
+DGNSRVR\:\:Ordinal_127=DGNVOC_GETINFO
+DGNSRVR\:\:Ordinal_128=DGNDAEMON_SHUTDOWNMESSAGEBOX
+DGNSRVR\:\:Ordinal_129=DGNSERVER_GETMIC
+DGNSRVR\:\:Ordinal_130=DGNSERVER_ISUSERMODIFIED
+DGNSRVR\:\:Ordinal_131=DGNPRIVATE_GETPROFILESTRING
+DGNSRVR\:\:Ordinal_132=DGNPRIVATE_SETPROFILESTRING
+DGNSRVR\:\:Ordinal_133=DGNPRIVATE_POSTDRAGONMSG
+DGNSRVR\:\:Ordinal_134=DGNPRIVATE_GETVOICEBARUIWINDOW
+DGNSRVR\:\:Ordinal_135=DGNPRIVATE_GETINTERPRETERWINDOW
+DGNSRVR\:\:Ordinal_136=DGNPRIVATE_LOGINVOICEBARUI
+DGNSRVR\:\:Ordinal_137=DGNPRIVATE_LOGININTERPRETER
+DGNSRVR\:\:Ordinal_138=DGNWORD_SETNAME
+DGNSRVR\:\:Ordinal_139=DGNSTATE_BUILDWORD
+DGNSRVR\:\:Ordinal_140=DGNSERVER_GETERRCALLBACK
+DGNSRVR\:\:Ordinal_141=DGNSERVER_SETERRCALLBACK
+DGNSRVR\:\:Ordinal_142=DGNTASKMAP_GETMENUINFO
+DGNSRVR\:\:Ordinal_143=DGNPRIVATE_CREATEUSER
+DGNSRVR\:\:Ordinal_144=DGNSERVER_GETPROP
+DGNSRVR\:\:Ordinal_145=DGNSERVER_SETPROP
+DGNSRVR\:\:Ordinal_146=DGNSERVER_INSTALLVOC
+DGNSRVR\:\:Ordinal_147=DGNSERVER_UNINSTALLVOC
+DGNSRVR\:\:Ordinal_148=DGNSERVER_CREATEUSERVOC
+DGNSRVR\:\:Ordinal_149=DGNSERVER_FINDUSERVOC
+DGNSRVR\:\:Ordinal_150=DGNSERVER_OPENUSERVOC
+DGNSRVR\:\:Ordinal_151=DGNPRIVATE_SETUSERPROFILESTRING
+DGNSRVR\:\:Ordinal_152=DGNPRIVATE_GETUSERPROFILESTRING
+DGNSRVR\:\:Ordinal_153=DGNINPUT_LOCKCOUNT
+DGNSRVR\:\:Ordinal_154=DGNPRIVATE_SETCAPTURE
+DGNSRVR\:\:Ordinal_155=DGNPRIVATE_RELEASECAPTURE
+DGNSRVR\:\:Ordinal_156=DGNPRIVATE_GETCAPTURE
+DGNSRVR\:\:Ordinal_157=DGNPRIVATE_VBREQUEST
+DGNSRVR\:\:Ordinal_158=DGNPRIVATE_VBREPLY
+DGNSRVR\:\:Ordinal_159=DGNPRIVATE_SETCOLLECT
+DGNSRVR\:\:Ordinal_160=DGNPRIVATE_CANCELCOLLECT
+DGNSRVR\:\:Ordinal_161=DGNSERVER_SETNOTIFYWINDOW
+DGNSRVR\:\:Ordinal_162=DGNWORD_EDITDLG
+DGNSRVR\:\:Ordinal_163=DGNWORD_ADDDLG
+DGNSRVR\:\:Ordinal_164=DGNPRIVATE_SETGLOBAL
+DGNSRVR\:\:Ordinal_165=DGNAP_CREATE
+DGNSRVR\:\:Ordinal_166=DGNDAEMON_COLLECTBEGIN
+DGNSRVR\:\:Ordinal_167=DGNDAEMON_COLLECTABORT
+DGNSRVR\:\:Ordinal_168=DGNPRIVATE_COLLECTBEGIN
+DGNSRVR\:\:Ordinal_169=DGNPRIVATE_VBDLGREPLY
+DGNSRVR\:\:Ordinal_170=DGNPRIVATE_GETPUNCTUATIONFLAGS
+DGNSRVR\:\:Ordinal_171=DGNPRIVATE_SETPUNCTUATIONFLAGS
+DGNSRVR\:\:Ordinal_172=DGNSERVER_GETDICTATIONMODE
+DGNSRVR\:\:Ordinal_173=DGNSERVER_SETDICTATIONMODE
+DGNSRVR\:\:Ordinal_174=DGNPRIVATE_GETCHOICELIST
+DGNSRVR\:\:Ordinal_175=DGNPRIVATE_RERECOGNIZE
+DGNSRVR\:\:Ordinal_176=DGNSERVER_GETLATESTUTT
+DGNSRVR\:\:Ordinal_177=DGNUTT_NEXT
+DGNSRVR\:\:Ordinal_178=DGNUTT_PREV
+DGNSRVR\:\:Ordinal_179=DGNPRIVATE_PUSHUTTHISTORY
+DGNSRVR\:\:Ordinal_180=DGNPRIVATE_POPUTTHISTORY
+DGNSRVR\:\:Ordinal_181=DGNPRIVATE_SETTOPCHOICE
+DGNSRVR\:\:Ordinal_182=DGNUTT_GETPROP
+DGNSRVR\:\:Ordinal_183=DGNUTT_SETPROP
+DGNSRVR\:\:Ordinal_184=DGNPRIVATE_CANCELRERECOGNIZE
+DGNSRVR\:\:Ordinal_185=DGNPRIVATE_GETRERECOGNIZERESULTS
+DGNSRVR\:\:Ordinal_186=DGNDAEMON_RERECOGNIZE
+DGNSRVR\:\:Ordinal_187=DGNSERVER_CONTEXTUPDATED
+DGNSRVR\:\:Ordinal_188=DGNPRIVATE_SETUTTMASTER
+DGNSRVR\:\:Ordinal_189=DGNPRIVATE_SETUTTMASTERSTATE
+DGNSRVR\:\:Ordinal_190=DGNSERVER_ACKUTTACTION
+DGNSRVR\:\:Ordinal_191=INISECTIONFINDITEM
+DGNSRVR\:\:Ordinal_192=DGNPRIVATE_LOCKUTTQUEUE
+DGNSRVR\:\:Ordinal_193=DGNDAEMON_STARTUTTPROCESSING
+DGNSRVR\:\:Ordinal_194=DGNUTT_FINDWORD
+DGNSRVR\:\:Ordinal_195=DGNTASKMAP_NOTIFYONDESTROY
+DGNSRVR\:\:Ordinal_196=DGNPRIVATE_STARTWRITINGSCRIPT
+DGNSRVR\:\:Ordinal_197=DGNPRIVATE_STOPWRITINGSCRIPT
+DGNSRVR\:\:Ordinal_198=DGNPRIVATE_STARTSCORING
+DGNSRVR\:\:Ordinal_199=DGNDAEMON_TIMERTICK
+DGNSRVR\:\:Ordinal_200=DGNSERVER_GETUSERVOCS
+DGNSRVR\:\:Ordinal_201=DGNPRIVATE_VBREQUESTDLG
+DGNSRVR\:\:Ordinal_202=DGNPRIVATE_STOPSCORING
+DGNSRVR\:\:Ordinal_203=DGNPRIVATE_SETUPREADINGSCRIPT
+DGNSRVR\:\:Ordinal_204=DGNPRIVATE_STOPREADINGSCRIPT
+DGNSRVR\:\:Ordinal_205=DGNPRIVATE_GETWRITINGFILENAME
+DGNSRVR\:\:Ordinal_206=DGNPRIVATE_GETREADINGFILENAME
+DGNSRVR\:\:Ordinal_207=DGNPRIVATE_GETSCORINGFILENAME
+DGNSRVR\:\:Ordinal_208=DGNPRIVATE_CLOSEINTERPRETER
+DGNSRVR\:\:Ordinal_209=DGNPRIVATE_SETMICPRESSTOTALKHOTK
+DGNSRVR\:\:Ordinal_210=DGNPRIVATE_SETMICTOGGLEONOFFHOTK
+DGNSRVR\:\:Ordinal_211=DGNPRIVATE_GETDDWINENGINEWINDOW
+DGNSRVR\:\:Ordinal_212=DGNPRIVATE_LOGINDDWINENGINE
+DGNSRVR\:\:Ordinal_213=DGNWORD_COPYDLG
+DGNSRVR\:\:Ordinal_214=DGNWORD_MOVEDLG
+DGNSRVR\:\:Ordinal_215=DGNWORD_FINDDLG
+DGNSRVR\:\:Ordinal_216=DGNPRIVATE_CLOSEDDWINENGINE
+DGNSRVR\:\:Ordinal_217=DGNPRIVATE_STARTDDWINENGINE
+DGNSRVR\:\:Ordinal_218=DGNSERVER_STARTVOICEBAR
+DGNSRVR\:\:Ordinal_219=DGNDAEMON_UPDATETASKMAP
+DGNSRVR\:\:Ordinal_220=DGNVOC_CREATETRAININGSTATE
+DGNSRVR\:\:Ordinal_221=DGNINPUT_NAMEFROMKEY
+DGNSRVR\:\:Ordinal_222=DGNPRIVATE_SETTIMEREVENT
+DGNSRVR\:\:Ordinal_223=DGNPRIVATE_KILLTIMEREVENT
+DGNSRVR\:\:Ordinal_224=DGNINPUT_STRTOEVENTS
+DGNSRVR\:\:Ordinal_225=DGNPRIVATE_ACKCAPTURE
+DGNSRVR\:\:Ordinal_226=DGNSERVER_ADDTRACKINGSTATE
+DGNSRVR\:\:Ordinal_227=DGNPRIVATE_SETRUNSCRIPTHOTKEY
+DGNSRVR\:\:Ordinal_228=DGNSERVER_SETCONTEXT
+DGNSRVR\:\:Ordinal_229=DGNSERVER_SETCLIENTNAME
+DGNSRVR\:\:Ordinal_230=DGNSERVER_DUMPDEBUGINFO
+DGNSRVR\:\:Ordinal_231=DGNDEBUG_SDPARGETLIST
+DGNSRVR\:\:Ordinal_232=DGNDEBUG_SDPARGETTYPE
+DGNSRVR\:\:Ordinal_233=DGNDEBUG_SDPARGETVALUE
+DGNSRVR\:\:Ordinal_234=DGNDEBUG_SDPARSETVALUE
+DGNSRVR\:\:Ordinal_235=DGNSERVER_SUGGESTEDCOMPUTATION
+DGNSRVR\:\:Ordinal_236=DGNSERVER_LISTEN
+DGNSRVR\:\:Ordinal_237=DGNSERVER_HEARDWORD
+DGNSRVR\:\:Ordinal_238=USERSTATE_SETHDRAGON
+DGNSRVR\:\:Ordinal_239=USERSTATE_HDRAGON
+DGNSRVR\:\:Ordinal_240=USERSTATE_GETLASTWORDLOCATION
+DGNSRVR\:\:Ordinal_241=USERSTATE_SETLASTWORDLOCATION
+DGNSRVR\:\:Ordinal_242=USERSTATE_REPORTERROR1
+DGNSRVR\:\:Ordinal_243=USERSTATE_REPORTERROR2
+DGNSRVR\:\:Ordinal_244=USERSTATE_REPORTERROR3
+DGNSRVR\:\:Ordinal_245=USERSTATE_ISCHOICELISTCAPTURING
+DGNSRVR\:\:Ordinal_246=USERSTATE_SETCHOICELISTCAPTURING
+DGNSRVR\:\:Ordinal_247=USERSTATE_GETNEXTPENDINGERROR
+DGNSRVR\:\:Ordinal_248=INISECTIONGETITEMINT
+DGNSRVR\:\:Ordinal_249=INISECTIONSETITEMINT
+DGNSRVR\:\:Ordinal_250=INISECTIONGETITEMSTRING
+DGNSRVR\:\:Ordinal_251=INISECTIONSETITEMSTRING
+DGNSRVR\:\:Ordinal_252=INISECTIONGETITEMCOUNT
+DGNSRVR\:\:Ordinal_253=INISECTIONGETITEMNAME
+DGNSRVR\:\:Ordinal_254=USERSTATE_INIFILEGET1
+DGNSRVR\:\:Ordinal_255=USERSTATE_INIFILEGET2
+DGNSRVR\:\:Ordinal_256=USERSTATE_INIFILEGET3
+DGNSRVR\:\:Ordinal_257=USERSTATE_INIFILESET1
+DGNSRVR\:\:Ordinal_258=USERSTATE_INIFILESET2
+DGNSRVR\:\:Ordinal_259=USERSTATE_INIFILESET3
+DGNSRVR\:\:Ordinal_260=USERSTATE_INIFILELOAD
+DGNSRVR\:\:Ordinal_261=USERSTATE_INIFILEUNLOAD
+DGNSRVR\:\:Ordinal_262=USERSTATE_INIFILESAVE
+DGNSRVR\:\:Ordinal_263=USERSTATE_INIFILEDELETE
+DGNSRVR\:\:Ordinal_264=USERSTATE_INIFILETEST1
+DGNSRVR\:\:Ordinal_265=USERSTATE_INIFILETEST2
+DGNSRVR\:\:Ordinal_266=USERSTATE_INIFILETEST3
+DGNSRVR\:\:Ordinal_267=USERSTATE_INIFILEGETMIN
+DGNSRVR\:\:Ordinal_268=USERSTATE_INIFILEGETMAX
+DGNSRVR\:\:Ordinal_269=USERSTATE_INIFILEGETDEFAULT1
+DGNSRVR\:\:Ordinal_270=USERSTATE_INIFILEGETDEFAULT3
+DGNSRVR\:\:Ordinal_271=DGNINPUT_RESUMEPLAYBACK
+DGNSRVR\:\:Ordinal_272=DGNPRIVATE_MICSETSLEEPING
+DGNSRVR\:\:Ordinal_273=DGNPRIVATE_MICSETFAKE
+DGNSRVR\:\:Ordinal_274=DGNAP_UNLOCK
+DGNSRVR\:\:Ordinal_275=DGNAP_LOCK
+DGNSRVR\:\:Ordinal_276=DGNSERVER_GETMODIFICATIONFLAGS
+DGNSRVR\:\:Ordinal_277=DGNPRIVATE_SETDICTATIONSTATE
+DGNSRVR\:\:Ordinal_278=DGNPRIVATE_USERSELECTION
+DGNSRVR\:\:Ordinal_279=DGNPRIVATE_RECOGNIZE
+DGNSRVR\:\:Ordinal_280=DGNSTATE_GETNAMES
+DGNSRVR\:\:Ordinal_281=DGNPRIVATE_GETUTTDISTANCES
+DGNSRVR\:\:Ordinal_282=INISECTIONGETITEMMIN
+DGNSRVR\:\:Ordinal_283=INISECTIONGETITEMMAX
+DGNSRVR\:\:Ordinal_284=INISECTIONGETITEMDEFAULT
+DGNSRVR\:\:Ordinal_285=DGNTASKMAP_GETTASKMAP
+DGNSRVR\:\:Ordinal_286=DGNPRIVATE_ISPHYSUSERVOCLOADED
+DGNSRVR\:\:Ordinal_287=DGNDAEMON_MICSETPARAMETERS
+DGNSRVR\:\:Ordinal_288=DGNSERVER_GETUSERCHANGEDCOUNT
+DGNSRVR\:\:Ordinal_289=DGNPRIVATE_GETUTTRECOGSTATES
+DGNSRVR\:\:Ordinal_290=DGNWORD_DESTROYBUTLEAVE0MODEL
+DGNSRVR\:\:Ordinal_291=DGNVOC_DESTROY
+DGNSRVR\:\:Ordinal_292=DGNSERVER_CREATEVOC
+DGNSRVR\:\:Ordinal_293=DGNPRIVATE_GETUSERFILEINFO
+DGNSRVR\:\:Ordinal_294=DGNPRIVATE_GETVOCFILEINFO
+DGNSRVR\:\:Ordinal_295=DGNPRIVATE_GETDRIVERVERSION
+DGNSRVR\:\:Ordinal_296=DGNPRIVATE_STARTREADINGSCRIPT
+DGNSRVR\:\:Ordinal_297=DGNPRIVATE_TOGGLECHANNELCLAIM
+DGNSRVR\:\:Ordinal_298=DGNPRIVATE_SAVEUSER
+DGNSRVR\:\:Ordinal_299=DGNPRIVATE_RESTOREUSER
+DGNSRVR\:\:Ordinal_300=DGNDAEMON_TOGGLECHANNELCLAIM
+DGNSRVR\:\:Ordinal_301=DGNPRIVATE_VBDIALOG
+DGNSRVR\:\:Ordinal_302=DGNPRIVATE_WORDDELETETRAINING
+DGNSRVR\:\:Ordinal_303=DGNUTT_GETWORDNAME
+DGNSRVR\:\:Ordinal_304=DGNUTT_GETWORDANDOPEN
+DGNSRVR\:\:Ordinal_305=DGNSERVER_USERHASBACKUP
+DGNSRVR\:\:Ordinal_306=DGNSERVER_GETTRACKINGVOC
+DGNSRVR\:\:Ordinal_307=DGNSERVER_CLOSEALLVOCS
+DGNSRVR\:\:Ordinal_308=DGNSERVER_CLOSEALLUSERVOCS
+DGNSRVR\:\:Ordinal_309=DGNWORD_GETWORDDATA
+DGNSRVR\:\:Ordinal_310=DGNSERVER_STRCMP
+DGNSRVR\:\:Ordinal_311=DGNSERVER_STRNCMP
+DGNSRVR\:\:Ordinal_312=DGNSERVER_STRCMPI
+DGNSRVR\:\:Ordinal_313=DGNSERVER_STRNCMPI
+DGNSRVR\:\:Ordinal_314=DGNSERVER_TOUPPER
+DGNSRVR\:\:Ordinal_315=DGNSERVER_STRUPR
+DGNSRVR\:\:Ordinal_316=DGNSERVER_TOLOWER
+DGNSRVR\:\:Ordinal_317=DGNSERVER_STRLWR
+DGNSRVR\:\:Ordinal_318=DGNPRIVATE_LOGERROR
+DGNSRVR\:\:Ordinal_319=WEP
+DGNSRVR\:\:Ordinal_320=LIBMAIN
+DGNSRVR\:\:Ordinal_321=DGNSERVER_STOPLISTENING
+DGNSRVR\:\:Ordinal_322=@GETMSGHOOK$QIUIL
+DGNSRVR\:\:Ordinal_323=@JPLAYHOOK$QIUSUL
+DGNSRVR\:\:Ordinal_324=@JRECORDHOOK$QIUSUL
+DGNSRVR\:\:Ordinal_325=@KEYHOOK$QIUSUL
+DGNSRVR\:\:Ordinal_326=@MOUSEHOOK$QIUIL
+DGNSRVR\:\:Ordinal_327=_mySdErrorHandler
+DGNSRVR\:\:Ordinal_328=@CWHOOK$QIUSN7CWH_MSG
+DGNSRVR\:\:Ordinal_329=@CBTHOOK$QIUSUL
+DGNSRVR\:\:Ordinal_330=_UttFileEventHandler
+DGNSRVR\:\:Ordinal_331=_watchDog
+DGNSRVR\:\:Ordinal_332=_watchDogForListMatches
+DGNSRVR\:\:Ordinal_333=_UttEventHandler
+DGNSRVR\:\:Ordinal_334=@MultimediaCallback$qi
+DGNSRVR\:\:Ordinal_335=@RPCWNDPROC$QPX6HWND__UIUIL
+DGNSRVR\:\:Ordinal_338=DGNPRIVATE_GETDAEMONTASK
+DGNSRVR\:\:Ordinal_339=DGNPRIVATE_SETMIC
+DGNSRVR\:\:Ordinal_340=DGNPRIVATE_HAVEMEMFORUSER
+DGNSRVR\:\:Ordinal_341=DGNPRIVATE_UPGRADEUSER
+DGNSRVR\:\:Ordinal_342=DGNSERVER_STRNCMPII
+DGNSRVR\:\:Ordinal_343=DGNSERVER_STRCMPII
+DGNSRVR\:\:Ordinal_344=DGNSERVER_STRMATCHII
+DGNSRVR\:\:Ordinal_345=DGNSERVER_EXTENDEDTRACKING
+DGNSRVR\:\:Ordinal_346=DGNPRIVATE_ENCRYPT
+DGNSRVR\:\:Ordinal_347=DGNPRIVATE_DECRYPT
+DGNSRVR\:\:Ordinal_348=USERSTATE_REPORTERROR4
+DGNSRVR\:\:Ordinal_349=DGNSERVER_OPENUSERVOCFROMMODULE
+DGNSRVR\:\:Ordinal_350=DGNSERVER_GETNOTIFYWINDOW
+DGNSRVR\:\:Ordinal_351=DGNSERVER_LINKUSERCRVOC
+DGNSRVR\:\:Ordinal_352=DGNVOC_COPYDLG
+DGNSRVR\:\:Ordinal_353=DGNVOC_MOVEDLG
+DGNSRVR\:\:Ordinal_354=DGNVOC_DELETEDLG
+DGNSRVR\:\:Ordinal_355=DGNUTT_GETCRWORD
+DGNSRVR\:\:Ordinal_356=DGNUTT_GETCRSENTENCE
+DGNSRVR\:\:Ordinal_357=DGNUTT_GETCRINFO
+DGNSRVR\:\:Ordinal_358=DGNSTATE_HASSENTENCES
+DGNSRVR\:\:Ordinal_359=DGNPRIVATE_GETCRCHOICELIST
+DGNSRVR\:\:Ordinal_360=DGNGROUPBOXWNDPROC
+DGNSRVR\:\:Ordinal_361=DGNPROMPTWNDPROC
+DGNSRVR\:\:Ordinal_362=DGNFILEBUTTONWNDPROC
+DGNSRVR\:\:Ordinal_363=DGNSLIDECONTROLWNDPROC
+DGNSRVR\:\:Ordinal_364=LASTRECOGNIZEDWORDWNDPROC
+DGNSRVR\:\:Ordinal_365=MICBUTTONWNDPROC
+DGNSRVR\:\:Ordinal_366=DGNHOTKEYEDITWNDPROC
+DGNSRVR\:\:Ordinal_367=INISECTIONGETITEMDEFAULTSTRING
+DGNSRVR\:\:Ordinal_368=DGNUTT_FINDSENTENCE
+DGNSRVR\:\:Ordinal_369=DGNPRIVATE_SETTOPCRCHOICE
+DGNSRVR\:\:Ordinal_370=DGNPRIVATE_GETCRNAME
+DGNSRVR\:\:Ordinal_371=DGNSENTENCE_INSTANTIATE
+DGNSRVR\:\:Ordinal_372=DGNPRIVATE_SETTOPQTCHOICE
+DGNSRVR\:\:Ordinal_373=DGNPRIVATE_GETQTNAME
+DGNSRVR\:\:Ordinal_374=DGNUTT_FINDPHRASE
+DGNSRVR\:\:Ordinal_375=DGNUTT_GETPHRASEPREFIX
+DGNSRVR\:\:Ordinal_376=DGNPRIVATE_USESYSTEMCOLORS
+DGNSRVR\:\:Ordinal_377=DGNPRIVATE_LEARNCORRECTEDWORDS
+DGNSRVR\:\:Ordinal_378=DGNSERVER_REJECTPARTIALSENTENCE
+DGNSRVR\:\:Ordinal_379=DGNDAEMON_GETSTATISTICS
+DGNSRVR\:\:Ordinal_380=DGNDAEMON_RESETSTATISTICS
+DGNSRVR\:\:Ordinal_381=DGNPRIVATE_LOADOVERRIDES
+DGNSRVR\:\:Ordinal_382=DGNSERVER_VALIDATECURRENTUSER
+DGNSRVR\:\:Ordinal_383=DGNPRIVATE_CHECKUPGRADEUSER
+DGNSRVR\:\:Ordinal_384=DGNUTT_GETCRFRAGMENTS
+DGNSRVR\:\:Ordinal_385=DGNUTT_WRITE
+DGNSRVR\:\:Ordinal_386=DGNPRIVATE_PLAYSYSTEMSTRING
+DGNSRVR\:\:Ordinal_387=DGNPRIVATE_SETNOPREFILTERSTATE
+DGNSRVR\:\:Ordinal_388=DGNINPUT_RESETKEYCOUNT
+DGNSRVR\:\:Ordinal_389=DGNINPUT_ADDKEYCOUNT
+DGNSRVR\:\:Ordinal_390=DGNINPUT_GETKEYCOUNT
+DGNSRVR\:\:Ordinal_391=DGNSTATE_COPYWORDPROPS
+DGNSRVR\:\:Ordinal_392=DGNSERVER_SETLASTRECOGNIZEDWORD
+DGNSRVR\:\:Ordinal_393=DGNPRIVATE_ISTASKALLOWED
+DGNSRVR\:\:Ordinal_394=DGNPRIVATE_ENABLETASK
+DGNSRVR\:\:Ordinal_395=DGNPRIVATE_ISWINNT
+DGNSRVR\:\:Ordinal_396=DGNPRIVATE_ISWIN40
+DGNSRVR\:\:Ordinal_397=DGNDAEMON_HOOK32NOTIFY
+DGNSRVR\:\:Ordinal_398=DGNTASKMAP_GETACTIVEANDFOCUS
+DGNSRVR\:\:Ordinal_399=DGNPRIVATE_TTSPLAYSTRING
+DGNSRVR\:\:Ordinal_400=DGNPRIVATE_TTSABORT
+DGNSRVR\:\:Ordinal_401=DGNPRIVATE_TTSDOOPTIONSDLG
+DGNSRVR\:\:Ordinal_402=DGNDAEMON_TTSCOMPLETE
+DGNSRVR\:\:Ordinal_403=DGNPRIVATE_TTSISENABLED
+DGNSRVR\:\:Ordinal_404=DGNPRIVATE_TTSISBUSY
+DGNSRVR\:\:Ordinal_405=DGNPRIVATE_GETTTSSERVERVERSION
+DGNSRVR\:\:Ordinal_406=DGNWORD_BUILDDLG
+DGNSRVR\:\:Ordinal_407=DGNSTATE_BUILDPRON
+DGNSRVR\:\:Ordinal_408=DGNVOC_LOADPRONGUESS
+DGNSRVR\:\:Ordinal_409=DGNVOC_UNLOADPRONGUESS
+DGNSRVR\:\:Ordinal_410=DGNSERVER_ISPRONGUESSERLOADED
+DGNSRVR\:\:Ordinal_411=DGNSERVER_HASPRONDATA
+DGNSRVR\:\:Ordinal_412=DGNSERVER_SETTASK
+DGNSRVR\:\:Ordinal_413=DGNDAEMON_GETSTATE
+DGNSRVR\:\:Ordinal_414=DGNINPUT_GETPLAYBACKDELAYRANGE
+DGNSRVR\:\:Ordinal_415=DGNINPUT_GETPLAYBACKDELAY
+DGNSRVR\:\:Ordinal_416=DGNINPUT_SETPLAYBACKDELAY
+DRAGDEV\:\:Ordinal_1=WEP
+DRAGDEV\:\:Ordinal_2=FEP_WAVE_GETNEWUTTERANCE_ERROR
+DRAGDEV\:\:Ordinal_3=FEP_MICON_ERROR
+DRAGDEV\:\:Ordinal_4=DEVOPEN
+DRAGDEV\:\:Ordinal_5=DEVCLOSE
+DRAGDEV\:\:Ordinal_6=DEVREAD
+DRAGDEV\:\:Ordinal_7=GETDEVERROR
+DRAGDEV\:\:Ordinal_8=GETNUMUNREADITEMS
+DRAGDEV\:\:Ordinal_9=FEP_MICON
+DRAGDEV\:\:Ordinal_10=FEP_STOP
+DRAGDEV\:\:Ordinal_11=FEP_STATUS
+DRAGDEV\:\:Ordinal_12=FEP_LISTEN
+DRAGDEV\:\:Ordinal_13=FEP_CALPARS
+DRAGDEV\:\:Ordinal_14=FEP_GETPAR
+DRAGDEV\:\:Ordinal_15=FEP_SETPAR
+DRAGDEV\:\:Ordinal_16=FEP_SAMPLE
+DRAGDEV\:\:Ordinal_17=FEP_RECORD
+DRAGDEV\:\:Ordinal_18=FEP_PLAY
+DRAGDEV\:\:Ordinal_19=FEP_FLUSHQUE
+DRAGDEV\:\:Ordinal_20=FEP_BEGSIL
+DRAGDEV\:\:Ordinal_21=FEP_LPKT
+DRAGDEV\:\:Ordinal_22=ERR_SCODE
+DRAGDEV\:\:Ordinal_23=FEP_DEFPAR
+DRAGDEV\:\:Ordinal_24=FEP_ADDBUFFER_ERROR
+DRAGDEV\:\:Ordinal_25=SENDWAVEBUF
+DRAGDEV\:\:Ordinal_26=OPENWAVERECORD
+DRAGDEV\:\:Ordinal_27=CLOSEWAVERECORD
+DRAGDEV\:\:Ordinal_28=FEP_SETMICCALLBACK
+DRAGDEV\:\:Ordinal_29=FEP_SETMICVOLUME
+DRAGDEV\:\:Ordinal_30=FEP_GETMICVOLUME
+DRAGDEV\:\:Ordinal_31=FEPGETCHANNELINFO
+DRAGDEV\:\:Ordinal_32=FEPSETSPECIFICDEVICE
+DRAGDEV\:\:Ordinal_33=FEPGETUTTMEASURE
+DRAGDEV\:\:Ordinal_34=FEP_OPENPLAY
+DRAGDEV\:\:Ordinal_35=FEP_CLOSEPLAY
+DRAGDEV\:\:Ordinal_36=FEP_ADDBUFFER
+DRAGDEV\:\:Ordinal_37=FEP_STARTPLAY
+DRAGDEV\:\:Ordinal_38=FEP_STOPPLAY
+DRAGDEV\:\:Ordinal_39=FEP_STATUSPLAY
+DRAGDEV\:\:Ordinal_40=FEP_RESETPLAY
+DRAGDEV\:\:Ordinal_41=FEP_OPENPLAY_ERROR
+DRAGDEV\:\:Ordinal_42=FEP_WAVE_OPEN
+DRAGDEV\:\:Ordinal_43=FEP_WAVE_CLOSE
+DRAGDEV\:\:Ordinal_44=FEP_WAVE_GETWAVEWITHINDEX
+DRAGDEV\:\:Ordinal_45=FEP_WAVE_SAVEUTTWAVE
+DRAGDEV\:\:Ordinal_46=FEP_WAVE_READUTTWAVE
+DRAGDEV\:\:Ordinal_47=FEP_WAVE_PLAYBACK
+DRAGDEV\:\:Ordinal_48=FEP_WAVE_ALLOCWAVE
+DRAGDEV\:\:Ordinal_49=FEP_WAVE_FREEWAVE
+DRAGDEV\:\:Ordinal_50=FEP_WAVE_PLAYUTTERANCE
+DRAGDEV\:\:Ordinal_51=FEP_WAVE_GETNEWUTTERANCE
+DRAGDEV\:\:Ordinal_52=FEP_WAVE_GETLASTUTTERANCE
+DRAGDEV\:\:Ordinal_53=FEP_WAVE_GETUTTERANCEWITHINDEX
+DRAGDEV\:\:Ordinal_54=FEP_WAVE_GETWORKINGBUFFER
+DRAGDEV\:\:Ordinal_55=FEP_WAVE_GETFRAMECOUNT
+DRAGDEV\:\:Ordinal_56=FEP_WAVE_GETHEADER
+DRAGDEV\:\:Ordinal_57=FEP_GETHINSTANCE
+DRAGDEV\:\:Ordinal_58=ERR_SCODE_ERROR
+DRAGDEV\:\:Ordinal_59=FEP_WAVE_READUTTWAVE_ERROR
+DRAGDEV\:\:Ordinal_60=DEVOPEN_ERROR
+DRAGDEV\:\:Ordinal_61=FEP_PLAY_ERROR
+DRAGDEV\:\:Ordinal_62=FEP_WAVE_SAVEUTTWAVE_ERROR
+DRAGDEV\:\:Ordinal_63=GETDEVERROR_ERROR
+DRAGDEV\:\:Ordinal_64=DEVCLOSE_ERROR
+DRAGDEV\:\:Ordinal_65=FEP_STOPPLAY_ERROR
+DRAGDEV\:\:Ordinal_66=FEP_STATUSPLAY_ERROR
+DRAGDEV\:\:Ordinal_67=OPENWAVERECORD_ERROR
+DRAGDEV\:\:Ordinal_68=FEP_SETMICCALLBACK_ERROR
+DRAGDEV\:\:Ordinal_69=FEP_RECORD_ERROR
+DRAGDEV\:\:Ordinal_70=FEP_WAVE_GETWAVEWITHINDEX_ERROR
+DRAGDEV\:\:Ordinal_71=FEP_LPKT_ERROR
+DRAGDEV\:\:Ordinal_72=FEP_SETPAR_ERROR
+DRAGDEV\:\:Ordinal_73=FEP_SAMPLE_ERROR
+DRAGDEV\:\:Ordinal_74=FEP_STARTPLAY_ERROR
+DRAGDEV\:\:Ordinal_75=FEP_GETHINSTANCE_ERROR
+DRAGDEV\:\:Ordinal_76=FEP_WAVE_GETWORKINGBUFFER_ERROR
+DRAGDEV\:\:Ordinal_77=SENDWAVEBUF_ERROR
+DRAGDEV\:\:Ordinal_78=FEP_STATUS_ERROR
+DRAGDEV\:\:Ordinal_79=FEP_STOP_ERROR
+DRAGDEV\:\:Ordinal_80=CLOSEWAVERECORD_ERROR
+DRAGDEV\:\:Ordinal_81=FEP_CALPARS_ERROR
+DRAGDEV\:\:Ordinal_82=FEPGETCHANNELINFO_ERROR
+DRAGDEV\:\:Ordinal_83=FEP_CLOSEPLAY_ERROR
+DRAGDEV\:\:Ordinal_84=FEP_WAVE_OPEN_ERROR
+DRAGDEV\:\:Ordinal_85=FEP_WAVE_PLAYUTTERANCE_ERROR
+DRAGDEV\:\:Ordinal_86=FEP_WAVE_GETLASTUTTERANCE_ERROR
+DRAGDEV\:\:Ordinal_87=FEP_WAVE_GETFRAMECOUNT_ERROR
+DRAGDEV\:\:Ordinal_88=FEP_WAVE_GETHEADER_ERROR
+DRAGDEV\:\:Ordinal_89=GETNUMUNREADITEMS_ERROR
+DRAGDEV\:\:Ordinal_90=FEP_GETMICVOLUME_ERROR
+DRAGDEV\:\:Ordinal_91=FEP_GETPAR_ERROR
+DRAGDEV\:\:Ordinal_92=FEPSETSPECIFICDEVICE_ERROR
+DRAGDEV\:\:Ordinal_93=FEP_RESETPLAY_ERROR
+DRAGDEV\:\:Ordinal_94=FEP_SETMICVOLUME_ERROR
+DRAGDEV\:\:Ordinal_95=FEP_DEFPAR_ERROR
+DRAGDEV\:\:Ordinal_96=FEP_LISTEN_ERROR
+DRAGDEV\:\:Ordinal_97=FEP_BEGSIL_ERROR
+DRAGDEV\:\:Ordinal_98=LIBMAIN
+DRAGDEV\:\:Ordinal_99=FEP_FLUSHQUE_ERROR
+DRAGDEV\:\:Ordinal_100=FEP_WAVE_PLAYBACK_ERROR
+DRAGDEV\:\:Ordinal_101=FEP_WAVE_CLOSE_ERROR
+DRAGDEV\:\:Ordinal_102=FEPGETUTTMEASURE_ERROR
+DRAGDEV\:\:Ordinal_103=DEVREAD_ERROR
+DRAGDEV\:\:Ordinal_104=FEP_WAVE_ALLOCWAVE_ERROR
+DRAGDEV\:\:Ordinal_105=FEP_WAVE_GETUTTERANCEWITHINDEX_E
+DRAGDEV\:\:Ordinal_106=FEP_WAVE_FREEWAVE_ERROR
+DRAGON\:\:Ordinal_1=WEP
+DRAGON\:\:Ordinal_2=@TIMERPROC$QUIUIUIUL
+DRAGON\:\:Ordinal_6=SDXDISPATCH
diff --git a/Ghidra/Features/Base/ghidra_scripts/FixPascalCallingConvention.java b/Ghidra/Features/Base/ghidra_scripts/FixPascalCallingConvention.java
new file mode 100644
index 000000000..10d3f45b5
--- /dev/null
+++ b/Ghidra/Features/Base/ghidra_scripts/FixPascalCallingConvention.java
@@ -0,0 +1,280 @@
+
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+// Script ensures that the PASCAL calling convention replaces STDCALL
+// on function parameters and changes the stack reference for left-to-
+// right stacking.  On the way, it also ensures that all Thunks are
+// also converted.  This applies to Windows 16-bit apps.
+//
+//@category Repair
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+import ghidra.app.script.GhidraScript;
+import ghidra.program.model.address.Address;
+import ghidra.program.model.address.AddressSet;
+import ghidra.program.model.data.GenericCallingConvention;
+import ghidra.program.model.listing.Function;
+import ghidra.program.model.listing.FunctionIterator;
+import ghidra.program.model.listing.FunctionManager;
+import ghidra.program.model.listing.Parameter;
+import ghidra.program.model.listing.ParameterImpl;
+import ghidra.program.model.listing.VariableStorage;
+import ghidra.program.model.pcode.Varnode;
+import ghidra.program.model.symbol.SourceType;
+import ghidra.util.exception.DuplicateNameException;
+import ghidra.util.exception.InvalidInputException;
+
+public class FixPascalCallingConvention extends GhidraScript {
+
+	private static final String PASCAL16FAR = "__pascal16far";
+
+	private int cntFnsUpdated;
+	private int cntParamsTotal;
+	private int cntParamsReplaced;
+	private int cntConvertionTotal;
+	private int cntConvertionChanged;
+
+	private List<String> warningMessages = new ArrayList<String>();
+
+	@Override
+	public void run() throws Exception {
+
+		// reset for this run
+		cntConvertionTotal = 0;
+		cntConvertionChanged = 0;
+		cntFnsUpdated = 0;
+		cntParamsTotal = 0;
+		cntParamsReplaced = 0;
+
+		warningMessages.clear();
+
+		if (currentProgram != null) {
+			FunctionManager fnMgr = currentProgram.getFunctionManager();
+			if (fnMgr == null) {
+				return;
+			}
+
+			Iterator<Function> functions = null;
+
+			// add function if pointing at its entry point ...
+			if (isAddressAtFunctionStart(fnMgr, currentAddress)) {
+				functions = fnMgr.getFunctionsOverlapping(new AddressSet(currentAddress));
+			}
+
+			// ... if not pointing at start of any function, try those currently selected
+			// ...
+			if (((functions == null) || !functions.hasNext()) && (currentSelection != null)) {
+				functions = fnMgr.getFunctionsOverlapping(currentSelection);
+			}
+
+			// ... otherwise, choose them all
+			if ((functions == null) || !functions.hasNext()) {
+				functions = fnMgr.getFunctions(true);
+			}
+
+			// update details
+			doRun(functions);
+
+			// build popup information
+			String buf = "Update " + cntConvertionChanged
+					+ " calling convertions out of " + cntConvertionTotal + " to " + PASCAL16FAR
+					+ ".\n\nUpdated " + cntFnsUpdated + " functions having " + cntParamsReplaced
+					+ " parameters reversed out of " + cntParamsTotal + " parameters found.";
+			if (!warningMessages.isEmpty()) {
+				buf = buf + "\n\n" + String.join("\n\n", warningMessages);
+			}
+
+			popup(buf);
+
+		}
+	}
+
+	/**
+	 * @param fnMgr
+	 * @param address
+	 * @return
+	 */
+	private boolean isAddressAtFunctionStart(FunctionManager fnMgr, Address address) {
+		boolean isAtStart = false;
+
+		if ((address != null) && fnMgr.isInFunction(address)) {
+			Function func = fnMgr.getFunctionContaining(address);
+			isAtStart = ((func != null) && (func.getEntryPoint().compareTo(address) == 0));
+		}
+
+		return isAtStart;
+	}
+
+	/**
+	 * Do for all function in program
+	 */
+	protected void doRun() {
+		doRun(currentProgram.getFunctionManager().getFunctions(true));
+	}
+
+	/**
+	 * @param functions
+	 */
+	private void doRun(Iterator<Function> functions) {
+		while (functions.hasNext()) {
+			if ((getMonitor() != null) && getMonitor().isCancelled()) {
+				return;
+			}
+
+			doRun(functions.next());
+		}
+	}
+
+	/**
+	 * Do for individually identified function
+	 *
+	 * @param func this function
+	 * @throws InvalidInputException
+	 */
+	protected void doRun(Function func) {
+
+		try {
+			println("Before: " + func.getName() + ": " + func.getCallingConventionName()
+					+ " and isExternal()=" + func.isExternal() + ", isThunk()=" + func.isThunk()
+					+ getDescription(func));
+
+			if (!func.getCallingConventionName().contains(GenericCallingConvention.pascal.name())
+					&& (func.isExternal() || func.isThunk())) {
+				try {
+					++cntConvertionTotal;
+					func.setCallingConvention(PASCAL16FAR);
+					++cntConvertionChanged;
+				} catch (InvalidInputException e) {
+					warningMessages.add("Failed to change function '" + func.getName() + "' from "
+							+ func.getCallingConventionName() + " to " + PASCAL16FAR + ".");
+				}
+			}
+
+			// ensure External and Thunks were updated above!
+			if (!func.getCallingConventionName().contains(GenericCallingConvention.pascal.name())) {
+				return;
+			}
+
+			// only applicable to functions with 2 or more parameters
+			int paramCnt = func.getParameterCount();
+			if (paramCnt < 2) {
+				return;
+			}
+
+			int firstLoc = func.getParameter(0).getStackOffset();
+			int lastLoc = func.getParameter(paramCnt - 1).getStackOffset();
+			// is already reversed
+			if (lastLoc < firstLoc) {
+				return;
+			}
+
+			++cntFnsUpdated;
+
+			List<ParameterImpl> newParams = new ArrayList<>();
+
+			for (int paramPos = paramCnt - 1; paramPos >= 0; --paramPos) {
+				++cntParamsTotal;
+				Parameter param = func.getParameter(paramPos);
+				Varnode varnode = param.getLastStorageVarnode();
+				Address addr = varnode.getAddress();
+				if (!addr.isStackAddress()) {
+					println("Param '" + param.getName() + "' isn't on the stack!");
+					continue;
+				}
+
+				try {
+					VariableStorage storage = new VariableStorage(currentProgram, firstLoc,
+							varnode.getSize());
+//				if (param instanceof ParameterDB) {
+//					ParameterDB paramDB = (ParameterDB) param;
+//					paramDB.setDynamicStorage(storage);
+//				} else {
+//					println("SCREWED");
+//				}
+
+					ParameterImpl pi = new ParameterImpl(param.getName(), param.getDataType(),
+							storage, currentProgram);
+
+					newParams.add(pi);
+
+					firstLoc += varnode.getSize();
+
+					func.removeParameter(paramPos); // Had to use!
+				} catch (InvalidInputException e) {
+					warningMessages.add("Unable to adjust storage location for function "
+							+ func.getName() + ", parameter " + param.getName() + ".");
+				}
+			}
+
+			SourceType source = func.getSignatureSource();
+			StringBuffer buf = new StringBuffer();
+			for (int paramPos = paramCnt - 1; paramPos >= 0; --paramPos) {
+				ParameterImpl param = newParams.get(paramPos);
+				try {
+					buf.append(" ").append(param.getName()).append("[")
+							.append(param.getLastStorageVarnode().toString()).append("]");
+					func.setCustomVariableStorage(true); // TODO: should not need to be "Custom"!
+					func.addParameter(param, source); // Had to use!
+
+					++cntParamsReplaced;
+				} catch (DuplicateNameException | InvalidInputException e) {
+					warningMessages.add("Failed to reinsert function " + func.getName()
+							+ " parameter " + param.getName() + ".");
+				}
+			}
+			println("Params: " + buf.toString());
+
+		} finally {
+			println(" After: " + func.getName() + ":" + getDescription(func));
+		}
+
+//		The code below failed.
+//		try {
+//			func.replaceParameters(newParams, FunctionUpdateType.CUSTOM_STORAGE, true, func.getSignatureSource());
+//			cntParamsReplaced += newParams.size();
+//			++cntTotalFns;
+//			println(" After: " + func.getName() + ":" + getDesc(func));
+//		}
+//		catch (InvalidInputException e) {
+//			println("Failed to replace params for " + func.getName() + "@" + func.getEntryPoint() + ":" +
+//					e.toString());
+//			try {
+//				func.replaceParameters(newParams, FunctionUpdateType.CUSTOM_STORAGE, true, func.getSignatureSource());
+//			}
+//			catch (InvalidInputException e2) {
+//				println("Failed to replace params for " + func.getName() + "@" + func.getEntryPoint() + ":" +
+//						e2.toString());
+//			}
+//		}
+	}
+
+	/**
+	 * @param f Function object
+	 * @return string to print out
+	 */
+	private static String getDescription(Function f) {
+		StringBuilder s = new StringBuilder();
+		for (int i = 0; i < f.getParameters().length; i++) {
+			Parameter p = f.getParameter(i);
+			s.append(" ").append(p.getName()).append("[")
+					.append(p.getLastStorageVarnode().toString()).append("]");
+		}
+		return s.toString();
+	}
+
+}
diff --git a/Ghidra/Features/Base/ghidra_scripts/FixWin16LibraryFunctionNames.java b/Ghidra/Features/Base/ghidra_scripts/FixWin16LibraryFunctionNames.java
new file mode 100644
index 000000000..6a8bba902
--- /dev/null
+++ b/Ghidra/Features/Base/ghidra_scripts/FixWin16LibraryFunctionNames.java
@@ -0,0 +1,171 @@
+
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+// Script ensures that the PASCAL calling convention replaces STDCALL
+// on function parameters and changes the stack reference for left-to-
+// right stacking.  On the way, it also ensures that all Thunks are
+// also converted.  This applies to Windows 16-bit apps.
+//
+//@category Repair
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map.Entry;
+
+import generic.jar.ResourceFile;
+
+import java.util.Properties;
+
+import ghidra.app.script.GhidraScript;
+import ghidra.framework.Application;
+import ghidra.program.model.listing.Function;
+import ghidra.program.model.listing.FunctionIterator;
+import ghidra.program.model.listing.FunctionManager;
+import ghidra.util.exception.DuplicateNameException;
+import ghidra.util.exception.InvalidInputException;
+
+public class FixWin16LibraryFunctionNames extends GhidraScript {
+
+	private static HashMap<String, String> fnNameMap = new HashMap<>();
+	private static long fnNameMapModified = 0;
+
+	private int cntFilenamesTotal;
+	private int cntFilenamesChanged;
+
+	private List<String> warningMessages = new ArrayList<String>();
+
+	@Override
+	public void run() throws Exception {
+
+		// reset for this run
+		cntFilenamesTotal = 0;
+		cntFilenamesChanged = 0;
+
+		warningMessages.clear();
+
+		if (currentProgram != null) {
+			FunctionManager fnMgr = currentProgram.getFunctionManager();
+			if (fnMgr == null) {
+				return;
+			}
+
+			doRun(fnMgr.getFunctions(true));
+			doRun(fnMgr.getExternalFunctions());
+
+			// build popup information
+			String buf = "Updated " + cntFilenamesChanged + " out of " + cntFilenamesTotal + " functions found.";
+			if (!warningMessages.isEmpty()) {
+				buf = buf + "\n\n" + String.join("\n\n", warningMessages);
+			}
+
+			popup(buf);
+
+		}
+	}
+
+	/**
+	 * @param functions
+	 */
+	private void doRun(FunctionIterator functions) {
+		while (functions.hasNext()) {
+			if ((getMonitor() != null) && getMonitor().isCancelled()) {
+				return;
+			}
+
+			doRun(functions.next());
+		}
+	}
+
+	/**
+	 * Do for individually identified function
+	 *
+	 * @param func this function
+	 * @throws InvalidInputException
+	 */
+	protected void doRun(Function func) {
+
+//		println("Before: " + func.getName() + ": " + func.getCallingConventionName()
+//				+ " and isExternal()=" + func.isExternal() + ", isThunk()=" + func.isThunk()
+//				+ getDescription(func));
+
+		String updatedName = null;
+		String currentName = null;
+		try {
+			currentName = func.getName();
+			updatedName = translateFunctionName(func);
+			if (!updatedName.contentEquals(currentName)) {
+				++cntFilenamesTotal;
+				func.setName(updatedName, func.getSignatureSource());
+				++cntFilenamesChanged;
+				println("Renamed function " + currentName + " to " + updatedName);
+			}
+		} catch (DuplicateNameException | InvalidInputException e) {
+			warningMessages.add("Could not rename function " + currentName + " to " + updatedName + ".  Error "
+					+ e.getStackTrace());
+		}
+
+//		println(" After: " + func.getName() + ":" + getDescription(func));
+	}
+
+	/**
+	 * @param f Function object
+	 * @return string to print out
+	 */
+//	private static String getDescription(Function f) {
+//		StringBuilder s = new StringBuilder();
+//		for (int i = 0; i < f.getParameters().length; i++) {
+//			Parameter p = f.getParameter(i);
+//			s.append(" ").append(p.getName()).append("[")
+//					.append(p.getLastStorageVarnode().toString()).append("]");
+//		}
+//		return s.toString();
+//	}
+
+	/**
+	 * @param func current Function object
+	 * @return the updated function name
+	 */
+	private String translateFunctionName(Function func) {
+		String currentQualifiedName = func.getName(true);
+		String currentName = func.getName();
+
+		ResourceFile file = Application.findDataFileInAnyModule("FunctionNames.properties");
+		if (fnNameMap.isEmpty() || (file != null && file.lastModified() != fnNameMapModified)) {
+			// reload property file
+			Properties prop = new Properties();
+			try {
+				prop.load(file.getInputStream());
+				fnNameMapModified = file.lastModified();
+			} catch (Exception e) {
+				e.printStackTrace();
+				warningMessages.add("Some issue finding or loading file....!!! " + e.getMessage());
+				return currentName;
+			}
+			fnNameMap.clear();
+			for (final Entry<Object, Object> entry : prop.entrySet()) {
+				if (fnNameMap.containsKey(entry.getKey().toString())) {
+					warningMessages.add("Multiple translations exist for " + entry.getKey().toString());
+				}
+				fnNameMap.put(entry.getKey().toString(), entry.getValue().toString());
+			}
+		}
+
+		// return lookup value or default (original)
+		return fnNameMap.getOrDefault(currentQualifiedName, currentName);
+	}
+
+}
diff --git a/Ghidra/Features/Base/ghidra_scripts/MakeUnionsForLPs.java b/Ghidra/Features/Base/ghidra_scripts/MakeUnionsForLPs.java
new file mode 100644
index 000000000..513d43935
--- /dev/null
+++ b/Ghidra/Features/Base/ghidra_scripts/MakeUnionsForLPs.java
@@ -0,0 +1,587 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+// Create unions to replace *32 pointer references
+//
+//@category Data Types
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+
+import ghidra.app.script.GhidraScript;
+import ghidra.app.script.GhidraState;
+import ghidra.app.services.DataTypeManagerService;
+import ghidra.app.util.cparser.C.ParseException;
+import ghidra.framework.plugintool.PluginTool;
+import ghidra.program.model.data.Array;
+import ghidra.program.model.data.CategoryPath;
+import ghidra.program.model.data.Composite;
+import ghidra.program.model.data.DataType;
+import ghidra.program.model.data.DataTypeComponent;
+import ghidra.program.model.data.DataTypeConflictHandler;
+import ghidra.program.model.data.DataTypeDependencyException;
+import ghidra.program.model.data.DataTypeManager;
+import ghidra.program.model.data.FunctionDefinition;
+import ghidra.program.model.data.FunctionDefinitionDataType;
+import ghidra.program.model.data.InternalDataTypeComponent;
+import ghidra.program.model.data.ParameterDefinition;
+import ghidra.program.model.data.Pointer;
+import ghidra.program.model.data.PointerDataType;
+import ghidra.program.model.data.PointerTypedef;
+import ghidra.program.model.data.Structure;
+import ghidra.program.model.data.StructureDataType;
+import ghidra.program.model.data.TypeDef;
+import ghidra.program.model.data.TypedefDataType;
+import ghidra.program.model.data.Union;
+import ghidra.program.model.data.UnionDataType;
+import ghidra.program.model.listing.Function;
+import ghidra.program.model.listing.FunctionIterator;
+import ghidra.program.model.listing.FunctionManager;
+import ghidra.program.model.listing.Parameter;
+import ghidra.program.model.listing.Variable;
+import ghidra.program.model.symbol.SourceType;
+import ghidra.util.InvalidNameException;
+import ghidra.util.Msg;
+import ghidra.util.exception.CancelledException;
+import ghidra.util.exception.DuplicateNameException;
+import ghidra.util.exception.InvalidInputException;
+
+public class MakeUnionsForLPs extends GhidraScript {
+
+	protected static final String OFFSET_NAME = "__offset__";
+	protected static final String SEGMENT_NAME = "__segment__";
+	protected static final String NEAR_NAME = "__np__";
+	protected static final String FAR_NAME = "__lp__";
+	protected static final CategoryPath GHIDRA_LP_UNION_CATEGORY = new CategoryPath("/_GhidraLpUnions");
+	protected static final CategoryPath GHIDRA_LP_UNION_STRUCT_CATEGORY = new CategoryPath("/_GhidraLpUnions/_seg");
+
+	protected static final String UNDEFINED = "undefined";
+	protected static final String NEAR_P = " * ".concat(NEAR_NAME);
+	protected static final String FAR_LP = " far * ".concat(FAR_NAME);
+	protected static final String UNION_PREFIX = "LP";
+	protected static final String SEGMENT_PREFIX = "__seg";
+
+	@Override
+	protected void run() throws Exception, CancelledException {
+
+		DataTypeManager dtMgr = currentProgram.getDataTypeManager();
+		if (dtMgr == null) {
+			return;
+		}
+
+//		// do a test of creating a data type
+//		int transTest = dtMgr.startTransaction("Test add new 'LPvoid' union");
+//		try {
+//			testCreateNewLPUnion(dtMgr);
+//		}
+//		catch (Exception e) {
+//			dtMgr.endTransaction(transTest, false);
+//			Msg.error(this, e.getMessage());
+//			throw e;
+//		}
+//		dtMgr.endTransaction(transTest, true);
+
+		// start for real
+		String message = "Getting list of pre-created unions from: " + dtMgr.getName();
+		monitor.setMessage(message);
+		Msg.info(this, message);
+
+		Map<String, Union> lpTypes = setupCurrentLPUnionList(dtMgr);
+
+		message = "Creating new unions in: " + dtMgr.getName();
+		monitor.setMessage(message);
+		Msg.info(this, message);
+
+		// create new unions
+		int trans = dtMgr.startTransaction("Add new ".concat(UNION_PREFIX).concat(" unions"));
+		try {
+			lpTypes = createNewLPUnions(dtMgr, lpTypes, trans);
+		}
+		catch (Exception e) {
+			dtMgr.endTransaction(trans, false);
+			Msg.error(this, e.getMessage());
+			throw e;
+		}
+		dtMgr.endTransaction(trans, true);
+
+		message = "Replacing usage of *32 within Composites with new unions in: " + dtMgr.getName();
+		monitor.setMessage(message);
+		Msg.info(this, message);
+
+		// update uses of pointer *32 types with new union types
+		trans = dtMgr.startTransaction("Change all *32 uses to the new unions");
+		try {
+			updatePointer32References(dtMgr, lpTypes);
+		}
+		catch (Exception e) {
+			dtMgr.endTransaction(trans, false);
+			Msg.error(this, e.getMessage());
+			throw e;
+		}
+		dtMgr.endTransaction(trans, true);
+
+		message = "Replacing usage of *32 with new unions in: " + dtMgr.getName();
+		monitor.setMessage(message);
+		Msg.info(this, message);
+
+		// update uses of pointer *32 within function declarations with new union types
+		trans = dtMgr.startTransaction("Change all *32 uses within function declarations to the new unions");
+		try {
+			FunctionManager fnMgr = currentProgram.getFunctionManager();
+			updatePointer32FunctionParamReferences(fnMgr.getFunctions(false), lpTypes);
+		}
+		catch (Exception e) {
+			dtMgr.endTransaction(trans, false);
+			Msg.error(this, e.getMessage());
+			throw e;
+		}
+		dtMgr.endTransaction(trans, true);
+
+//		message = "Results located in: " + dumpFile.getAbsoluteFile();
+//		monitor.setMessage(message);
+//		Msg.info(this, message);
+	}
+
+	/**
+	 * Test creation of Union (and Category) using 'void' as an example
+	 *
+	 * @param dtMgr
+	 * @throws CancelledException
+	 * @throws DuplicateNameException
+	 * @throws ParseException
+	 */
+	private void testCreateNewLPUnion(DataTypeManager dtMgr) throws ParseException {
+//		CParser parser = new CParser(dtMgr);
+//
+//		String name = "void";
+//		String newUnion = "union ".concat(PREFIX).concat(name ).concat(" {")
+//				.concat(name).concat(NEAR_P)
+//				.concat(name).concat(FAR_LP)
+//				.concat("};")
+//				;
+////			union GhidraLP_Dgn11e0_1c7b_0x1c_t {
+////			    Dgn11e0_1c7b_0x1c_t * np;
+////			    Dgn11e0_1c7b_0x1c_t*32 lp;
+////			};
+//
+//		try {
+//			Union ut = (Union) parser.parse(newUnion);
+//			ut.setCategoryPath(GHIDRALPUNIONCATEGORY);
+//			dtMgr.addDataType(ut , null);
+//		} catch (ParseException e) {
+//			e.printStackTrace();
+//			Msg.error(this, e.getMessage());
+////			throw e;
+//		} catch (DuplicateNameException e) {
+//			// Don't care
+//			e.printStackTrace();
+//		}
+
+		StructureDataType structPtrComp = new StructureDataType(GHIDRA_LP_UNION_STRUCT_CATEGORY, "__segLPVOID", 0, dtMgr);
+		structPtrComp.add(dtMgr.getDataType("/void *"), -1, OFFSET_NAME, "");
+		try {
+			structPtrComp.add(dtMgr.getDataType("/SegmentCodeAddress"), 2, SEGMENT_NAME, "");
+		}
+		catch (Exception e) {
+			PluginTool tool = state.getTool();
+			DataTypeManagerService service = tool.getService(DataTypeManagerService.class);
+			DataTypeManager[] dataTypeManagers = service.getDataTypeManagers();
+			for (DataTypeManager dataTypeManager : dataTypeManagers) {
+				try {
+					structPtrComp.add(dataTypeManager.getDataType("/SegmentCodeAddress"), 2, SEGMENT_NAME, "");
+					break;
+				}
+				catch (Exception e1) {
+					// Try next!
+				}
+			}
+		}
+		UnionDataType ut = new UnionDataType(GHIDRA_LP_UNION_CATEGORY, "LPVOID_test");
+		ut.add(structPtrComp, 4, NEAR_NAME, "");
+		ut.add(dtMgr.getDataType("/windows.h/LPVOID"), 4, FAR_NAME, "");
+		dtMgr.addDataType(ut, DataTypeConflictHandler.REPLACE_HANDLER);
+	}
+
+	/**
+	 * Setup list of pre-created LP union types
+	 *
+	 * @param dtMgr
+	 * @return
+	 * @throws CancelledException
+	 */
+	protected Map<String, Union> setupCurrentLPUnionList(DataTypeManager dtMgr) throws CancelledException {
+		Map<String,Union> lpTypeNames = new HashMap<>();
+		Iterator<Composite> allCompositeTypes = dtMgr.getAllComposites();
+		while (allCompositeTypes.hasNext()) {
+			monitor.checkCanceled();
+			Composite dataType = allCompositeTypes.next();
+			if (!dataType.getCategoryPath().equals(GHIDRA_LP_UNION_CATEGORY)) continue;
+			if (!(dataType instanceof Union)) continue;
+			Union ut = (Union) dataType;
+			String unionName = ut.getName();
+			if (!unionName.startsWith(UNION_PREFIX)) continue;
+			if (2 != ut.getNumComponents()) continue;
+			if (4 != ut.getLength()) continue;
+			DataTypeComponent[] cdts = ut.getComponents();
+			DataTypeComponent dtc0 = cdts[0];
+			DataType dt0 = dtc0.getDataType();
+			if (!(dt0 instanceof Structure)) continue;
+			Structure st = (Structure) dt0;
+			if (2 != st.getNumComponents()) continue;
+			dtc0 = st.getComponent(0);
+			dt0 = dtc0.getDataType();
+			if (!(dt0 instanceof Pointer)) continue;
+			DataTypeComponent dtc1 = cdts[1];
+			DataType dt1 = dtc1.getDataType();
+			if (!(dt1 instanceof Pointer)) continue;
+			Pointer pDt0 = (Pointer) dt0;
+			Pointer pDt1 = (Pointer) dt1;
+			if (8 != pDt0.getLength() * pDt1.getLength()) continue;
+			if (pDt0.getDataType() != pDt1.getDataType()) continue;
+
+			// otherwise
+			lpTypeNames.put(unionName.substring(UNION_PREFIX.length()).toLowerCase(), ut);
+		}
+		return lpTypeNames;
+	}
+
+	/**
+	 * Ensure pointer to data type exists, create if not.
+	 *
+	 * @param dtMgr
+	 * @param dt
+	 * @param ptrType
+	 * @param size
+	 * @return
+	 * @throws DuplicateNameException
+	 */
+	private static DataType getPointerType(DataTypeManager dtMgr, DataType dt, String ptrType, int size)
+			throws DuplicateNameException {
+		if (!ptrType.startsWith("/")) {
+			ptrType = "/" + ptrType;
+		}
+		DataType pDt = dtMgr.getDataType(ptrType);
+		if (null == pDt) {
+			pDt = new PointerDataType(dt, size, dtMgr);
+			pDt.setCategoryPath(dt.getCategoryPath());
+		}
+		return pDt;
+	}
+
+	/**
+	 * Add new LP Union types for ones not allocated
+	 *
+	 * @param dtMgr
+	 * @param lpTypeNames
+	 * @param trans
+	 * @return
+	 * @throws CancelledException
+	 * @throws DuplicateNameException
+	 * @throws ParseException
+	 */
+	protected Map<String, Union> createNewLPUnions(DataTypeManager dtMgr, Map<String, Union> lpTypeNames, int trans)
+			throws CancelledException, DuplicateNameException {
+		Iterator<DataType> allDataTypes = dtMgr.getAllDataTypes();
+
+		while (allDataTypes.hasNext()) {
+			monitor.checkCanceled();
+			DataType dataType = allDataTypes.next();
+			if (dataType.getName().startsWith("Dgn1210_0756_0x1a_t")) {
+				System.out.println(dataType.getName());
+			}
+			if (!(dataType instanceof Pointer)) continue;
+			Pointer pDt = (Pointer) dataType;
+			if (4 != pDt.getLength()) continue;
+			DataType dt = pDt.getDataType();
+			if (null == dt) continue;
+			if (dt instanceof Pointer) continue;
+			if (dt instanceof Array) continue;
+			String name = dt.getName();
+			if (name.startsWith(UNDEFINED)) continue;
+			if (lpTypeNames.containsKey(name.toLowerCase())) continue;
+			String newUnion = "union ".concat(UNION_PREFIX).concat(name).concat(" {")
+					.concat(name).concat(NEAR_P).concat(";")
+					.concat(name).concat(FAR_LP).concat(";")
+					.concat("};")
+					;
+//			union GhidraLP_Dgn11e0_1c7b_0x1c_t {
+//			    Dgn11e0_1c7b_0x1c_t * np;
+//			    Dgn11e0_1c7b_0x1c_t*32 lp;
+//			};
+
+			UnionDataType ut = CreateNewLPUnion(dtMgr, dt);
+			lpTypeNames.put(name.toLowerCase(), ut);
+		}
+
+		return lpTypeNames;
+	}
+
+	public UnionDataType CreateNewLPUnion(DataTypeManager dtMgr, DataType dt)
+			throws DuplicateNameException {
+		String name = dt.getName();
+		String unionName = UNION_PREFIX.concat(name);
+System.out.println(unionName);
+if ("LPpfn01AddToMemoryManager".equals(unionName)) {
+System.out.println("");
+}
+		String structName = SEGMENT_PREFIX.concat(unionName);
+		String nearPtrType = dt.getCategoryPath().getName().concat("/").concat(name).concat(" *");
+		String farPtrType = dt.getCategoryPath().getName().concat("/").concat(name).concat(" *32");
+
+		StructureDataType structPtrComp = new StructureDataType(GHIDRA_LP_UNION_STRUCT_CATEGORY, structName , 0, dtMgr);
+		DataType nearPDt = getPointerType(dtMgr, dt, nearPtrType, 2);
+		structPtrComp.add(nearPDt , -1, OFFSET_NAME, "");
+		try {
+			structPtrComp.add(dtMgr.getDataType("/SegmentCodeAddress"), 2, SEGMENT_NAME, "");
+		}
+		catch (Exception e) {
+			PluginTool tool = state.getTool();
+			DataTypeManagerService service = tool.getService(DataTypeManagerService.class);
+			DataTypeManager[] dataTypeManagers = service.getDataTypeManagers();
+			for (DataTypeManager dataTypeManager : dataTypeManagers) {
+				try {
+					structPtrComp.add(dataTypeManager.getDataType("/SegmentCodeAddress"), 2, SEGMENT_NAME, "");
+					break;
+				}
+				catch (Exception e1) {
+					// Try next!
+				}
+			}
+		}
+
+		UnionDataType ut = new UnionDataType(GHIDRA_LP_UNION_CATEGORY, UNION_PREFIX.concat(name));
+		ut.add(structPtrComp, 4, NEAR_NAME, "");
+		DataType farPDt = getPointerType(dtMgr, dt, farPtrType, 4);
+		ut.add(farPDt, 4, FAR_NAME, "");
+		dtMgr.addDataType(ut, DataTypeConflictHandler.REPLACE_HANDLER);
+
+		return ut;
+	}
+
+	/**
+	 * Search and replace uses of *32 references with LP union version
+	 *
+	 * @param dtMgr
+	 * @param lpTypes
+	 * @throws Exception
+	 */
+	protected void updatePointer32References(DataTypeManager dtMgr, Map<String, Union> lpTypes)
+			throws Exception {
+		Iterator<DataType> allTypes = dtMgr.getAllDataTypes();
+		while (allTypes.hasNext()) {
+			monitor.checkCanceled();
+			DataType dataType = allTypes.next();
+			if (dataType.getCategoryPath().equals(GHIDRA_LP_UNION_CATEGORY)) continue;
+			if (dataType instanceof Composite) {
+				updatePointer32CompositeReferences((Composite) dataType, lpTypes);
+			}
+			else if (dataType instanceof FunctionDefinition) {
+				updatePointer32FunctionDefinitionReferences((FunctionDefinition) dataType, lpTypes);
+			}
+			else if (dataType instanceof TypeDef) {
+				updatePointer32TypeDefReferences((TypeDef) dataType, lpTypes, dtMgr);
+			}
+			else if (dataType instanceof Array) {
+				;
+			}
+			else {
+//				System.out.println(dataType);
+			}
+		}
+	}
+
+	/**
+	 *
+	 * @param dataType
+	 * @param lpTypes
+	 * @param dtMgr
+	 */
+	private void updatePointer32TypeDefReferences(TypeDef dataType, Map<String, Union> lpTypes,
+			DataTypeManager dtMgr) {
+		DataType dt = dataType.getDataType();
+
+		if (!(dt instanceof Pointer)) return;
+		Pointer pDt = (Pointer) dt;
+		if (4 != pDt.getLength()) return;
+		DataType dtBase = pDt.getDataType();
+		if (null == dtBase) return;
+		if (dtBase instanceof Pointer) return;
+		String name = dtBase.getName();
+		DataType lpType = lpTypes.get(name.toLowerCase());
+		if (null == lpType) return;
+		String newName = dataType.getName();
+		if (newName.equals(lpType.getName())) {
+			newName = "TD_" + newName;
+		}
+		TypedefDataType td = new TypedefDataType(dataType.getCategoryPath(), newName, lpType);
+		TypedefDataType.copyTypeDefSettings(dataType, td, false);
+		try {
+			dtMgr.replaceDataType(dataType, td, false);
+		} catch (DataTypeDependencyException e) {
+			Msg.error(this, e.getMessage());
+		}
+	}
+
+	/**
+	 *
+	 *
+	 * @param dataType
+	 * @param lpTypes
+	 */
+	private void updatePointer32FunctionDefinitionReferences(FunctionDefinition dataType,
+			Map<String, Union> lpTypes) {
+		ParameterDefinition[] params = dataType.getArguments();
+
+		for (int idx=0; idx<params.length; ++idx) {
+			ParameterDefinition param = params[idx];
+			DataType dt = param.getDataType();
+			if (!(dt instanceof Pointer)) continue;
+			Pointer pDt = (Pointer) dt;
+			if (4 != pDt.getLength()) continue;
+			DataType dtBase = pDt.getDataType();
+			if (null == dtBase) continue;
+			if (dtBase instanceof Pointer) continue;
+			String name = dtBase.getName();
+			DataType lpType = lpTypes.get(name.toLowerCase());
+			if (null == lpType) continue;
+			try {
+				param.setDataType(lpType);
+			} catch (IllegalArgumentException e) {
+				Msg.error(this, e.getMessage());
+			}
+		}
+
+		dataType.setArguments(params);
+	}
+
+	/**
+	 * In all Composite types, search and replace uses of *32 references with LP union version
+	 *
+	 * @param dtMgr
+	 * @param lpTypes
+	 * @param dataType
+	 * @throws CancelledException
+	 */
+	protected void updatePointer32CompositeReferences(Composite dataType, Map<String, Union> lpTypes)
+			throws CancelledException {
+		if (dataType instanceof FunctionDefinitionDataType) {
+			throw new CancelledException("Found FunctionDefinitionDataType");
+		}
+
+		DataTypeComponent[] cdts = dataType.getComponents();
+		for (int idx=0; idx<cdts.length; ++idx) {
+			DataTypeComponent dtc = cdts[idx];
+			if (!(dtc instanceof InternalDataTypeComponent)) continue;
+			InternalDataTypeComponent idtc = (InternalDataTypeComponent) dtc;
+			DataType dt = idtc.getDataType();
+			if (!(dt instanceof Pointer)) continue;
+			Pointer pDt = (Pointer) dt;
+			if (4 != pDt.getLength()) continue;
+			DataType dtBase = pDt.getDataType();
+			if (null == dtBase) continue;
+
+if("DgnDFileStream_vtable".equals(dtBase.getName())) {
+	System.out.println(dtBase);
+}
+			if (dtBase instanceof Pointer) continue;
+			String name = dtBase.getName();
+			DataType lpType = lpTypes.get(name.toLowerCase());
+			if (null == lpType) continue;
+			idtc.setDataType(lpType);
+		}
+	}
+
+	/**
+	 * In all Function definitions, search and replace uses of *32 references with LP union version
+	 *
+	 * @param functionIterator
+	 * @param lpTypes
+	 * @throws CancelledException
+	 */
+	protected void updatePointer32FunctionParamReferences(FunctionIterator functionIterator, Map<String, Union> lpTypes)
+			throws CancelledException {
+int count=0; int stop[] = {2299}; int restart[] = {3001}; int stopstart=0;
+		while ( functionIterator.hasNext()) {
+			monitor.checkCanceled();
+			Function fnType = functionIterator.next();
+System.out.println(fnType.getSignature(false));
+
+			// do return type
+			DataType dt = fnType.getReturnType();
+			if (dt instanceof Pointer) {
+				Pointer pDt = (Pointer) dt;
+				if (4 == pDt.getLength()) {
+					DataType dtBase = pDt.getDataType();
+					if (null != dtBase) {
+						if (!(dtBase instanceof Pointer)) {
+							String name = dtBase.getName();
+							DataType lpType = lpTypes.get(name.toLowerCase());
+							if (null != lpType) {
+								try {
+									fnType.setReturnType(lpType, SourceType.USER_DEFINED);
+								} catch (InvalidInputException e) {
+									Msg.error(this, e.getMessage());
+								}
+							}
+						}
+					}
+				}
+			}
+
+			// do params
+			Parameter[] params = fnType.getParameters();
+			for (int idx=0; idx<params.length; ++idx) {
+				Parameter param = params[idx];
+				dt = param.getDataType();
+				if (!(dt instanceof Pointer)) continue;
+				Pointer pDt = (Pointer) dt;
+				if (4 != pDt.getLength()) continue;
+				DataType dtBase = pDt.getDataType();
+				if (null == dtBase) continue;
+				if (dtBase instanceof Pointer) continue;
+				String name = dtBase.getName();
+				DataType lpType = lpTypes.get(name.toLowerCase());
+				if (null == lpType) continue;
+				try {
+					param.setDataType(lpType, param.getSource());
+				} catch (InvalidInputException e) {
+					Msg.error(this, e.getMessage());
+				}
+			}
+
+			// do locals
+			Variable[] localVars = fnType.getLocalVariables();
+			for (int idx = 0; idx < localVars.length; idx++) {
+				Variable var = localVars[idx];
+				dt = var.getDataType();
+				if (!(dt instanceof Pointer)) continue;
+				Pointer pDt = (Pointer) dt;
+				if (4 != pDt.getLength()) continue;
+				DataType dtBase = pDt.getDataType();
+				if (null == dtBase) continue;
+				if (dtBase instanceof Pointer) continue;
+				String name = dtBase.getName();
+				DataType lpType = lpTypes.get(name.toLowerCase());
+				if (null == lpType) continue;
+				try {
+					var.setDataType(lpType, var.getSource());
+				} catch (InvalidInputException e) {
+					Msg.error(this, e.getMessage());
+				}
+			}
+		}
+	}
+
+}
diff --git a/Ghidra/Features/Base/ghidra_scripts/_GetAllFunctionsCallingConvention.java b/Ghidra/Features/Base/ghidra_scripts/_GetAllFunctionsCallingConvention.java
new file mode 100644
index 000000000..925590a50
--- /dev/null
+++ b/Ghidra/Features/Base/ghidra_scripts/_GetAllFunctionsCallingConvention.java
@@ -0,0 +1,106 @@
+
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+// Script to export ALL function definitions for the @currentProgram
+//@category Export
+import java.io.BufferedWriter;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.util.Iterator;
+
+import ghidra.app.script.GhidraScript;
+import ghidra.program.model.listing.Function;
+import ghidra.program.model.listing.FunctionManager;
+import ghidra.program.model.listing.Parameter;
+
+public class _GetAllFunctionsCallingConvention extends GhidraScript {
+
+	private BufferedWriter fileWriter;
+
+	@Override
+	public void run() throws Exception {
+
+		if (currentProgram != null) {
+			String DIR = "D:/";
+			String filename = DIR + currentProgram.getName() + "FunctionSpecs.tab";
+System.out.println(filename);
+			fileWriter = new BufferedWriter(new FileWriter(filename));
+
+			FunctionManager fnMgr = currentProgram.getFunctionManager();
+			if (fnMgr == null) {
+				return;
+			}
+
+			// update details
+			doRun(fnMgr.getFunctions(true));
+
+			fileWriter.close();
+		}
+	}
+
+	/**
+	 * @param functions
+	 */
+	private void doRun(Iterator<Function> functions) {
+		while (functions.hasNext()) {
+			if ((getMonitor() != null) && getMonitor().isCancelled()) {
+				return;
+			}
+
+			doRun(functions.next());
+		}
+	}
+
+	/**
+	 * Do for individually identified function
+	 *
+	 * @param func this function
+	 */
+	protected void doRun(Function func) {
+
+		final String SEP = "\t";
+		try {
+			fileWriter.write(func.getBody().getMinAddress() + SEP + func.getName(true)
+					+ SEP + func.getCallingConventionName()
+					+ SEP + getDescription(func));
+			fileWriter.newLine();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+	}
+
+	/**
+	 * @param f Function object
+	 * @return string to print out
+	 */
+	private static String getDescription(Function f) {
+		StringBuilder s = new StringBuilder();
+		String szSep = "";
+		s.append(f.getReturnType().getName()).append(' ');
+		s.append(f.getName(true)).append(" (");
+		for (int i = 0; i < f.getParameters().length; i++) {
+			Parameter p = f.getParameter(i);
+			s.append(szSep).append(p.getFormalDataType().getName()).append(' ').append(p.getName());
+			//s.append("[").append(p.getLastStorageVarnode().toString()).append("]");
+			szSep = ", ";
+		}
+		s.append(')');
+		return s.toString();
+	}
+
+}
diff --git a/Ghidra/Features/Base/ghidra_scripts/_SetFunctonNameFromLPSTR.java b/Ghidra/Features/Base/ghidra_scripts/_SetFunctonNameFromLPSTR.java
new file mode 100644
index 000000000..2f0b72a0e
--- /dev/null
+++ b/Ghidra/Features/Base/ghidra_scripts/_SetFunctonNameFromLPSTR.java
@@ -0,0 +1,249 @@
+
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+// Script ensures that the PASCAL calling convention replaces STDCALL
+// on function parameters and changes the stack reference for left-to-
+// right stacking.  On the way, it also ensures that all Thunks are
+// also converted.  This applies to Windows 16-bit apps.
+//
+//@category Repair
+import java.util.ArrayList;
+import java.util.List;
+
+import ghidra.app.script.GhidraScript;
+import ghidra.pcodeCPort.sleighbase.address_set;
+import ghidra.program.database.symbol.VariableSymbolDB;
+import ghidra.program.flatapi.FlatProgramAPI;
+import ghidra.program.model.address.Address;
+import ghidra.program.model.address.AddressFormatException;
+import ghidra.program.model.address.AddressIterator;
+import ghidra.program.model.address.AddressOutOfBoundsException;
+import ghidra.program.model.address.AddressSetView;
+import ghidra.program.model.data.Array;
+import ghidra.program.model.data.DataType;
+import ghidra.program.model.data.DataTypeComponent;
+import ghidra.program.model.data.DynamicDataType;
+import ghidra.program.model.data.Pointer;
+import ghidra.program.model.data.Structure;
+import ghidra.program.model.data.StructureDataType;
+import ghidra.program.model.data.TypeDef;
+import ghidra.program.model.data.Union;
+import ghidra.program.model.listing.Data;
+import ghidra.program.model.listing.DataIterator;
+import ghidra.program.model.listing.Function;
+import ghidra.program.model.listing.Listing;
+import ghidra.program.model.mem.DumbMemBufferImpl;
+import ghidra.program.model.mem.MemBuffer;
+import ghidra.program.model.mem.Memory;
+import ghidra.program.model.scalar.Scalar;
+import ghidra.program.model.symbol.SourceType;
+import ghidra.program.model.symbol.Symbol;
+import ghidra.program.model.symbol.SymbolTable;
+import ghidra.util.Msg;
+import ghidra.util.exception.DuplicateNameException;
+import ghidra.util.exception.InvalidInputException;
+
+public class _SetFunctonNameFromLPSTR extends GhidraScript {
+
+	private int cntConvertionTotal;
+	private int cntConvertionChanged;
+
+	private List<String> warningMessages = new ArrayList<String>();
+
+	@Override
+	public void run() throws Exception {
+
+		// reset for this run
+		cntConvertionTotal = 0;
+		cntConvertionChanged = 0;
+
+		warningMessages.clear();
+
+		Listing listing = currentProgram.getListing();
+
+		if (currentAddress != null) {
+			AddressSetView view = currentSelection;
+			if ((view == null) || (view.isEmpty())) {
+				doRun(currentAddress, listing);
+			}
+			else {
+				AddressIterator iterAddr = view.getAddresses(true);
+
+				Address lastArrayAddress = null;
+				while (iterAddr.hasNext()) {
+					if (monitor.isCancelled()) {
+						break;
+					}
+
+					Address address = iterAddr.next();
+					if ((null != lastArrayAddress) && (lastArrayAddress.compareTo(address) > 0)) {
+						continue;
+					}
+					doRun(address, listing);
+				}
+			}
+
+			// build popup information
+			String buf = "Update " + cntConvertionChanged + " function names out of " + cntConvertionTotal + ".";
+			if (!warningMessages.isEmpty()) {
+				buf = buf + "\n\n" + String.join("\n\n", warningMessages);
+			}
+
+			popup(buf);
+		}
+	}
+
+	private Address doRun(Address address, Listing listing)
+			throws AddressFormatException, DuplicateNameException, InvalidInputException {
+		Address lastArrayAddress = address;
+		Data data = listing.getDataAt(address);
+		if (null != data) {
+			DataType dt = data.getDataType();
+			if (dt instanceof Array) {
+				Array adt = (Array) dt;
+				dt = adt.getDataType();
+				cntConvertionTotal += adt.getNumElements();
+				for (int i=0; i<adt.getNumElements(); ++i) {
+					if (updateFunctionNamesFromStrings(dt, lastArrayAddress, listing)) {
+						++cntConvertionChanged;
+					};
+					lastArrayAddress = lastArrayAddress.add(adt.getElementLength());
+				}
+
+			} else if (dt instanceof Structure) {
+				++cntConvertionTotal;
+				if (updateFunctionNamesFromStrings(dt, address, listing)) {
+					++cntConvertionChanged;
+				};
+			}
+		}
+		return lastArrayAddress;
+	}
+
+	private boolean updateFunctionNamesFromStrings(DataType dt, Address address, Listing listing)
+			throws AddressFormatException, DuplicateNameException, InvalidInputException {
+		if (!(dt instanceof Structure)) return false;
+		Structure structDt = (Structure) dt;
+
+		if (!"DgnTaskFnList_t".equals(structDt.getName())) return false;
+
+		Memory memory = currentProgram.getMemory();
+
+		MemBuffer buf = new DumbMemBufferImpl(memory, address);
+		DataTypeComponent comp = getComponent(structDt, 0, buf); // points to a string
+		Address addrDatum = getRefAtPointer32(comp, address, buf);
+		if (null == addrDatum) return false;
+
+		Data dataString = listing.getDataAt(addrDatum);
+		if (null == dataString) return false;
+		String fnName = (String) dataString.getValue();
+
+		buf = new DumbMemBufferImpl(memory, address.add(4));
+		comp = getComponent(structDt, 1, buf); // points to a function pointer
+		addrDatum = getRefAtPointer32(comp, address, buf);
+		if (null == addrDatum) return false;
+		Function func = listing.getFunctionAt(addrDatum);
+		if (null == func) {
+			func = createFunction(addrDatum, fnName);
+			writer.println("Created functon '" + func.getName() + "' at " + addrDatum);
+		}
+		else {
+			StringBuffer sb = new StringBuffer("Renamed function '" + func.getName() + "' to '");
+			func.setName(fnName, SourceType.USER_DEFINED);
+			sb.append(func.getName() + "' at " + addrDatum);
+			writer.println(sb.toString());
+		}
+		return true;
+	}
+
+	private DataType getPointer32(DataTypeComponent comp, Address address, MemBuffer memBuf) {
+		DataType dt = comp.getDataType();
+		if (dt instanceof Union) {
+			Union unionDt = (Union) dt;
+			for (int i = 0; i < unionDt.getNumComponents(); i++) {
+				comp = unionDt.getComponent(i);
+				dt = comp.getDataType();
+				if ((dt instanceof Pointer) && (4 == dt.getLength())) {
+					return dt;
+				}
+				else if (dt instanceof Union || dt instanceof Structure) {
+					dt = getPointer32(comp, address, memBuf);
+				}
+			}
+		}
+		else if (dt instanceof Structure) {
+			Structure structDt = (Structure) dt;
+			for (int i = 0; i < structDt.getNumComponents(); i++) {
+				comp = structDt.getComponent(i);
+				dt = comp.getDataType();
+				if ((dt instanceof Pointer) && (4 == dt.getLength())) {
+					return dt;
+				}
+				else if (dt instanceof Union || dt instanceof Structure) {
+					dt = getPointer32(comp, address, memBuf);
+				}
+			}
+		}
+		else if ((dt instanceof Pointer) && (4 == dt.getLength())) {
+			return dt;
+		}
+		return null;
+	}
+
+	private Address getRefAtPointer32(DataTypeComponent comp, Address address, MemBuffer memBuf) throws AddressFormatException {
+		DataType dt = getPointer32(comp, address, memBuf);
+		if (null == dt) return null;
+		Object dataAddress = dt.getValue(memBuf, dt.getDefaultSettings(), dt.getLength());
+		Address addrDatum = address.getAddress(dataAddress.toString());
+		return addrDatum;
+	}
+
+	private static Address getComponentAddress(DataTypeComponent comp, MemBuffer memBuffer) {
+		int offset = comp.getOffset();
+		Address minAddress = memBuffer.getAddress();
+		try {
+			return minAddress.add(offset);
+		}
+		catch (AddressOutOfBoundsException e) {
+			throw new IllegalArgumentException("Can't get component " + comp.getOrdinal() +
+				" from memory buffer for data type " + comp.getParent().getName() + ".", e);
+		}
+	}
+
+	private static DataTypeComponent getComponent(DataType dataType, int componentOrdinal,
+			MemBuffer memBuffer) {
+		if (dataType == null) {
+			throw new IllegalArgumentException("Data type cannot be null.");
+		}
+		if (dataType instanceof DynamicDataType) {
+			DynamicDataType dynamicDt = (DynamicDataType) dataType;
+			return dynamicDt.getComponent(componentOrdinal, memBuffer);
+		}
+		if (dataType instanceof TypeDef) {
+			dataType = ((TypeDef) dataType).getBaseDataType();
+		}
+		if (dataType instanceof Union) {
+			Union unionDt = (Union) dataType;
+			return unionDt.getComponent(componentOrdinal);
+		}
+		if (!(dataType instanceof Structure)) {
+			throw new IllegalArgumentException("Data type " + dataType.getName() +
+				" must be a structure or a typedef on a structure.");
+		}
+		Structure struct = (Structure) dataType;
+		return struct.getComponent(componentOrdinal);
+	}
+}
\ No newline at end of file
diff --git a/Ghidra/Features/Base/ghidra_scripts/_SetSSRegForAllFuncs.java b/Ghidra/Features/Base/ghidra_scripts/_SetSSRegForAllFuncs.java
new file mode 100644
index 000000000..16bdf47fb
--- /dev/null
+++ b/Ghidra/Features/Base/ghidra_scripts/_SetSSRegForAllFuncs.java
@@ -0,0 +1,112 @@
+
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+// Script to set CS register for ALL function definitions for the @currentProgram
+//@category
+import java.math.BigInteger;
+import java.util.Iterator;
+
+import ghidra.app.script.GhidraScript;
+import ghidra.program.model.address.Address;
+import ghidra.program.model.lang.OperandType;
+import ghidra.program.model.lang.Register;
+import ghidra.program.model.lang.RegisterValue;
+import ghidra.program.model.listing.ContextChangeException;
+import ghidra.program.model.listing.Function;
+import ghidra.program.model.listing.FunctionManager;
+import ghidra.program.model.listing.Instruction;
+import ghidra.program.model.listing.Parameter;
+
+public class _SetSSRegForAllFuncs extends GhidraScript {
+
+	@Override
+	public void run() throws Exception {
+
+		String addr = askString("New Value", "SS");
+		if (addr.isEmpty())
+			return;
+
+		if (currentProgram != null) {
+			FunctionManager fnMgr = currentProgram.getFunctionManager();
+			if (fnMgr == null) {
+				return;
+			}
+
+			BigInteger newAddress = new BigInteger(addr, 16);
+
+			// update details
+			doRun(fnMgr.getFunctions(true), newAddress);
+		}
+	}
+
+	/**
+	 * @param functions
+	 * @param newAddress
+	 */
+	private void doRun(Iterator<Function> functions, BigInteger newAddress) {
+		while (functions.hasNext()) {
+			if ((getMonitor() != null) && getMonitor().isCancelled()) {
+				return;
+			}
+
+			doRun(functions.next(), newAddress);
+		}
+	}
+
+	/**
+	 * Do for individually identified function
+	 *
+	 * @param func this function
+	 * @param newAddress
+	 */
+	protected void doRun(Function func, BigInteger newAddress) {
+
+		final String SEP = "\t";
+
+		if (func.isThunk())
+			return;
+
+		Address addr = func.getEntryPoint();
+		Instruction instr = getInstructionAt(addr);
+		String strInstr = instr.getMnemonicString();
+		if (!"MOV".contentEquals(strInstr))
+			return;
+
+		if (2 != instr.getNumOperands())
+			return;
+
+		if (OperandType.REGISTER != instr.getOperandType(1)
+			 || !"SS".equals(instr.getRegister(1).getName()))
+			return;
+
+		Register reg = instr.getRegister(1);
+		RegisterValue regVal = instr.getRegisterValue(reg);
+
+		if (null != regVal)
+			return;
+
+		regVal = new RegisterValue(reg);
+		try {
+			instr.setRegisterValue(regVal.assign(reg, newAddress));
+		} catch (ContextChangeException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+		System.out.println(addr + SEP + strInstr + SEP + reg + SEP + regVal);
+	}
+
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/cmd/function/ApplyFunctionSignatureCmd.java b/Ghidra/Features/Base/src/main/java/ghidra/app/cmd/function/ApplyFunctionSignatureCmd.java
index 2eee3110d..4763bb784 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/cmd/function/ApplyFunctionSignatureCmd.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/cmd/function/ApplyFunctionSignatureCmd.java
@@ -199,7 +199,7 @@ public class ApplyFunctionSignatureCmd extends BackgroundCommand {
 			return 0;
 		}
 
-		if (!CompilerSpec.CALLING_CONVENTION_thiscall.equals(conventionName)) {
+		if (!conventionName.startsWith(CompilerSpec.CALLING_CONVENTION_thiscall)) {
 			return 0;
 		}
 
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/analysis/SegmentedCallingConventionAnalyzer.java b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/analysis/SegmentedCallingConventionAnalyzer.java
index 526a266ae..4f3817e62 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/analysis/SegmentedCallingConventionAnalyzer.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/analysis/SegmentedCallingConventionAnalyzer.java
@@ -21,6 +21,7 @@ import ghidra.app.services.AnalyzerType;
 import ghidra.app.util.importer.MessageLog;
 import ghidra.program.model.address.AddressSetView;
 import ghidra.program.model.address.SegmentedAddress;
+import ghidra.program.model.data.GenericCallingConvention;
 import ghidra.program.model.listing.*;
 import ghidra.program.model.mem.MemoryAccessException;
 import ghidra.util.Msg;
@@ -57,9 +58,18 @@ public class SegmentedCallingConventionAnalyzer extends AbstractAnalyzer {
 			catch (MemoryAccessException e) {
 				return;
 			}
+			Function func =
+					program.getFunctionManager().getFunctionContaining(instr.getMinAddress());
+			String conv;
+			if (func != null && func.getCallingConventionName().contains(GenericCallingConvention.pascal.toString())) {
+				conv = "__pascal16";
+			} else {
+				conv = "__stdcall16";
+			}
 			switch (b) {
 				case 0xca:
-					convention = "__stdcall16far";
+//					convention = "__stdcall16far";
+					convention = conv + "far";
 					break;
 				case 0xcb:
 					convention = "__cdecl16far";
@@ -68,15 +78,18 @@ public class SegmentedCallingConventionAnalyzer extends AbstractAnalyzer {
 					convention = "__cdecl16near";
 					break;
 				case 0xc2:
-					convention = "__stdcall16near";
+//					convention = "__stdcall16near";
+					convention = conv + "near";
+					break;
+				default:
 					break;
 			}
 			if (convention != null) {
-				Function func =
-					program.getFunctionManager().getFunctionContaining(instr.getMinAddress());
 				if (func != null) {
 					try {
 						func.setCallingConvention(convention);
+						Msg.debug(this, "Set convention to '" + convention + " for " +
+								((func == null) ? "undefined fn" : func.getSignature()) );
 					}
 					catch (InvalidInputException e) {
 						Msg.error(this, "Unexpected Exception: " + e.getMessage(), e);
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/datamgr/actions/CreateLPUnionStructAction.java b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/datamgr/actions/CreateLPUnionStructAction.java
new file mode 100644
index 000000000..036af673b
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/datamgr/actions/CreateLPUnionStructAction.java
@@ -0,0 +1,314 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package ghidra.app.plugin.core.datamgr.actions;
+
+import javax.swing.tree.TreePath;
+
+import docking.ActionContext;
+import docking.action.DockingAction;
+import docking.action.MenuData;
+import docking.widgets.tree.GTree;
+import ghidra.app.plugin.core.datamgr.DataTypeManagerPlugin;
+import ghidra.app.plugin.core.datamgr.DataTypesActionContext;
+import ghidra.app.plugin.core.datamgr.tree.ArchiveNode;
+import ghidra.app.plugin.core.datamgr.tree.BuiltInArchiveNode;
+import ghidra.app.plugin.core.datamgr.tree.DataTypeArchiveGTree;
+import ghidra.app.plugin.core.datamgr.tree.DataTypeNode;
+import ghidra.app.plugin.core.datamgr.tree.DataTypeTreeNode;
+import ghidra.program.model.data.BuiltInDataTypeManager;
+import ghidra.program.model.data.CategoryPath;
+import ghidra.program.model.data.DataType;
+import ghidra.program.model.data.DataTypeManager;
+import ghidra.program.model.data.DataTypeManagerChangeListener;
+import ghidra.program.model.data.DataTypePath;
+import ghidra.program.model.data.PointerDataType;
+import ghidra.program.model.data.SourceArchive;
+import ghidra.program.model.data.StructureDataType;
+import ghidra.program.model.data.UnionDataType;
+import ghidra.util.InvalidNameException;
+import ghidra.util.StringUtilities;
+import ghidra.util.exception.DuplicateNameException;
+
+public class CreateLPUnionStructAction extends DockingAction implements DataTypeManagerChangeListener {
+
+	private static final String ACTION_NAME = "LPUnion4Pointers";
+	protected static final String OFFSET_NAME = "__offset__";
+	protected static final String SEGMENT_NAME = "__segment__";
+	protected static final String NEAR_NAME = "__np__";
+	protected static final String FAR_NAME = "__lp__";
+	protected static final CategoryPath GHIDRA_LP_UNION_CATEGORY = new CategoryPath("/_GhidraLpUnions");
+	protected static final CategoryPath GHIDRA_LP_UNION_STRUCT_CATEGORY = new CategoryPath("/_GhidraLpUnions/_seg");
+
+	protected static final String UNDEFINED = "undefined";
+	protected static final String NEAR_P = " * ".concat(NEAR_NAME);
+	protected static final String FAR_LP = " far * ".concat(FAR_NAME);
+	protected static final String UNION_PREFIX = "LP";
+	protected static final String SEGMENT_PREFIX = "__seg";
+
+	protected DataTypeManagerPlugin plugin;
+
+	public CreateLPUnionStructAction(DataTypeManagerPlugin plugin) {
+		super("Create " + ACTION_NAME, plugin.getName());
+		this.plugin = plugin;
+		plugin.addDataTypeManagerChangeListener(this);
+		setPopupMenuData(new MenuData(new String[] { "New", ACTION_NAME }, null, "Create"));
+	}
+
+	@Override
+	public void actionPerformed(ActionContext context) {
+		DataTypeArchiveGTree gTree = (DataTypeArchiveGTree) context.getContextObject();
+		TreePath[] selectionPaths = gTree.getSelectionPaths();
+		DataTypeNode dataTypeNode = (DataTypeNode) selectionPaths[0].getLastPathComponent();
+		DataType baseDataType = dataTypeNode.getDataType();
+
+		DerivativeDataTypeInfo info =
+			new DerivativeDataTypeInfo(plugin, gTree, dataTypeNode, baseDataType);
+		DataTypeManager dtMgr = info.getDataTypeManager();
+		DataType ut = CreateNewLPUnion(dtMgr, baseDataType);
+	}
+
+	public DataType CreateNewLPUnion(DataTypeManager dtMgr, DataType dt) {
+		int transactionID = dtMgr.startTransaction("Create Associated DataTypes");
+		try {
+			String name = dt.getName();
+			String unionName = UNION_PREFIX.concat(name);
+			String structName = SEGMENT_PREFIX.concat(unionName);
+			String nearPtrType = dt.getCategoryPath().getName().concat("/").concat(name).concat(" *");
+			String farPtrType = dt.getCategoryPath().getName().concat("/").concat(name).concat(" *32");
+
+			StructureDataType structPtrComp = new StructureDataType(GHIDRA_LP_UNION_STRUCT_CATEGORY, structName , 0, dtMgr);
+			DataType nearPDt = getPointerType(dtMgr, dt, nearPtrType, 2);
+			structPtrComp.add(nearPDt , -1, OFFSET_NAME, "");
+			try {
+				structPtrComp.add(dtMgr.getDataType("/SegmentCodeAddress"), 2, SEGMENT_NAME, "");
+			}
+			catch (Exception e) {
+				DataTypeManager[] dataTypeManagers = plugin.getDataTypeManagers();
+				for (DataTypeManager dataTypeManager : dataTypeManagers) {
+					try {
+						structPtrComp.add(dataTypeManager.getDataType("/SegmentCodeAddress"), 2, SEGMENT_NAME, "");
+						break;
+					}
+					catch (Exception e1) {
+						// Try next!
+					}
+				}
+			}
+
+			UnionDataType ut = new UnionDataType(GHIDRA_LP_UNION_CATEGORY, UNION_PREFIX.concat(name));
+			ut.add(structPtrComp, 4, NEAR_NAME, "");
+			DataType farPDt = getPointerType(dtMgr, dt, farPtrType, 4);
+			ut.add(farPDt, 4, FAR_NAME, "");
+
+			DataType newDt = dtMgr.addDataType(ut, plugin.getConflictHandler());
+			dtMgr.endTransaction(transactionID, true);
+
+			return newDt;
+		} catch (DuplicateNameException e) {
+			dtMgr.endTransaction(transactionID, false);
+			return null;
+		}
+	}
+
+	/**
+	 * Ensure pointer to data type exists, create if not.
+	 *
+	 * @param dtMgr
+	 * @param dt
+	 * @param ptrType
+	 * @param size
+	 * @return
+	 * @throws DuplicateNameException
+	 */
+	private static DataType getPointerType(DataTypeManager dtMgr, DataType dt, String ptrType, int size)
+			throws DuplicateNameException {
+		if (!ptrType.startsWith("/")) {
+			ptrType = "/" + ptrType;
+		}
+		DataType pDt = dtMgr.getDataType(ptrType);
+		if (null == pDt) {
+			pDt = new PointerDataType(dt, size, dtMgr);
+			pDt.setCategoryPath(dt.getCategoryPath());
+		}
+		return pDt;
+	}
+
+	@Override
+	public boolean isEnabledForContext(ActionContext context) {
+		DataTypeTreeNode node = getDataTypeNode(context);
+		if (node == null) {
+			return false;
+		}
+
+		ArchiveNode archiveNode = node.getArchiveNode();
+		if (archiveNode == null) {
+			// this can happen as the tree is changing
+			return false;
+		}
+
+		boolean enabled = archiveNode.isModifiable();
+		if (archiveNode instanceof BuiltInArchiveNode) {
+			// these will be put into the program archive
+			enabled = true;
+		}
+
+		// update the menu item to add the name of the item we are working on
+		if (enabled) {
+			String dtName = node.getName();
+			dtName = StringUtilities.trim(dtName, 10);
+			MenuData newMenuData =
+				new MenuData(new String[] { "New", ACTION_NAME + " to " + dtName }, null, "Create");
+			setPopupMenuData(newMenuData);
+		}
+
+		return enabled;
+	}
+
+	@Override
+	public boolean isAddToPopup(ActionContext context) {
+		DataTypeNode node = getDataTypeNode(context);
+		if (node == null) {
+			return false;
+		}
+
+		DataType dataType = node.getDataType();
+		DataTypeManager dataTypeManager = dataType.getDataTypeManager();
+		if (dataTypeManager instanceof BuiltInDataTypeManager) {
+			DataTypeManager manager = plugin.getProgramDataTypeManager();
+			if (manager == null) {
+				return false; // no program open; can't work from the built-in in this case
+			}
+		}
+
+		return true;
+	}
+
+	private DataTypeNode getDataTypeNode(ActionContext context) {
+		if (!(context instanceof DataTypesActionContext)) {
+			return null;
+		}
+
+		Object contextObject = context.getContextObject();
+		GTree gtree = (GTree) contextObject;
+		TreePath[] selectionPaths = gtree.getSelectionPaths();
+		if (selectionPaths.length != 1) {
+			return null;
+		}
+
+		DataTypeTreeNode node = (DataTypeTreeNode) selectionPaths[0].getLastPathComponent();
+		if (!(node instanceof DataTypeNode)) {
+			return null;
+		}
+		return (DataTypeNode) node;
+	}
+
+	@Override
+	public void categoryAdded(DataTypeManager dtm, CategoryPath path) {
+		// TODO Auto-generated method stub
+
+	}
+
+	@Override
+	public void categoryRemoved(DataTypeManager dtm, CategoryPath path) {
+		// TODO Auto-generated method stub
+
+	}
+
+	@Override
+	public void categoryRenamed(DataTypeManager dtm, CategoryPath oldPath, CategoryPath newPath) {
+		// TODO Auto-generated method stub
+
+	}
+
+	@Override
+	public void categoryMoved(DataTypeManager dtm, CategoryPath oldPath, CategoryPath newPath) {
+		// TODO Auto-generated method stub
+
+	}
+
+	@Override
+	public void dataTypeAdded(DataTypeManager dtm, DataTypePath path) {
+		// TODO Auto-generated method stub
+
+	}
+
+	@Override
+	public void dataTypeRemoved(DataTypeManager dtm, DataTypePath path) {
+		// TODO Auto-generated method stub
+
+	}
+
+	@Override
+	public void dataTypeRenamed(DataTypeManager dtm, DataTypePath oldPath, DataTypePath newPath) {
+		String oldName = oldPath.getDataTypeName();
+		String oldUnionName = UNION_PREFIX.concat(oldName);
+		String oldStructName = SEGMENT_PREFIX.concat(oldUnionName);
+		DataType oldUnion = dtm.getDataType(GHIDRA_LP_UNION_CATEGORY, oldUnionName);
+		DataType oldStruct = dtm.getDataType(GHIDRA_LP_UNION_STRUCT_CATEGORY, oldStructName);
+		if ((null == oldUnion) || (null == oldStruct)) return;
+
+		String newName = newPath.getDataTypeName();
+		String newUnionName = UNION_PREFIX.concat(newName);
+		String newStructName = SEGMENT_PREFIX.concat(newUnionName);
+		int transactionID = dtm.startTransaction("Rename Associated DataType");
+		try {
+			oldStruct.setName(newStructName);
+			oldUnion.setName(newUnionName);
+			dtm.endTransaction(transactionID, true);
+		} catch (InvalidNameException | DuplicateNameException e) {
+			// TODO Auto-generated catch block
+			dtm.endTransaction(transactionID, false);
+			e.printStackTrace();
+		}
+	}
+
+	@Override
+	public void dataTypeMoved(DataTypeManager dtm, DataTypePath oldPath, DataTypePath newPath) {
+		// TODO Auto-generated method stub
+
+	}
+
+	@Override
+	public void dataTypeChanged(DataTypeManager dtm, DataTypePath path) {
+		// TODO Auto-generated method stub
+
+	}
+
+	@Override
+	public void dataTypeReplaced(DataTypeManager dtm, DataTypePath oldPath, DataTypePath newPath,
+			DataType newDataType) {
+		// TODO Auto-generated method stub
+
+	}
+
+	@Override
+	public void favoritesChanged(DataTypeManager dtm, DataTypePath path, boolean isFavorite) {
+		// TODO Auto-generated method stub
+
+	}
+
+	@Override
+	public void sourceArchiveChanged(DataTypeManager dataTypeManager, SourceArchive sourceArchive) {
+		// TODO Auto-generated method stub
+
+	}
+
+	@Override
+	public void sourceArchiveAdded(DataTypeManager dataTypeManager, SourceArchive sourceArchive) {
+		// TODO Auto-generated method stub
+
+	}
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/function/editor/FunctionEditorModel.java b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/function/editor/FunctionEditorModel.java
index a9c288405..30d4d1266 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/function/editor/FunctionEditorModel.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/function/editor/FunctionEditorModel.java
@@ -873,7 +873,7 @@ public class FunctionEditorModel {
 
 	private void removeExplicitThisParameter() {
 		if (!allowCustomStorage &&
-			CompilerSpec.CALLING_CONVENTION_thiscall.equals(callingConventionName)) {
+			callingConventionName.startsWith(CompilerSpec.CALLING_CONVENTION_thiscall)) {
 			int thisIndex = findExplicitThisParameter();
 			if (thisIndex >= 0) {
 				parameters.remove(thisIndex); // remove explicit 'this' parameter
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/cparser/C/Declaration.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/cparser/C/Declaration.java
index a93b06e43..15335dada 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/cparser/C/Declaration.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/cparser/C/Declaration.java
@@ -5,9 +5,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -20,6 +20,7 @@ import java.util.ArrayList;
 import java.util.List;
 
 import ghidra.program.model.data.AbstractIntegerDataType;
+import ghidra.program.model.data.AddressModel;
 import ghidra.program.model.data.DataType;
 import ghidra.program.model.data.PointerDataType;
 
@@ -123,7 +124,7 @@ public class Declaration {
 		}
 		qualifierList.add(qualifier);
 	}
-	
+
 	public void addQualifiers(Declaration dec) {
 		if (dec.qualifierList == null) {
 			return;
@@ -170,7 +171,7 @@ public class Declaration {
 	 * Set the bitfield size for this data type
 	 * More checking could be done here if the bitfield is set on something that
 	 * isn't a bitfield, but that probably isn't necessary.
-	 * 
+	 *
 	 * @param bits number of bits in the bitfield
 	 * @throws ParseException exception if bitfield to large for the current data type.
 	 */
@@ -181,4 +182,75 @@ public class Declaration {
 		bitSize = bits;
 	}
 
+	/**
+	 * @return the near address model from the datatype or false if null
+	 */
+	public boolean isNear() {
+		if ((dt == null) || (dt.getAddressModel() == null)) {
+			return false;
+		} else {
+			return dt.getAddressModel().equals(AddressModel.near);
+		}
+	}
+
+	/**
+	 * @param isNear if true set, otherwise clear
+	 */
+	public void setNear(boolean isNear) {
+		if (dt == null) {
+			return;
+		} else if (isNear) {
+			dt.setAddressModel(AddressModel.near);
+		} else {
+			dt.setAddressModel(AddressModel.unknown);
+		}
+	}
+
+	/**
+	 * @return the far address model from the datatype or false if null
+	 */
+	public boolean isFar() {
+		if ((dt == null) || (dt.getAddressModel() == null)) {
+			return false;
+		} else {
+			return dt.getAddressModel().equals(AddressModel.far);
+		}
+	}
+
+	/**
+	 * @param isFar if true set, otherwise clear
+	 */
+	public void setFar(boolean isFar) {
+		if (dt == null) {
+			return;
+		} else if (isFar) {
+			dt.setAddressModel(AddressModel.far);
+		} else {
+			dt.setAddressModel(null);
+		}
+	}
+
+	/**
+	 * @return the huge address model from the datatype or false if null
+	 */
+	public boolean isHuge() {
+		if ((dt == null) || (dt.getAddressModel() == null)) {
+			return false;
+		} else {
+			return dt.getAddressModel().equals(AddressModel.huge);
+		}
+	}
+
+	/**
+	 * @param isHuge if true set, otherwise clear
+	 */
+	public void setHuge(boolean isHuge) {
+		if (dt == null) {
+			return;
+		} else if (isHuge) {
+			dt.setAddressModel(AddressModel.huge);
+		} else {
+			dt.setAddressModel(AddressModel.unknown);
+		}
+	}
 }
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/LibraryExport.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/LibraryExport.java
new file mode 100644
index 000000000..e6ee471c1
--- /dev/null
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/LibraryExport.java
@@ -0,0 +1,85 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package ghidra.app.util.opinion;
+
+import org.jdom.Element;
+
+public class LibraryExport {
+
+	private int ordinal;
+	private String symbolName;
+	private int purge;
+	private String comment;
+	private String fowardLibName;
+	private String fowardSymName;
+
+	private String noReturnStr;
+	private boolean noReturn;
+
+
+	public LibraryExport(Element export) {
+		ordinal = Integer.parseInt(export.getAttributeValue("ORDINAL"));
+		symbolName = export.getAttributeValue("NAME");
+		purge = Integer.parseInt(export.getAttributeValue("PURGE"));
+		comment = export.getAttributeValue("COMMENT");
+		fowardLibName = export.getAttributeValue("FOWARDLIBRARY");
+		fowardSymName = export.getAttributeValue("FOWARDSYMBOL");
+
+		noReturnStr = export.getAttributeValue("NO_RETURN");
+		noReturn = noReturnStr != null && "y".equals(noReturnStr);
+	}
+
+
+	public int getOrdinal() {
+		return ordinal;
+	}
+
+
+	public String getName() {
+		return symbolName;
+	}
+
+
+	public int getPurge() {
+		return purge;
+	}
+
+
+	public String getComment() {
+		return comment;
+	}
+
+
+	public String getFowardLibName() {
+		return fowardLibName;
+	}
+
+
+	public String getFowardSymName() {
+		return fowardSymName;
+	}
+
+
+	public String getNoReturnStr() {
+		return noReturnStr;
+	}
+
+
+	public boolean isNoReturn() {
+		return noReturn;
+	}
+
+}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/LibraryLookupTable.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/LibraryLookupTable.java
index 0ec767093..a758a254e 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/LibraryLookupTable.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/LibraryLookupTable.java
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -180,7 +180,7 @@ public class LibraryLookupTable {
 
 	/**
 	 * Get the symbol table associated with the DLL name
-	 * 
+	 *
 	 * @param dllName The DLL name (including extension)
 	 * @param size The architecture size of the DLL (e.g., 32 or 64).
 	 * @return LibrarySymbolTable associated with dllName
@@ -194,21 +194,21 @@ public class LibraryLookupTable {
 	 * Get the symbol table associated with the DLL name.  If not previously
 	 * generated for the given dllName, it will be constructed from a .exports
 	 * file found within the 'symbols' resource area.  If a .exports file
-	 * is not found a similarly named .ord file will be used if found.  The 
+	 * is not found a similarly named .ord file will be used if found.  The
 	 * .exports file is a Ghidra XML file formatted file, while the .ord file
-	 * is produced with the Visual Studio DUMPBIN /EXPORTS command.  The default 
+	 * is produced with the Visual Studio DUMPBIN /EXPORTS command.  The default
 	 * resource area is located within the directory
 	 * <pre>
 	 *   Ghidra/Features/Base/data/symbols/[win32|win64]
 	 * </pre>
-	 * Alternatively, a user specific resource directory may be used which 
-	 * is located at 
+	 * Alternatively, a user specific resource directory may be used which
+	 * is located at
 	 * <pre>
 	 *   &lt;USER_HOME&gt;/.ghidra/&lt;.ghidraVersion&gt;/symbols/[win32|win64]
 	 * </pre>
 	 * The cacheMap is a static cache which always returns the same
 	 * instance for a given DLL name.
-	 * 
+	 *
 	 * @param dllName The DLL name (including extension)
 	 * @param size The architecture size of the DLL (e.g., 32 or 64).
 	 * @param log The message log
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/LibrarySymbolTable.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/LibrarySymbolTable.java
index 2f1228e07..e40adeec3 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/LibrarySymbolTable.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/LibrarySymbolTable.java
@@ -43,7 +43,7 @@ import util.CollectionUtils;
 class LibrarySymbolTable {
 
 	private static final SimpleDateFormat TIMESTAMP_FORMAT =
-		new SimpleDateFormat("EEE MMM dd hh:mm:ss zzz yyyy");
+		new SimpleDateFormat("EEE MMM dd kk:mm:ss zzz yyyy");
 
 	private static final int NONE = 0;
 	private static final int LIBRARY = 1;
@@ -425,6 +425,7 @@ class LibrarySymbolTable {
 			version = root.getAttributeValue("VERSION");
 
 			List<Element> children = CollectionUtils.asList(root.getChildren(), Element.class);
+/*
 			Iterator<Element> iter = children.iterator();
 			while (iter.hasNext()) {
 				Element export = iter.next();
@@ -450,6 +451,69 @@ class LibrarySymbolTable {
 				symMap.put(name, sym);
 				ordMap.put(new Integer(ordinal), sym);
 			}
+*/
+
+			List<LibraryExport> libraryExports = new ArrayList<LibraryExport>();
+
+			Iterator<Element> iterElem = children.iterator();
+			while (iterElem.hasNext()) {
+				libraryExports.add(new LibraryExport(iterElem.next()));
+			}
+
+			try {
+//ShowDebugInfo.printf("Size of %s is %d\n", tableName, libraryExports.size());
+				libraryExports.sort((e1, e2) -> {
+					int result = 0;
+					if (e1.getOrdinal() != e2.getOrdinal()) {
+						result = e1.getOrdinal() - e2.getOrdinal();
+					} else if (e1.getName().startsWith(SymbolUtilities.ORDINAL_PREFIX)) {
+						result = +1;
+					} else if (e2.getName().startsWith(SymbolUtilities.ORDINAL_PREFIX)) {
+						result = -1;
+					} else {
+						result = e1.getName().compareTo(e2.getName());
+					}
+					return result;
+				});
+			}
+			catch (Exception e) {
+				// TODO: handle exception
+				System.out.println(e.getMessage());
+			}
+
+			Iterator<LibraryExport> iter = libraryExports.iterator();
+			int preOrdinal = -1;
+			while (iter.hasNext()) {
+				LibraryExport export = iter.next();
+				int ordinal = export.getOrdinal();
+				if (preOrdinal == ordinal) {
+					continue;
+				}
+
+				preOrdinal = ordinal;
+				String name = export.getName();
+//ShowDebugInfo.printf("In LibrarySymbolTable.read:(...) %s <ord %3d> : '%s'\n", file.getName(), ordinal, name);
+System.out.printf("In LibrarySymbolTable.read:(...) %s <ord %3d> : '%s'\n", file.getName(), ordinal, name);
+				int purge = export.getPurge();
+				String comment = export.getComment();
+				String fowardLibName = export.getFowardLibName();
+				String fowardSymName = export.getFowardSymName();
+
+				String noReturnStr = export.getNoReturnStr();
+				boolean noReturn = noReturnStr != null && "y".equals(noReturnStr);
+
+				if (fowardLibName != null && fowardLibName.length() > 0 &&
+					!fowardLibName.equals(tableName)) {
+					forwards.add(fowardLibName);
+				}
+
+				LibraryExportedSymbol sym = new LibraryExportedSymbol(tableName, size, ordinal,
+					name, fowardLibName, fowardSymName, purge, noReturn, comment);
+
+				exportList.add(sym);
+				symMap.put(name, sym);
+				ordMap.put(Integer.valueOf(ordinal), sym);
+			}
 		}
 		catch (JDOMException e) {
 			throw new IOException(e);
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/NeLoader.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/NeLoader.java
index a0a38f7e5..1e0fa7ef6 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/NeLoader.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/NeLoader.java
@@ -427,6 +427,7 @@ public class NeLoader extends AbstractOrdinalSupportLoader {
 		ExternalManager externalManager = program.getExternalManager();
 		FunctionManager functionManager = program.getFunctionManager();
 		Namespace globalNamespace = program.getGlobalNamespace();
+		ReferenceManager refManager = program.getReferenceManager();
 
 		LengthStringSet[] names = mrt.getNames();
 		String[][] mod2proclist = new String[names.length][];
@@ -472,9 +473,15 @@ public class NeLoader extends AbstractOrdinalSupportLoader {
 				try {
 					functionManager.createThunkFunction(null, globalNamespace, addr, body,
 						refFunction, SourceType.IMPORTED);
-				}
+					refManager.addExternalReference(addr, moduleName,
+							callname, null, SourceType.IMPORTED, 0, RefType.DATA);
+					}
 				catch (OverlappingFunctionException e) {
 					log.appendMsg(e.getMessage() + '\n');
+				} catch (InvalidInputException e) {
+					log.appendMsg(e.getMessage() + '\n');
+				} catch (DuplicateNameException e) {
+					log.appendMsg(e.getMessage() + '\n');
 				}
 				addr = addr.addWrap(thunkBodySize);
 			}
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/parser/FunctionSignatureParser.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/parser/FunctionSignatureParser.java
index 603eac7cd..5b05e5225 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/parser/FunctionSignatureParser.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/parser/FunctionSignatureParser.java
@@ -236,7 +236,7 @@ public class FunctionSignatureParser {
 	}
 
 	private String replaceDataTypeIfNeeded(String text, DataType dataType, String replacementName) {
-		String displayName = dataType.getDisplayName();
+		String displayName = dataType.getName();
 		if (canParse(displayName)) {
 			return text;
 		}
@@ -285,15 +285,27 @@ public class FunctionSignatureParser {
 	// Note: group-2 is an inner group to group-3 is not useful
 	//
 	private static final Pattern parameterNameCapturePattern =
-		Pattern.compile("(.+?)((\\[\\d*\\]|\\*\\d*)\\s*)*([^\\s\\[\\*]+)");
+		Pattern.compile("([^\\*\\[]+?)((\\[\\d*\\]|\\*[8|16|24|32|40|48|56|64|72|80|96|128|256|512]*)\\s*)*([^\\s\\[\\*]*)");
 
 	private DataType resolveDataType(String dataTypeName) throws CancelledException {
+
 		if (dtMap.containsKey(dataTypeName)) {
 			return dtMap.get(dataTypeName);
 		}
 
 		Matcher m = parameterNameCapturePattern.matcher(dataTypeName);
 		if (m.matches()) {
+			StringBuilder s = new StringBuilder();
+			for(int i = 0; i <= m.groupCount(); i++) {
+				s.append("\nGroup ").append(i).append(": ");
+				try {
+					s.append(m.group(i));
+				}
+				catch (Exception e) {
+					s.append("No match");
+				}
+			}
+			System.out.println(s);
 			boolean hasPointerOrArraySpec = m.group(3) != null;
 			boolean hasName = (m.group(4) != null) && (m.group(4).length() != 0);
 			if (hasPointerOrArraySpec && hasName) {
diff --git a/Ghidra/Features/Base/src/main/javacc/ghidra/app/util/cparser/C/C.jj b/Ghidra/Features/Base/src/main/javacc/ghidra/app/util/cparser/C/C.jj
index eb056c72f..c3471791f 100644
--- a/Ghidra/Features/Base/src/main/javacc/ghidra/app/util/cparser/C/C.jj
+++ b/Ghidra/Features/Base/src/main/javacc/ghidra/app/util/cparser/C/C.jj
@@ -48,13 +48,16 @@
 
   TODO:
 
-    Insert the appropiate code to enable C source trees from this grammar.
+    Insert the appropriate code to enable C source trees from this grammar.
 
   */
 
 
 
 options {
+//    DEBUG_LOOKAHEAD=true;
+//    DEBUG_PARSER=true;
+
     // Methods and class variables should not be static to allow multiple parsers to be in use.
     // This is at the expense of some speed.
     STATIC= false;
@@ -127,7 +130,7 @@ public class CParser {
     private final static String ANONYMOUS_UNION_PREFIX = "_union_";
     private final static String ANONYMOUS_FUNC_PREFIX = "_func_";
         
-    // Stack for determining when the parser is parsing a typdef definition.
+    // Stack for determining when the parser is parsing a typedef definition.
     private Stack<Boolean> typedefParsingStack = new Stack<Boolean>();
 
     // Stack for putting defined data types on
@@ -152,7 +155,7 @@ public class CParser {
     private CategoryPath getCurrentCategoryPath() {
         return getCategory(currentCategoryName);
     }
-    
+
     private CategoryPath getCurrentCategoryPath(String subCatName) {
         return getCategory(currentCategoryName).extend(subCatName);
     }
@@ -251,10 +254,10 @@ public class CParser {
             }
         }
 
-        DataType dt = findDataType(type);
+            DataType dt = findDataType(type);
         if (dt != null && (functionsOK || !(dt instanceof FunctionDefinition))) {
-            return dt;
-        }    
+                return dt;
+            }
         
         // check the BuiltinTypeManager
         // Don't check, left in in case basic types like uint64_t are in builtins
@@ -452,7 +455,7 @@ public class CParser {
                             }
                     }
                     try {
-                        comp.setName(nameStr);
+                    comp.setName(nameStr);
                     } catch (InvalidNameException e) {
                         // This should not happen
                         e.printStackTrace();
@@ -461,7 +464,7 @@ public class CParser {
                         e.printStackTrace();
                     }
                     comp = (Composite) addDef(composites, nameStr, comp);
-            }
+    }
 
             return comp;
     }
@@ -619,6 +622,9 @@ public class CParser {
                     case CDECL:
                             funcDT.setGenericCallingConvention(GenericCallingConvention.cdecl);
                             break;
+                    case PASCAL:
+                            funcDT.setGenericCallingConvention(GenericCallingConvention.pascal);
+                            break;
                     case STDCALL:
                             funcDT.setGenericCallingConvention(GenericCallingConvention.stdcall);
                             break;
@@ -929,25 +935,31 @@ public class CParser {
 
         // Run the parser
     public static void main(String args[]) {
-            CParser parser = new CParser();
+        CParser parser = new CParser();
 
         try {
             if (args.length == 0) {
                 System.out.println("C Parser:  Reading from standard input . . .");
                 parser.parse(System.in);
-            } else if (args.length == 1) {
-                System.out.println("C Parser:  Reading from file " + args[0] + " . . .");
+            } else if (args.length >= 1) {
+                int i = 0;
+                if (args.length >= 2) {
+                    i = Integer.parseInt(args[0]);
+                }
+                System.out.println("C Parser:  Reading from file " + args[i] + " . . .");
                 try {
-                        parser.parse(new java.io.FileInputStream(args[0]));
+                        parser.parse(new java.io.FileInputStream(args[i]));
                 } catch (java.io.FileNotFoundException e) {
-                        System.out.println("C Parser:  File " + args[0] + " not found.");
-                        return;
+                        System.out.println("C Parser:  File " + args[i] + " not found.");
+                    return;
                 }
             } else {
                 System.out.println("C Parser:  Usage is one of:");
                 System.out.println("         java CParser < inputfile");
                 System.out.println("OR");
                 System.out.println("         java CParser inputfile");
+                System.out.println("OR");
+                System.out.println("         java CParser whichfile inputfile ...");
                 return;
             }
 
@@ -1119,15 +1131,25 @@ TOKEN :
     |
     <CDECL : ( [ "_" ] )+ "cdecl"> 
     |
+    <BASEDSPEC : ( [ "_" ] )+ "based">
+    |
+    <SEGNAMESPEC : ( [ "_" ] )+ "segname">
+    |
+    <SEGMENT : ( [ "_" ] )+ "segment">
+    |
+    <OFFSET : ( [ "_" ] )+ "offset">
+    |
     <DECLSPEC : "__declspec">
     |
     <PRAGMA : (("_")+ | "#") "pragma"> : PRAGMALINE
     | 
     <READABLETO : "__readableTo">
     |
-    <STDCALL : ( [ "_" ] )+ "stdcall"> 
+    <PASCAL : ( [ "_" ] )+ "pascal">
+    |
+    <STDCALL : ( [ "_" ] )+ "stdcall">
     |
-    <FASTCALL : ( [ "_" ] )+ "fastcall"> 
+    <FASTCALL : ( [ "_" ] )+ "fastcall">
     |
     <NORETURN : "_Noreturn" >
     |
@@ -1189,9 +1211,11 @@ TOKEN :
     |
     <GOTO : "goto"> 
     |
-    <NEAR : "__near"> 
+    <NEAR : ( [ "_" ] )* "near">
     |
-    <FAR : "__far"> 
+    <FAR : ( [ "_" ] )* "far">
+    |
+    <HUGE : ( [ "_" ] )* "huge">
     |
     <FOR : "for"> 
     |
@@ -1212,7 +1236,7 @@ TOKEN :
 
 TOKEN :
 {
-    <IDENTIFIER : <LETTER> ( <LETTER> | <DIGIT> )*> 
+    <IDENTIFIER : <LETTER> ( <LETTER> | <DIGIT> | "::")*>
     |
     <#LETTER : [ "$", "A"-"Z", "_", "a"-"z" ]> 
     |
@@ -1420,6 +1444,7 @@ void TranslationUnit() : {}
     ( ExternalDeclaration() )+ 
     {
         //jjt         return jjtThis;
+        printTypes();
     }
 }
 
@@ -1536,7 +1561,7 @@ Declaration DeclarationSpecifiers(Declaration specDT) : {
 //            LOOKAHEAD(DeclarationSpecifiers()
 //                     , { (typeDT == null ||
 //                         (!typeDT.getName().equals(getToken(1).image) && !isType(getToken(1).image))) }
- //                     )
+//                     )
             specDT = DeclarationSpecifiers(specDT)
         ]
         |
@@ -1589,6 +1614,10 @@ Declaration BuiltInTypeSpecifier(Declaration dec) : {
 }
 {
     (
+        <SEGMENT>    { dec.setDataType(SegmentCodePointerDataType.dataType); }
+        |
+        <OFFSET>    { dec.setDataType(OffsetCodePointerDataType.dataType); }
+        |
         <VOID>                 { dec.setDataType(resolveInternal(VoidDataType.dataType)); }
         |
         <CHAR>                 {   dt = dec.getDataType();
@@ -1748,8 +1777,12 @@ Declaration TypeQualifier(Declaration dec) : {}
       <CONST>  { dec.addQualifier(CONST); } |
       <VOLATILE> |
       <CDECL> { dec.addQualifier(CDECL); } |
-      <NEAR> |
-      <FAR> |
+      <NEAR> { dec.setNear(true); } |
+      <FAR> { dec.setFar(true); } |
+      <HUGE> { dec.setHuge(true); } |
+      <SEGMENT> |
+      <OFFSET> |
+      <PASCAL> { dec.addQualifier(PASCAL); } |
       <STDCALL> { dec.addQualifier(STDCALL); } |
       <FASTCALL> { dec.addQualifier(FASTCALL); } |
       <NORETURN> { dec.addQualifier(NORETURN); } |
@@ -1760,6 +1793,7 @@ Declaration TypeQualifier(Declaration dec) : {}
       <RESTRICT> |
       <EXTENSION> |
       <STATIC> |
+      ( BasedSpec() ) |
       <PACKED> |
       <UNALIGNED> |
       ( DeclSpec() )
@@ -1811,6 +1845,25 @@ void SubIdent() : { Declaration dt = new Declaration(); }
     )
 }
 
+void BasedSpec() : {
+}
+{
+  ( ( <BASEDSPEC> ) "(" BasedSpecifier() ")" )
+}
+
+void BasedSpecifier() : {
+}
+{
+  <VOID> |
+  ( SegnameSpec() )
+}
+
+void SegnameSpec() : {
+}
+{
+  ( ( <SEGNAMESPEC> ) "(" "\"" <IDENTIFIER> "\"" ")" )
+}
+
 void DeclSpec() : {
 }
 {
@@ -1978,11 +2031,11 @@ DataType StructOrUnionSpecifier() : {
         sname= <IDENTIFIER> 
     )
     {
-        if (t != null) {
-            comp = defineNamedComposite(t, parent, comp);
-        } else if (sname != null) {
-            comp = defineForwardDeclaredComposite(sname, comp);
-        }
+            if (t != null) {
+                comp = defineNamedComposite(t, parent, comp);
+            } else if (sname != null) {
+                comp = defineForwardDeclaredComposite(sname, comp);
+                    }
         typedefParsingStack.pop();
         return comp;
     }
@@ -1995,25 +2048,25 @@ Composite StructOrUnion() : {Composite comp;}
         {
             comp =  new StructureDataType(getCurrentCategoryPath(), ANONYMOUS_STRUCT_PREFIX + cnt++, 0, dtMgr);
 
-            // Always set the packing, because by default structures should be aligned
-            if (packSize > 0) {
-                comp.setExplicitPackingValue(packSize);
-            }
-            else {
-                comp.setPackingEnabled(true); // ensure default packing enabled
-            }
+                                        // Always set the packing, because by default structures should be aligned
+                                      if (packSize > 0) {
+                                          comp.setExplicitPackingValue(packSize);
+                                      }
+                                      else {
+                                          comp.setPackingEnabled(true); // ensure default packing enabled
+                                      }
                                    
-        }
+                                }
         |
         <UNION>  ( DeclSpec() )* {
             comp = new UnionDataType(getCurrentCategoryPath(), ANONYMOUS_UNION_PREFIX  + cnt++, dtMgr); 
         
-            // Always set the packing, because by default structures should be aligned
-            if (packSize > 0) {
-                comp.setExplicitPackingValue(packSize);
+                                  // Always set the packing, because by default structures should be aligned
+                                  if (packSize > 0) {
+                                      comp.setExplicitPackingValue(packSize);
             } else {
-                comp.setPackingEnabled(true); // ensure default packing enabled
-            }
+                                      comp.setPackingEnabled(true); // ensure default packing enabled
+                                  }
         }
     )
     {
@@ -2257,7 +2310,7 @@ Declaration DirectDeclarator(Declaration dt, DataType container) : {
     [ PragmaSpec() ]
     (
         (
-            t= <IDENTIFIER>        { dec= new Declaration(dt, t.image); }
+          t= <IDENTIFIER>        { dec= new Declaration(dt, t.image); }
             |
             "(" dec= Declarator(new Declaration(funcDT=newAnonymousFunction(funcDT)), null) ")" 
             {
@@ -2267,27 +2320,27 @@ Declaration DirectDeclarator(Declaration dt, DataType container) : {
         { lastDataType = dec.getDataType(); }
         (
             (
-                "[" [ obj = ConditionalExpression() ] "]" 
-                {
-                    // make a new array given value on constant expression
-                    Integer size = getConstantValue(obj, 0);
-                    if (size == null) {
-                        System.out.println("BAD ARRAY SIZE! " + obj);
-                        size = 0;
-                    }
-                    list.add(0,size);
+            "[" [ obj = ConditionalExpression() ] "]"
+            {
+                // make a new array given value on constant expression
+                Integer size = getConstantValue(obj, 0);
+                if (size == null) {
+                    System.out.println("BAD ARRAY SIZE! " + obj);
+                    size = 0;
+                }
+                list.add(0,size);
                 }
             )*
         )
         {
             if (list.size() > 0) {
-            dec.setDataType(dt.getDataType());
-            for (Iterator iterator = list.iterator(); iterator.hasNext();) {
-                Integer iSize = (Integer) iterator.next();
-                DataType decDt = dec.getDataType();
-                dec.setDataType(new ArrayDataType(decDt, iSize, decDt.getLength()));
-            }
-            //System.out.println("Array expr: for " + dec.getName() + " make an array " + dt.getName() + "["+size+"]");
+                dec.setDataType(dt.getDataType());
+                for (Iterator iterator = list.iterator(); iterator.hasNext();) {
+                    Integer iSize = (Integer) iterator.next();
+                    DataType decDt = dec.getDataType();
+                    dec.setDataType(new ArrayDataType(decDt, iSize, decDt.getLength()));
+                }
+                //System.out.println("Array expr: for " + dec.getName() + " make an array " + dt.getName() + "["+size+"]");
             }
         }
         
@@ -2339,7 +2392,18 @@ Declaration Pointer(Declaration dec) : {}
     ("*" | "&") [ dec = TypeQualifierList(dec) ] [ dec = Pointer(dec) ] 
     {
         // TODO: is this right?
-        dec.setDataType(dtMgr.getPointer(dec.getDataType()));
+        if (dec.isNear() && (dec.isFar() || dec.isHuge())) {
+            Msg.info(this, "Mmm, can't be NEAR and (FAR or HUGE)");
+            dec.setDataType(dtMgr.getPointer(dec.getDataType()));
+        } else if (dec.isNear()) {
+            dec.setDataType(dtMgr.getPointer(dec.getDataType(), 2));
+        } else if (dec.isFar()) {
+            dec.setDataType(dtMgr.getPointer(dec.getDataType(), 4));
+        } else if (dec.isHuge()) {
+            dec.setDataType(dtMgr.getPointer(dec.getDataType(), 4));
+        } else {
+            dec.setDataType(dtMgr.getPointer(dec.getDataType()));
+        }
         return dec;
     }
 }
diff --git a/Ghidra/Features/Base/src/test.slow/java/ghidra/app/plugin/core/function/EditFunctionSignatureDialogTest.java b/Ghidra/Features/Base/src/test.slow/java/ghidra/app/plugin/core/function/EditFunctionSignatureDialogTest.java
index 526b1edd8..7b025ef73 100644
--- a/Ghidra/Features/Base/src/test.slow/java/ghidra/app/plugin/core/function/EditFunctionSignatureDialogTest.java
+++ b/Ghidra/Features/Base/src/test.slow/java/ghidra/app/plugin/core/function/EditFunctionSignatureDialogTest.java
@@ -50,6 +50,39 @@ public class EditFunctionSignatureDialogTest extends AbstractGhidraHeadedIntegra
 		env.dispose();
 	}
 
+	@Test
+	public void testParseSignature_GoodSingleArray() throws Exception {
+
+		String signature = "void test(int [12] a)";
+		Function f = function("test", signature);
+		EditFunctionSignatureDialog dialog = new EditFunctionSignatureDialog(tool, "Title", f);
+		FunctionDefinitionDataType definition = dialog.parseSignature();
+		assertNotNull(definition);
+		assertEquals(signature, definition.getPrototypeString());
+	}
+
+	@Test
+	public void testParseSignature_GoodMultiArray() throws Exception {
+
+		String signature = "void test(int [9][4] a, char [30][10] b)";
+		Function f = function("test", signature);
+		EditFunctionSignatureDialog dialog = new EditFunctionSignatureDialog(tool, "Title", f);
+		FunctionDefinitionDataType definition = dialog.parseSignature();
+		assertNotNull(definition);
+		assertEquals(signature, definition.getPrototypeString());
+	}
+
+	@Test
+	public void testParseSignature_GoodMixedSizePointers() throws Exception {
+
+		String signature = "void *32 test(int *32 a, int *24 b)";
+		Function f = function("test", signature);
+		EditFunctionSignatureDialog dialog = new EditFunctionSignatureDialog(tool, "Title", f);
+		FunctionDefinitionDataType definition = dialog.parseSignature();
+		assertNotNull(definition);
+		assertEquals(signature, definition.getPrototypeString());
+	}
+
 	@Test
 	public void testParseSignature_Good() throws Exception {
 
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/data/AddressModelDB.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/data/AddressModelDB.java
new file mode 100644
index 000000000..be5169daf
--- /dev/null
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/data/AddressModelDB.java
@@ -0,0 +1,211 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package ghidra.program.database.data;
+
+import java.io.IOException;
+import java.util.*;
+
+import db.DBRecord;
+import db.Field;
+import ghidra.docking.settings.Settings;
+import ghidra.program.database.DBObjectCache;
+import ghidra.program.model.data.*;
+import ghidra.program.model.mem.MemBuffer;
+import ghidra.program.model.symbol.SourceType;
+import ghidra.util.InvalidNameException;
+import ghidra.util.Msg;
+import ghidra.util.UniversalID;
+
+class AddressModelDB extends DataTypeDB {//implements AddressModel {
+
+	private AddressModelDBAdapter addrModelAdapter;
+
+	AddressModelDB(DataTypeManagerDB dataMgr, DBObjectCache<DataTypeDB> cache,
+			AddressModelDBAdapter adapter, FunctionParameterAdapter paramAdapter,
+			DBRecord record) {
+		super(dataMgr, cache, record);
+		this.addrModelAdapter = adapter;
+	}
+
+	@Override
+	public boolean hasLanguageDependantLength() {
+		// TODO Auto-generated method stub
+		return false;
+	}
+
+	@Override
+	public DataType clone(DataTypeManager dtm) {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	@Override
+	public DataType copy(DataTypeManager dtm) {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	@Override
+	public String getMnemonic(Settings settings) {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	@Override
+	public int getLength() {
+		// TODO Auto-generated method stub
+		return 0;
+	}
+
+	@Override
+	public String getDescription() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	@Override
+	public Object getValue(MemBuffer buf, Settings settings, int length) {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	@Override
+	public String getRepresentation(MemBuffer buf, Settings settings, int length) {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	@Override
+	public boolean isEquivalent(DataType dt) {
+		// TODO Auto-generated method stub
+		return false;
+	}
+
+	@Override
+	public void dataTypeDeleted(DataType dt) {
+		// TODO Auto-generated method stub
+
+	}
+
+	@Override
+	public void dataTypeReplaced(DataType oldDt, DataType newDt) {
+		// TODO Auto-generated method stub
+
+	}
+
+	@Override
+	public void dataTypeNameChanged(DataType dt, String oldName) {
+		// TODO Auto-generated method stub
+
+	}
+
+	@Override
+	public long getLastChangeTime() {
+		// TODO Auto-generated method stub
+		return 0;
+	}
+
+	@Override
+	public long getLastChangeTimeInSourceArchive() {
+		// TODO Auto-generated method stub
+		return 0;
+	}
+
+	@Override
+	public UniversalID getUniversalID() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	@Override
+	public void setLastChangeTime(long lastChangeTime) {
+		// TODO Auto-generated method stub
+
+	}
+
+	@Override
+	public void setLastChangeTimeInSourceArchive(long lastChangeTimeInSourceArchive) {
+		// TODO Auto-generated method stub
+
+	}
+//
+//	@Override
+//	public String name() {
+//		// TODO Auto-generated method stub
+//		return null;
+//	}
+//
+//	@Override
+//	public int ordinal() {
+//		// TODO Auto-generated method stub
+//		return 0;
+//	}
+//
+//	@Override
+//	public void setComment(String comment) {
+//		// TODO Auto-generated method stub
+//
+//	}
+//
+//	@Override
+//	public String getComment() {
+//		// TODO Auto-generated method stub
+//		return null;
+//	}
+//
+	@Override
+	protected String doGetName() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	@Override
+	protected long doGetCategoryID() {
+		// TODO Auto-generated method stub
+		return 0;
+	}
+
+	@Override
+	protected void doSetCategoryPathRecord(long categoryID) throws IOException {
+		// TODO Auto-generated method stub
+
+	}
+
+	@Override
+	protected void doSetNameRecord(String newName) throws IOException, InvalidNameException {
+		// TODO Auto-generated method stub
+
+	}
+
+	@Override
+	protected UniversalID getSourceArchiveID() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	@Override
+	protected void setSourceArchiveID(UniversalID id) {
+		// TODO Auto-generated method stub
+
+	}
+
+	@Override
+	void setUniversalID(UniversalID oldUniversalID) {
+		// TODO Auto-generated method stub
+
+	}
+
+}
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/data/AddressModelDBAdapter.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/data/AddressModelDBAdapter.java
new file mode 100644
index 000000000..e6753bb0f
--- /dev/null
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/data/AddressModelDBAdapter.java
@@ -0,0 +1,189 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package ghidra.program.database.data;
+
+import java.io.IOException;
+
+import db.*;
+import ghidra.util.UniversalID;
+import ghidra.util.exception.VersionException;
+import ghidra.util.task.TaskMonitor;
+
+/**
+ * Adapter to access the Address Model database table.
+ */
+abstract class AddressModelDBAdapter {
+
+	static final String ADDRESS_MODEL_TABLE_NAME = "Address Models";
+	static final Schema ADDRESS_MODEL_SCHEMA = AddressModelDBAdapterV0.V0_ADDRESS_MODEL_SCHEMA;
+
+	static final int ADDRESS_MODEL_DT_ID_COL = AddressModelDBAdapterV0.V0_ADDRESS_MODEL_DT_ID_COL;
+	static final int ADDRESS_MODEL_ID_COL = AddressModelDBAdapterV0.V0_ADDRESS_MODEL_ID_COL;
+
+	/**
+	 * Gets an adapter for working with the Address Model data type database table. The adapter is based
+	 * on the version of the database associated with the specified database handle and the openMode.
+	 * @param handle handle to the database to be accessed.
+	 * @param openMode the mode this adapter is to be opened for (CREATE, UPDATE, READ_ONLY, UPGRADE).
+	 * @param monitor the monitor to use for displaying status or for cancelling.
+	 * @return the adapter for accessing the table of Address Model data types.
+	 * @throws VersionException if the database handle's version doesn't match the expected version.
+	 * @throws IOException if there is trouble accessing the database.
+	 */
+	static AddressModelDBAdapter getAdapter(DBHandle handle, int openMode,
+			TaskMonitor monitor) throws VersionException, IOException {
+		try {
+			return new AddressModelDBAdapterV0(handle, openMode);
+		}
+		catch (VersionException e) {
+			if (!e.isUpgradable() || openMode == DBConstants.UPDATE) {
+				throw e;
+			}
+			AddressModelDBAdapter adapter = findReadOnlyAdapter(handle);
+			if (openMode == DBConstants.UPGRADE) {
+				adapter = upgrade(handle, adapter);
+			}
+			return adapter;
+		}
+	}
+
+	/**
+	 * Tries to get a read only adapter for the database whose handle is passed to this method.
+	 * @param handle handle to prior version of the database.
+	 * @return the read only Address Model data type table adapter
+	 * @throws VersionException if a read only adapter can't be obtained for the database handle's version.
+	 * @throws IOException if unable to access database.
+	 */
+	static AddressModelDBAdapter findReadOnlyAdapter(DBHandle handle)
+			throws VersionException, IOException {
+		try {
+			return new AddressModelDBAdapterV0(handle, DBConstants.READ_ONLY);
+		}
+		catch (VersionException e) {
+			if (!e.isUpgradable()) {
+				throw e;
+			}
+		}
+
+		return new AddressModelDBAdapterNoTable(handle);
+	}
+
+	/**
+	 * Upgrades the Address Model data type table from the oldAdapter's version to the current version.
+	 * @param handle handle to the database whose table is to be upgraded to a newer version.
+	 * @param oldAdapter the adapter for the existing table to be upgraded.
+	 * @return the adapter for the new upgraded version of the table.
+	 * @throws VersionException if the the table's version does not match the expected version
+	 * for this adapter.
+	 * @throws IOException if the database can't be read or written.
+	 */
+	static AddressModelDBAdapter upgrade(DBHandle handle,
+			AddressModelDBAdapter oldAdapter) throws VersionException, IOException {
+
+		DBHandle tmpHandle = new DBHandle();
+		long id = tmpHandle.startTransaction();
+		AddressModelDBAdapter tmpAdapter = null;
+		try {
+			tmpAdapter = new AddressModelDBAdapterV0(tmpHandle, DBConstants.CREATE);
+			RecordIterator it = oldAdapter.getRecords();
+			while (it.hasNext()) {
+				DBRecord rec = it.next();
+				tmpAdapter.updateRecord(rec, false);
+			}
+			oldAdapter.deleteTable(handle);
+			AddressModelDBAdapterV0 newAdapter =
+				new AddressModelDBAdapterV0(handle, DBConstants.CREATE);
+			it = tmpAdapter.getRecords();
+			while (it.hasNext()) {
+				DBRecord rec = it.next();
+				newAdapter.updateRecord(rec, false);
+			}
+			return newAdapter;
+		}
+		finally {
+			tmpHandle.endTransaction(id, true);
+			tmpHandle.close();
+		}
+	}
+
+	/**
+	 * Creates a database record for the data types associated Address Model.
+	 * @param dataTypeID data type ID associated with the Address Model.
+	 * @param modelID the ID of the Address Model.
+	 * @return the database record for this data type.
+	 * @throws IOException if the database can't be accessed.
+	 */
+	abstract DBRecord createRecord(long dataTypeID, byte modelID) throws IOException;
+
+	/**
+	 * Gets a Address Model data type record from the database based on its ID.
+	 * @param dataTypeID the data type's ID.
+	 * @return the record for the Address Model data type.
+	 * @throws IOException if the database can't be accessed.
+	 */
+	abstract DBRecord getRecord(long dataTypeID) throws IOException;
+
+	/**
+	 * Gets an iterator over all Address Model data type records.
+	 * @return the Address Model data type record iterator.
+	 * @throws IOException if the database can't be accessed.
+	 */
+	abstract RecordIterator getRecords() throws IOException;
+
+	/**
+	 * Removes the Address Model data type record with the specified ID.
+	 * @param dataTypeID the ID of the data type.
+	 * @return true if the record is removed.
+	 * @throws IOException if the database can't be accessed.
+	 */
+	abstract boolean removeRecord(long dataTypeID) throws IOException;
+
+	/**
+	 * Updates the Address Model data type table with the provided record.
+	 * @param record the new record
+	 * @param setLastChangeTime true means change the last change time in the record to the
+	 * current time before putting the record in the database.
+	 * @throws IOException if the database can't be accessed.
+	 */
+	abstract void updateRecord(DBRecord record, boolean setLastChangeTime) throws IOException;
+
+	/**
+	 * Deletes the Address Model data type table from the database with the specified database handle.
+	 * @param handle handle to the database where the table should get deleted.
+	 * @throws IOException if the database can't be accessed.
+	 */
+	abstract void deleteTable(DBHandle handle) throws IOException;
+
+	/**
+	 * Gets an array with the IDs of all data types in the Address Model table that were derived
+	 * from the source data type archive indicated by the source archive ID.
+	 * @param archiveID the ID of the source archive whose data types we want.
+	 * @return the array data type IDs.
+	 * @throws IOException if the database can't be accessed.
+	 */
+//	abstract Field[] getRecordIdsForSourceArchive(long archiveID) throws IOException;
+
+	/**
+	 * Get Address Model record whose sourceID and datatypeID match the specified Universal IDs.
+	 * @param sourceID universal source archive ID
+	 * @param datatypeID universal datatype ID
+	 * @return Address Model record found or null
+	 * @throws IOException if IO error occurs
+	 */
+//	abstract DBRecord getRecordWithIDs(UniversalID sourceID, UniversalID datatypeID)
+//			throws IOException;
+
+}
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/data/AddressModelDBAdapterNoTable.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/data/AddressModelDBAdapterNoTable.java
new file mode 100644
index 000000000..dfc24b638
--- /dev/null
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/data/AddressModelDBAdapterNoTable.java
@@ -0,0 +1,70 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package ghidra.program.database.data;
+
+import ghidra.program.database.util.EmptyRecordIterator;
+import ghidra.util.UniversalID;
+
+import java.io.IOException;
+
+import db.*;
+
+/**
+ * Adapter needed for a read-only version of data type manager that is not going
+ * to be upgraded, and there is no Address Model table in the data type manager.
+ */
+class AddressModelDBAdapterNoTable extends AddressModelDBAdapter {
+
+	/**
+	 * Gets a pre-table version of the adapter for the Address Model database table.
+	 * @param handle handle to the database which doesn't contain the table.
+	 */
+	public AddressModelDBAdapterNoTable(DBHandle handle) {
+		// no table required
+	}
+
+	@Override
+	DBRecord createRecord(long dataTypeID, byte modelID) throws IOException {
+		throw new UnsupportedOperationException(
+			"Not allowed to update version prior to existence of Address Model Data Types table.");
+	}
+
+	@Override
+	public DBRecord getRecord(long addrModelID) throws IOException {
+		return null;
+	}
+
+	@Override
+	public RecordIterator getRecords() throws IOException {
+		return new EmptyRecordIterator();
+	}
+
+	@Override
+	public void updateRecord(DBRecord record, boolean setLastChangeTime) throws IOException {
+		throw new UnsupportedOperationException();
+	}
+
+	@Override
+	public boolean removeRecord(long addrModelID) throws IOException {
+		return false;
+	}
+
+	@Override
+	protected void deleteTable(DBHandle handle) {
+		// do nothing
+	}
+
+}
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/data/AddressModelDBAdapterV0.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/data/AddressModelDBAdapterV0.java
new file mode 100644
index 000000000..86160b03c
--- /dev/null
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/data/AddressModelDBAdapterV0.java
@@ -0,0 +1,111 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package ghidra.program.database.data;
+
+import java.io.IOException;
+
+import db.*;
+import ghidra.program.model.data.*;
+import ghidra.util.Msg;
+import ghidra.util.UniversalID;
+import ghidra.util.UniversalIdGenerator;
+import ghidra.util.exception.VersionException;
+
+/**
+ * Version 0 implementation for accessing the Address Model database table.
+ */
+class AddressModelDBAdapterV0 extends AddressModelDBAdapter {
+	static final int VERSION = 0;
+	static final int V0_ADDRESS_MODEL_DT_ID_COL = 0;
+	static final int V0_ADDRESS_MODEL_ID_COL = 1;
+
+	static final Schema V0_ADDRESS_MODEL_SCHEMA = new Schema(VERSION, "Address Model ID",
+		new Field[] { LongField.INSTANCE, ByteField.INSTANCE },
+		new String[] { "Data Type ID", "Return Type ID" }
+	);
+
+	private Table table;
+
+	/**
+	 * Gets a version 0 adapter for the Function Definition database table.
+	 * @param handle handle to the database containing the table.
+	 * @param openMode {@link DBConstants} value.
+	 * @throws VersionException if the the table's version does not match the expected version
+	 * for this adapter.
+	 * @throws IOException if unable to create database table.
+	 */
+	public AddressModelDBAdapterV0(DBHandle handle, int openMode) throws VersionException, IOException {
+
+		if (openMode == DBConstants.CREATE) {
+			table = handle.createTable(ADDRESS_MODEL_TABLE_NAME, V0_ADDRESS_MODEL_SCHEMA,
+				new int[] { V0_ADDRESS_MODEL_DT_ID_COL });
+		}
+		else {
+			table = handle.getTable(ADDRESS_MODEL_TABLE_NAME);
+			if (table == null) {
+				throw new VersionException("Missing Table: " + ADDRESS_MODEL_TABLE_NAME, 0, true);
+			}
+			int version = table.getSchema().getVersion();
+			if (version != VERSION) {
+				String msg = "Expected version " + VERSION + " for table " + ADDRESS_MODEL_TABLE_NAME +
+					" but got " + table.getSchema().getVersion();
+				if (version < VERSION) {
+					throw new VersionException(msg, VersionException.OLDER_VERSION, true);
+				}
+				throw new VersionException(msg, VersionException.NEWER_VERSION, false);
+			}
+		}
+	}
+
+	@Override
+	public DBRecord createRecord(long dataTypeID, byte modelID) throws IOException {
+//		throw new UnsupportedOperationException("Not allowed to update prior version #" + VERSION +
+//			" of " + ADDRESS_MODEL_TABLE_NAME + " table.");
+
+		long tableKey = table.getKey();
+		DBRecord record = V0_ADDRESS_MODEL_SCHEMA.createRecord(tableKey);
+		record.setLongValue(V0_ADDRESS_MODEL_DT_ID_COL, dataTypeID);
+		record.setByteValue(V0_ADDRESS_MODEL_ID_COL, modelID);
+		table.putRecord(record);
+		return record;
+	}
+
+	@Override
+	public DBRecord getRecord(long dataTypeID) throws IOException {
+		return table.getRecord(dataTypeID);
+	}
+
+	@Override
+	public RecordIterator getRecords() throws IOException {
+		return table.iterator();
+	}
+
+	@Override
+	public void updateRecord(DBRecord record, boolean setLastChangeTime) throws IOException {
+		throw new UnsupportedOperationException();
+	}
+
+	@Override
+	public boolean removeRecord(long dataTypeID) throws IOException {
+		return table.deleteRecord(dataTypeID);
+	}
+
+	@Override
+	protected void deleteTable(DBHandle handle) throws IOException {
+		handle.deleteTable(ADDRESS_MODEL_TABLE_NAME);
+	}
+
+}
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/data/DataTypeDB.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/data/DataTypeDB.java
index 930c028bc..a30f4d625 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/data/DataTypeDB.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/data/DataTypeDB.java
@@ -47,6 +47,7 @@ abstract class DataTypeDB extends DatabaseObject implements DataType {
 	protected Lock lock;
 	private volatile String name;
 	private volatile Category category;
+	protected AddressModel addressModel;
 
 	protected DataTypeDB(DataTypeManagerDB dataMgr, DBObjectCache<DataTypeDB> cache,
 			DBRecord record) {
@@ -571,6 +572,16 @@ abstract class DataTypeDB extends DatabaseObject implements DataType {
 			getName().equals(otherDt.getName()) && isEquivalent(otherDt);
 	}
 
+	@Override
+	public AddressModel getAddressModel() {
+		return addressModel;
+	}
+
+	@Override
+	public void setAddressModel(AddressModel addressModel) {
+		this.addressModel = addressModel;
+	}
+
 	@Override
 	public boolean isEncodable() {
 		return false;
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/function/FunctionDB.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/function/FunctionDB.java
index fa6010054..6c22b6ce8 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/function/FunctionDB.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/function/FunctionDB.java
@@ -1382,7 +1382,7 @@ public class FunctionDB extends DatabaseObject implements Function {
 
 				if (updateType == FunctionUpdateType.DYNAMIC_STORAGE_ALL_PARAMS &&
 					!thisParamRemoved &&
-					CompilerSpec.CALLING_CONVENTION_thiscall.equals(callingConvention) &&
+					callingConvention.startsWith(CompilerSpec.CALLING_CONVENTION_thiscall) &&
 					newParams.size() != 0) {
 					// Attempt to remove inferred unnamed 'this' parameter
 					// WARNING! This is a bit of a hack - not sure how to account for what may be auto-params
@@ -2238,7 +2238,7 @@ public class FunctionDB extends DatabaseObject implements Function {
 	 */
 	private static boolean removeExplicitThisParameter(List<? extends Variable> params,
 			String callingConventionName) {
-		if (CompilerSpec.CALLING_CONVENTION_thiscall.equals(callingConventionName)) {
+		if (callingConventionName.startsWith(CompilerSpec.CALLING_CONVENTION_thiscall)) {
 			int thisIndex = findExplicitThisParameter(params);
 			if (thisIndex >= 0) {
 				params.remove(thisIndex); // remove explicit 'this' parameter
@@ -2254,7 +2254,7 @@ public class FunctionDB extends DatabaseObject implements Function {
 	 * @return true if 'this' parameter removed
 	 */
 	private boolean removeExplicitThisParameter() {
-		if (CompilerSpec.CALLING_CONVENTION_thiscall.equals(getCallingConventionName())) {
+		if (getCallingConventionName().startsWith(CompilerSpec.CALLING_CONVENTION_thiscall)) {
 			int thisIndex = findExplicitThisParameter(params);
 			if (thisIndex >= 0) {
 				removeParameter(thisIndex); // remove explicit 'this' parameter
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/AbstractDataType.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/AbstractDataType.java
index 4d09c023f..3d17122fd 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/AbstractDataType.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/AbstractDataType.java
@@ -37,6 +37,7 @@ public abstract class AbstractDataType implements DataType {
 	protected CategoryPath categoryPath;
 	protected final DataTypeManager dataMgr;
 	private DataOrganization dataOrganization;
+	protected AddressModel addressModel;
 
 	protected AbstractDataType(CategoryPath path, String name, DataTypeManager dataTypeManager) {
 		if (path == null) {
@@ -100,7 +101,11 @@ public abstract class AbstractDataType implements DataType {
 
 	@Override
 	public String getName() {
-		return name;
+		if (null == addressModel) {
+			return name;
+		} else {
+			return name + " " + addressModel.toString();
+		}
 	}
 
 	@Override
@@ -276,6 +281,16 @@ public abstract class AbstractDataType implements DataType {
 		return getDefaultLabelPrefix(buf, settings, len, options);
 	}
 
+	@Override
+	public AddressModel getAddressModel() {
+		return addressModel;
+	}
+
+	@Override
+	public void setAddressModel(AddressModel addressModel) {
+		this.addressModel = addressModel;
+	}
+
 	@Override
 	public boolean isEncodable() {
 		return false;
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/AddressModel.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/AddressModel.java
new file mode 100644
index 000000000..174173f1d
--- /dev/null
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/AddressModel.java
@@ -0,0 +1,71 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package ghidra.program.model.data;
+
+/**
+ *
+ */
+public enum AddressModel {
+	unknown(""),
+	near("near"),
+	far("far"),
+	huge("huge");
+
+	@SuppressWarnings("unused")
+	private String modelName;
+
+	private AddressModel(String name) {
+		this.modelName = name;
+	}
+
+	/**
+	 * Returns the AddressModel which is likely to correspond with the
+	 * specified prototype name.
+	 * @param modelName specific address model name
+	 * @return AddressModel
+	 */
+	public static AddressModel guessFromName(String modelName) {
+		if (modelName == null) {
+			return unknown;
+		}
+		modelName = modelName.toLowerCase();
+		for (AddressModel value : AddressModel.values()) {
+			if (value == unknown) {
+				continue;
+			}
+			if (modelName.contains(value.name())) {
+				return value;
+			}
+		}
+		return unknown;
+	}
+
+	/**
+	 * Returns the AddressModel corresponding to the specified
+	 * ordinal.
+	 * @param ordinal generic address model ordinal
+	 * @return AddressModel
+	 */
+	public static AddressModel get(int ordinal) {
+		AddressModel[] values = AddressModel.values();
+		if (ordinal >= 0 && ordinal < values.length) {
+			return values[ordinal];
+		}
+		return unknown;
+	}
+
+}
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/AddressModelDataType.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/AddressModelDataType.java
new file mode 100644
index 000000000..26123476a
--- /dev/null
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/AddressModelDataType.java
@@ -0,0 +1,120 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package ghidra.program.model.data;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.NoSuchElementException;
+
+/**
+ *
+ */
+public class AddressModelDataType {//implements AddressModel {
+
+//	/**
+//	 * Emulate enum by creating static array of Address Models.
+//	 */
+//	private static List<AddressModel> values = new ArrayList<>(8);
+//
+//	@SuppressWarnings("unused")
+//	private String modelName;
+//	private byte ordinal;
+//
+//	AddressModelDataType(String name, int value) {
+//		this.modelName = name;
+//		this.ordinal = (byte) value;
+//		try {
+//			values.stream().filter(conv -> conv.name().equals(modelName)).findAny().orElseThrow();
+//		} catch (NoSuchElementException e) {
+//			values.add(this);
+//			System.out.print("Adding Address Model ".concat(Integer.toString(ordinal)).concat(" = '")
+//					.concat(modelName).concat("'\n"));
+//		}
+//	}
+//
+//	/**
+//	 * Returns the AddressModel which is likely to correspond with the
+//	 * specified prototype name.
+//	 * @param modelName specific address model name
+//	 * @return AddressModel
+//	 */
+//	public static AddressModel guessFromName(String modelName) {
+//		if (modelName == null) {
+//			return unknown;
+//		}
+//		modelName = modelName.toLowerCase();
+//		for (AddressModel value : AddressModelDataType.values()) {
+//			if (value == unknown) {
+//				continue;
+//			}
+//			if (modelName.contains(value.name())) {
+//				return value;
+//			}
+//		}
+//		return unknown;
+//	}
+//
+//	/**
+//	 * Returns the AddressModel corresponding to the specified
+//	 * ordinal.
+//	 * @param ordinal generic address model ordinal
+//	 * @return AddressModel
+//	 */
+//	public static AddressModel get(int ordinal) {
+//		AddressModel[] values = AddressModelDataType.values();
+//		if (ordinal >= 0 && ordinal < values.length) {
+//			return values[ordinal];
+//		}
+//		return unknown;
+//	}
+//
+//	/**
+//	 * Part of emulation of enums
+//	 */
+//	@Override
+//	public String name() {
+//		return modelName;
+//	}
+//
+//	/**
+//	 * Part of emulation of enums
+//	 */
+//	@Override
+//	public int ordinal() {
+//		return ordinal;
+//	}
+//
+//	/**
+//	 * Part of emulation of enums
+//	 */
+//	public static AddressModel[] values() {
+//		return values.toArray(AddressModel[]::new);
+//	}
+//
+//	@Override
+//	public void setComment(String comment) {
+//		// TODO Auto-generated method stub
+//
+//	}
+//
+//	@Override
+//	public String getComment() {
+//		// TODO Auto-generated method stub
+//		return null;
+//	}
+
+}
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/DataType.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/DataType.java
index ae1ae0b56..405dafa93 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/DataType.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/DataType.java
@@ -59,6 +59,10 @@ public interface DataType {
 	static final long NO_SOURCE_SYNC_TIME = 0L;
 	static final long NO_LAST_CHANGE_TIME = 0L;
 
+	public AddressModel getAddressModel();
+
+	public void setAddressModel(AddressModel addressModel);
+
 	/**
 	 * Indicates if the length of this data-type is determined based upon the
 	 * {@link DataOrganization} obtained from the associated {@link DataTypeManager}.
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/DataTypeDB.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/DataTypeDB.java
new file mode 100644
index 000000000..e69de29bb
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/GenericCallingConvention.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/GenericCallingConvention.java
index cdd9ab024..2a4422d53 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/GenericCallingConvention.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/GenericCallingConvention.java
@@ -55,7 +55,18 @@ public enum GenericCallingConvention {
 	/**
 	 * Similar to fastcall but extended vector registers are used
 	 */
-	vectorcall(CompilerSpec.CALLING_CONVENTION_vectorcall);
+	vectorcall(CompilerSpec.CALLING_CONVENTION_vectorcall),
+
+	/**
+	 * Similar to stdcall but with reverse parameter stacking
+	 */
+	pascal(CompilerSpec.CALLING_CONVENTION_pascal),
+
+	/**
+	 * Similar to pascal but using a far pointer
+	 */
+	pascal16far(CompilerSpec.CALLING_CONVENTION_pascal + "16far")
+	;
 
 	// Append new conventions to the bottom only so that ordinal values will not change!!
 
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/OffsetCodePointerDataType.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/OffsetCodePointerDataType.java
new file mode 100644
index 000000000..ac5d93b88
--- /dev/null
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/OffsetCodePointerDataType.java
@@ -0,0 +1,100 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package ghidra.program.model.data;
+
+import ghidra.docking.settings.Settings;
+import ghidra.program.model.address.Address;
+import ghidra.program.model.address.AddressOutOfBoundsException;
+import ghidra.program.model.mem.MemBuffer;
+import ghidra.program.model.mem.MemoryAccessException;
+import ghidra.util.classfinder.ClassTranslator;
+
+public class OffsetCodePointerDataType extends BuiltIn {
+	static {
+		ClassTranslator.put("ghidra.program.model.data.OffsetCodePointer",
+			OffsetCodePointerDataType.class.getName());
+	}
+
+	public static OffsetCodePointerDataType dataType = new OffsetCodePointerDataType();
+
+	public OffsetCodePointerDataType() {
+		this(null);
+	}
+
+	public OffsetCodePointerDataType(DataTypeManager dtm) {
+		super(null, "OffsetCodeAddress", dtm);
+	}
+
+	@Override
+	public DataType clone(DataTypeManager dtm) {
+		if (dtm == getDataTypeManager()) {
+			return this;
+		}
+		return new OffsetCodePointerDataType(dtm);
+	}
+
+	@Override
+	public String getMnemonic(Settings settings) {
+		return "_offsetAddr";
+	}
+
+	@Override
+	public int getLength() {
+		return 2;
+	}
+
+	@Override
+	public String getDescription() {
+		return "16 bit offset address";
+	}
+
+	/**
+	 * @see ghidra.program.model.data.DataType#getValue(ghidra.program.model.mem.MemBuffer, ghidra.docking.settings.Settings, int)
+	 */
+	@Override
+	public Object getValue(MemBuffer buf, Settings settings, int length) {
+		Address addr = buf.getAddress();
+		try {
+			long segment = 0;
+			long offset = buf.getShort(2) & 0xffff;
+			long addrValue = segment << 16 | offset;
+			return addr.getNewAddress(addrValue, true);
+		}
+		catch (AddressOutOfBoundsException | MemoryAccessException ex) {
+			// Do nothing... Tried to form an address that was not readable or
+			// writeable.
+		}
+		return null;
+	}
+
+	@Override
+	public Class<?> getValueClass(Settings settings) {
+		return Address.class;
+	}
+
+	/**
+	 * @see ghidra.program.model.data.DataType#getRepresentation(ghidra.program.model.mem.MemBuffer, ghidra.docking.settings.Settings, int)
+	 */
+	@Override
+	public String getRepresentation(MemBuffer buf, Settings settings, int length) {
+
+		Object obj = getValue(buf, settings, length);
+		if (obj == null)
+			return "??";
+		return obj.toString();
+	}
+
+}
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/SegmentCodePointerDataType.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/SegmentCodePointerDataType.java
new file mode 100644
index 000000000..1754b028d
--- /dev/null
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/data/SegmentCodePointerDataType.java
@@ -0,0 +1,101 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package ghidra.program.model.data;
+
+import ghidra.docking.settings.Settings;
+import ghidra.program.model.address.Address;
+import ghidra.program.model.address.AddressOutOfBoundsException;
+import ghidra.program.model.mem.MemBuffer;
+import ghidra.program.model.mem.MemoryAccessException;
+import ghidra.util.classfinder.ClassTranslator;
+
+public class SegmentCodePointerDataType extends BuiltIn {
+	static {
+		ClassTranslator.put("ghidra.program.model.data.SegmentCodePointer",
+			SegmentCodePointerDataType.class.getName());
+	}
+
+	public static SegmentCodePointerDataType dataType = new SegmentCodePointerDataType();
+
+	public SegmentCodePointerDataType() {
+		this(null);
+	}
+
+	public SegmentCodePointerDataType(DataTypeManager dtm) {
+		super(null, "SegmentCodeAddress", dtm);
+	}
+
+	@Override
+	public DataType clone(DataTypeManager dtm) {
+		if (dtm == getDataTypeManager()) {
+			return this;
+		}
+		return new SegmentCodePointerDataType(dtm);
+	}
+
+	@Override
+	public String getMnemonic(Settings settings) {
+		return "_segmentAddr";
+	}
+
+	@Override
+	public int getLength() {
+		return 2;
+	}
+
+
+	@Override
+	public String getDescription() {
+		return "Code 16 bit segment address";
+	}
+
+	/**
+	 * @see ghidra.program.model.data.DataType#getValue(ghidra.program.model.mem.MemBuffer, ghidra.docking.settings.Settings, int)
+	 */
+	@Override
+	public Object getValue(MemBuffer buf, Settings settings, int length) {
+		Address addr = buf.getAddress();
+		try {
+			long segment = buf.getShort(0) & 0xffff;
+			long offset = 0;
+			long addrValue = segment << 16 | offset;
+			return addr.getNewAddress(addrValue, true);
+		}
+		catch (AddressOutOfBoundsException | MemoryAccessException ex) {
+			// Do nothing... Tried to form an address that was not readable or
+			// writeable.
+		}
+		return null;
+	}
+
+	@Override
+	public Class<?> getValueClass(Settings settings) {
+		return Address.class;
+	}
+
+	/**
+	 * @see ghidra.program.model.data.DataType#getRepresentation(ghidra.program.model.mem.MemBuffer, ghidra.docking.settings.Settings, int)
+	 */
+	@Override
+	public String getRepresentation(MemBuffer buf, Settings settings, int length) {
+
+		Object obj = getValue(buf, settings, length);
+		if (obj == null)
+			return "??";
+		return obj.toString();
+	}
+
+}
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/lang/PrototypeModel.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/lang/PrototypeModel.java
index 52a7dd2c3..db44b18d0 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/lang/PrototypeModel.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/lang/PrototypeModel.java
@@ -86,7 +86,7 @@ public class PrototypeModel {
 		compatModel = model;
 		localRange = new AddressSet(model.localRange);
 		paramRange = new AddressSet(model.paramRange);
-		hasThis = model.hasThis || name.equals(CompilerSpec.CALLING_CONVENTION_thiscall);
+		hasThis = model.hasThis || name.startsWith(CompilerSpec.CALLING_CONVENTION_thiscall);
 		isConstruct = model.isConstruct;
 		genericCallingConvention = GenericCallingConvention.getGenericCallingConvention(name);
 		hasUponEntry = model.hasUponEntry;
@@ -332,19 +332,44 @@ public class PrototypeModel {
 			injectAutoThisParam = true;
 			DataType[] ammendedTypes = new DataType[dataTypes.length + 1];
 			ammendedTypes[0] = dataTypes[0];
-			ammendedTypes[1] = new PointerDataType(program.getDataTypeManager());
+			if (name.endsWith("16far")) { // FAR pointers
+				ammendedTypes[1] = new PointerDataType(null, 4, program.getDataTypeManager());
+			} else {
+				ammendedTypes[1] = new PointerDataType(program.getDataTypeManager());
+			}
 			if (dataTypes.length > 1) {
 				System.arraycopy(dataTypes, 1, ammendedTypes, 2, dataTypes.length - 1);
 			}
 			dataTypes = ammendedTypes;
 		}
 
+		// Deal with PASCAL convention parameter ordering
+		if (name.contains(GenericCallingConvention.pascal.name())) {
+			// swap around the datatypes to map variable storage high-to-low
+			for (int i = 1; i <= (dataTypes.length-1) / 2; i++) {
+				DataType tmp = dataTypes[dataTypes.length - i];
+				dataTypes[dataTypes.length - i] = dataTypes[i];
+				dataTypes[i] = tmp;
+			}
+		}
+
+		// Assign storage
 		ArrayList<VariableStorage> res = new ArrayList<>();
 		outputParams.assignMap(program, dataTypes, res, addAutoParams);
 		inputParams.assignMap(program, dataTypes, res, addAutoParams);
 		VariableStorage[] finalres = new VariableStorage[res.size()];
 		res.toArray(finalres);
 
+		// Deal with PASCAL convention parameter ordering
+		if (name.contains(GenericCallingConvention.pascal.name())) {
+			// swap back the resulting storage to be ordered correctly
+			for (int i = 1; i <= (finalres.length-1) / 2; i++) {
+				VariableStorage tmp = finalres[finalres.length - i];
+				finalres[finalres.length - i] = finalres[i];
+				finalres[i] = tmp;
+			}
+		}
+
 		if (injectAutoThisParam) {
 
 			Varnode[] thisVarnodes = finalres[1].getVarnodes();
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/listing/FunctionSignature.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/listing/FunctionSignature.java
index cef0ffe7c..e90df4f37 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/listing/FunctionSignature.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/listing/FunctionSignature.java
@@ -77,4 +77,9 @@ public interface FunctionSignature {
 	 * @return true if the if the given signature is equivalent to this signature.
 	 */
 	public boolean isEquivalentSignature(FunctionSignature signature);
+
+	/**
+	 * Returns the address model.
+	 */
+	public AddressModel getAddressModel();
 }
diff --git a/Ghidra/Framework/SoftwareModeling/src/test/java/ghidra/program/model/TestDoubleFunctionSignature.java b/Ghidra/Framework/SoftwareModeling/src/test/java/ghidra/program/model/TestDoubleFunctionSignature.java
index 165b47a3b..efbaab38a 100644
--- a/Ghidra/Framework/SoftwareModeling/src/test/java/ghidra/program/model/TestDoubleFunctionSignature.java
+++ b/Ghidra/Framework/SoftwareModeling/src/test/java/ghidra/program/model/TestDoubleFunctionSignature.java
@@ -83,4 +83,9 @@ public class TestDoubleFunctionSignature implements FunctionSignature {
 	public boolean isEquivalentSignature(FunctionSignature signature) {
 		throw new UnsupportedOperationException();
 	}
+
+	@Override
+	public AddressModel getAddressModel() {
+		throw new UnsupportedOperationException();
+	}
 }
diff --git a/Ghidra/Framework/SoftwareModeling/src/test/java/ghidra/program/model/data/StubDataType.java b/Ghidra/Framework/SoftwareModeling/src/test/java/ghidra/program/model/data/StubDataType.java
index 4a803fa91..11b0d7201 100644
--- a/Ghidra/Framework/SoftwareModeling/src/test/java/ghidra/program/model/data/StubDataType.java
+++ b/Ghidra/Framework/SoftwareModeling/src/test/java/ghidra/program/model/data/StubDataType.java
@@ -312,4 +312,14 @@ public class StubDataType implements DataType {
 	public DataOrganization getDataOrganization() {
 		throw new UnsupportedOperationException();
 	}
+
+	@Override
+	public AddressModel getAddressModel() {
+		throw new UnsupportedOperationException();
+	}
+
+	@Override
+	public void setAddressModel(AddressModel addressModel) {
+		throw new UnsupportedOperationException();
+	}
 }
diff --git a/Ghidra/Processors/x86/data/languages/x86-16.cspec b/Ghidra/Processors/x86/data/languages/x86-16.cspec
index 9b7c3a602..c5e62c0b4 100644
--- a/Ghidra/Processors/x86/data/languages/x86-16.cspec
+++ b/Ghidra/Processors/x86/data/languages/x86-16.cspec
@@ -18,19 +18,20 @@
 	<long_double_size value="10" />
 	<!-- alignment varies between MIcrosoft and Borland -->
 	<!--
+	-->
 	<size_alignment_map>
 		<entry size="1" alignment="1" />
 		<entry size="2" alignment="2" />
 		<entry size="4" alignment="2" />
 		<entry size="8" alignment="2" />
 	</size_alignment_map>
-	-->
   </data_organization>
   
   <global>
     <range space="ram"/>
   </global>
   <stackpointer register="SP" space="ram"/>
+
   <default_proto>
     <prototype name="__stdcall16near" extrapop="unknown" stackshift="2">
       <input>
@@ -85,6 +86,210 @@
       <register name="DF"/>
     </unaffected>
   </prototype>
+  <prototype name="__pascal16near" extrapop="unknown" stackshift="2">
+    <input>
+      <pentry minsize="1" maxsize="500" align="2">
+        <addr offset="2" space="stack"/>
+      </pentry>
+    </input>
+    <output>
+      <pentry minsize="1" maxsize="2">
+        <register name="AX"/>
+      </pentry>
+      <pentry minsize="3" maxsize="4">
+        <addr space="join" piece1="DX" piece2="AX"/>
+      </pentry>
+    </output>
+    <unaffected>
+      <register name="SP"/>
+      <register name="BP"/>
+      <register name="SI"/>
+      <register name="DI"/>
+      <register name="DS"/>
+      <register name="CS"/>
+      <register name="ES"/>
+      <register name="SS"/>
+      <register name="DF"/>
+    </unaffected>
+  </prototype>
+  <prototype name="__pascal16far" extrapop="unknown" stackshift="4">
+    <input>
+      <pentry minsize="1" maxsize="500" align="2">
+        <addr offset="4" space="stack"/>
+      </pentry>
+    </input>
+    <output>
+        <pentry minsize="1" maxsize="2">
+          <register name="AX"/>
+        </pentry>
+        <pentry minsize="3" maxsize="4">
+          <addr space="join" piece1="DX" piece2="AX"/>
+        </pentry>
+    </output>
+    <unaffected>
+      <register name="SP"/>
+      <register name="BP"/>
+      <register name="SI"/>
+      <register name="DI"/>
+      <register name="DS"/>
+      <register name="CS"/>
+      <register name="ES"/>
+      <register name="SS"/>
+      <register name="DF"/>
+    </unaffected>
+  </prototype>
+
+  <prototype name="__thispascal16near" extrapop="unknown" stackshift="2" hasthis="true">
+    <input>
+      <pentry minsize="1" maxsize="500" align="2">
+        <addr offset="2" space="stack"/>
+      </pentry>
+    </input>
+    <output>
+      <pentry minsize="1" maxsize="2">
+        <register name="AX"/>
+      </pentry>
+      <pentry minsize="3" maxsize="4">
+        <addr space="join" piece1="DX" piece2="AX"/>
+      </pentry>
+    </output>
+    <unaffected>
+      <register name="SP"/>
+      <register name="BP"/>
+      <register name="SI"/>
+      <register name="DI"/>
+      <register name="DS"/>
+      <register name="CS"/>
+      <register name="ES"/>
+      <register name="SS"/>
+      <register name="DF"/>
+    </unaffected>
+  </prototype>
+
+  <prototype name="__thispascal16far" extrapop="unknown" stackshift="4" hasthis="true">
+    <input>
+      <pentry minsize="1" maxsize="500" align="2">
+        <addr offset="4" space="stack"/>
+      </pentry>
+    </input>
+    <output>
+        <pentry minsize="1" maxsize="2">
+          <register name="AX"/>
+        </pentry>
+        <pentry minsize="3" maxsize="4">
+          <addr space="join" piece1="DX" piece2="AX"/>
+        </pentry>
+    </output>
+    <unaffected>
+      <register name="SP"/>
+      <register name="BP"/>
+      <register name="SI"/>
+      <register name="DI"/>
+      <register name="DS"/>
+      <register name="CS"/>
+      <register name="ES"/>
+      <register name="SS"/>
+      <register name="DF"/>
+    </unaffected>
+  </prototype>
+
+  <prototype name="__thiscall16far" extrapop="unknown" stackshift="4" hasthis="true">
+    <input>
+      <pentry minsize="1" maxsize="500" align="2">
+        <addr offset="4" space="stack"/>
+      </pentry>
+    </input>
+    <output>
+        <pentry minsize="1" maxsize="2">
+          <register name="AX"/>
+        </pentry>
+        <pentry minsize="3" maxsize="4">
+          <addr space="join" piece1="DX" piece2="AX"/>
+        </pentry>
+    </output>
+    <unaffected>
+      <register name="SP"/>
+      <register name="BP"/>
+      <register name="SI"/>
+      <register name="DI"/>
+      <register name="DS"/>
+      <register name="CS"/>
+      <register name="ES"/>
+      <register name="SS"/>
+      <register name="DF"/>
+    </unaffected>
+  </prototype>
+
+  <prototype name="__fastcall16near" extrapop="unknown" stackshift="2">
+    <input>
+      <pentry minsize="1" maxsize="2">
+        <register name="AX"/>
+      </pentry>
+      <pentry minsize="1" maxsize="2">
+        <register name="DX"/>
+      </pentry>
+      <pentry minsize="1" maxsize="2">
+        <register name="CX"/>
+      </pentry>
+      <pentry minsize="1" maxsize="500" align="2">
+        <addr offset="2" space="stack"/>
+      </pentry>
+    </input>
+    <output>
+      <pentry minsize="1" maxsize="2">
+        <register name="AX"/>
+      </pentry>
+      <pentry minsize="3" maxsize="4">
+        <addr space="join" piece1="DX" piece2="AX"/>
+      </pentry>
+    </output>
+    <unaffected>
+      <register name="SP"/>
+      <register name="BP"/>
+      <register name="SI"/>
+      <register name="DI"/>
+      <register name="DS"/>
+      <register name="CS"/>
+      <register name="ES"/>
+      <register name="SS"/>
+      <register name="DF"/>
+    </unaffected>
+  </prototype>
+  <prototype name="__fastcall16far" extrapop="unknown" stackshift="4">
+    <input>
+      <pentry minsize="1" maxsize="2">
+        <register name="AX"/>
+      </pentry>
+      <pentry minsize="1" maxsize="2">
+        <register name="DX"/>
+      </pentry>
+      <pentry minsize="1" maxsize="2">
+        <register name="CX"/>
+      </pentry>
+      <pentry minsize="1" maxsize="500" align="2">
+        <addr offset="4" space="stack"/>
+      </pentry>
+    </input>
+    <output>
+        <pentry minsize="1" maxsize="2">
+          <register name="AX"/>
+        </pentry>
+        <pentry minsize="3" maxsize="4">
+          <addr space="join" piece1="DX" piece2="AX"/>
+        </pentry>
+    </output>
+    <unaffected>
+      <register name="SP"/>
+      <register name="BP"/>
+      <register name="SI"/>
+      <register name="DI"/>
+      <register name="DS"/>
+      <register name="CS"/>
+      <register name="ES"/>
+      <register name="SS"/>
+      <register name="DF"/>
+    </unaffected>
+  </prototype>
   <prototype name="__stdcall16far" extrapop="unknown" stackshift="4">
     <input>
       <pentry minsize="1" maxsize="500" align="2">
diff --git a/Ghidra/Processors/x86/data/languages/x86-16.cspec.afw b/Ghidra/Processors/x86/data/languages/x86-16.cspec.afw
new file mode 100644
index 000000000..4d6989a05
--- /dev/null
+++ b/Ghidra/Processors/x86/data/languages/x86-16.cspec.afw
@@ -0,0 +1,382 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<compiler_spec>
+
+  <data_organization>
+	<absolute_max_alignment value="0" /> <!-- no maximum alignment -->
+	<machine_alignment value="2" />
+	<default_alignment value="1" />
+	<default_pointer_alignment value="2" />
+	<pointer_size value="2" /> <!-- near pointer, TODO: how do we define far 4-byte pointer? -->
+	<wchar_size value="2" />
+	<short_size value="2" />
+	<integer_size value="2" />
+	<long_size value="4" />
+	<long_long_size value="4" />
+	<float_size value="4" />
+	<double_size value="8" />
+	<long_double_size value="10" />
+	<!-- alignment varies between MIcrosoft and Borland -->
+	<!--
+	-->
+	<size_alignment_map>
+		<entry size="1" alignment="1" />
+		<entry size="2" alignment="2" />
+		<entry size="4" alignment="2" />
+		<entry size="8" alignment="2" />
+	</size_alignment_map>
+  </data_organization>
+
+  <global>
+    <range space="ram"/>
+  </global>
+  <stackpointer register="SP" space="ram"/>
+
+  <default_proto>
+    <prototype name="__stdcall16near" extrapop="unknown" stackshift="2">
+      <input>
+        <pentry minsize="1" maxsize="500" align="2">
+          <addr offset="2" space="stack"/>
+        </pentry>
+      </input>
+      <output>
+        <pentry minsize="1" maxsize="2">
+          <register name="AX"/>
+        </pentry>
+        <pentry minsize="3" maxsize="4">
+          <addr space="join" piece1="DX" piece2="AX"/>
+        </pentry>
+      </output>
+      <unaffected>
+        <register name="SP"/>
+        <register name="BP"/>
+        <register name="SI"/>
+        <register name="DI"/>
+        <register name="DS"/>
+        <register name="CS"/>
+        <register name="ES"/>
+        <register name="SS"/>
+        <register name="DF"/>
+      </unaffected>
+    </prototype>
+  </default_proto>
+  <prototype name="__cdecl16near" extrapop="2" stackshift="2">
+    <input>
+      <pentry minsize="1" maxsize="500" align="2">
+        <addr offset="2" space="stack"/>
+      </pentry>
+    </input>
+    <output>
+        <pentry minsize="1" maxsize="2">
+          <register name="AX"/>
+        </pentry>
+        <pentry minsize="3" maxsize="4">
+          <addr space="join" piece1="DX" piece2="AX"/>
+        </pentry>
+    </output>
+    <unaffected>
+      <register name="SP"/>
+      <register name="BP"/>
+      <register name="SI"/>
+      <register name="DI"/>
+      <register name="DS"/>
+      <register name="CS"/>
+      <register name="ES"/>
+      <register name="SS"/>
+      <register name="DF"/>
+    </unaffected>
+  </prototype>
+  <prototype name="__pascal16near" extrapop="unknown" stackshift="2" isrighttoleft="false">
+    <input>
+      <pentry minsize="1" maxsize="500" align="2">
+        <addr offset="2" space="stack"/>
+      </pentry>
+    </input>
+    <output>
+      <pentry minsize="1" maxsize="2">
+        <register name="AX"/>
+      </pentry>
+      <pentry minsize="3" maxsize="4">
+        <addr space="join" piece1="DX" piece2="AX"/>
+      </pentry>
+    </output>
+    <unaffected>
+      <register name="SP"/>
+      <register name="BP"/>
+      <register name="SI"/>
+      <register name="DI"/>
+      <register name="DS"/>
+      <register name="CS"/>
+      <register name="ES"/>
+      <register name="SS"/>
+      <register name="DF"/>
+    </unaffected>
+  </prototype>
+  <prototype name="__pascal16far" extrapop="unknown" stackshift="4" isrighttoleft="false">
+    <input>
+      <pentry minsize="1" maxsize="500" align="2">
+        <addr offset="4" space="stack"/>
+      </pentry>
+    </input>
+    <output>
+        <pentry minsize="1" maxsize="2">
+          <register name="AX"/>
+        </pentry>
+        <pentry minsize="3" maxsize="4">
+          <addr space="join" piece1="DX" piece2="AX"/>
+        </pentry>
+    </output>
+    <unaffected>
+      <register name="SP"/>
+      <register name="BP"/>
+      <register name="SI"/>
+      <register name="DI"/>
+      <register name="DS"/>
+      <register name="CS"/>
+      <register name="ES"/>
+      <register name="SS"/>
+      <register name="DF"/>
+    </unaffected>
+  </prototype>
+
+  <prototype name="__thispascal16near" extrapop="unknown" stackshift="2" hasthis="true" isrighttoleft="false">
+    <input>
+      <pentry minsize="1" maxsize="500" align="2">
+        <addr offset="2" space="stack"/>
+      </pentry>
+    </input>
+    <output>
+      <pentry minsize="1" maxsize="2">
+        <register name="AX"/>
+      </pentry>
+      <pentry minsize="3" maxsize="4">
+        <addr space="join" piece1="DX" piece2="AX"/>
+      </pentry>
+    </output>
+    <unaffected>
+      <register name="SP"/>
+      <register name="BP"/>
+      <register name="SI"/>
+      <register name="DI"/>
+      <register name="DS"/>
+      <register name="CS"/>
+      <register name="ES"/>
+      <register name="SS"/>
+      <register name="DF"/>
+    </unaffected>
+  </prototype>
+
+  <prototype name="__thispascal16far" extrapop="unknown" stackshift="4" hasthis="true" isrighttoleft="false">
+    <input>
+      <pentry minsize="1" maxsize="500" align="2">
+        <addr offset="4" space="stack"/>
+      </pentry>
+    </input>
+    <output>
+        <pentry minsize="1" maxsize="2">
+          <register name="AX"/>
+        </pentry>
+        <pentry minsize="3" maxsize="4">
+          <addr space="join" piece1="DX" piece2="AX"/>
+        </pentry>
+    </output>
+    <unaffected>
+      <register name="SP"/>
+      <register name="BP"/>
+      <register name="SI"/>
+      <register name="DI"/>
+      <register name="DS"/>
+      <register name="CS"/>
+      <register name="ES"/>
+      <register name="SS"/>
+      <register name="DF"/>
+    </unaffected>
+  </prototype>
+
+  <prototype name="__thiscall16far" extrapop="unknown" stackshift="4" hasthis="true">
+    <input>
+      <pentry minsize="1" maxsize="500" align="2">
+        <addr offset="4" space="stack"/>
+      </pentry>
+    </input>
+    <output>
+        <pentry minsize="1" maxsize="2">
+          <register name="AX"/>
+        </pentry>
+        <pentry minsize="3" maxsize="4">
+          <addr space="join" piece1="DX" piece2="AX"/>
+        </pentry>
+    </output>
+    <unaffected>
+      <register name="SP"/>
+      <register name="BP"/>
+      <register name="SI"/>
+      <register name="DI"/>
+      <register name="DS"/>
+      <register name="CS"/>
+      <register name="ES"/>
+      <register name="SS"/>
+      <register name="DF"/>
+    </unaffected>
+  </prototype>
+
+  <prototype name="__fastcall16near" extrapop="unknown" stackshift="2">
+    <input>
+      <pentry minsize="1" maxsize="2">
+        <register name="AX"/>
+      </pentry>
+      <pentry minsize="1" maxsize="2">
+        <register name="DX"/>
+      </pentry>
+      <pentry minsize="1" maxsize="2">
+        <register name="CX"/>
+      </pentry>
+      <pentry minsize="1" maxsize="500" align="2">
+        <addr offset="2" space="stack"/>
+      </pentry>
+    </input>
+    <output>
+      <pentry minsize="1" maxsize="2">
+        <register name="AX"/>
+      </pentry>
+      <pentry minsize="3" maxsize="4">
+        <addr space="join" piece1="DX" piece2="AX"/>
+      </pentry>
+    </output>
+    <unaffected>
+      <register name="SP"/>
+      <register name="BP"/>
+      <register name="SI"/>
+      <register name="DI"/>
+      <register name="DS"/>
+      <register name="CS"/>
+      <register name="ES"/>
+      <register name="SS"/>
+      <register name="DF"/>
+    </unaffected>
+  </prototype>
+  <prototype name="__fastcall16far" extrapop="unknown" stackshift="4">
+    <input>
+      <pentry minsize="1" maxsize="2">
+        <register name="AX"/>
+      </pentry>
+      <pentry minsize="1" maxsize="2">
+        <register name="DX"/>
+      </pentry>
+      <pentry minsize="1" maxsize="2">
+        <register name="CX"/>
+      </pentry>
+      <pentry minsize="1" maxsize="500" align="2">
+        <addr offset="4" space="stack"/>
+      </pentry>
+    </input>
+    <output>
+        <pentry minsize="1" maxsize="2">
+          <register name="AX"/>
+        </pentry>
+        <pentry minsize="3" maxsize="4">
+          <addr space="join" piece1="DX" piece2="AX"/>
+        </pentry>
+    </output>
+    <unaffected>
+      <register name="SP"/>
+      <register name="BP"/>
+      <register name="SI"/>
+      <register name="DI"/>
+      <register name="DS"/>
+      <register name="CS"/>
+      <register name="ES"/>
+      <register name="SS"/>
+      <register name="DF"/>
+    </unaffected>
+  </prototype>
+  <prototype name="__stdcall16far" extrapop="unknown" stackshift="4">
+    <input>
+      <pentry minsize="1" maxsize="500" align="2">
+        <addr offset="4" space="stack"/>
+      </pentry>
+    </input>
+    <output>
+        <pentry minsize="1" maxsize="2">
+          <register name="AX"/>
+        </pentry>
+        <pentry minsize="3" maxsize="4">
+          <addr space="join" piece1="DX" piece2="AX"/>
+        </pentry>
+    </output>
+    <unaffected>
+      <register name="SP"/>
+      <register name="BP"/>
+      <register name="SI"/>
+      <register name="DI"/>
+      <register name="DS"/>
+      <register name="CS"/>
+      <register name="ES"/>
+      <register name="SS"/>
+      <register name="DF"/>
+    </unaffected>
+  </prototype>
+  <prototype name="__cdecl16far" extrapop="4" stackshift="4">
+    <input>
+      <pentry minsize="1" maxsize="500" align="2">
+        <addr offset="4" space="stack"/>
+      </pentry>
+    </input>
+    <output>
+      <pentry minsize="1" maxsize="2">
+        <register name="AX"/>
+      </pentry>
+      <pentry minsize="3" maxsize="4">
+        <addr space="join" piece1="DX" piece2="AX"/>
+      </pentry>
+    </output>
+    <unaffected>
+      <register name="SP"/>
+      <register name="BP"/>
+      <register name="SI"/>
+      <register name="DI"/>
+      <register name="DS"/>
+      <register name="CS"/>
+      <register name="ES"/>
+      <register name="SS"/>
+      <register name="DF"/>
+    </unaffected>
+  </prototype>
+  <prototype name="__regcall" extrapop="2" stackshift="2">
+    <input>
+      <pentry minsize="1" maxsize="2">
+        <register name="AX"/>
+      </pentry>
+      <pentry minsize="1" maxsize="2">
+        <register name="BX"/>
+      </pentry>
+      <pentry minsize="1" maxsize="2">
+        <register name="CX"/>
+      </pentry>
+      <pentry minsize="1" maxsize="2">
+        <register name="DX"/>
+      </pentry>
+    </input>
+    <output>
+        <pentry minsize="1" maxsize="2">
+          <register name="AX"/>
+        </pentry>
+        <pentry minsize="3" maxsize="4">
+          <addr space="join" piece1="DX" piece2="AX"/>
+        </pentry>
+    </output>
+    <unaffected>
+      <register name="SP"/>
+      <register name="BP"/>
+      <register name="CX"/>
+      <register name="DX"/>
+      <register name="SI"/>
+      <register name="DI"/>
+      <register name="DS"/>
+      <register name="CS"/>
+      <register name="ES"/>
+      <register name="SS"/>
+      <register name="DF"/>
+    </unaffected>
+  </prototype>
+</compiler_spec>
diff --git a/GhidraBuild/EclipsePlugins/GhidraSleighEditor/ghidra.xtext.sleigh/.antlr-generator-3.2.0-patch.jar b/GhidraBuild/EclipsePlugins/GhidraSleighEditor/ghidra.xtext.sleigh/.antlr-generator-3.2.0-patch.jar
new file mode 100644
index 0000000000000000000000000000000000000000..8b56e29f311c266e96dc98cd051b127f0df3f0f2
GIT binary patch
literal 139246
zcmeFa>zdofwKn+QSAoq;@+F@QHqHlGt^KuH$3&84NtR>n*$+Pu0Gn`=1VfO0aGv~~
zJDO+y&!x<j%)3@q0R@n3vej+5lXPOSNubWPYSlWgufF2{J^YU+-yMJW>FrZvyqr!R
zef5z37?Wgna@fmfJtIq&iJ6v@a$!!(EI;fet7R!4Pl}WA(p--7DW3BW`65der|LO<
zmyZ+MzBH3rF-?|vX5!CDULE$T%W9cVdyl>{jECbq$><BdPV;4Aq~l~!<;%m~YB@3^
zQD#!iPK`xAIqYS#%A7CqQNB#aJ!6b-hrRJ~Ij<fZ9Gn!(@oLx?f07D~RQ<G+-R##y
za)!AtD%r-W$`@%lTjsOnbsG|cFw;r7%KDYtPo~K)<t#bB_K0W<a@{tM>Y%$sSRM>|
zmZ!^o7syB#WmT1n;-r}Io-~WKy|G<OMSIKbXpIAuX65X1TCS>|G0n3g!IR0PC-$~l
zUQY6Aoag%v{6K8-fdI-;?vA1;82VwD^wSDG96b6`BVg!H>};54iGx9;?Ez>fN**1m
zFvyB27NMsv|Nbk)ZSHjd)G}#(ns$=;>BzUUQ9j&jtYaMf0Ud@#Qel5SYg0dS$gQqT
z+s<6y^0U+mI@`Qul^K%_0g7LErJH`uXc$?R7yG{Djdraz12a|{==aMGy4$gtC5aoQ
zQ8Wx=f4@<;cIt}(i5PgRZ_^&edEy6t<XAhQMATm{iY2hqyhy(Az?+WE+#BYx>pEGs
zCkAQiez8F_7HRr5tt=hIe&j`2RznGJzxeOV-2wAOF~v=p`jMS_xfj^O8m|fB;tSnH
zCzEoROiU|x!YK26+Yjm!|7FL)#E_Y#$;cXcUN#)s>I`EXU+P{=K|h*K5L)rb_Yy10
z>M@ALV2W>+5HVTKm&LUBC7)aZ@hp>3G06ebg8Dk_{rwMrTb0XiPZs5BUWxAyjQ{%Y
zZw&E0pPdzpayA8}_Luxpy%&Gyi!xiK%c7i#->S}{oPau8ZfI?JInT4BRaWG)G~e(Z
zE&dGh>SfmM$PPj`3<Jv!t#(gm$)ZSxplww7X5gbdS*{lOvq^HY;cb2~&k3$)n?`w-
zFRFS{59C64?VgjhNyvr7!e#}nN!_cc_+S60_**XImv4-}%Wojz)3N;iz>r_^izHpv
zMdcUT&~Cy11N%G3R@3R_AXx%^3|C84<{Q-*t$Vj#x~i7tbbFn%WU^YTq;;mh|Hpr~
zSEuM~pjJ&ST)P5IOgvHR{apjK&+}QnAU4NPpks{6h4DB^PtTJ@RvE|Tbe=4WVKFI|
z5=Q?~L$Dx>0sk-Gsvee$Rjz=w%1+k+`^OJykett+uYP)xJ&&W~pWY3V4vg1JU2pS$
zNdV~1-3}th@j}ZD{q~$syXT2Gl7XuJ55R{gub!xtu|wN)aTpxG1CwhFR`Ud4AzHbj
zy~qyzAh293-Z8*(aRQF>7c6x-8_dDi?ru7=UCXll?!jFfYEca)<;h8&4T{~Z##ZP?
zz8yKc27Hp2yN2ihtN32vxW2t(_KW;)s~qfgcD!0FfWUSxtYd|dkDa&UT|1waE71R!
zAWk!R47P8VV+VfV+O{1BI|f|Nad5IhR-VsJ7D<+aElRM+az*L`GAx(RipdiAa3<e9
zFh<Fws*gyL^7vkM4)s>7oS(Juss!T(<-W|CLsO4p9m-?dj%?fWcJ0gfGFy~`bW)_J
z{Vb`*!xBiLzs!?#jPtZC%gM037^KUj3kugAQDi%wjaggnj)kvQ!)dYX>&Jz~6Z1*F
z%m-C*G8?SsHy@4XN3r8Z;f~SF$^oc>MUnQwVy35n2)djLz(YA2G{nKp#}h`O@B2Zt
zV?1J~usDNq#(M?08(^=}(@9Y+`$?7!7WsVb;9h^XBFpz(Y}t<S$lanot72K=7#7oc
zxgZ(W0z|~xf&7et1UAsWv){su^U1tF$&<xwFfAAPAQ@u2ctzyscvLlg(jbb@7+2)G
zmhE+jsx{oa1lAkyp}skc#6Vka;O)A(1dQa<`SNl=kV2b7N0>l(R*i73o9()VLHU6V
zu42Fa*)S*pFSj`)$F^e6_u^d_+>WzUfO-eUndZ|WXxbYulw;dgfD`rE3ndQJ?Jkrb
zI(8J@aG_Rnutxa+{0Ff|H(w}+C^X#uq9sLZuAQtM+m{v9w5V=j-&`+p9VgmFFl@ND
z2H-*p$nJq}NK(%?*v*&6cU-!;_P<9pkhv|a?D)8?Y~S5=eKw0C&k-n8oGQ5_w{t@{
ze(XDr6YRpo%~&)#T)=E!fbfm?#t%HO0)ev&bkB<Xyq`{>C|HzWBddG@#+`6=J+fOE
zN(8)Y*}K42oFZ*3L|_#&K@#446d`s8yw<M0=`2XY(ca*O_CwFH!0PPUjP43ZJbSyl
z0g12gdiHh4@~c2b6nlY-wGq3!1HU$qA=jmTaC6{@ZP#%@(0txNM#Tc8)vXRE0B&`5
zk-S}a0ed)G0@Xt(ck|l@7oY9g-gPm^t&z2n3z3WE@4Q`BbHNo$_I9H{<GM6;Yy}?v
z!@aT>KoBc<b50QA5L{z!u#*!M+fImz_L^i41IWxEzdsqwVLx!w(|~b=t`CjHe&8pm
z8|H^sbE3UK?%%=~Vt`-l?nk4N7#tMNph{{X^5>)L7?%~e8*8VqOCCRxS`vdNw}J#}
zH$Hu_?b|_Yx%MuyMvS3*25v!05_@2|W7pm(oD(A;AyvHu)p-F?c)qwX6!^F{T`Ss&
zgVc!tYh4fGmY9GTBtsm6U)mED@YL%;uzu#^=EorfgCE0gV%Kqyl;yab=7b95p}g@v
zfM$qXD{%IM#@p^46Zb<K@@FxRU1S2&@&m{&^97WiRX%{wEScPJ4IB&9wC_Szy(f(z
zMxm2#1IRL`Hy;KrCWyoK6e$$5IiybAwHQF}atk8~a5^ol%YNGe6kW_#`2YuGd`n9a
zfPM_Y`|US?4LdSg<Tt%80T@vLSr|+y_8Nwu71&aUmZMMFqFZ1xFpSs^ya;FIvxXr_
zYI%u?CO-QL1+$0K;)cPs=%;2)@@Z1s{J=uDLX6j*;L+WeIauQJav_x^H(3g74YVKj
zF6_mOClFS8OLQDI0oP|hBFG&OAuo;F1_7K10A=j#*SjKN=E)`L^KS=5LB~oYgnhjg
z(2@3yPXft<JU<BcyEe!)6*iBv4C);sBuV}uAhQoT8@m2#a9OSvgIS&{?b{7N({Vx%
z5>9{DwJre!1{KBV5)?knl%ZZ>J@@S#RmX+2DztYB&IFxz#UhdRwYlwXzIiSw)x+q<
zn|CW$KcuaZ2Qm4s6SZ@dh$`i~_*U*e#|MfD!7J=I=-q9*@$Pso1dB0*Svxuw>!DC<
znoQEwB!PyoZ%a||%|`;mi#QH;$||;x#J?r&j$?U22tL7ecilJJ$70>ySi%6tZJxUy
z#4?>e$dbzndIFFDv)Yp31~|?O!McU8i`ffE2+5Yfa|3C2c5}!GV<!sZJ$aW6Fe>f4
zZb$bA=zuK-BpZ7|YWK)$*HJQ`PcDg$XY-69OjJgNvckK`c7e}~VyKn&+O7@jb&Cfn
z@|?(x_f&FgMi9%SI=wmIL{J+CPPE@K-nmiLa+MKTb&DGnKtLBd`)PGLt1}pa8Ozee
zYC636LP1^$@%>I3PvAR6W-iOyq!YZ@2GRwV*$Zly$>bCUO(39dVe%eKtE@dm#!6J%
zP)N5V8v&?>ASV4?bhc7GX9IXO4d|TQd<lFDlp`3<om7BSd&6$3u~)jKApraWD+u>P
zS_JyA=1Xt9`4ADq3<p>24yYsDKMa`x@ML6tbB-1!n{i~tJM9p}iBmu)Zg*JV!V382
zQ+It2gwCECG8kV#@T8VOXefxEBCCwsQCL8y3gcLdEQEJ#hFFx1BZ5OF6etinoQ@{t
z`OViT_HonWSnf5V`3fge+Qz~R;8sThA~1lQ(B64O+4!@9wO$2E1Cq-duR-8BE@V;G
ze!}}KCm9GN#$pIFTu-+Et3d#1Eo4CZjiH$RDq{#iOF*l&6G8J1%vbQNOX*~gW5{4p
zCfPKZ-*_`14|JeR*=d5&#v9dYah6{WZV7ROgfy&u5yvt)1u*acZa#b12Ep`rPfj3N
zq~qc&ACN8Wjk}J604#{(?c9A`joKGdpPP3c2e_hLcb9merNiy#7nnF(6tjQJEgVDQ
z&%uZ7ye-?~7(xhl3Vyh%NS!t+^2v?wPiV3%awOTU+ih(JJe?|d$WI2hB67nZ9AZm%
z(=4q)h~=1%%h_!$23_Rvf!UMcQ<t`sRTC+tJdQq}>9nD}u`Sq!?MJ?=G5nIlUx9_7
ztmU2E_?&{B!YCX#Z;L~>Rne(T4YERW3%Th*rQRdY0yD9rcY&T^VlcSnU4R1*M2S0f
z+-v>MU<h+-cI1u?Lp?XfHMQS5+&&b5t_^Jma_7DFp>Yd3&GQ@I(Y6P(AKP)PT|9-n
zqm@t6je!r&|4!^+@vk{)Ngd$2xcTw(VQB((dQSjs7G93wcJ50U{*YST_4h<ZY6n23
z%*oy5#yi2lPpr%}cj9)o0O}~Ryz}<y970-{8NmmuTH+$Ou|WgW=K=5!Od9s-yg!AU
zSSaI&W4rOP!y6D=55Kg%Iw$X{A*?+yeNgF3*ld$8=VEnZrw6zt22iV5{+<RV%_$IG
ziSR_r*E~P3X?}?@L=dMzR=poK5MEZo!Ah<M)Td&3lu!8$r~@J!{e1{n;kwv}6=+)q
z%Q1Xn#aM0(BT?YtlHRS*7s#3P#$cmmum7#6iA8=^toy~2C|8!GxIl=5g&+u3x+vz$
zt+8w}gqd0(<P`ns8RVRf=sZvh6e)XE9Q=$BNTP|JQ7zJ)fv8j*p7Xi6fKe;_`pq;R
zfm+VPksW&dpR3-ZhX<lXMCJO8MhCChtXx#)3{Jjq?aOfHszC+w(^K-x%uN`Bk^?xX
zMA)O!W3%-<ucm{aJGDhHEI>(Vx=uJ8j!Y{_@}Yw`Cr;wuk$JBQSQn?K6rgNSm7}FO
zOU{}v%gS`@Q5q(QVv$FqJ2GZ1?1h;Fr;Rep1%-WAhPM%vBrphn3xt>}hX5y1Nisws
zN>hF@kU#{>k|1$X-*t2Mj;#2`DP`~~I-$r9rtm4(r?TZNWC(RvOe#~{Dkd6$Rg4+9
zSv~|-fH2Lo5IqJFWbX33<yImv9}wbMZZb*}Q$ef`LJ(p*u?E8!hW|;NB9>Hsm!~xP
z<r3(t8Fvc{%K5@N=#=OJlb!aHh1|XFlyht*Waf#N#@St-vYZtKc|_Dl;XAoyN}E;#
zmtitNJja0<B%{<0%sfQAu*gl_ApU1SMC3_pB2Eev{bZPTjhQd=3lzUF$=fW6%rH+=
z+Zqj{D6{?v_8aqt1-Z$3h-*w5mMfsgshSD3bmU~_Fdt>k&>8trbf@P{c73>J$PSg^
z95Oz{RT_YzgJmv4DTtr4l>D;^djrnxWaOFI$Q`D!KeU4EuG~)ID68G9%u#CP))3lE
z$4Tx8NXqNMT;wOXAQqP<*isuZnQZ8IcV&zlFL?xQGAU3lR2K3JfFsW0QEo?moaT3h
zj@>x;X#!jP$$WKL!YpC67?$FC7GLuUTAR?6L>G3$%7SoYrKxjAU}oc#)MX4aI>a4@
zkYG8X&_O!UvFW->CPb-#gCuJqDsB!(ev&vQ{K1k0Cnd}CJAG|Q%rwl$$yotLP0X1#
z58-6<8L__AHV$lDE)m>8)G*^w>Jb|ATrbO#k&8G`cX_`>Kx(KWz$<8krRxvfBoCq#
zg8jQZd<m}d`XmP>u?;naya`w<=;g4VK$g{NDxlkhI0EisrjsB{XdI@oo8D>6Bj*iw
z6HpC`a@MDQg}{J9KIW$26iwUDvNXjX+sUmU9p(95p*Dzu5Rs^Bd5N4g2fHAnBoG`N
zMtlG{g6CRkk`Db*nB5gbvwa2)ngQbAFj!_ah8R9YY%Y^xK!Kvdx2qa3fnP`2(4+vd
zBg+X=e;D79le&G_P|l~PmnLLzh!P5F7rYTWq+_mDGKzx?BtJBncYYqt{=x8O0vlO#
zv`9{f(b=_a>Uvq29vtR}o=M*OR%WLNZ+cfS&i4Il<}DnK*wz98=l7mAvK)YiMZ855
z5w~31kMmJ-XG9nE>`XWS0wZP#OrP!wFm9yQK0`!S3l=8Duo1{u!D!^WHU!C8nAthh
z*!Eo^TW0057)j+oWy(O%BYy}n9_%I~Yj{Vn#l{V4A}ngb7EOem6?e7v8e;r&(f~kC
zK85>UhebBsk%NO`27aFBj-5f{eplFtW)28Ro#wf1=T2_l>0^V?it}-Xz*WrHs9%az
z+e9)VuL>M1K{i281L;QV>`=^;FiUdyvZZ$!77@#PxdNm13nc1fAV{EgC7lfKp%SIV
zDiJ|hmxh-~Fbq=<2^j7Q(XsLPNrLe+g>pEDk_k2w1Qdxqb7(>OJjz@ritjYqY3BWz
zLRdL<GeTrKe`vxRd6Y)}C?1A)1?_AnQjon!ayKPY(czGE%@80%z<5W_XKi;@<dumt
z1U0&kEIZC!p#ZNsOc3(S1<R6_^GhWa-IMnuM%|3^V3?;SLY0AO8;<fIyDR&0)w~;Q
zP>aN1`ClS7J&B7t_w_)sIAm*s3{Z%%l@(Cozy-!Nq0bnCS@mt?G`b`3xcx9?#b^Xe
z6r|t4oiW3WaV1+SN>fe{X3wdHIWxi7r9oiEVS+g1Q0u@{?T*Zw$7{Mt;HCB`h?B_f
z3=A1p$fRXiV9y_&jEiiM9P|+`Z?Z5?L}CKy+TFg>w?G-dtgQcYvM`dRabC>q!1#av
zALB>3teHp84n$pg^1N8SSPdT@h&Cy896Hc4b|4oA(-}+Xk&re{iZ~8?2M=V5fP)7$
z`nWuxojLfQ6bj~#2mcd882<^0%Qy>2r`eR_)-O$_|H~6#$i-O!!;>+Brfa<*(F=l~
zK*5nDiJ#;D5QGg8UJiPw#74f8+|S%-Xbp3eB13RDN;3GcS;NfEeB6@Md#7jV9%L4j
zDM|=z4tuflIC}8RJBl74JksMRe)7QgpCDp)^Z<$r#PoF?nd)x-b8<npFc86ly*}(w
z`i34-kZCJM`UA5{Mu4>vsYSG2{Lv7E*(kChm5nSfg|i{J90*QenPsJJJ`CarW<uUD
z9>N+Tfh%G##5AoTbdNClu=XDVSw{g8017TAaD36mkYE1!^3#u>Ch6?YleBmlyewW;
zFX{VVKTcBj-6;9-`{KLerT_Z$rT5+GPuBMzPJ%ZdUVGpFeB!@*Qrd5R_}-@9-~IfP
z_4>ohi|?MizI<7n7uj_3OY+xuXXzxKe>z6HKc~OEdGdq*`pJp+=9d%e&6Dq~H$R_T
zzWL?*;?*&YA)60z&3yXt-R#qQl%IaO{OP?I%O_`YHk`yL<DY)|>r0I1&(n1Jv>1JV
zczFFa7*CT_Uw{#K7wk?Rxj~qwVGfrr3sD%t&`A*IBu-MmT0Q~`nptV?xK`%FOE69y
zz?g^3FINwM!L5CQ#^j5iA`gHG<6257V=j{uZ9vWOd4O1f<OUk4oo3Zd18(cUEGR2;
zU2M0p{ckFSUBMxv)DGXUN*p$)08q}U*6B-vHkr{$tfPUrkk&HcK0^{nPQP;4qlv(n
zin`d`rbGq$VL2(w6G%=0t+|P1s#$Ao{HcAqdSd>?dGYe&GlW5yT+Y+#$G7DZ@3fed
zzWMXf;QaBk%Mae_^-m&8qBhVyn*YlO|D=k>*7;eIoV@zW(Z?VE77d5_oAcSHPk*r&
z_Fuohtp4g=tQN0+_?+fH{WAV|`SjWOFg$m2%Upf;VX~Y?f3DI~=b8V0`LP&3vGR*^
zXH*@1PV>+ITKRt|fB50_&2gC=eVT>mZ{L_p%YJ)#K966!)zhCL1at?VetesLPV-0e
zVi=kiarDCa*-zj8?ZuDh?_W=Y?9C6}^XYd_-j#p5cvU?4CA)}UqWQ1%oh{R4Ik|*{
zwK7)=WPhx2t;*yHT@S@+MhFuD#T3(9ruRIM?}Qa+`#2?V9}>+@N@1g^wSDl1$?{ve
zm|)lkpPG~9xBP@4vw6ao6a?Joo1s*Ld<K0!(&7@+=f}Mug-M~`inIvgxU>gNVr4RH
z*M<s|xf~y6Fl5Dv<R832oK&qzluFYe>r`PU3N?||!gD47jG{6UgNzxGfG9_jO&p^t
zH}V-qmUAK%<B#v(J^hmbnea3xGjGE*ZcaPM!D5<3U&-8_$P_^tTi2~<$)FnksCcVQ
z<?D+n;6h}#JZMVv`7zTYhdn`_$j-E`Mw3;6RI>mo)q(;m4VbtPmFdrCz_=TmWMlz@
zYv?$ZmxsO4@BvYuE#d(80|Z>S16+zT<%o2(?fpd^V6kGk0!>PK5^b083$(_ejk^QE
z<Y0x(KutT`Zeod;f}pV;aQfT_Fg4cNP;;Y2LZIOJSRNUnkm7>_j~~cMhu$y*Uzr5B
z#fE-v#kgY0BL(Ki=o+3`9>^rbUvksX878m*@KFF?vf!Xi8ggD$4UwwR5u(-x_P@kx
zZ!1l=o>m(AO%A#>Nfz)!<cV&p$$O<$y#;`!OtBkgqyePX-*0=i#I4&vNCThci2x97
zsJ|s}tPku#GSRWzZ@!LV%QuWupxowK0viajOToy73gev8VrvVJZ~$8>&?y-Z>efn2
zOt!fP!kAjwlIg@PjsKcQqc!c#*S3aVx1o$yD|h>R;kIsFVFIIWxl_c{HKa?|J-5&t
zRdHdD%WB!#|7P8|*2Ze&W0aDK`Of;?4rN#rQ-=IPUhJCQ`tZZM$KMT}{`KwCcQ0Q*
zee+@P?&bTx{PfMs*GJEv4qiX~@b2aD;KRG4<G;Lo^Zc9VPrv)~`|sWijz0bH4sVa%
zzL#?p=ZJ8PiQIF=*<tU(WM-JijW%5Z<sDesVG2|5+#ZhHQS8FH--3kzxO9Y=gLQZW
z31cv{-P}P2-z<kygFVc^k3o{34ZCDndP=+n^Rb+`oRRp3k)+j}c!<tuoCIlWVHyb@
z9vW0Q;efG*Wl0>x31X_{X=p)|j3`ivGs>co?WKsAWe>vu9xO;U9^o2pvq$@nrrI!?
zB!l@h{9<FoB}W2VtPR;@Wr+UdSVOps!H#?w!t@1>0a=`8kOid~cz+10!W06#HO6q?
z(Lf-$zBG9j<f9-+5K6*Av@&bxW=N?#Oaf;VIe7>#1>1u$hvg!Pc$^~1?9h%K<X(5&
zFdhy4_{yaLfVZw&GDw8D2a(p;P6j3y8jQ|L6G`ZaO76C)1T6%H1oZSj(JpTbC)|UF
z(y}`2al{XZkGQ1X_ep7rv{+h?&2j8dJ_g<x>Q3ESiU_dvjx?U9w$n4EoJ{K*;f?@)
zPS_xLfi<>Q@A4TE^X}C^BVTBfwVJR&-FjCHLu+MrUTTxsb_wj)7Vnu(>aswsz9jc+
z1kQ=DwSyp{#(AI93MD`Qv)m^AL&{YJvj4g(EgNeu)f;vxOeXJhh(D1Y_6S1T^im3A
zuiL{cUlKEiz&7P=4Z79jHHVIikk6;aqotJY7N!z4lehC!3HdQgs}BU__;^)JvV*6j
z<*D+wlNFfSO1^qOA%g5F%zes*T*Lkaxoh+*ezQ|Dz8TdtSBwBYAr~8#*(D5$>F(F>
zR*@&xgp3>v_Ze`Q%0g{W<^nS5gv&t%V`TB0BoD3oRCFPYElkE^Tcjn)ywK$&6u=m%
z(DDOW_kioJV<gpdzF3gI=Vp>_SKFfU_Qo}v3t@9@-l)5#IZB&_GkMS&KqGIMBKF=@
zG5~?SHF|AcAaGk|5}t+Vs9&A29ClK|0r+=t(Z&BT$u>Pm{xdTyv>{{-3<8HeT&FCu
z9Kk%BWe`H-!7S|o3mb%3qXY441CsTt1Nnso6`djM-!bN+%T%u2IjsjSPyOm#j^VS2
z3ma>sq1WHRs0L2HD6E$i#@iKc_!i?cA+`xb6d`Ekl&$aKtQaAwry{uz;KjfXp!#BI
z*P^Vd?-m6P{$USSsfl<k6a*C6FyKi|IOpNP7&N5#O2^cYd-OSH)2No06A0XZSu^t-
zl9mSsMfp56>A|-Q9Oy7B&UB*ii*!m-MS)<ccR5AQ5-V)Sg?FX_z@*iH0F*`#p_U;B
zjbSHJ*7iH#ipA0_N6KIsJ4=`i6x4<37|^17xJj|&=J3Qsm>#UQ34<f3<{)YmFGeRO
zEY|CXBuu3TqY{yRX$;kAF^A`5-NB>xcwj6`bwfWqNC?WAm_ugpnOM%Y*OrpQs<AD~
z6X4TIa2>=AU~+HeL!(}aQE`Ff?9AMoBZLD~d&a$}-6hfM1H=0LxAF?OvSZZ;#C!SF
z0E%B5hB<_qb&|uK+`=5^_}sR9?E8=T;@}+6h#rYGkV~O4lMS&e*66nhVsMoK!k$hJ
z+igP4*c(9tX<8nPZr$O~hEBJm@BXdABS@DFxPE~vg6=tvp`z`MO`J1zbY6&4S57iR
z9zYHM;6x~2a3WC=6&$epM0kfcpsQT0jgd!((Cryul7Ngv)IbL0hr`u!S<a+{UHqs|
zuN=Y<0S=Ibd~U$5?u2yExiJLx0!px&zQi#Rz$ziPIWw36;cPxXbeh%Jfi_NZVCn?9
zh|Ebc%qNGv59J9Icn0Dq6!4BGL4Y{e5Bb2!vzzfSdXLr$%TvHuT+Bw`aSg}S3uazS
zFs0EXzcA>7E~V9UCca~$Fjy7e>6lg~VJ$2&qHr`cm_Dr<VbrVsi)pK|Yu)QT{){kw
zNFD)a*yVYi%dT79X=^CHVqoNREgNPeEZ1bZpzU!Rgj&pyZ4A68PflzYtPVEP5u_<=
zZ^H|jEK4G^lZ3qANI3AvSJ)t6M3AU|G6aNtW1N(Pi&cuNZ<w}u0C+9=o+AgIdcYVm
z$N~uwhdnZc;O&R*3D>Z~(S$%BmluaU%diZXn%H2Nq`cv<XZP)%z{sLLGwxTSTo7nP
z^%(LmyA+v%cv4$L#wA8}*n1rrR_gUV2OUR-+xH{<iIS*q*{&fzc}%9?_k1JlLy%$i
zy}lKhecw0xaEau<E}Aj>PKatI#_Q5wr;kR>eu!d@kEf1{vL3#8kzw~kwBVq_0IwtJ
z8DHFf>{FEp?_j=eqc{9;(30(Qmrmae@Yr%p`iaLhY*YXm>^oG>q2m3(!^k2Obn(N1
z9~gi30~#bA27N2WMNMzeg-Z>(R9E&T{`Nf&qqNZwwxb{8p%od_BPM}b0Tspz2Sddd
z8X<;)c~j{qz_-w+NqP8)X$4?bgoX2XwR{_eER5L;`VP%AK#M+x;9`kjTZP6@1CyX$
zXneGEJTYEiT4$H`27~XrUf+)UA$k!5!rI#b_KIeUx!M?75cgvbqr)<x5<L}vyqF$h
z0JOXwy7YatdldF#Y=ijZy+^4iwM>Q*f)EoBVn(0nGA1zM%lPc1CP;`jkvFm=_T-V}
zlc|t|xVdYh>Of?;`A?X8QgZmi_Xu3{HS%dD)A_gb49e<5aWQ-?E{3mhBI~!rEgt^f
zdG>qvxYl0(-hC>b)Y@zDgqTRYAexKo3yTZcIMCg^?A4>ELDo39n6U*M>ZhmL<)Gmk
z+Zg!<WN|A5XjxEUd2=XwMqnk_uO_R>61NkT%ZOx@bfdk7&Duk0M0N^2{awUs;*cr>
zVxq+F2jUM<=a^`Hq31`6XP`9k<{R-x+BeBcvN2^B00VI?m#A!#*fx1Xw_4KVTZN2{
z`d|k7QFcTlSs&l~m(Sk}et6qz2=<lWRd5x;$`b6h9Gdvk;m8P$x5Z~)Rshl(w-i&#
z@zT`)@eg^Mu#i>km`T=DhdsxI&>YfzJNNRDKT6>$hcu^%AMcV!h&M!Z;vjY)*N2^Y
znCHV$ki)wSHu_Nl1HNRagM~VG;y}^4`NM2j&A(mEH89o~2As(QT+sCyWp=D}LR(j;
z!4W*LDbU^NT`5xPYGOuQcF@Zt1nRI40NV*oonZGB{k8i-TO*>3$4tnXWX5`0|Cqvg
zZ8eoYwIf<HU5ZAS6RkoE)*`cHn?y0;)YP-xREDWHAV7`M5yZjke6|ATMnoO6HS&-f
zQv`7!gvl!}wn}{dW=%A-BS8dnQ{bv371@~4G$U4E!(g>#*rrCcZ=@YTpw*-!QJpd@
zlGrRlr2_bL;*<zLW4<&)V?G3H%|v&zIob}0`@w|c=Bj4jb^23p6ef5h6H(kmcRKyM
zkxCU~0J%9Qs?$=qTm2Oer%M#T2bHJ?$WR9IUfm;j4?Y3`ap;5FnhvQNEV8Lui#d3X
zs|w;@{n%lzRuk10b11xM<N*ZvCxkDORnX49gtJMZs%elac=8fhy(I?WJB=hDVtF<$
zNsDktgq!ACY_<_onw3pE_}QwZ9qXD+(L^x3kyN2x0flth_(LKuZCZ>KYOZY?S3x_#
zdx3GW+y;AcN!#GiCC<av!KXEJUZL)~X!B|DdR_e2Y$${y6kfmHEoK%<#Mpy+1KdC#
z)=nGP1;L1cGaxo$U)F&N@5Z!U)&bJUvjs#`6w6EUKaAp-zks2(BIh2~42A80wl{px
z<4HgCK$<d{3AP4gB&gnC0z%U94f^O5AVNGatXCkF9Rrjx<QYu^pj){*7kUK>w2ur?
z6Oh>s*al>t)5}t4qOI*jszh{h<+q?Sk^}I})fYxC>eL%k0w4N!Dc}d71JT3UX{w*#
zeKM@d30wk{yo-egcs_GA6xiyGj2rX%1TZ>jFhJ+r6a6XBil>AYXqzu@!Z4mfGZ4cO
zoRb8)2E7_h5OjhrUq4m#u=sdQ#w4Bu6I+2jR_DJ({MPfXu{<x-D_q$oJQk=na!8_X
zgD_fW4Co$%gdB&#wlQ2~YWJ`w$yE@y`ANCBY*C5=7Z_^9#vjGK#BBUGB=)3J*P`D<
zW|&qZOfM6sFZlf<kwT|ci|K$?CCR`%kfpyBFF^`QLrrC2av)RD)H};Z|BA!zc%8%U
zcm_WcCL3)z0lm2XVJC$srJZTm5SZM<SH^&_g?vF6_?m-m!05wZ4jktV-1j)>Bj7{x
z#Bk19PjE<_7vUMC2Z4JWLdel~ePT2b>e;YEoM^Za;L8hO5dRF^aH}!XdEvmvN^kw6
z{(u@Eo1Oklhue8UO@~Jgp$zcD^eGryzwaC1ef_}sXoH)6p-l)v1LxC}xc#J0#i#-#
z4fx8FYMvSNm8af%hN2(cc2zw3^xB39z_1a<tKBHgrFq0{(tKNwQ2&f)*gVA}YIPec
z-l8^j99L7siWwbyy+;ycJ4EUc$ge4B@RHf3p&&$|O^uTP@tA<XofP*t<y*z|GRA13
zhYn78E2HV|iBwea?N~*H=e<j4MUH7ttO5~U7yu`H><75uBS9-5foBTgAqlixy!ZPN
z#9ffE;n3RtS=>j)j07@8dVmi;+>n^b0w6i+W*jOe1d#X?1w|cE2*e5c+SnE-4|Mi1
z=p)e|#9{pa4!*8S0!^e!pw2{rSHL8;Lo-<KN)GSS)FcAMiKACU2H7BXTyGN6&>>_C
zJ>W#N#$QdKM@Ucc-2y%3c$kPBH%0(5%K9`F^Ni7{OUP6!4I)e;E(32#rf3HrQ3UIX
zc2#emUPGt{xga6pv#1}zUJYVFgaSbDbqIJ#=81;v00TthG(rn#74(-E-V)+bVBNty
zFJJ`<tdkkgX+yvV8xRqC`X2erZiS#xc2s*JA60xi@&Qf9hFNzB`BY=d*JOf^fz-CX
z_O7IBKt#9(7#HF{d^#rL?kA2ya33~KFU0IPMbHe85&_Q8YejLu!R&yF0mVU_PSX;<
zF|3JiYBzVyKuwAK@o-3qBEort{66%LI>^lchvcE#;G=Efv<4Uqu|XjQX7xkMGh>`m
z`~Y5JWM+{v1J7%WXUD*P#~4#+z<(Rjsz6wQAhSUqp^1;&HX*st2kjKan4{+s%3^Ir
z;1QC8@&be0h~%Iu0b&A*1X+iIP9P94O(h^K7SlhutUxhf_}oy;1d0e!o;VRU0J$HS
zC^V=u2NmrYST2?ofzmLYV?;K>T0jLtr7;yI=)3>~DSww!L8lEeguWw$LIr(FoUg_O
zb&7+n7uyY`2-?3T45!Xc2g5x>3>L<4&?g&bs|obl$*@51R78@v$8xuW<&NR43+ZO6
zvVch1Y&+-HRM?K`$OTw5dY5orGphYC9qxTrR36h865Dtrmcge(@*6xF1I_tqAGrf@
zC<p~{nHm?JK_9$^nd}JVfFEB_6NDXFL>c`CG6{X42OL|6a15HKcKI>)!r#U?*;n<=
z<kec+T>k}~<14y;&9lSQI%t7$1Wk$vAb14!5!?bTiT`*lS{0x>C7KFM8LG72&{O&+
zC%N{HDtVhb={D7L0-mvj#AFvW?^oX-uWf7=(Rcc-V;i*c_$OG^<~kB`IbZP3c#r?&
zEg>sl5<rBT+iKrzbyJ<k!UzC+UXPXRw=|XU_4w50fOgR7%Nb1bW-yk_&&Zy*Sd=r!
zkeBzU6tdgfkboVRbHog2%gwIBqg?tbB+3Qu76#=Z?T0==A_D*5SZarcP8t3?>(G2`
z%wkwVs?{w|$K%tK<U;GG?6cackC}!NARa@ka))RpLh@kk0zU+r4?QB$LLamr8^(Y%
z3qW^TUf+#jW<tbhgz_$7TEsX7X-XC@U{Yb$0_qZ+co5@(?V<zN(NJUb9fm1nZe!3N
zn9e}z6_Rm_<pb%%k|vmdb|iulF(1Ka!XU+Qj!=f!OND<R-6Y{0f{L7>iUSiAh{YUO
z1VJg@k0Y`?3TRXgqA=ms0xu48nE;arVAI2w3UV(bBriZa{HfS|<YERBZ%;5D2hvEg
zwy`W&1%YnH6u|f*W)7N!&5n)OresWmEIVi$eMIPktae~7Lu@`)C#1cFKN>_5{xL}C
z2zF8q1QjII#GVo*N*5hI5hRO$lPL{Kp+T4t!B!_E@*3&>5>T-gEwA{aMjLyOLPoIQ
zL336FqF($FufeLIAs17zJsLeN3r~Y?2TY1S=s8&vVWPAgWYEN)ssk(s)(cDxi8fsM
zDVs-bd3qNelPM9=+Sp;-F1WBmqQmip?myn2WNrT-F9<MK0NaE%nT7#U8*sq;o`6-c
zVQD1)$PNJ^)LayRGQg_1*k85)^T4n$Xo1fGOc8WqC$MW^PN4r`J|n~=2`X)Z5*xA3
zodCv7NGK^v1DKELS|ms%;3pO@AbtlAaLEzN5%?a&y8(hn5%mGU=1&@$Mc_?lRuS6p
zY1n`vsH;$i8ewJw?cgtt8Dip~0!d1+3qH2ahXoliiZ(dKEiGf{5s7!vIRU0i$A*mU
z01;p$F%K*DF*Dj|{0%YtFvf5IQx@ieWrDFBSU_QwhVPJ8VTbS<QJpXdKnDmOSj}PW
zV+VWXLR=(1<;p`Ck8)Nt20VG*mJ(FpSn!y{U3xyPfDbV~00$;xbRb;>ActBG*bJS+
zQ4h_jq2UFFnb2`3E{{HC=a>|+W#OkOWMMGR0|>-U3WGTslZRd7kwe@DltZS4F09`$
zZ)zJxZ3OiQ$A&soF^tb>0c~15*daooN2><AI`mG*m*CG2B3fm#W3;Fs0-50>rn8I%
zr?XBg3%^@*4`@OK1a!6ovJ-SM9E5qsH>3*1!t>ek0xSk`mBdP8pV2Ne)mUasv5#bm
zXqQVzAz>Ai@gQ2mB!N>1zrqL*zmck*M4O0{(f6>TXdEwr5E)?c1xFFhVKjgyLQwb`
z6Ke7Um;vH1IAx%3ymHBu4>JlqC^0a255x5k3LkwF{>IV)IJr8ZMks9gHP#!2fxzgb
z0mDNdL-Q5i&}&G{F>Vnuhjf7ncvzSzEFv)rT3To|U?7O<WF(1is16KBN129)5P|rH
z02;hH^b&FlEChZdLI_^Dv~Usjix(FUfQs?y(FWT%1UTDRG24}!Bklvbuw2?nD0v{h
z<S&FQ{4hF011Ywd#!Pq}M<5261hmTDt&yWlGjwRtA7P6O`@fuml7O7Za+vVK<o4+0
zJzsxY#3<HOI6dzvz$Csw*0_o&Mf`W^ORelQ?tp5RAV>~tKjIWPny&J&O`ZbVF%p7G
z1h|<kn&}kFZw)1jyPgjpA%Y2A9Qeof8V!3W4mB(=Hoe2a#jOS0;|e=!3(`A9C8KS^
zKy=O9RGq|q9afc4oandnQjLr2^0+Y%LdBQ?eQS=iM*5-)U|2BqxMDv`)Idb=MsWg$
z35FWNR=Tq>72rqygir*D3GtRb`Gzx?C<GDo5!VzH%`|1I%q@r_n3Ix?yr%cYI>V2r
zXEd0Nq5~Ray~tQW#fq?`S{cf$8Rg(Aqnl)GgZI$H3rg$&Nic1W_6DVKCquSTa~U^g
z=H;R6V9?h>>%+J+9Vas+9lgh$w}U%hR@G{6d8jD79b*>U*j?h{c|;~f`+{lGemWm;
z0VyyR^Pb>@K=I%JlAgy#G8*~A<lpb{5F`X0UE&;wvX@`&Pp@$X@h|~NOk^>iYm2|B
zC#|PI9R87dLudl0mY5S!xhX1I{WPT~h_VTmg^o9|1R!t01H|!>c*u`2mD?h1#MXDt
z<=Y7yPDw3GIgL-*B;=p<T;3JavL{6a&tFbUwkIv4)!2SAkq|*OdzX%<%r=9(zG`@T
z9#Xz9$9w_OO-`qPFFX?P@H>2vF$k{T*3C*H6FQ_G48g!k6Yb-}%7Q-K4OcbTBCs)Z
zReLX}rM2ehn4-ZmI={y}2;$Oc6mlG&UW5BU`(ikoZ|jYBHSssl8N;ZRK2W4(K&$R*
zvT{TJG$(;I@Qtoy9#HFzx~zE~Yj04cxy2iTiKJRkypsMv>qIp*CPJq@cw+DTF&<x`
zD%!Ly=m=AAELgfh#D^6JN#wCGgFYD@VjaNzVOcHr6?TOU_^cNsfLPxah-*k=PU0vp
z=nRqe!$K!`v2i=F;q5tLtw9#?UeHFeAt75CYZNdBLCo)%EOWN(Mzg**qLQ@Z-oeJl
z2m_nI)SWE!;1XBCSlB2>%yI6Gl^-6gCW_bD+rYTSD8g_UHp7jF!B|B=K%fI<VJJLc
zo?grm86m$Tc7k^W{~t{zhB6G^^8(PTY`p>MJ<>}HlkdA^t_g=Qc8x#mAvZxnA+hg<
z#rG4$;~)hhJLd1XFReP=jZqGaS(#Q^IHG!+T9w5<?UFrw0Ur=D_eTzIj^s1Zoj}wx
z4kFaO!{wx!YXvMQkUd=!ZA?oSD41w|uAx!7ZwQ-%UEYYX@q7!~UF$(0e>`5h$@v}!
zVK9b)()wFc4e*76m&Zhy(;Y8A!RXU;NM0S0SNoU*uw>j+Uj$&l#SGTpKvW4IZiu^I
zLHY_YEHpY~aR#d=NV?hVjOY#$^<r^womr#;LSTD(sJ);^;w?GCkQ{~u2)Ib;LiXIF
z)@X2P1|<Dizmo2d<@Q}g1<yIphk-aelS#EFDrnW&h6)hs2Q6yI;Go6^t@`)a;2s;?
zV}m<F7(9kM*`7#%if%jmA|y*6uCo+4PSDX*{{F1rpY`AHtn2Kc<TfS0CSg=@d@Y_&
zbH64p&JBLB_g>{+$gBK)Ia!fIztWdrpC|~`y<hpirC+&p2(NFL-4Y%dIbm2LSRM|t
zj8CCFfH$80?Gm47<>Fsf+EX927BL_^yTv0JHmT$G`ILg|Ap~(H<2CK{NoXo`X^8{K
zCuCdo4mYLmqO9k(Wjmj{2_N!gx-TooW!IK|i5BWb=OXv(y(*XAZU*}I5b`Zo^L>|G
z6<=HR2H+`bH#b>tf~s^E_u<!;aenSOc#2pU*O746<-0qhq?@^FP?KuZJ5<-cXL9bD
zoIAqgd|`^{@ui{8>OE!Dp^T1S9vnY0I4~!L{xoFt5im0?66*@Dqpb~e(bYkv*rbEB
zFw?9NylR8c25^6;>>t<UNq+X--Z#A{+}$2^n;-x+=frKv$l>8v&Z}m}L=*Q{%Keq{
z8(t}VjZplfFB(7X*VmY-%c@Pe@8)uGC=vJIT6jQ|{~S~>LNH}yjD)g&QXK$2AQnj%
zLx{%jk;FZc_zjVSE?nPDch+o^61weWWObY%gZ2C6Dnl5NdkV8lVIm6!vOO%YK!`QI
zw-r1B%eSg^anu1UZMgu#@N&EL)^%&%(~<krk?$1ow<q;qm+x-RmDFUtRdx0IOXB{L
zxFeUuy#|(3LvhsUf10@7-@*3?LY~zk&1;?cy$<%@H@5d}>R@Yt5;P$w!Y|BmZjIP|
z`*z#fIciY=yO~dAJUNFM1X8!QYHybwc4~F02&Bmn&D9ix+zg7XtSq>|{cA}nYWG9s
z2SJgRJKc0#I-Y@*g|P-Oh>(0yJS*gHM>a}j&><^u=bH`rug7L=SNPup+w$Ap!1iIB
z8}D#Uy?#ou<$umQvE{eJ+j_+{kVF2|3<+TsbbTJct@qP`ISG;Enzx!E`2^BVAaB&<
z8ZOt@gSdJ=*J5nnAv+gxl`wzxFU#0|KF<4q_-yIEs7@4K12?4CK^yh<h*EcvWxZ`P
zk{c{L65nUYSGMOJ^FbD0UwZkXS$z56e)+}HZni5S4@h8KvUl8b2ecY%n}GXTwN~$g
zR{pB3&@te@KG(J}MGP}&?IbW;b1bQxF`UIpPp)_aG7<`a6=euB*aTURdD#Mu-8cH%
zMUn1*q-E(fV1kJswbFYe3ve2~4HuUVIV==DK*lgFkA_ZAHc7wOp1PeeXIow|k;P9Y
z_2rCy$gD%ThiVv?%!Ed{HXTii8D$|_j*;sKX@ne=MyOMnbF6=*k991vI#+qJNXH_V
zn8>8ImLmzNvnaJB(gHO_IY(QyT;xktd77aB61Q<9DsLJdVpx=(86WuJ8WmJONUSN_
z679Agp|_t`Q%bSk`-+(-ZQ5&Di{vaH{)cHA|D*T64byzY-ya^(LMEWkkoM$aI)B7(
z4$3*9B0L(Ei|M0>^r><wwI_*m?~AEQQZ2^XPXG2E3nI?~&&U*M&uSv*vh}h+dPO&O
zLmN(k$Ro$sV{0Kyq|-d?bu(tFj=4ONd?C;ErdpKVva0L0Dy?RlDzu6$SBqg;XMYr@
zZ~IV^G|iFk4>5lhRlYpz{qW(L8TE{5z8sgBB<0Xn)bK+lt=0O{f>KhdB@%zDG~!|$
zbw0piHeVrA9;})HFW8TCynr$QbZ%veS4|?i7VxSD6x?iZZ_x8tbu+`Q9o2dU;1;=K
znG=&hO3&`85_9S^TLUAg9y-$%O-dLyN0b7AX1n%4J9DyBfi;=n5GKP(t`CIaV_Ysz
z^UK5Pn*)t6oI&k+*!!DaSbIC4AoThedEN8HVedVkZoMQoTSL%>!iL~X*6K)@+fYL<
zN{Av&<^{CE#V;6TIU4D&MS^%RJ;QQXUg&Q`BCZ7d{(Ln*>`|VzO(nXS{j`a53*3J>
zolo*5dZ$*_I+5^N9ro1jz~Tk@fvdHW4C`ALQPr+iNLY?U>mY|r%GHH)HaI~l$MN4L
z2ha26d+|EY-qb1QpHOj1xr-`#r`0^4OgM3dI=cGwXl3h}wboS~&JJjcl;;vNrPX4j
zvY$&B2YfO#Y@3Klb&vxsnXCxjUal(dw1}U~7unk%Pmjt=FAx6gj$VKL?BK7zRHHZf
z!Cx*u{d9ct;`Hlx-m^b{`theHpQ2;`$=hK3x38bQJo@;yc%MJ}`Om8tKib8`U$fNy
z%i`$puxA|X7=JTd{qzuS7DuROh!a6idPdV2U+m<Eb1|LFu-&ARdT?-XetzCRcl+hy
z<iN2ki{hf!>E0d6V4qX&UE~Z_$wAwx<K<{@_1PU9fRk!glcX9WP#Y(08^P1~us17b
z7#6P8@)XPXyEu%G;^SW99Mq@OaYzggcX_zwBSJqs&Y=pSSfPk+XSinw@X9f7;A4)T
zxNhCCiDLMPawfT+<Duyy3=0bKQ+`54f2m`}=_9JgK;0sOX=DUQ@Q7$HHbT+Hui&?i
zCu3WyEP}@iT6~>wd0bvJ=($d~Sf1qzN^WP0^@9+TR>If-Z91mZPg8w0Xvmv-|EiUe
zRkYgRTD=AM#Q|Y~%xO3E)mNHYf73O>cJ6|HYSVkT#3<!>eUv%BDvf``qxG38;zN)u
zJS$N3OQaw{UdM~W9<qC?tF=Yb>qBHxZ0&m6w5*JcHm_~{N*gvvxEXF~IswS3c-WJO
zgXS*@p=M>}hUlcHnypG`s@;C-5s$hWFDSeP6OT@dOcnrA?=`D$mIcxw9`<w+jPblg
z&H8h3w-i&HW_5(WK&*}hBxL#;%eiu1dj;~Xd8?(X(>ihhI^;^E_*Ejl6otdXx3LHb
zrNVdu2dD^>6p^bH(}SWS;lD8j+G@SvprODjc!^l}h`Ny=WEQXs{*O9{nvFN2E@@vy
z?28a#I1sQHL-G)ITYPe03<}+iI2WI$zz~QM+-?n(5y=~2qp2Q6=;lvRkERokqff6X
zSRZ0!tVQjh*droP$%b$qB3!BV0?|DB4&{R4pzsJrjrQ6pju1Ba6(TwlPNSEkTjxn5
zgdaskUXREjks93=66B;@xy>Qe4}TkAn+sX@CU{e?B$mAz<Om!9Uj#<SSR&+_qumbx
zUKCS};#C7&=<Ry^77^Gj*czve-hZU}$B4p>=D10|zR;rx(^j{>G0cpB?Pkl+j0m>I
zt?HWz2o`U)2V0}t4O2y4&<&>uQN>%&0Z<sDOfJ(YPX~-b)}u#!YgNN)QMGPBGtt_o
z*U^^VyFqhQ?-VtsHCi;V54=iJzm?BiJ^O8-Rd9lvfK|TP4^|OH2gC{X(MtkD#ji)`
zd&i-ihzP%5KSc~Z`pxeUpa-#c=mVRj2lYcBbwt5O*mm0C_KOh7C2<%iX)Nt&h>-jq
zvY&}hLXQ^p7=!9MYQJGD$5l4(l&(H}h#N{>^2u2Oc?OA596@Z<m!o!jHn*-R%gc+>
zNG2dt+X#xBB0+2}QhLE6BoMOT<<*Ud?^4XQ>F(CLB9dC)y6!7RFieYd={zCrf~c!b
z>YjqxUoKWN${cOzKTP4Gr>;aTxvf4rp)6HNz}J=v0_1XG4o^&(V-Tu;yNQi8Mec7T
zw8U*;i~@BbYpXj<vJ)i*(@2jwLasJ^hoWut!Y0pCDVggnSrmyWiIZYxEXPHKV9Qd8
zc3F2|7%$geN?s3%n$Wr8Vjj|uy+(2}DTm2K&ae#>7)XMEcZgCbd3)8mVNjep@$ic7
zHzdiHYm-5U0}*s?BBTmJ)ABN(nc)3TX6CfWGKe%D{eS=0|E<rdbrwhrxV`n;-}uZd
zXGE$)6i70hH8`M+t~cq=_yO6rS{QvNK7Zce(UG<pHUylvS;(QU=4ZeONC5>vZX-Lh
zgPD<1Xg;wmZU&r;M8VoZGzXoT0Rbv4Fcb$4ktX?U^&Y(`4Os~%jaHCSxXU3oJ1=Ie
zO_=1T>R>4e3=TPw`%3zw0H0)sQz1Xp7?zr++sOQ=HPcFM<`LHlG5~yG7O^EQSI9&x
z#y=~w$Wt1Kt6rWd9jmLYSInUXg6dI=h!wXaBV7s5a+wq|yXP10`9(IOzULQ}5JEA9
z>u1YUujB>LI%?{))*=dKqVD;{dwwxLhphLo$NUbMr~ujls41bxIP4*TOwDo73sx<h
z75O=2uTxlY!c(xLe^6*%LF+xgs4}#+Xyki-v1T6c`9+PHRD8)jzo^)Re|>(DEPi%y
zd$+2(+F+kjOBnvCxf7n)K-e_g^C&Rp1e<KAi}+rr#mXY+((iRzpzuJ${fbndVnptF
z6r!r{by~U@=e;mryVq&m>$L85T6apPMdr!1qNLGg(c^o*1kw<wJ7M%EwPg2v$q1H_
z(Dg2F%cM>yJC(!1zl6R-OzEB%x#vah?dz1C?3Xs?yyr#k?dyc8`?@{oJuhP4+t>B(
z?dyzt`#SRH(Y+Av?dy~s*<G`*gPk2^T9zy+A$6%*mH7RDO*P3JkDZ6>*SZ2$6s=$B
zZC&NXO!i9f`F621_@kRiYJ4+~D3J~~2gpQM%>EPZ*Q>>Buq+QbhT`wtqu)Ev@ZU+X
z9Iu9bXw&iIM;LUPNBkJ>Rf`0VV1hZspYvj72l)G(pFds|lMKI}A}Hs)%HK{_=%T7$
zzn_q^+tZ9fyx`#p*Xbkk?8UNQ@jE>2C$r^bVV>mhRZdV4X-}QLMJ`0?xc_sq&|Mg5
zLXzv%@{@6tg3fOf{^zg~#o1}uo{-Tn!ZGCwGAqT}3B%I0H8dnoE&k97TgpIK{S^=4
z&;&b1dfy$UaIn4179|{Ti}duc_jeJq0KuPT%K>>4wxVFb*m;Z>g~;8}=Q^z*2lM1|
zQYM+KBpZWWEIWD*irHYEoV1%He@5v<2yg4zs?}U$HasX)qqEgyB6AnfaMlO;{^j#G
zgCE|u8bb6QY&u3UI~l+wU5-!uQDHh8;HrJj1uz^CSRF7>9cUnR&;}^^N(ZNd4Zw7;
z3zS;pCSg*0>i_tMv@01m+h&fZ39Q{C&(D0zNwdtg+$?j#Ja7Zc3A4oWQacNSC<<IZ
z_iPUi`$-z7R+{8ilI6K;dsg6YgpQL$fyN(SmGJUKl(5zEPckF(Hvn{i4IaJ+AREQ(
z8}?><Ai=tG$_-UY!ynQXSRt5AC<f1J^gs=-=D-i5LAp#1sn@Spb57kr&j4wM!iD~8
zAQBArYYeu2OR#r{!~A;};c*djfb9E!?>-ez2-LJE5|dQp@|^37sA#fr_H5H052*5C
z7aw((^IAAzHSgdAX{5G}1zN~Lq6Fy=P%eN(Ol6<HC<&=#M7#hWT*A?^wGW0cSJJ@h
z9vkpgbB_)9bn;!1%#z6^@PB3U4N*e~xwV{>i^~>bWt@Q1`8UeXrBF5pO==Zm6hij$
zbhr%y{BmI+9tXg6*{aKgN~<cJc{<e(4*oD%ep?^vKb$PT<tO!_<|mBC=|q1k@y7!>
zLjDch@j&1XL*NcVbfUL^v`>n%wpK_>w$eIH?BSpabO<hxOwy%5c>B~y@8N+MfO1c&
zoq^bBoSX$%f^3!}cIL)ST+7#KTIATlP95a&&YgTE{zv1en}CveL>~H@Ke#yg9597Y
z8%58+5a@rXryMR6O;gubFC><41>xZyfWfGr5iV>D;O~DIExaMGD%@hU1iCRip(Pc%
z;NftEG>~xFLBI#$rXrE29QmX~u=#o*Dg8uB3Q#MDJyEmGoIEM2X;D?e6={mND*&1L
zZenHY1_vDFF7^c+s4wJTM1TSj2mv0*Za;LoZk86j{}8Ak=*J%1`{4gaA078T>DdP#
zzpi&59Q*q4@Ou^a(N4q-pqI4<_V5qH7^sm6_pjRU$w*qbR@?C9v^>Y`BQg*@)Lzgd
z@%9x>!+>)qCJGnBFlx`10y$X0Hg`g?(efbGPE;Vyrv+#sp?nhdS;-_{G$*A78}V2j
zW_fxEA|C-%C6oYA)luR@w02<SS*Ey5!Y_#!DS7s&1~-dnJLzPVAy&sCIiY+Z+F6>F
z%VH!6YO@+sq^WLcN$?GkVZmg##tjs!-b{5c%$LalH%6$S+nzkz^8E1#<?%}9bI@~4
zteevWe2GAOjQYWJO^c;DCSS)iS!B2ZW)!d|;|91$R#b2)BU|Vzi{U7)ax<A_u)yD3
zP;H7rTUcDSQ{xb8;+)G!CKY1EOcRb|^1d7`&k-6+gup&7vqt-<&KJ*#ovtdT;mrBZ
z$%T#xRmYeUV?X{Q5TRTygR0ZL0>%XwUQ^i=xVu*~e+Vb#8sH|e?ZAMDaJ9(u8AU<4
zB>%2qlAfM0Nrooiz4-t^W)^=m#Sbu+@W>Pm!maa9-%1eZqG*D!HWt;xWSk=ckDww|
zXeh*tq&RA>K}4WSABbJ%(O+<fem%C6Wd6Xg7y0yCEF5odw;SeH+4Xg*#c31q+D65a
z82@hSUbTJ_)WFwLBVv5bNL$W%=R<RdP-my+IVf3U<cd%kGsLAzCU*&cGnoOZg&3i>
zXCQlQDd?+xNqocayP<Q|kHUxo0DvRwyDqRbIo9L9F@i<tsF1=4_~d?nW>S@e;zuC3
z1P64WSQf(je(e?9wGj+M7Dc?AzJKQQZAa9%xdB4fs88<<>tlrAJM<OdE1C|d037mh
z<v3UNPmwKfmuLegXK`*=#_SLlg<`ayrgFN?Jo)0F3StptX>?EFHUO<{*RCrYuS5O-
z86%#BIMocuEiX=zAAr^r!WY84GVouI@eDL!h{7exG|-kP+zl~;F~WIX<OpyiOGy?=
zp-34shUikowAZghU_5%&gt)75t1Jy;)LJl8zcWdaBzSVYSXSU-A=HZ~PgH{CA`d8X
zp$cZB_?UVwh9Oy2tWxrbkGN(?-&(0DIh3!hQwP|4j}97NSD+<|_cS}v){+?Rnqt*F
z{`I9-7#KW1-zkKl5i*L882Pc{_FTi-Tu|Uf+^`fGu2o!n(_ITGq3JymlA4-o$2@rO
ziV|mkbUC@!!n{g``NZH)Nb`{Y3mL%{mqyzGoUnk6fSju#Zr5gsG`67CCOddmz;P2}
z!en}eokeU(1ZZ0%bwq*bl0qf%)V1rV29x@FRtqZe(+IH#Nua_N>(UZZn})W)>l>yG
zk_pn9triH`eFTYUdMQ`&pl+^S<}1s?ZThO_^v&RK0NPblb4CQU^gk^e7Tuk6b($jP
zV<q8M#ayZdDY*KCNV>lF=1E2|l^+<+{KBxb%a0i$k@G-whYo9*R99pTdD5CFNMMN>
zn3)N}fvLr9BzQF={pAF&I>iX*^&#k!g2RZi7}hu^(RPddZh)gLkyM=hMq%u$@174{
zzG=1dZy}2v;+jqJ#Lq|m$cyrH7}%L_BRbv4!c*Tvn7S|v(=d-lS(<vD6ATd*FYxj(
z^PN#XY%{Pwl`CV4Twlg8XDJEj3=roKnIK;2>?8+HXqX5C@k>e0T}ddr(*JN-mXl>M
zN90<xroNh$F<j0lU@89e#Kk~Sp?+H?8F+TGnVdpsoFG96v6{Y!BZTGx6_J9~49&jn
z;=_vZ!LgEDkWvV>1<ut^>18A=&OsX4F5bB0Kz-CSN3DN)?HYapvW>d{!2~OH&{DA%
z68UEN=m-Deh*(~<7*Ei<<$}WUeTpCD+c8lw_++n9!*&rE41vVl7bsyP9vMC<9uIwT
z35?zeTo7+=Aey3}X1;fXk<sYHFepAE;{15wr>ReqIU*{J{!tSa$4?`IPY%-c0!-F&
z5J`w;8GHRWr1)WKoIyg1MgK&7teAz+LG}cH!G>D_&lL47{^#K@{R`-QAb+5`WseaV
z4S-C~Y1u_(`odM{3l&EcGQ8i^CtlccU}Dx-p3p<oH2xIJL*qx7#_(fz(%39ei(T^X
zjdnaLCU%G!5#dMhWeu^DCy=Be#H|T}5L_R9H<f%z1PENySN@YAf5PQR@v=;c3GPSC
z%MkNwA?i&CzmE2NkM&JWRU$QTmS-i7GfH9$=-jpKVVsYw2m!f9;V8~6cNBzi6j|;t
z8M@9e&!LM8^U(6$JP(2-1P9J!*_9~!4x(lP6pAcP{4bI9_Y7}~g#}7N+`li%@IJ$4
zX#B2{S(&qZ30Vr*M^diTTq#Szu!$u2SE5smr|P_s!6ChGLQlnfzY<`NWnYgV;XPH{
zk0kClBVkqx>^=#Pm$T=Ppv|QyN#kq(>4|gF^W3B4#=fR?FOkrs&4OHE6ybt2485V}
z#%bm`d15D_mAjss*-`Fid1?ju&`w6aJ@mua9|d;ejoc(i;t=|iQJU;Yi1UUeT4;iO
zP<cagZ==2q1>+oK`OeVdJX<B>U~$E;gu-r$lc-yHZN3a5ie}n~{Ybvp4?>W{b_8NK
z0%7d-Bijc7>)8Fk?x?^}OoXnCN%v%V6lFI?{9X{(Uf+(nG)P5V4HZFh7~2%y8w9ln
zsu%jEfEtP03MWv*Run<b8c(2*GO0Q56^26UHW#5cHKdLqV;n@LM-v*SiGkX$Ld4Y!
z`#}&LwTkkDKTR!+)bo5Oy#mZ`EmmsZ4-iokq%UTL34!8;6xPFs9d)}#uv+xuP0YUU
zkoL?%$XW+;iZLM12PNN%+#1B-a3**kV#;`pS_q3yl{y8{EariBsbkRIHaG<u44!)J
z4MP(F2yl-U6&ywEt&!Y9ptT!^D}d3EH_U{9{YY|4QXeI60iDj#2kWbhU=VpD#O1=S
zRqdl{87y3dz9m^Kh`;T`p%kQ61x|T2NsxeKH5wI=G*YD<b>@@RB7s6jt5NN!(o)>0
zD^^~l*SSPV>0Om+f$n+cy+@XQqpHPH`g17cSVec(Q{UQav{kMEL0EUeNZgPZoKB*n
zYTv!f4b9p{Xry@pwMfIh18Vps0+-HCCb^j*G)9+(o#JphAsBA@bo*``h|iX{h|za_
z4~LE4<Lsam@$C3dGUW)WOEtq6UO%9)yxKc(=OMSgc9w7yq_Vq~7}s<YM?=vKe3kaO
z1_e@$i$lYSM2oZBL{=ME^+A{p6>m)hwm`I_#TJb{MBqtrYNSvez{sS3SBt6}hQF&-
zrTg57szvIFKpoms3RPN<l|}#b1`#VMEh^2XHkGAH-AKGYC_CCWc)3yO$s&FdAMXZZ
zy)koGW|w>%fP0|P<;)H>7NY<)yW3O9k2RrO7lbSARSM-b0zE+rD8&p?psWP#$WN6E
zgH*YwD9aSWVXv^7$~*$7fRL#U>I2dWK{-S_HjqhP`8z>78SRQFy#t}=mp`D~%3*dO
ze=U;}`E9sJX3)ILUvucPA#|6&GB6V5C7C%?hSE809r$glcX-M&Wl#@6rseuv%WkdS
zW=e7~OcpKTb3+=pW3qvz6c(+5>(**ylF%xGn+b`f#3Pw!@P{`~p1yna^3Bu1o1>5Y
z4@Zy1TNwTFp@P;0`56&Kj+7kx9H@FOfPayw1NNe<Zr^^0L^(Qs3Usgz#fdNrAq71|
z%mSt)yfde%5Dxvl1IV0Cfzg`1inUiOfU2od00|vgZGJTcnr6bvA+sbPZ~ABxOQe=2
z^C$gvE0Q`#S7$@2wh<PHUz>FKu)=~En9QG;9wkFAw)WB+!FA#=k=c#Y4u!f)WG5-c
z1JGiIMWfTmUK$-l(QC$65LSbn<(IGUS{Q*fre=EQ`xt@sy%1`7zmr?wD!VNK9Td=;
zPbwjHhG#k(y+`z^=$Qtd8p4k@Ra`lQ@B{_a+(`6Bh%gjZq!e)aQ%P|_9&8|ve1Rj1
z=-hiC>RN=M1}9XJEJ_wvu^8<Q(f*w5gckYVR!EM8aPiymKNVE^9S!x{8yeVt2XG_M
zAm!=lI-=Hl_?2<={4U|>w`8oUw&3%THLv=WQn40lVx)Qti1`lVV|dq?I(U9AZhlSD
zRJJqHjg-g=iu7%^;~)!(10I;(ZnAM=%d0g5C)FraX^=&b&M*vNCF?^hfuA}J&&t1k
z<a-~Xk{jD-Nl#h?ln&M&LkO-gv+}hBL@>RA$<-MI9Ul1hh8>_RJ&+~PF!&Qw#_v`M
zQd@%EfNm1FA9L4kC^n@6n(vrWK|FvP!-D1RzGc^vy->@vSZtC;{j#!=8it6wt9PsE
z0!<oFWBk@hBjXtD;3+h_=?>6=Nb(;yx(vX6!$=c+2D0Pv-)mh6HT(VR+z8Ty<*K_t
z7ExDT!w5L7%G>V&S!|6~Z#VoaUjmS`@(Aw)p?<U>v-h=V^?UTMh;0>56NK62XQO<`
zFOvv<0wgMC1QZ;JpY#BaMNX|K0VxboE#V|Cg$!u?Q#=BqLUu?}#CfokjUnF*LzgJ~
zfP|;MA9s)|B)kyr5`nJ@w66gOkdXq;k3S;Gng_A7hPy$xqXVYTuZ0pN-1Q#GFIS;K
zc{=}<sbP`n?P@|;mRZMst_)-&t8Yhts+=*)&)Jc4phDoVbVU8=N-|V6+4HZA9w7<3
zJLvJPT=aYL`1S(-gM^uUw!Gps(PW#`4gP8g4nMt?*!C<MQ~FFD0fIP``3h0y)0Diu
zL_)+?A+o}we=ktzBS|uVol)?NS|ejKSmwbbkLY;u-wU`OaQ;kc%io&t5KUbR=_+Uj
z2`b_GDzvMP{Vm|#J56}Pl${N{ucACvnRVprsaK-<M&zrCu*jZRWh7{WpI(JD%8;jC
zLfv$l&k&wGna!Z1gR4Q7H@~{rST*)#u(1-o+zDd!z1*pLY<zpzxEdGvB>QZ76>7Wy
zT)XSC=_<)vLyxFere7g-g}ipcN<pyw5$uD(M)QX(LGleR`bf6LKy(4r?=IOy*pUN7
ziqIY)S_6EC`2rzKFOJAgHX;!~1Pf*uB6IP`hnxYrdD8mRCpS(FfCf%c!}CJ?A|G8C
z=6XaAyM8EYLl%wN$0!RUWs5o{I-7=qzu`w39nGvgYLL6sU=Y9_85RySGN(mTLtJ6|
z=zM}sAXBHgckTl_1hws|nY%uu4=mXT*jmH#N%0!NZ;UeZl5qwLd`QUSdRP+|r63rJ
zAtkZnfd28E=_VniY)V!QxNu^K%ORz~0zzDb{HR<JGj`(W7~&fTLyIvBOqFCg5t<d>
z<h(I-i1wv<2~8=agsCp9N@!NJ0Jx*bRSgZpVXrM3$7^sWXJ-2;CPUJb*Dw+XM<Inn
zSU`m7V2BZ0NA~U4yV(?G=si;3Hr#Ao=U@?JdK-Q{ApI)EU6QhQglWj<l+*~(k`9!2
z^Vj3$6#khT9gj((bK7EbL~}v}r=1dWiV?s!ktQ+s+jTcyRLlmPz?XI`6`Ul(S`<*p
zmx~HU)W{hR=}~$);4<<-0)wc*YK{h>7KO+P@e1a7IR}kL`qkA8zEf)g7cTZ|-e7m)
zzIrKl>;AsFz57Z)UQ4B*1Ted`ov#V~5IX-z7;lV^Zgy|JhhB6alS4B7lS#>Sn=^sX
zrf_S98Wool-Acf#^wCnI0v~cf3$m-h7cL&lI1n@<DaWQ_yJAUDFbi^n>GXh!aS!m=
zAzv97>#=2@2&|!XLFINROs|K06`1!Psc##QZ*9?5qai{zL^LY|%NU7-3%VLpV6iW!
z+!PT633an&wv1qKR#e5Xm;jSK5Q1|RrC@)(mlR@MVbEhLgC4L2h`2zZC6ZxPPLR^t
zK=cU2Fj&YK1{`Y8HxTG;yhNlsX*l>$Il1tfT{$vYl6xd+rTPt1qkP$P50e;JLY#>J
zG7qcObV?4tBGQO*4%*(CZqG=TSuz?z>*%sJ5PlSvjPOUZsZ}Yw3%|WL-f0dW76k8D
z6u*!inF_~Hn^3$)d>GJ(gjke3*1~QzPlz0a2b&Px?pJh5;@iC%-6{YOtEc4?uNH`!
zG(lGK*X3f9>49)G#?ck~O#7ff3TAY(mE3sxDsS$qVGJ<^$lglSMcl>amsy=Fpyg3g
z&`$c&{I9kypx!o^dx=xnt%U)@E}e5qQ#}H%+6R9h8y}+{rKq~q4oMjW-8n<Eoi=pq
zOJ*2kio%3yv;Oo=xAstPHtx$NTa4S?pw7N9&e^yJq%o~_7<z18Bd*y&K4R8yb#?7c
z)~T(f{Eb#f-9ufrM?T+XhN)g}f}bOyL%hk-bW|9>(b_19=V$9jwt$w>+-zDrC5gSs
z>UCt0Uw-wJO!AfmoST<Zb++-aD)#>-%h}<Szx;B3X*PWGItw0s6U-_ye~(2L^fWB>
zg#$Jd18i|Geyiw>4-a5>E6mgDcqb|-BNP7|?4}M###Zta9;X%WM%XPJ_7F^48QO{W
z0(l{HQFaDf?j|lz4M9xn*X}mbZf7m_jwE1dceIFT7>1#OIjTTv;^JTesv&$+*q1Nh
zcmuJBbVo2RCL0a)4FtUL<lvYv5&<V^E6DanEDQ;k>IhAe^#zeL&naXW#Z5w-%*8TY
zAsiszm&#K7avO^0n4xglb`TfBAEiz>N~1V~i=aF5TyGd5o`*e3M>*mrJJA=24h=1p
znhU$owxVw8A=QXjg9SIXUuK-DQ~;bg1%TsNPEFV~#KM`C%}*6C4sis}5wuQ}Mj7>-
zo8`S|^<T4SZ5~O2Id7T-7wm~}A&@rak{*`lL2z8^bPxwf{1|gYh+b#OsDuQX>y2m;
z3w8f|8JK)moSg=Y_YH2o!7k|C(`WAo@1MSUdi>$LcZ1hY-~7;$bv1o7POROq3jY={
za#DYkS#IRzUYrk8FA1~2_p;n_GJH$IIEEs_&xU@S!ptTLMoBnw9VZAz&d5O^1r@@z
z=D{Uw!P(46E7*N3Rx^rA+z#H`I`-%7chWrk{ds}dM@H@Af)H`!`O+XpV!uh^eb|HG
z4XER{4U9vUwPLJtgbfo8Lr+qP_-qXeK^$aoLZcvUWj_X8`&EndJTC&>LKO*sp>4U!
zo|S?bu64nTKWauUb>hX;C4CAd7kuExUegPOAUuQfsS}|rMk$9%gH>}NR|nze0Kp(n
zgT<2ghTq~5nid)s*c_l05>7VaMk!0&XcPMyl1GRtG*{!RN^g-a2qRYsggO91o=1K@
z^2%Z6UHbEJPJy;uu+>V<;vwKF8USIyKCz5RHJJqeZeim0?4a|Sq!M&N@>MQJ*1R&O
zW!6Y;M6^*QkkU%YxTcEcX$?>-#)k*0ruN}Epp&By8-o#(-_R2Wa(>LApS$6l`PeQI
z(;uF8h%~Yh^FM0bj@bF?uy@RXqG`oDhjf%cBlBCOSi2ARe4TL5wezcldI63qFk>;B
zua-!0FkM|p3pwVyp^;=6x}qsXoU{j8>EBgQ-{mi<I=SvK@yzb9rYM`W3JXmhmu{|s
zRy76AIt_+cu&e2eq}%E)0V+6Qi$s`^NHIDE&=s-9ABdQPwOC1$4{PUaR7@yxi#m=}
z8u6uR8sdyFu7MwDvoL+(?b*KTxEJAT3Ky)4B^H3<I~NqNoqNC^*g$Nkw2nta_c)eQ
zUPcHTH&o+G5~5FbK^;LzSgC6(uQn9t$*`uioRFFSh)G0K@FTmcQ*2_69M4drmX!a}
zD@+!;*d?Ofl%vsx-g&SRi9F-wsL27wXd9}q>)E)RAmzqkZ_hd+lr=5C-e9w}8=bk=
z*B^igcoH&Rd>20YTcJTNs$$Q?+H6P4Xt0Zn>z*W5t)x4s3~cb|vGfjZAKe>u^ymZM
zBl6y?H+ACz)x(3FKc9%$Z3IAVkQ2v6!usybBP3Bk(T@-jwfKC)S!ceAAgu93r(f;k
zN`nz=R;pCdVsT^&171EIB4lnBK}X;KwGKDAb#ExF`1^XTL>Hne`12e=F&^k6`5nJ{
zD&BNzVe+*%aJv%T2;?LK!HZt#laC)Sdb<Wce^xB2<tyNT*ZFi<C(IU=+mnGeB*Lu2
z#$sL;<oVo{(P9dn>9@w7Ch%}HPxH&e-kJ5l4qPNU3St=AcoBlY#O=PMd$q)cgbWcm
z!<npJfB5OJT~a31k%%4S$dAu{$)10_Y?q>d$0i7(u?fUSc;Tb-tQsEMkKYyXEO|aT
zO{Y&g4bL&39P9@r^O%;1MndebHY0iQsby}`bF|L8zOQ|5?-|@(^X!AnQqY1&YHJ&X
zD3fJ~!y@4y=@IxFXYqh*EG*?_@TjF20yUPD2U87`yU=nZXcOXB5LVy_LZ`cZ7PIm-
zg{1AwV8^&0!PR$6=A)Ee1}ReHu=I2d!f{Itl-t`r2tpypN>ZgzuAnd1(J~c=6il?%
z2<)ziPTgRBF`g~6qm`yfafShibF2p02)V4p%klyvHozz<-XK(4+k5OjakMHiL3x3=
z8^5670~X4WL~&SNe2X7zX$mM%CXzT5qyncT1)Koju;(I?i%OqD-$^C<xCG{8-VgS4
zLC*l<McnjRNr@zRg|5__CbME{F3Kgb^R!40(_#V9p^>7|2>2MM8-H-XLZYh{Fdaq^
z4G}Bhn1-#Mnk8aYz+wSI0moNAmE)$NB31^{`{kn%zVP^vxPe56ClnkW?e>fV9zY$;
zAF-UGgd(3hWW<6`Owuw#bJs|kK1IW%HqFxnA?G<O#J)oTZ>0j<D;UP|2zhbypnlXj
zcwc?B4+0@sV(Z-1@%1)jBI$%GVF4;I2IAd6oskiD_AVdE96(<}UaIJFje-_>Y(XW^
z*`?nLoTw5IM8W)<Fx^7eO&;<&gpGvvs$&6Fg!{H4MMIq9h8-2BQpJ5zN8<}*7Gm#y
zL!UcNZ1*>kj?fe(UTCC8WC<3LQI;kbA&CshT`2ZNNJ10(XoM_yrEIz&!f_zHf!qjU
z7~Rr}LQn{cuFi|b%Ig(y1fmFg6BzqCh;SjywUm&DY>UaLYqLRCOFqHmnB5Wwwth6`
zMZCF!Y{y|gM&_!D?>9WhWhwzy7i5Tj)Xs8sTsBYgQL>sW89d~T@M?3406m)mg!H{f
zlB8(*U;+R3s|sg&RF<IQHh{Qz0fA8+rM`PCC5hg9^ijB8Oth;zfuKpWpkGK24|J+R
zqeJ#4!kPIMw<V+e&BQly)FdQu1=pdG++v~CRDUJPn|f_wNFL_D3MDNF5ta|^<{_?6
zcK>rx+8X@QHM!3<_$BFRIw~7)aokl*DSyWJH&f6Jk+6l@R0;F8UUyrF?51I&KDLaT
z6u0}V{XGeCPlD81o_i8R5twAj`WuoUx6LizGt2kP@<z7(w_%p`8|+5ZHr?hLr7bS^
z{itj;h88h^>r_`+No;^bpS3cK9?2>Vd5&+=!VH(LG%0JTjlUD7Hl``5ZS|XyRgx|m
zoFYq(<vC^jv6&$nae1QLCb(n$h15%kQbHJyES)pbgdxW$Nji}j6LKA85Tpt+@68P<
zzPVA#K$1Cx3}=sa>a3i*WlVCihMF`4w;3e22o8-5OZ7v+yqhfIuOCj4U<Q&fk`(37
z5{hIfxrm2tt-7ippSFLRovuV76YG11Ft}OWCN@^n47S@K*(7%8M|dl0<u})0h5cGd
zlpWh_Q+S=#m8`BBjI;${t~r@tdl4!Z39BH@Mv7}&Ee?UU1VaVon@1`buuVgirUbmX
zY(1c$k@SRnOrR|&Wpjb9vTHZsh>qn@)DrMRY0ID)CaB9=<R|`ulAwE|gU>fQ5YX8H
z)z;4@b2|g|hV#kcqU$rM2^kt1YNG^PI*c8WL<A8s#97KOpjxOPZeNZOrky<DO2!dV
zhJ(1p)4XrIPG*<Jb7bQs)jrZKSB7xchFclcqxK+c5vB=TrTWIGkW-G(F=SvO0K9xX
zg#l)o-~bz|S$;9+h|<VLH%4IKa?v-A7P)bWBz4tFemPHI0Za+%7`N+9{bzmk@KWiL
z>W(~19VIE{YX3A%NaasvPiHz}<Q8v^6WW>NcOw8;917R1W3r^4V1i-{I-&z+(+7rx
zi?Fu1Hn#eVk(n8#2t+oSdXT&&YlCb=eh&}y`&(I~lb-D1*x{>zg!+`6Wn8PmDNl2j
zE>_c_Fc#+fu@P|!vcVu*7jdgvdM;-J>17?EJmOs0@+%CEn`V#!I!6}O+7wy*CjAi^
zhP(8E^2$@PB?N~34cXj6e*`Th+qw*4rUBt7yWh&Ii>$;kA!xZphW0u(JLZb$-gPQ!
z1V3Q0Dno^4X@7-QZ+8%PF_bz9EgSif^jFG))gOJlRX$G^$aW7)AeD9Z&df*G>&Rt(
z^c*+eB6++jCYhR!Ho<?!nH@Y$C&j$V-%eI1@ZVMwZ9o0joU7d6_mdpn)=#s7!H~gE
z?z8^p-)0G9l7s#Q;h28Ki=&`I<d<%}`kZwU8MP(K8Wl6-fnhZKsE_-0vM`a38Sz<2
zgAKFqzSShqLT56eHPPH-M_f%?)kA1HYbBTv@eL*4r@UsAN%Ka+MX74Y9G{W`A~zIc
z>x}R;BUN!{J}-$*fGSA1+tMu~xzy&WnZi^Ps(WIxDj0im+DbW=EBo%ckf`5Rx%8v|
z>pJyoQx$V+G{4FO0~0Xh1eDoGF@=ij3vvMeWG?%FSl#CyE@RsXF%|3qSzP4Vs4eG7
z-PpLW(=T?kuL*E+-d1%4SOQQ1p=_C=6L6YenR44FrG!jADCiP;0ApWdOd(?qbz1gM
z^WC@x-N60m*~>Ri2G3r;dOCRg!-o&wwUci*J^Y(HAB}<}aQ#ti`$;fN;Dj_x{4lU{
zWMQ=vWCXNEww2{W-?d^V_mKn+*<0Pncfu(1vQY#JCI-h7BvPXEFNeK%wFl%kz-C~q
z2&H`kqbv9z0dK(u5-E2}2-pZ?DbOgFY?%l|y4l@S!^1i(5{}Y>Sky+Ry+;i;mDfuR
z=*%1GwU`pF;1`KQLpD<82m(38RmnQO5-h5C^g*>pbSbq(|7%A>sN*2C{4|JF*oeP7
z6VkaOy@8)s)A_Pw>nMf#CEIj;NllFv_~hbdqGn<E!gJBrMz=5M9P0M4ckKk>0kv|x
zWc5dD2d}pmuQs))p4H5!>S=wG6uwh<Oh_1EBqwa51nOI>rceAKk-oz+S!A%4og-FG
zf{bGNt}%zWaodHroV*v0sj^@s&yvXsR(l$s&>^rl5S^PSu7h2q&|ZXtS{eovs3a<!
z4>mxqT`yV(tDXl5*4t~d{jmIc3#wd%p-mF2x~HAqU2=53;<~Rd>}&2)>&V^05f{6z
z7F!)ab?)e|dbS@_)Nug{xcx)E*bWCk9_|cuEHNYjH&Wo0Ba_735ZBeB7)U}agPgo^
zsc=FI-9MFJZimECt?mdmaAVLl_~brF#A4y4aM)*2rWnp|AB~D52V<yZvNR|8Xh}o0
zrLeWJXAF?Wl%k<pUYPa+pR%Poh#U&HREHv$(sxRWO3_&Z{6)}HL_iHU1ZYLTRC-G>
zsAGFA6e^nXJr~hM{SZ;DVfh%qj?!x7Zb95o4<SikQDjzxhed2xx0OMF0%#+uX%JEP
zZaZivillc435z(RQ$*IokmEQwLvLLxOgPD&(I{HaIRcl6HELfk(x}9Dy6%an87%s_
zR2TLheV`nx!ja6#N<_XSzkp#rDTM_-$)lw_8CIyBgsk7NG@9hhS_L?fEKZGbwWLgt
zMmb_>cSFPWr4XJ2K#1?^37@__gPYPZ$}^eyaKOf}2m7Kzd7B{2=d$+cktY*57sXmA
z``WD$QT0WIp?r&{kWPd`ma1YnAPj=b@D10$bh1KLG!=YxbNp6V{njB%1z)er=zg_}
zRuUR=707L&zCJrsmU`OO%mv{kHO}g?)a$)Jh2z;0poC;@@QspxOitn3S+9vXvq=m=
zpG*E6;<I+bWTEr}$D3b#D>!oT9nzbYenQjh)P1Wjrb$E`k<zAbOed7r_7AgRHUCy?
zq6M5<W7u<%PjvlKQVRDg=f7bLK!0o9cZk)R>X#aValkGj5VPlt1qqg+&Y%Mf*Yib@
zpHb-A28xUXvUED`%VOH1aOE5~z`B|}Uu1k_`H<2&2>MaFu97MNepB$$>{E}>XV-Td
z9S-at!ak~KkgZT7)SkTH7+p#Dqve$<ck;z0jzs>PUqUd25RxRFB8U-ed>tx<fe6BY
zMR~3>_;OFU3w*#7Q+BGZPA2E4<qUGIKvZN!1_!L<Hih=W5%17})NbHNbE6bH+j#w$
zT9sxR^43<AyBI7+ZyWeP1D4i})<aicB6~#U%M;8=)ly+yRJa$A4Y^rOiF`n^;6}kF
z2B)9E$IIDsxU1;K29T5RZZ<J@HnX;i<a}==`$dq|_F;0EhA%P(c5hD3O?b=f!={kZ
zN|B!`KrAH^VYZeuezc1ufK~g%Q6mMv`vfkDgpomL3WmM`wN1b#sVO>Pc>N!yY5b4g
z|29nX5q~H9-V31MoOD(f)A=KQb08$1ctpP8kD%UNOw|!7X2cp(EC+<66vv-j<PLi>
zG=nm_@49<tgz{zb<1ex$LT64<0Tze@d)WKo!!r}UX2_vEE<u9>5m8_cHocO0(FN5l
zXO&iqkuqQ+wLAiDt)Q}>EerBPLsTwgxv1H+_`@qJa1Vkfv+q6}y_sdd44-`eQ$G3b
z-PysD;ghrDVR3xwpZ@Lp>f+BYU{Da9ytIoCul%FallkaL_WJzjuf^)8uRn&zkH=r<
zFTTI{`1a$+@6QhprPCVk9e*fYw8SR_DJo#J_Fbutmt{Fw7V~+Ir114ua|S7v&_@ep
zcH48pXz}@56U|SPQ_yt_vS7eU;))rQwpu0FkXh^5g;rgFY7&i%U97iS<S!^uUoOBK
zt+5$4`6nSPwmYUMHf`#gL)N@N>ap%~Vj5nEP};};e|zV)+tzi2;a6dO5x0P-11VCH
zV=HiE6iMNtMpN`6Hv&yj+Js4w5Os)K6zFU8_4*|J{+U^Ougy*B5Jh%U_(G((59_>U
z&EcP!9uaLwaRA(zPo*$Zyc-H5BLiNGJ4$On9d<YB`jG%OyW~6QldZBhA$x)Tt0h-J
zXdt;S$qkAgnGu?|$YId2H}SUO%_^dfC2}}G3fVoF5TM6Oeog;KXyKn8&qtXH4hW&s
zE813pM!<$a?vUmbwzn(SFk~Vtrd|z|@bK;dat%3+EwfMzVK<_SSJ~B&ojh+);lj<*
z9d54n3oF-63C;+zq#Hr|%75$>&JVg^59~yoocYN}pt|g+jic4i)skA4wybn=hst6p
zx^yy3NusjY(~+4v8Op3Z*3dADlowiwpeD|y)Nz_#+75x(+W7`GEM+l3gD}6s<<xY%
zS(z2o(kL8(zHzp7l3a7P&t5SaURKW57=A!2Q3hNSrSLFlk?CA)*zpM4@o{=-Q~JW=
zu#z2H^J{_Aj2ZkX<xBsk->Zbd^#%<ZKD(%HpA)-w!`~)$R&n+I_+)f_JUZ9Oc@k~3
zQz#y?My|hYDs)m4T@WcR-qvv9AX<)2PP={ubn7=}39NQ*X%Q?(_T{}ze#yVxMZMO}
zUT>Z-k!1ywaXwRid7a&_ItlBCq6f2|vXk3a=M&;5wB@g5d`{WwR3YEaE5{SK<-uzb
zAbhbg9Sp1WlRfWTYSQPPj20gV?78Xd7;$M@Ql9Lc)?dg`;%LD){z9WA=4+b2Qdj>&
z7?;Op&A6<yWQpDXWPJ4UES9`(y@!MRIqz_7U>bd97^>)^HRZDzmZh)=o@w1Md}{Xf
z@Qv}yW{kXJj;kyWb_^y@0S#Fkk4Zv^L9#D9B-L?oa2zCxWt5JjQmrvZ(loJKAx4o{
zY}Fg{=t`5;8F*GSAcpZ1hOeB4{0ug!I*^2Oskd$K6!T#|jW$KAMLD(LldZvTSn#jh
zbozIBSo5<n{<L*|`1>Db7bK7%VUQw`6@$x-7N*eF4ZQH+{J;PH&!q(}u?a-k!hIO)
zk*i+bkIy{c1$x$-%|E={npY!Hax~@a`E(_>4>?|PD;SS7V~G!09f3974K9VHe(}LQ
zI&Lx2dXq{_jn7%wy%BPAPUBCQdIbhD@PxpR6#%4aY8Zc0i=`3LI!pd1HAPP7PAz)K
zDauE<s@Ca%s4S{MZN5ElO1(X?CVv6h7gkM`qv3M1w#miiW^q>YR-u?-v&36#rBa2P
z%+`WSr@?}%wiKr=(;A^1?Uv)hKq;bJqoEcOE~Gx+>b1yO`G9>@j3yX~i3+oJid)i(
zSvaVwtxR-|1jwB_6nU#Aa5@3F6#<4cn_y-rI=p1r)-(ui_D^QESXXKZdnZvpRC|f)
z*>zdwY~xgVxvdNZ>^Jq~lwg8Umc3KGU7bNoc=y1$J3#tW2^PfhdQd_I#YV#ezfSrr
zlFx*xKJ=sG^HUEoCV;k2^Yh4T^8E0R79_$!f41eT=-Uk~YHj!A`ga)=k#PFbZ)Z@E
zl%WP5B<=(eHz0|xF5iSS9@z#7-$bU#S*26enNVJhDAee9`wDN=k5!x>0~W^3f)yn|
zp^EeptSl<zywNAsgjkkToLN9@Zl<eA@rhZb)8d0$2}#bpWr}**#RC`_d0_2W<vVXs
zTm9e7rogt(n7#-#jCaO&SH#yVx2EEGl&ToPCKDr(IKDNU-d$2fXLq${spbT9(yM2L
z_$}i%>0zVOw{ESZFp6)S`7S=Ry?JTYgzRXcBqJNp_7D|?f+Ou)_C>z-2m6GA=@M{Q
zpROh#m%2jA5b_xdDOT1t8P=6!(Z9PCgY-|BC8-iHoAQm0MHiKd%+fD*x;(qfZC6lG
zf^ui}xxKHN`3Hk3`V{@fifTFua<zLpNOEWD1&pf{u#Gl?pQt`8rW48!nt|z+8uj>Q
zpTv(A$)?K>EXe*z{zr>K+{J`UQcd(OvMrMVjRIv9<|(VozhwrdClo})n@#CIwv{k#
zhkuBf(<Ak#49x`5v46Os$j9_sPh+T7sy1~>hU){30H|M?mTlC?o<^OtdAE<&i2D1K
z*rN$uhDcdOck~9GP%UbohR!->1FUf-1M{{TPl8RfMw@%o;ti6?TIO{179+WGaP|)f
z*hA|WCSKB2|Jps!MH)bTyrG$-+}C7dV;cO^RY)w2;Wo)gStZKP*=B{1?^z}|Eh7<a
zi*%LL)y9_!vsIlPUkQu!b*r=8>B{ekowd>W{(QI@C$~s&{=zyIiL49xu6^!w`FYx;
zA}lP4pfCI7Zhu*HmuasM%p$~If*GCAi6oMY&(-z#%+P^Q=WgmpCeq%E)X^5Bsfm~c
zhn(nay1bIcW&L!Y+EuMBhmQfQ(6Yua@Zq!)xoAl;oedY6Sh_`Wh!F@XrFPzOA_41v
zF<sPtw1KlMgpgD|3Zp;|N?GYAo$FvicjG#%P|Nt&nE}qN^4g;YNvl064(CPo;J-jP
zsLfh}E9B#}KprtN#L~MS3_tonjYs9^r0X1Ch+1Y5ecIuP3hy&OwMQAEcixAG4${;1
zC*{YvPlxKy66dYHva1t#D?OQK*nP~>xVgEBJ)?=fT1cU@_0&7TtGd^~Sfl(&Ci(~a
z`LpJ^f=&CL-Dvr)L}r+8n2+9zHxQ8Jp+Bh;m1l=~=%Ed$&*tK4J|`tiMykG1c!pOe
zvr7g)DECuOf${mn&};|gT0@R%k1`2I5)p=%ao#;{EV7l&rXCuo@M*Utv_jR~XYth@
zbuyz@n?3&7XVg>A@?bu`Pe;qg=;Z5n-#?~<ahB!>@l$sa!_Qc7)cf?b{w&@7TfE%t
z^FvsVSjMRP0L4D-`c)nG>1p*Gz5JG!*7Q&T8?D9b2&AbAgF@Q>%Oo<}!+!tpwKR*%
z^;OE=$TBA87(v%muerpV<DwEPnRKx4EBQQko@i(Z#KR}XJ8G%C&4mV|atYZ&zYLV?
z*zjir{9i0gSPtp9c?-t3!YDgvEili{Oy4CHe}V|C22F0r!(X7tX7NXw{qfHSpcx(p
zMK;kdw1oAD2uY7(pmoz7N{5*(91tbb@dCyoS4zI|i>-h?hP?ADSUkx<Sz*|b_$3~%
z4v719AKV8~bI}5H<N&O=y`Vn$bM*>Bc?V=iw*#akzm6IJ*?h0N`}RPpg?%f4S{enQ
zFzHD3pi-7f;B700HmHz^)t}19<Nrz#a#u3<x9WyziXIZQ#pbP2@@ka`ca+R1*quz#
z?lu%l6H^1RN=>ku2C{@;l7ZDNphybzl#v}LLGB>oz7p?2%>r`{LS&8lLXB8}rfT~?
zbc`q!QAz$^y<7;Ye|C;bz!<onBi0VJI{m7mV_7tx0f6fQ11a&{1dDStz^2U3F19>7
z{44Gh17c_Z+Qd{wNM@`8g@W%~v|@SU6_HL`R&;(c-`+CVgjG$GU6SVg!Y#{{Z?Ya+
z_6KunlA<VC8Y38-_Rr%@m90rZ!5*I*?VX!3(uLxu<BJ7Q)EQ8Tv|Zi&7^W6KZ|Vof
zk>wXljbzxL%wXxwOSaGWWnp?M{bQVnaR!<_F~fCEWrNRtm$o002hAq<{kkccr!eMV
z{s>dso!xeRHMi6G@cFhNuY{enpADn=<p_Q75vpU*r#;PNE)ZbukxP4fF(2!kYfV35
zs)Ml9w`{sy^PpkRyIpm)t+f#(I<NK}_+X4xs;SUFWJHvEmAQvh-XLi$mySK~dytlo
zFF;6~kG_^CnN0ujlQmvOn0I^MiW-v`(ux+O-)-<JmzSuB%;B(c)5Aszo#3QqQ4GL!
zd5Fidb&f^r_P6mnvVB}iM@bZ8F6z|rTsUm9wblHu+p$ZXPFD8ae~d0>`IBKyZjRT|
z-VXwpzlxuB&N9pOwKQ8ErN(?~xf{*nfO%SaeTp?qK%fdZhy9ji!}NrhF7r+MbVP7Z
zz@ubuoXy9hli$V7c#WlVLG(GZS>9B%@ALbhs_|N#^<KA?BBw>y8zP_syN|XV=k17Z
zSZfS=y#kwC9fNJS@dDPF>rKG(H5St$Mz$U7bvt;B+7o;hT(3Qk9ZojC-nExhM|mTR
zk*>8TaCZ*fRt^t-_Y3lUG;h){<xZ{4bd{*$g{(odQ`QkON1)mJfo7L%vDZ^~8m+Ku
zkQ7%pqi3x&Z(HkNt=H<YI!&<;93|dpl%&$C?k20GPCGGMpZ&b^j4$<dsO&Dj5KFda
zaRq>g6ekgsY1IP#ji!HD4!=-Ib+z-wv`#wdGD@3tP>kLgSV4koIjS4%iab{#S9tAU
mnG6mq5H^V=1ePPP`~?1$+=?ZC%UL=*`6%;saXFo!U;7`HeAv_g

literal 0
HcmV?d00001

diff --git a/debug.log4j.xml b/debug.log4j.xml
new file mode 100644
index 000000000..5604af65f
--- /dev/null
+++ b/debug.log4j.xml
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+	Log4j configuration for debug mode.
+
+	Note the 'packages' attribute; this is required if an appender needs to reference
+	a format converter defined somewhere else in the codebase.
+
+	The only converter we currently	have defined is in the file
+	"Log4jDevelopmentPatternConverter.java" (which is under the "ghidra.framework" package).
+	See the console appender, which uses the "%hl" converter code.
+
+-->
+<Configuration monitorInterval="30" xmlns:xi="http://www.w3.org/2001/XInclude" packages="log">
+
+  <Appenders>
+	<Console
+		name="console"
+		target="SYSTEM_OUT">
+		<PatternLayout pattern="%-5p %m %hl %n"/>
+	</Console>
+	<RollingFile
+		name="detail"
+		fileName="${sys:logFilename}"
+		filePattern="${sys:logFilename}-%d{yyyy-MM-dd}-%i.log">
+		<PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss} %-5p %c	%m %ex %n"/>
+		<Policies>
+			<SizeBasedTriggeringPolicy size="50000 KB"/>
+		</Policies>
+		<DefaultRolloverStrategy max="20"/>
+	</RollingFile>
+
+	<!-- Script File Appender -->
+	<RollingFile
+		name="script"
+		fileName="${sys:scriptLogFilename}"
+		filePattern="${sys:scriptLogFilename}-%d{yyyy-MM-dd}-%i.log">
+
+		<PatternLayout pattern="%d{ISO8601} %-5p %m%n"/>
+
+		<!--
+			Only allow messages from scripts.  We prepend each script message with its name and
+			a greater-than arrow.
+		 -->
+		<RegexFilter regex=".*Script.java> .*" onMatch="ACCEPT" onMismatch="DENY" />
+
+		<Policies>
+			<SizeBasedTriggeringPolicy size="50000 KB"/>
+		</Policies>
+		<DefaultRolloverStrategy max="20"/>
+	</RollingFile>
+
+	<LogPanelAppender name="logPanel">
+		<PatternLayout pattern="%-5p %m %ex"/>
+	</LogPanelAppender>
+  </Appenders>
+
+  <Loggers>
+	  <Logger name="org.apache" level="WARN"/>
+	  <Logger name="org.jdom" level="WARN"/>
+	  <Logger name="generic.help" level="DEBUG"/>
+	  <Logger name="db" level="DEBUG"/>
+	  <Logger name="docking" level="DEBUG"/>
+	  <Logger name="ghidra" level="DEBUG"/>
+	  <Logger name="reverse" level="DEBUG"/>
+	  <Logger name="util" level="DEBUG"/>
+
+	  <Root level="ALL">
+		<AppenderRef ref="console" level="DEBUG"/>
+		<AppenderRef ref="detail" level="DEBUG"/>
+		<AppenderRef ref="script" level="DEBUG"/>
+		<AppenderRef ref="logPanel" level="DEBUG"/>
+	  </Root>
+  </Loggers>
+
+
+</Configuration>
-- 
2.39.1

