From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Pokechu22 <Pokechu022@gmail.com>
Date: Mon, 11 Jul 2022 12:40:19 -0700
Subject: [PATCH] 2810: Convert countLeadingZeros followed by shift to a
 comparison

MIPS: Eliminate countLeadingOnes(val) in favor of countLeadingZeros(~val)

Create and use COUNTLEADINGZEROS Pcode op

Add rule to simplify countLeadingZeros followed by right
---
 .../src/decompile/cpp/coreaction.cc           |    2 +
 .../Decompiler/src/decompile/cpp/dynamic.cc   |    3 +-
 .../Decompiler/src/decompile/cpp/op.cc        |    4 +
 .../src/decompile/cpp/opbehavior.cc           |    6 +
 .../src/decompile/cpp/opbehavior.hh           |    7 +
 .../Decompiler/src/decompile/cpp/opcodes.cc   |    4 +-
 .../Decompiler/src/decompile/cpp/opcodes.hh   |    3 +-
 .../Decompiler/src/decompile/cpp/printc.hh    |    1 +
 .../src/decompile/cpp/printlanguage.hh        |    1 +
 .../src/decompile/cpp/ruleaction.cc           |   60 +
 .../src/decompile/cpp/ruleaction.hh           |   11 +
 .../src/decompile/cpp/slgh_compile.cc         |    3 +
 .../Decompiler/src/decompile/cpp/slghparse.cc | 2061 +++++++++--------
 .../Decompiler/src/decompile/cpp/slghparse.hh |  135 +-
 .../Decompiler/src/decompile/cpp/slghparse.y  |    3 +-
 .../Decompiler/src/decompile/cpp/slghscan.cc  |  794 +++----
 .../Decompiler/src/decompile/cpp/slghscan.l   |    1 +
 .../Decompiler/src/decompile/cpp/typeop.cc    |    8 +
 .../Decompiler/src/decompile/cpp/typeop.hh    |    7 +
 .../Decompiler/src/main/doc/pcoderef.xml      |   57 +-
 .../Decompiler/src/main/doc/sleigh.xml        |   11 +-
 .../callother/CountLeadingOnesOpBehavior.java |   57 -
 .../CountLeadingZerosOpBehavior.java          |   60 -
 .../OpBehaviorCountLeadingZeros.java          |   48 +
 .../pcode/opbehavior/OpBehaviorFactory.java   |    1 +
 .../ghidra/pcodeCPort/opcodes/OpCode.java     |    6 +-
 .../pcodeCPort/slgh_compile/PcodeCompile.java |    6 +
 .../program/model/pcode/DynamicHash.java      |    2 +-
 .../ghidra/program/model/pcode/PcodeOp.java   |    5 +-
 .../68000/data/languages/68000.pspec          |    1 -
 .../68000/data/languages/68000.sinc           |    2 -
 .../m68kEmulateInstructionStateModifier.java  |  145 --
 Ghidra/Processors/ARM/data/languages/ARM.sinc |    1 -
 .../data/languages/ARMTHUMBinstructions.sinc  |    2 +-
 .../ARM/data/languages/ARMinstructions.sinc   |    2 +-
 .../ARMEmulateInstructionStateModifier.java   |    4 -
 .../Processors/MIPS/data/languages/mips.sinc  |    6 -
 .../data/languages/mips32Instructions.sinc    |    4 +-
 .../data/languages/mips64Instructions.sinc    |    2 +-
 .../MIPS/data/languages/mipsmicro.sinc        |    4 +-
 .../MIPSEmulateInstructionStateModifier.java  |    9 -
 .../PowerPC/data/languages/ppc_common.sinc    |    1 -
 .../PPCEmulateInstructionStateModifier.java   |    2 -
 .../Processors/x86/data/languages/lzcnt.sinc  |   47 +-
 .../src/ghidra/xtext/sleigh/Sleigh.xtext      |    3 +-
 .../languages/html/additionalpcode.html       |   43 +
 GhidraDocs/languages/html/pcoderef.html       |    8 +-
 GhidraDocs/languages/html/reference.html      |    5 +
 GhidraDocs/languages/html/sleigh.html         |    5 +-
 GhidraDocs/languages/html/sleigh_ref.html     |    6 +
 50 files changed, 1844 insertions(+), 1825 deletions(-)
 delete mode 100644 Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcode/emulate/callother/CountLeadingOnesOpBehavior.java
 delete mode 100644 Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcode/emulate/callother/CountLeadingZerosOpBehavior.java
 create mode 100644 Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcode/opbehavior/OpBehaviorCountLeadingZeros.java
 delete mode 100644 Ghidra/Processors/68000/src/main/java/ghidra/program/emulation/m68kEmulateInstructionStateModifier.java

diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/coreaction.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/coreaction.cc
index 656483a75..6e20dbd23 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/coreaction.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/coreaction.cc
@@ -3598,6 +3598,7 @@ void ActionDeadCode::propagateConsumed(vector<Varnode *> &worklist)
     pushConsumed(b,op->getIn(2), worklist);
     break;
   case CPUI_POPCOUNT:
+  case CPUI_COUNTLEADINGZEROS:
     a = 16 * op->getIn(0)->getSize() - 1;	// Mask for possible bits that could be set
     a &= outc;					// Of the bits that could be set, which are consumed
     b = (a == 0) ? 0 : ~((uintb)0);		// if any consumed, treat all input bits as consumed
@@ -5127,6 +5128,7 @@ void ActionDatabase::universalAction(Architecture *conf)
 	actprop->addRule( new RuleOrMultiBool("analysis") );
 	actprop->addRule( new RuleXorSwap("analysis") );
 	actprop->addRule( new RuleLzcntZeroTest("analysis") );
+	actprop->addRule( new RuleCountLeadingZerosShiftBool("analysis") );
 	actprop->addRule( new RuleSubvarAnd("subvar") );
 	actprop->addRule( new RuleSubvarSubpiece("subvar") );
 	actprop->addRule( new RuleSplitFlow("subvar") );
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/dynamic.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/dynamic.cc
index 9d8b08053..9f885926d 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/dynamic.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/dynamic.cc
@@ -55,7 +55,8 @@ const uint4 DynamicHash::transtable[] = {
 
   0,				// CAST is skipped
   CPUI_INT_ADD,  CPUI_INT_ADD, 	// PTRADD and PTRSUB hash same as INT_ADD
-  CPUI_SEGMENTOP, CPUI_CPOOLREF, CPUI_NEW, CPUI_INSERT, CPUI_EXTRACT, CPUI_POPCOUNT
+  CPUI_SEGMENTOP, CPUI_CPOOLREF, CPUI_NEW, CPUI_INSERT, CPUI_EXTRACT,
+  CPUI_POPCOUNT, CPUI_COUNTLEADINGZEROS
   
 };
 
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/op.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/op.cc
index b4f8a3f8e..9e10809bd 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/op.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/op.cc
@@ -645,6 +645,10 @@ uintb PcodeOp::getNZMaskLocal(bool cliploop) const
     resmask = coveringmask((uintb)sz1);
     resmask &= fullmask;
     break;
+  case CPUI_COUNTLEADINGZEROS:
+    resmask = coveringmask(getIn(0)->getSize() * 8);
+    resmask &= fullmask;
+    break;
   case CPUI_SUBPIECE:
     resmask = getIn(0)->getNZMask();
     sz1 = (int4)getIn(1)->getOffset();
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/opbehavior.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/opbehavior.cc
index 3b84bac6a..5ad5e6fa0 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/opbehavior.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/opbehavior.cc
@@ -102,6 +102,7 @@ void OpBehavior::registerInstructions(vector<OpBehavior *> &inst,const Translate
   inst[CPUI_INSERT] = new OpBehavior(CPUI_INSERT,false);
   inst[CPUI_EXTRACT] = new OpBehavior(CPUI_EXTRACT,false);
   inst[CPUI_POPCOUNT] = new OpBehaviorPopcount();
+  inst[CPUI_COUNTLEADINGZEROS] = new OpBehaviorCountLeadingZeros();
 }
 
 /// \param sizeout is the size of the output in bytes
@@ -757,3 +758,8 @@ uintb OpBehaviorPopcount::evaluateUnary(int4 sizeout,int4 sizein,uintb in1) cons
   return (uintb)popcount(in1);
 }
 
+uintb OpBehaviorCountLeadingZeros::evaluateUnary(int4 sizeout,int4 sizein,uintb in1) const
+
+{
+  return (uintb)(count_leading_zeros(in1) - 8*(sizeof(uintb) - sizein));
+}
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/opbehavior.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/opbehavior.hh
index 5061cb65f..2daf92e25 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/opbehavior.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/opbehavior.hh
@@ -511,4 +511,11 @@ public:
   virtual uintb evaluateUnary(int4 sizeout,int4 sizein,uintb in1) const;
 };
 
+/// CPUI_COUNTLEADINGZEROS behavior
+class OpBehaviorCountLeadingZeros : public OpBehavior {
+public:
+  OpBehaviorCountLeadingZeros(void) : OpBehavior(CPUI_COUNTLEADINGZEROS,true) {}	///< Constructor
+  virtual uintb evaluateUnary(int4 sizeout,int4 sizein,uintb in1) const;
+};
+
 #endif
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/opcodes.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/opcodes.cc
index d116fe62d..b11046702 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/opcodes.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/opcodes.cc
@@ -42,11 +42,11 @@ static const char *opcode_name[] = {
   "TRUNC", "CEIL", "FLOOR", "ROUND",
   "BUILD", "DELAY_SLOT", "PIECE", "SUBPIECE", "CAST",
   "LABEL", "CROSSBUILD", "SEGMENTOP", "CPOOLREF", "NEW",
-  "INSERT", "EXTRACT", "POPCOUNT"
+  "INSERT", "EXTRACT", "POPCOUNT", "COUNTLEADINGZEROS"
 };
 
 static const int4 opcode_indices[] = {
-  0, 39, 37, 40, 38,  4,  6, 60,  7,  8,  9, 64,  5, 57,  1, 68, 66,
+   0, 39, 37, 40, 38,  4,  6, 60,  7,  8,  9, 64,  5, 57,  1, 73, 68, 66,
   61, 71, 55, 52, 47, 48, 41, 43, 44, 49, 46, 51, 42, 53, 50, 58, 70,
   54, 24, 19, 27, 21, 33, 11, 29, 15, 16, 32, 25, 12, 28, 35, 30,
   23, 22, 34, 18, 13, 14, 36, 31, 20, 26, 17, 65,  2, 69, 62, 72, 10, 59,
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/opcodes.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/opcodes.hh
index 14ec99772..21b9e67f2 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/opcodes.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/opcodes.hh
@@ -123,8 +123,9 @@ enum OpCode {
   CPUI_INSERT = 70,		///< Insert a bit-range
   CPUI_EXTRACT = 71,		///< Extract a bit-range
   CPUI_POPCOUNT = 72,		///< Count the 1-bits
+  CPUI_COUNTLEADINGZEROS = 73,	///< Count the leading 0-bits
 
-  CPUI_MAX = 73			///< Value indicating the end of the op-code values
+  CPUI_MAX = 74			///< Value indicating the end of the op-code values
 };
 
 extern const char *get_opname(OpCode opc);		///< Convert an OpCode to the name as a string
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/printc.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/printc.hh
index 9c49c036c..3b0645b09 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/printc.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/printc.hh
@@ -334,6 +334,7 @@ public:
   virtual void opInsertOp(const PcodeOp *op);
   virtual void opExtractOp(const PcodeOp *op);
   virtual void opPopcountOp(const PcodeOp *op) { opFunc(op); }
+  virtual void opCountLeadingZerosOp(const PcodeOp *op) { opFunc(op); }
 };
 
 /// \brief Set of print commands for displaying an open brace '{' and setting a new indent level
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/printlanguage.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/printlanguage.hh
index b37dfef31..e9014c6b0 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/printlanguage.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/printlanguage.hh
@@ -555,6 +555,7 @@ public:
   virtual void opInsertOp(const PcodeOp *op)=0;				///< Emit an INSERT operator
   virtual void opExtractOp(const PcodeOp *op)=0;			///< Emit an EXTRACT operator
   virtual void opPopcountOp(const PcodeOp *op)=0;			///< Emit a POPCOUNT operator
+  virtual void opCountLeadingZerosOp(const PcodeOp *op)=0;		///< Emit a COUNTLEADINGZEROS operator
 
   static int4 mostNaturalBase(uintb val); 			///< Determine the most natural base for an integer
   static void formatBinary(ostream &s,uintb val);		///< Print a number in binary form
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.cc
index ae9ee1798..af2c1240f 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.cc
@@ -10068,3 +10068,63 @@ int4 RuleLzcntZeroTest::applyOp(PcodeOp *op,Funcdata &data)
     }
     return 1;
 }
+
+/// \class RuleCountLeadingZerosShiftBool
+/// \brief Simplify equality checks that use countLeadingZeros.
+///
+/// Some compilers check if a value is equal to zero by checking the most
+/// significant bit in countLeadingZeros; for instance on a 32-bit system,
+/// it being equal to 32 would have the 5th bit set.
+///  - `countLeadingZeros(a ^ 3) >> 5  =>  a ^ 3 == 0  =>  a == 3` (by RuleXorCollapse)
+///  - `countLeadingZeros(a - 3) >> 5  =>  a - 3 == 0  =>  a == 3` (by RuleEqual2Zero)
+void RuleCountLeadingZerosShiftBool::getOpList(vector<uint4> &oplist) const
+
+{
+  oplist.push_back(CPUI_COUNTLEADINGZEROS);
+}
+
+int4 RuleCountLeadingZerosShiftBool::applyOp(PcodeOp *op,Funcdata &data)
+
+{
+  Varnode *outVn = op->getOut();
+  list<PcodeOp *>::const_iterator iter, iter2;
+  uintb max_return = 8 * op->getIn(0)->getSize();
+  if (popcount(max_return) != 1) {
+    // This rule only makes sense with sizes that are powers of 2; if the maximum value
+    // returned by countLeadingZeros was, say, 24, then both 16 >> 4 and 24 >> 4
+    // are 1, and thus the check does not make sense.  (Such processors couldn't
+    // use countLeadingZeros for checking equality in any case.)
+    return 0;
+  }
+
+  for(iter=outVn->beginDescend();iter!=outVn->endDescend();++iter) {
+    PcodeOp *baseOp = *iter;
+    if (baseOp->code() != CPUI_INT_RIGHT && baseOp->code() != CPUI_INT_SRIGHT) continue;
+    Varnode *vn1 = baseOp->getIn(1);
+    if (!vn1->isConstant()) continue;
+    uintb shift = vn1->getOffset();
+    if ((max_return >> shift) == 1) {
+      // Becomes a comparison with zero
+      PcodeOp* newOp = data.newOp(2, baseOp->getAddr());
+      data.opSetOpcode(newOp, CPUI_INT_EQUAL);
+      Varnode* b = data.newConstant(op->getIn(0)->getSize(), 0);
+      data.opSetInput(newOp, op->getIn(0), 0);
+      data.opSetInput(newOp, b, 1);
+
+      // CPUI_INT_EQUAL must produce a 1-byte boolean result
+      Varnode* eqResVn = data.newUniqueOut(1, newOp);
+      data.opSetOutput(newOp, eqResVn);
+
+      data.opInsertBefore(newOp, baseOp);
+
+      // Because the old output had size op->getIn(0)->getSize(),
+      // we have to guarantee that a Varnode of this size gets outputted
+      // to the descending PcodeOps. This is handled here with CPUI_INT_ZEXT.
+      data.opRemoveInput(baseOp, 1);
+      data.opSetOpcode(baseOp, CPUI_INT_ZEXT);
+      data.opSetInput(baseOp, eqResVn, 0);
+      return 1;
+    }
+  }
+  return 0;
+}
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.hh
index c6d077792..dae1736dc 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/ruleaction.hh
@@ -1588,4 +1588,15 @@ public:
   virtual void getOpList(vector<uint4> &oplist) const;
   virtual int4 applyOp(PcodeOp *op,Funcdata &data);
 };
+
+class RuleCountLeadingZerosShiftBool : public Rule {
+public:
+  RuleCountLeadingZerosShiftBool(const string &g) : Rule( g, 0, "countleadingzerosshiftbool") {}	///< Constructor
+  virtual Rule *clone(const ActionGroupList &grouplist) const {
+    if (!grouplist.contains(getGroup())) return (Rule *)0;
+    return new RuleCountLeadingZerosShiftBool(getGroup());
+  }
+  virtual void getOpList(vector<uint4> &oplist) const;
+  virtual int4 applyOp(PcodeOp *op,Funcdata &data);
+};
 #endif
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slgh_compile.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/slgh_compile.cc
index f91aba305..74cfa38dd 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slgh_compile.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slgh_compile.cc
@@ -785,6 +785,9 @@ void ConsistencyChecker::printOpName(ostream &s,OpTpl *op)
   case CPUI_POPCOUNT:
     s << "Count bits(popcount)";
     break;
+  case CPUI_COUNTLEADINGZEROS:
+    s << "Count leading zero bits";
+    break;
   default:
     break;
   }
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.cc
index a6541ac49..19ab70a0f 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.cc
@@ -169,154 +169,155 @@ enum yysymbol_kind_t
   YYSYMBOL_OP_CPOOLREF = 60,               /* OP_CPOOLREF  */
   YYSYMBOL_OP_NEW = 61,                    /* OP_NEW  */
   YYSYMBOL_OP_POPCOUNT = 62,               /* OP_POPCOUNT  */
-  YYSYMBOL_BADINTEGER = 63,                /* BADINTEGER  */
-  YYSYMBOL_GOTO_KEY = 64,                  /* GOTO_KEY  */
-  YYSYMBOL_CALL_KEY = 65,                  /* CALL_KEY  */
-  YYSYMBOL_RETURN_KEY = 66,                /* RETURN_KEY  */
-  YYSYMBOL_IF_KEY = 67,                    /* IF_KEY  */
-  YYSYMBOL_DEFINE_KEY = 68,                /* DEFINE_KEY  */
-  YYSYMBOL_ATTACH_KEY = 69,                /* ATTACH_KEY  */
-  YYSYMBOL_MACRO_KEY = 70,                 /* MACRO_KEY  */
-  YYSYMBOL_SPACE_KEY = 71,                 /* SPACE_KEY  */
-  YYSYMBOL_TYPE_KEY = 72,                  /* TYPE_KEY  */
-  YYSYMBOL_RAM_KEY = 73,                   /* RAM_KEY  */
-  YYSYMBOL_DEFAULT_KEY = 74,               /* DEFAULT_KEY  */
-  YYSYMBOL_REGISTER_KEY = 75,              /* REGISTER_KEY  */
-  YYSYMBOL_ENDIAN_KEY = 76,                /* ENDIAN_KEY  */
-  YYSYMBOL_WITH_KEY = 77,                  /* WITH_KEY  */
-  YYSYMBOL_ALIGN_KEY = 78,                 /* ALIGN_KEY  */
-  YYSYMBOL_OP_UNIMPL = 79,                 /* OP_UNIMPL  */
-  YYSYMBOL_TOKEN_KEY = 80,                 /* TOKEN_KEY  */
-  YYSYMBOL_SIGNED_KEY = 81,                /* SIGNED_KEY  */
-  YYSYMBOL_NOFLOW_KEY = 82,                /* NOFLOW_KEY  */
-  YYSYMBOL_HEX_KEY = 83,                   /* HEX_KEY  */
-  YYSYMBOL_DEC_KEY = 84,                   /* DEC_KEY  */
-  YYSYMBOL_OCT_KEY = 85,                   /* OCT_KEY  */
-  YYSYMBOL_BIN_KEY = 86,                   /* BIN_KEY  */
-  YYSYMBOL_BIG_KEY = 87,                   /* BIG_KEY  */
-  YYSYMBOL_LITTLE_KEY = 88,                /* LITTLE_KEY  */
-  YYSYMBOL_SIZE_KEY = 89,                  /* SIZE_KEY  */
-  YYSYMBOL_WORDSIZE_KEY = 90,              /* WORDSIZE_KEY  */
-  YYSYMBOL_OFFSET_KEY = 91,                /* OFFSET_KEY  */
-  YYSYMBOL_NAMES_KEY = 92,                 /* NAMES_KEY  */
-  YYSYMBOL_VALUES_KEY = 93,                /* VALUES_KEY  */
-  YYSYMBOL_VARIABLES_KEY = 94,             /* VARIABLES_KEY  */
-  YYSYMBOL_PCODEOP_KEY = 95,               /* PCODEOP_KEY  */
-  YYSYMBOL_IS_KEY = 96,                    /* IS_KEY  */
-  YYSYMBOL_LOCAL_KEY = 97,                 /* LOCAL_KEY  */
-  YYSYMBOL_DELAYSLOT_KEY = 98,             /* DELAYSLOT_KEY  */
-  YYSYMBOL_CROSSBUILD_KEY = 99,            /* CROSSBUILD_KEY  */
-  YYSYMBOL_EXPORT_KEY = 100,               /* EXPORT_KEY  */
-  YYSYMBOL_BUILD_KEY = 101,                /* BUILD_KEY  */
-  YYSYMBOL_CONTEXT_KEY = 102,              /* CONTEXT_KEY  */
-  YYSYMBOL_ELLIPSIS_KEY = 103,             /* ELLIPSIS_KEY  */
-  YYSYMBOL_GLOBALSET_KEY = 104,            /* GLOBALSET_KEY  */
-  YYSYMBOL_BITRANGE_KEY = 105,             /* BITRANGE_KEY  */
-  YYSYMBOL_CHAR = 106,                     /* CHAR  */
-  YYSYMBOL_INTEGER = 107,                  /* INTEGER  */
-  YYSYMBOL_INTB = 108,                     /* INTB  */
-  YYSYMBOL_STRING = 109,                   /* STRING  */
-  YYSYMBOL_SYMBOLSTRING = 110,             /* SYMBOLSTRING  */
-  YYSYMBOL_SPACESYM = 111,                 /* SPACESYM  */
-  YYSYMBOL_SECTIONSYM = 112,               /* SECTIONSYM  */
-  YYSYMBOL_TOKENSYM = 113,                 /* TOKENSYM  */
-  YYSYMBOL_USEROPSYM = 114,                /* USEROPSYM  */
-  YYSYMBOL_VALUESYM = 115,                 /* VALUESYM  */
-  YYSYMBOL_VALUEMAPSYM = 116,              /* VALUEMAPSYM  */
-  YYSYMBOL_CONTEXTSYM = 117,               /* CONTEXTSYM  */
-  YYSYMBOL_NAMESYM = 118,                  /* NAMESYM  */
-  YYSYMBOL_VARSYM = 119,                   /* VARSYM  */
-  YYSYMBOL_BITSYM = 120,                   /* BITSYM  */
-  YYSYMBOL_SPECSYM = 121,                  /* SPECSYM  */
-  YYSYMBOL_VARLISTSYM = 122,               /* VARLISTSYM  */
-  YYSYMBOL_OPERANDSYM = 123,               /* OPERANDSYM  */
-  YYSYMBOL_STARTSYM = 124,                 /* STARTSYM  */
-  YYSYMBOL_ENDSYM = 125,                   /* ENDSYM  */
-  YYSYMBOL_NEXT2SYM = 126,                 /* NEXT2SYM  */
-  YYSYMBOL_MACROSYM = 127,                 /* MACROSYM  */
-  YYSYMBOL_LABELSYM = 128,                 /* LABELSYM  */
-  YYSYMBOL_SUBTABLESYM = 129,              /* SUBTABLESYM  */
-  YYSYMBOL_130_ = 130,                     /* '}'  */
-  YYSYMBOL_131_ = 131,                     /* '='  */
-  YYSYMBOL_132_ = 132,                     /* '('  */
-  YYSYMBOL_133_ = 133,                     /* ')'  */
-  YYSYMBOL_134_ = 134,                     /* ','  */
-  YYSYMBOL_135_ = 135,                     /* '['  */
-  YYSYMBOL_136_ = 136,                     /* ']'  */
-  YYSYMBOL_137_ = 137,                     /* '{'  */
-  YYSYMBOL_138_ = 138,                     /* ':'  */
-  YYSYMBOL_139_ = 139,                     /* ' '  */
-  YYSYMBOL_YYACCEPT = 140,                 /* $accept  */
-  YYSYMBOL_spec = 141,                     /* spec  */
-  YYSYMBOL_definition = 142,               /* definition  */
-  YYSYMBOL_constructorlike = 143,          /* constructorlike  */
-  YYSYMBOL_endiandef = 144,                /* endiandef  */
-  YYSYMBOL_aligndef = 145,                 /* aligndef  */
-  YYSYMBOL_tokendef = 146,                 /* tokendef  */
-  YYSYMBOL_tokenprop = 147,                /* tokenprop  */
-  YYSYMBOL_contextdef = 148,               /* contextdef  */
-  YYSYMBOL_contextprop = 149,              /* contextprop  */
-  YYSYMBOL_fielddef = 150,                 /* fielddef  */
-  YYSYMBOL_contextfielddef = 151,          /* contextfielddef  */
-  YYSYMBOL_spacedef = 152,                 /* spacedef  */
-  YYSYMBOL_spaceprop = 153,                /* spaceprop  */
-  YYSYMBOL_varnodedef = 154,               /* varnodedef  */
-  YYSYMBOL_bitrangedef = 155,              /* bitrangedef  */
-  YYSYMBOL_bitrangelist = 156,             /* bitrangelist  */
-  YYSYMBOL_bitrangesingle = 157,           /* bitrangesingle  */
-  YYSYMBOL_pcodeopdef = 158,               /* pcodeopdef  */
-  YYSYMBOL_valueattach = 159,              /* valueattach  */
-  YYSYMBOL_nameattach = 160,               /* nameattach  */
-  YYSYMBOL_varattach = 161,                /* varattach  */
-  YYSYMBOL_macrodef = 162,                 /* macrodef  */
-  YYSYMBOL_withblockstart = 163,           /* withblockstart  */
-  YYSYMBOL_withblockmid = 164,             /* withblockmid  */
-  YYSYMBOL_withblock = 165,                /* withblock  */
-  YYSYMBOL_id_or_nil = 166,                /* id_or_nil  */
-  YYSYMBOL_bitpat_or_nil = 167,            /* bitpat_or_nil  */
-  YYSYMBOL_macrostart = 168,               /* macrostart  */
-  YYSYMBOL_rtlbody = 169,                  /* rtlbody  */
-  YYSYMBOL_constructor = 170,              /* constructor  */
-  YYSYMBOL_constructprint = 171,           /* constructprint  */
-  YYSYMBOL_subtablestart = 172,            /* subtablestart  */
-  YYSYMBOL_pexpression = 173,              /* pexpression  */
-  YYSYMBOL_pequation = 174,                /* pequation  */
-  YYSYMBOL_elleq = 175,                    /* elleq  */
-  YYSYMBOL_ellrt = 176,                    /* ellrt  */
-  YYSYMBOL_atomic = 177,                   /* atomic  */
-  YYSYMBOL_constraint = 178,               /* constraint  */
-  YYSYMBOL_contextblock = 179,             /* contextblock  */
-  YYSYMBOL_contextlist = 180,              /* contextlist  */
-  YYSYMBOL_section_def = 181,              /* section_def  */
-  YYSYMBOL_rtlfirstsection = 182,          /* rtlfirstsection  */
-  YYSYMBOL_rtlcontinue = 183,              /* rtlcontinue  */
-  YYSYMBOL_rtl = 184,                      /* rtl  */
-  YYSYMBOL_rtlmid = 185,                   /* rtlmid  */
-  YYSYMBOL_statement = 186,                /* statement  */
-  YYSYMBOL_expr = 187,                     /* expr  */
-  YYSYMBOL_sizedstar = 188,                /* sizedstar  */
-  YYSYMBOL_jumpdest = 189,                 /* jumpdest  */
-  YYSYMBOL_varnode = 190,                  /* varnode  */
-  YYSYMBOL_integervarnode = 191,           /* integervarnode  */
-  YYSYMBOL_lhsvarnode = 192,               /* lhsvarnode  */
-  YYSYMBOL_label = 193,                    /* label  */
-  YYSYMBOL_exportvarnode = 194,            /* exportvarnode  */
-  YYSYMBOL_familysymbol = 195,             /* familysymbol  */
-  YYSYMBOL_specificsymbol = 196,           /* specificsymbol  */
-  YYSYMBOL_charstring = 197,               /* charstring  */
-  YYSYMBOL_intblist = 198,                 /* intblist  */
-  YYSYMBOL_intbpart = 199,                 /* intbpart  */
-  YYSYMBOL_stringlist = 200,               /* stringlist  */
-  YYSYMBOL_stringpart = 201,               /* stringpart  */
-  YYSYMBOL_anystringlist = 202,            /* anystringlist  */
-  YYSYMBOL_anystringpart = 203,            /* anystringpart  */
-  YYSYMBOL_valuelist = 204,                /* valuelist  */
-  YYSYMBOL_valuepart = 205,                /* valuepart  */
-  YYSYMBOL_varlist = 206,                  /* varlist  */
-  YYSYMBOL_varpart = 207,                  /* varpart  */
-  YYSYMBOL_paramlist = 208,                /* paramlist  */
-  YYSYMBOL_oplist = 209,                   /* oplist  */
-  YYSYMBOL_anysymbol = 210                 /* anysymbol  */
+  YYSYMBOL_OP_COUNTLEADINGZEROS = 63,      /* OP_COUNTLEADINGZEROS  */
+  YYSYMBOL_BADINTEGER = 64,                /* BADINTEGER  */
+  YYSYMBOL_GOTO_KEY = 65,                  /* GOTO_KEY  */
+  YYSYMBOL_CALL_KEY = 66,                  /* CALL_KEY  */
+  YYSYMBOL_RETURN_KEY = 67,                /* RETURN_KEY  */
+  YYSYMBOL_IF_KEY = 68,                    /* IF_KEY  */
+  YYSYMBOL_DEFINE_KEY = 69,                /* DEFINE_KEY  */
+  YYSYMBOL_ATTACH_KEY = 70,                /* ATTACH_KEY  */
+  YYSYMBOL_MACRO_KEY = 71,                 /* MACRO_KEY  */
+  YYSYMBOL_SPACE_KEY = 72,                 /* SPACE_KEY  */
+  YYSYMBOL_TYPE_KEY = 73,                  /* TYPE_KEY  */
+  YYSYMBOL_RAM_KEY = 74,                   /* RAM_KEY  */
+  YYSYMBOL_DEFAULT_KEY = 75,               /* DEFAULT_KEY  */
+  YYSYMBOL_REGISTER_KEY = 76,              /* REGISTER_KEY  */
+  YYSYMBOL_ENDIAN_KEY = 77,                /* ENDIAN_KEY  */
+  YYSYMBOL_WITH_KEY = 78,                  /* WITH_KEY  */
+  YYSYMBOL_ALIGN_KEY = 79,                 /* ALIGN_KEY  */
+  YYSYMBOL_OP_UNIMPL = 80,                 /* OP_UNIMPL  */
+  YYSYMBOL_TOKEN_KEY = 81,                 /* TOKEN_KEY  */
+  YYSYMBOL_SIGNED_KEY = 82,                /* SIGNED_KEY  */
+  YYSYMBOL_NOFLOW_KEY = 83,                /* NOFLOW_KEY  */
+  YYSYMBOL_HEX_KEY = 84,                   /* HEX_KEY  */
+  YYSYMBOL_DEC_KEY = 85,                   /* DEC_KEY  */
+  YYSYMBOL_OCT_KEY = 86,                   /* OCT_KEY  */
+  YYSYMBOL_BIN_KEY = 87,                   /* BIN_KEY  */
+  YYSYMBOL_BIG_KEY = 88,                   /* BIG_KEY  */
+  YYSYMBOL_LITTLE_KEY = 89,                /* LITTLE_KEY  */
+  YYSYMBOL_SIZE_KEY = 90,                  /* SIZE_KEY  */
+  YYSYMBOL_WORDSIZE_KEY = 91,              /* WORDSIZE_KEY  */
+  YYSYMBOL_OFFSET_KEY = 92,                /* OFFSET_KEY  */
+  YYSYMBOL_NAMES_KEY = 93,                 /* NAMES_KEY  */
+  YYSYMBOL_VALUES_KEY = 94,                /* VALUES_KEY  */
+  YYSYMBOL_VARIABLES_KEY = 95,             /* VARIABLES_KEY  */
+  YYSYMBOL_PCODEOP_KEY = 96,               /* PCODEOP_KEY  */
+  YYSYMBOL_IS_KEY = 97,                    /* IS_KEY  */
+  YYSYMBOL_LOCAL_KEY = 98,                 /* LOCAL_KEY  */
+  YYSYMBOL_DELAYSLOT_KEY = 99,             /* DELAYSLOT_KEY  */
+  YYSYMBOL_CROSSBUILD_KEY = 100,           /* CROSSBUILD_KEY  */
+  YYSYMBOL_EXPORT_KEY = 101,               /* EXPORT_KEY  */
+  YYSYMBOL_BUILD_KEY = 102,                /* BUILD_KEY  */
+  YYSYMBOL_CONTEXT_KEY = 103,              /* CONTEXT_KEY  */
+  YYSYMBOL_ELLIPSIS_KEY = 104,             /* ELLIPSIS_KEY  */
+  YYSYMBOL_GLOBALSET_KEY = 105,            /* GLOBALSET_KEY  */
+  YYSYMBOL_BITRANGE_KEY = 106,             /* BITRANGE_KEY  */
+  YYSYMBOL_CHAR = 107,                     /* CHAR  */
+  YYSYMBOL_INTEGER = 108,                  /* INTEGER  */
+  YYSYMBOL_INTB = 109,                     /* INTB  */
+  YYSYMBOL_STRING = 110,                   /* STRING  */
+  YYSYMBOL_SYMBOLSTRING = 111,             /* SYMBOLSTRING  */
+  YYSYMBOL_SPACESYM = 112,                 /* SPACESYM  */
+  YYSYMBOL_SECTIONSYM = 113,               /* SECTIONSYM  */
+  YYSYMBOL_TOKENSYM = 114,                 /* TOKENSYM  */
+  YYSYMBOL_USEROPSYM = 115,                /* USEROPSYM  */
+  YYSYMBOL_VALUESYM = 116,                 /* VALUESYM  */
+  YYSYMBOL_VALUEMAPSYM = 117,              /* VALUEMAPSYM  */
+  YYSYMBOL_CONTEXTSYM = 118,               /* CONTEXTSYM  */
+  YYSYMBOL_NAMESYM = 119,                  /* NAMESYM  */
+  YYSYMBOL_VARSYM = 120,                   /* VARSYM  */
+  YYSYMBOL_BITSYM = 121,                   /* BITSYM  */
+  YYSYMBOL_SPECSYM = 122,                  /* SPECSYM  */
+  YYSYMBOL_VARLISTSYM = 123,               /* VARLISTSYM  */
+  YYSYMBOL_OPERANDSYM = 124,               /* OPERANDSYM  */
+  YYSYMBOL_STARTSYM = 125,                 /* STARTSYM  */
+  YYSYMBOL_ENDSYM = 126,                   /* ENDSYM  */
+  YYSYMBOL_NEXT2SYM = 127,                 /* NEXT2SYM  */
+  YYSYMBOL_MACROSYM = 128,                 /* MACROSYM  */
+  YYSYMBOL_LABELSYM = 129,                 /* LABELSYM  */
+  YYSYMBOL_SUBTABLESYM = 130,              /* SUBTABLESYM  */
+  YYSYMBOL_131_ = 131,                     /* '}'  */
+  YYSYMBOL_132_ = 132,                     /* '='  */
+  YYSYMBOL_133_ = 133,                     /* '('  */
+  YYSYMBOL_134_ = 134,                     /* ')'  */
+  YYSYMBOL_135_ = 135,                     /* ','  */
+  YYSYMBOL_136_ = 136,                     /* '['  */
+  YYSYMBOL_137_ = 137,                     /* ']'  */
+  YYSYMBOL_138_ = 138,                     /* '{'  */
+  YYSYMBOL_139_ = 139,                     /* ':'  */
+  YYSYMBOL_140_ = 140,                     /* ' '  */
+  YYSYMBOL_YYACCEPT = 141,                 /* $accept  */
+  YYSYMBOL_spec = 142,                     /* spec  */
+  YYSYMBOL_definition = 143,               /* definition  */
+  YYSYMBOL_constructorlike = 144,          /* constructorlike  */
+  YYSYMBOL_endiandef = 145,                /* endiandef  */
+  YYSYMBOL_aligndef = 146,                 /* aligndef  */
+  YYSYMBOL_tokendef = 147,                 /* tokendef  */
+  YYSYMBOL_tokenprop = 148,                /* tokenprop  */
+  YYSYMBOL_contextdef = 149,               /* contextdef  */
+  YYSYMBOL_contextprop = 150,              /* contextprop  */
+  YYSYMBOL_fielddef = 151,                 /* fielddef  */
+  YYSYMBOL_contextfielddef = 152,          /* contextfielddef  */
+  YYSYMBOL_spacedef = 153,                 /* spacedef  */
+  YYSYMBOL_spaceprop = 154,                /* spaceprop  */
+  YYSYMBOL_varnodedef = 155,               /* varnodedef  */
+  YYSYMBOL_bitrangedef = 156,              /* bitrangedef  */
+  YYSYMBOL_bitrangelist = 157,             /* bitrangelist  */
+  YYSYMBOL_bitrangesingle = 158,           /* bitrangesingle  */
+  YYSYMBOL_pcodeopdef = 159,               /* pcodeopdef  */
+  YYSYMBOL_valueattach = 160,              /* valueattach  */
+  YYSYMBOL_nameattach = 161,               /* nameattach  */
+  YYSYMBOL_varattach = 162,                /* varattach  */
+  YYSYMBOL_macrodef = 163,                 /* macrodef  */
+  YYSYMBOL_withblockstart = 164,           /* withblockstart  */
+  YYSYMBOL_withblockmid = 165,             /* withblockmid  */
+  YYSYMBOL_withblock = 166,                /* withblock  */
+  YYSYMBOL_id_or_nil = 167,                /* id_or_nil  */
+  YYSYMBOL_bitpat_or_nil = 168,            /* bitpat_or_nil  */
+  YYSYMBOL_macrostart = 169,               /* macrostart  */
+  YYSYMBOL_rtlbody = 170,                  /* rtlbody  */
+  YYSYMBOL_constructor = 171,              /* constructor  */
+  YYSYMBOL_constructprint = 172,           /* constructprint  */
+  YYSYMBOL_subtablestart = 173,            /* subtablestart  */
+  YYSYMBOL_pexpression = 174,              /* pexpression  */
+  YYSYMBOL_pequation = 175,                /* pequation  */
+  YYSYMBOL_elleq = 176,                    /* elleq  */
+  YYSYMBOL_ellrt = 177,                    /* ellrt  */
+  YYSYMBOL_atomic = 178,                   /* atomic  */
+  YYSYMBOL_constraint = 179,               /* constraint  */
+  YYSYMBOL_contextblock = 180,             /* contextblock  */
+  YYSYMBOL_contextlist = 181,              /* contextlist  */
+  YYSYMBOL_section_def = 182,              /* section_def  */
+  YYSYMBOL_rtlfirstsection = 183,          /* rtlfirstsection  */
+  YYSYMBOL_rtlcontinue = 184,              /* rtlcontinue  */
+  YYSYMBOL_rtl = 185,                      /* rtl  */
+  YYSYMBOL_rtlmid = 186,                   /* rtlmid  */
+  YYSYMBOL_statement = 187,                /* statement  */
+  YYSYMBOL_expr = 188,                     /* expr  */
+  YYSYMBOL_sizedstar = 189,                /* sizedstar  */
+  YYSYMBOL_jumpdest = 190,                 /* jumpdest  */
+  YYSYMBOL_varnode = 191,                  /* varnode  */
+  YYSYMBOL_integervarnode = 192,           /* integervarnode  */
+  YYSYMBOL_lhsvarnode = 193,               /* lhsvarnode  */
+  YYSYMBOL_label = 194,                    /* label  */
+  YYSYMBOL_exportvarnode = 195,            /* exportvarnode  */
+  YYSYMBOL_familysymbol = 196,             /* familysymbol  */
+  YYSYMBOL_specificsymbol = 197,           /* specificsymbol  */
+  YYSYMBOL_charstring = 198,               /* charstring  */
+  YYSYMBOL_intblist = 199,                 /* intblist  */
+  YYSYMBOL_intbpart = 200,                 /* intbpart  */
+  YYSYMBOL_stringlist = 201,               /* stringlist  */
+  YYSYMBOL_stringpart = 202,               /* stringpart  */
+  YYSYMBOL_anystringlist = 203,            /* anystringlist  */
+  YYSYMBOL_anystringpart = 204,            /* anystringpart  */
+  YYSYMBOL_valuelist = 205,                /* valuelist  */
+  YYSYMBOL_valuepart = 206,                /* valuepart  */
+  YYSYMBOL_varlist = 207,                  /* varlist  */
+  YYSYMBOL_varpart = 208,                  /* varpart  */
+  YYSYMBOL_paramlist = 209,                /* paramlist  */
+  YYSYMBOL_oplist = 210,                   /* oplist  */
+  YYSYMBOL_anysymbol = 211                 /* anysymbol  */
 };
 typedef enum yysymbol_kind_t yysymbol_kind_t;
 
@@ -644,19 +645,19 @@ union yyalloc
 /* YYFINAL -- State number of the termination state.  */
 #define YYFINAL  5
 /* YYLAST -- Last index in YYTABLE.  */
-#define YYLAST   2585
+#define YYLAST   2673
 
 /* YYNTOKENS -- Number of terminals.  */
-#define YYNTOKENS  140
+#define YYNTOKENS  141
 /* YYNNTS -- Number of nonterminals.  */
 #define YYNNTS  71
 /* YYNRULES -- Number of rules.  */
-#define YYNRULES  345
+#define YYNRULES  346
 /* YYNSTATES -- Number of states.  */
-#define YYNSTATES  720
+#define YYNSTATES  724
 
 /* YYMAXUTOK -- Last valid token kind.  */
-#define YYMAXUTOK   371
+#define YYMAXUTOK   372
 
 
 /* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
@@ -673,16 +674,16 @@ static const yytype_uint8 yytranslate[] =
        0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,   139,    43,     2,     2,     2,    38,    11,     2,
-     132,   133,    36,    32,   134,    33,     2,    37,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,   138,     8,
-      17,   131,    18,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,   140,    43,     2,     2,     2,    38,    11,     2,
+     133,   134,    36,    32,   135,    33,     2,    37,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,   139,     8,
+      17,   132,    18,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,   135,     2,   136,     9,     2,     2,     2,     2,     2,
+       2,   136,     2,   137,     9,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,   137,     6,   130,    44,     2,     2,     2,
+       2,     2,     2,   138,     6,   131,    44,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
@@ -707,7 +708,7 @@ static const yytype_uint8 yytranslate[] =
       98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
      108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
-     128,   129
+     128,   129,   130
 };
 
 #if YYDEBUG
@@ -738,17 +739,17 @@ static const yytype_int16 yyrline[] =
      423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
      433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
      443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
-     453,   454,   455,   456,   458,   459,   460,   461,   463,   464,
-     465,   466,   467,   468,   469,   470,   471,   473,   474,   475,
-     476,   478,   479,   480,   481,   482,   484,   485,   486,   488,
-     489,   491,   492,   493,   494,   495,   496,   498,   499,   500,
-     501,   502,   504,   505,   506,   507,   508,   509,   511,   512,
-     514,   515,   516,   518,   519,   520,   522,   523,   524,   527,
-     528,   530,   531,   532,   534,   536,   537,   538,   539,   541,
-     542,   543,   545,   546,   547,   548,   549,   551,   552,   554,
-     555,   557,   558,   561,   562,   563,   565,   566,   567,   569,
+     453,   454,   455,   456,   457,   459,   460,   461,   462,   464,
+     465,   466,   467,   468,   469,   470,   471,   472,   474,   475,
+     476,   477,   479,   480,   481,   482,   483,   485,   486,   487,
+     489,   490,   492,   493,   494,   495,   496,   497,   499,   500,
+     501,   502,   503,   505,   506,   507,   508,   509,   510,   512,
+     513,   515,   516,   517,   519,   520,   521,   523,   524,   525,
+     528,   529,   531,   532,   533,   535,   537,   538,   539,   540,
+     542,   543,   544,   546,   547,   548,   549,   550,   552,   553,
+     555,   556,   558,   559,   562,   563,   564,   566,   567,   568,
      570,   571,   572,   573,   574,   575,   576,   577,   578,   579,
-     580,   581,   582,   583,   584,   585
+     580,   581,   582,   583,   584,   585,   586
 };
 #endif
 
@@ -775,30 +776,31 @@ static const char *const yytname[] =
   "OP_BORROW", "OP_SEXT", "OP_SCARRY", "OP_SBORROW", "OP_NAN", "OP_ABS",
   "OP_SQRT", "OP_CEIL", "OP_FLOOR", "OP_ROUND", "OP_INT2FLOAT",
   "OP_FLOAT2FLOAT", "OP_TRUNC", "OP_CPOOLREF", "OP_NEW", "OP_POPCOUNT",
-  "BADINTEGER", "GOTO_KEY", "CALL_KEY", "RETURN_KEY", "IF_KEY",
-  "DEFINE_KEY", "ATTACH_KEY", "MACRO_KEY", "SPACE_KEY", "TYPE_KEY",
-  "RAM_KEY", "DEFAULT_KEY", "REGISTER_KEY", "ENDIAN_KEY", "WITH_KEY",
-  "ALIGN_KEY", "OP_UNIMPL", "TOKEN_KEY", "SIGNED_KEY", "NOFLOW_KEY",
-  "HEX_KEY", "DEC_KEY", "OCT_KEY", "BIN_KEY", "BIG_KEY", "LITTLE_KEY",
-  "SIZE_KEY", "WORDSIZE_KEY", "OFFSET_KEY", "NAMES_KEY", "VALUES_KEY",
-  "VARIABLES_KEY", "PCODEOP_KEY", "IS_KEY", "LOCAL_KEY", "DELAYSLOT_KEY",
-  "CROSSBUILD_KEY", "EXPORT_KEY", "BUILD_KEY", "CONTEXT_KEY",
-  "ELLIPSIS_KEY", "GLOBALSET_KEY", "BITRANGE_KEY", "CHAR", "INTEGER",
-  "INTB", "STRING", "SYMBOLSTRING", "SPACESYM", "SECTIONSYM", "TOKENSYM",
-  "USEROPSYM", "VALUESYM", "VALUEMAPSYM", "CONTEXTSYM", "NAMESYM",
-  "VARSYM", "BITSYM", "SPECSYM", "VARLISTSYM", "OPERANDSYM", "STARTSYM",
-  "ENDSYM", "NEXT2SYM", "MACROSYM", "LABELSYM", "SUBTABLESYM", "'}'",
-  "'='", "'('", "')'", "','", "'['", "']'", "'{'", "':'", "' '", "$accept",
-  "spec", "definition", "constructorlike", "endiandef", "aligndef",
-  "tokendef", "tokenprop", "contextdef", "contextprop", "fielddef",
-  "contextfielddef", "spacedef", "spaceprop", "varnodedef", "bitrangedef",
-  "bitrangelist", "bitrangesingle", "pcodeopdef", "valueattach",
-  "nameattach", "varattach", "macrodef", "withblockstart", "withblockmid",
-  "withblock", "id_or_nil", "bitpat_or_nil", "macrostart", "rtlbody",
-  "constructor", "constructprint", "subtablestart", "pexpression",
-  "pequation", "elleq", "ellrt", "atomic", "constraint", "contextblock",
-  "contextlist", "section_def", "rtlfirstsection", "rtlcontinue", "rtl",
-  "rtlmid", "statement", "expr", "sizedstar", "jumpdest", "varnode",
+  "OP_COUNTLEADINGZEROS", "BADINTEGER", "GOTO_KEY", "CALL_KEY",
+  "RETURN_KEY", "IF_KEY", "DEFINE_KEY", "ATTACH_KEY", "MACRO_KEY",
+  "SPACE_KEY", "TYPE_KEY", "RAM_KEY", "DEFAULT_KEY", "REGISTER_KEY",
+  "ENDIAN_KEY", "WITH_KEY", "ALIGN_KEY", "OP_UNIMPL", "TOKEN_KEY",
+  "SIGNED_KEY", "NOFLOW_KEY", "HEX_KEY", "DEC_KEY", "OCT_KEY", "BIN_KEY",
+  "BIG_KEY", "LITTLE_KEY", "SIZE_KEY", "WORDSIZE_KEY", "OFFSET_KEY",
+  "NAMES_KEY", "VALUES_KEY", "VARIABLES_KEY", "PCODEOP_KEY", "IS_KEY",
+  "LOCAL_KEY", "DELAYSLOT_KEY", "CROSSBUILD_KEY", "EXPORT_KEY",
+  "BUILD_KEY", "CONTEXT_KEY", "ELLIPSIS_KEY", "GLOBALSET_KEY",
+  "BITRANGE_KEY", "CHAR", "INTEGER", "INTB", "STRING", "SYMBOLSTRING",
+  "SPACESYM", "SECTIONSYM", "TOKENSYM", "USEROPSYM", "VALUESYM",
+  "VALUEMAPSYM", "CONTEXTSYM", "NAMESYM", "VARSYM", "BITSYM", "SPECSYM",
+  "VARLISTSYM", "OPERANDSYM", "STARTSYM", "ENDSYM", "NEXT2SYM", "MACROSYM",
+  "LABELSYM", "SUBTABLESYM", "'}'", "'='", "'('", "')'", "','", "'['",
+  "']'", "'{'", "':'", "' '", "$accept", "spec", "definition",
+  "constructorlike", "endiandef", "aligndef", "tokendef", "tokenprop",
+  "contextdef", "contextprop", "fielddef", "contextfielddef", "spacedef",
+  "spaceprop", "varnodedef", "bitrangedef", "bitrangelist",
+  "bitrangesingle", "pcodeopdef", "valueattach", "nameattach", "varattach",
+  "macrodef", "withblockstart", "withblockmid", "withblock", "id_or_nil",
+  "bitpat_or_nil", "macrostart", "rtlbody", "constructor",
+  "constructprint", "subtablestart", "pexpression", "pequation", "elleq",
+  "ellrt", "atomic", "constraint", "contextblock", "contextlist",
+  "section_def", "rtlfirstsection", "rtlcontinue", "rtl", "rtlmid",
+  "statement", "expr", "sizedstar", "jumpdest", "varnode",
   "integervarnode", "lhsvarnode", "label", "exportvarnode", "familysymbol",
   "specificsymbol", "charstring", "intblist", "intbpart", "stringlist",
   "stringpart", "anystringlist", "anystringpart", "valuelist", "valuepart",
@@ -812,12 +814,12 @@ yysymbol_name (yysymbol_kind_t yysymbol)
 }
 #endif
 
-#define YYPACT_NINF (-312)
+#define YYPACT_NINF (-320)
 
 #define yypact_value_is_default(Yyn) \
   ((Yyn) == YYPACT_NINF)
 
-#define YYTABLE_NINF (-276)
+#define YYTABLE_NINF (-277)
 
 #define yytable_value_is_error(Yyn) \
   ((Yyn) == YYTABLE_NINF)
@@ -826,78 +828,79 @@ yysymbol_name (yysymbol_kind_t yysymbol)
    STATE-NUM.  */
 static const yytype_int16 yypact[] =
 {
-      39,   -52,     5,  -312,   -65,  -312,     3,   -33,   191,    40,
-     -73,    36,    41,  -312,  -312,  -312,  -312,  -312,   212,  -312,
-     444,  -312,   197,  -312,  -312,  -312,  -312,  -312,  -312,  -312,
-    -312,    43,  -312,    21,  -312,    -1,    44,    30,  -312,  -312,
-    2407,    66,  2426,   -84,   146,   161,   203,   147,   147,   147,
-     218,  -312,  -312,   206,  -312,  -312,  -312,   285,  -312,  -312,
-    -312,  -312,  -312,  -312,  -312,  -312,  -312,  -312,  -312,  -312,
-    -312,  -312,  -312,  -312,  -312,   461,   287,  -312,   303,  1489,
-     309,  -312,   311,  -312,   313,   318,   319,  -312,  -312,  -312,
-    -312,  -312,   188,  -312,  -312,  -312,  -312,   283,  -312,   188,
-    -312,  -312,  -312,   283,   402,   446,  -312,  -312,   349,   336,
-    -312,  -312,   348,   462,  -312,   343,    19,  -312,   346,  -312,
-    -312,    74,   353,    -4,   -43,   375,   188,   359,  -312,  -312,
-    -312,  -312,  -312,   360,   366,  -312,  -312,  -312,  -312,  -312,
-    -312,   371,   227,   411,   413,   418,  1696,  1599,  -312,  -312,
-    -312,  -312,  -312,  -312,   419,  -312,   188,    20,  -312,  -312,
-     448,  -312,   168,  -312,    20,  -312,  -312,   544,   458,  -312,
-    2301,  -312,   453,  -312,  -312,   -40,  -312,  -312,    60,  2445,
-     566,   468,  -312,    -3,   568,  -312,   -67,   569,  -312,    90,
-     451,   290,   480,   482,   484,   519,  -312,  -312,  -312,  -312,
-    -312,   279,   -63,   -81,  -312,    69,   408,     2,  1558,  1615,
-     495,   322,   400,   506,   493,   -42,   534,  -312,   536,  -312,
-    -312,  -312,  -312,  -312,   537,    35,  -312,  1558,    -2,  -312,
-     137,  -312,   183,  -312,  1656,    29,   188,   188,   188,  -312,
-     -47,  -312,  1656,  1656,  1656,  1656,  1656,  1656,   -47,  -312,
-     538,  -312,  -312,  -312,   567,  -312,   614,  -312,  -312,  -312,
-    -312,  -312,  2327,  -312,  -312,  -312,   597,  -312,  -312,    15,
-    -312,  -312,  -312,   -59,  -312,  -312,   596,   573,   577,   616,
-     617,   652,  -312,  -312,   606,  -312,  -312,   735,   769,   684,
-     690,  -312,   697,  -312,  -312,  -312,  -312,  -312,  1558,   827,
-    -312,  1558,   864,  -312,  1558,  1558,  1558,  1558,  1558,   701,
-     741,   776,   777,   782,   783,   818,   823,   824,   828,   863,
-     868,   903,   904,   906,   939,   944,   945,  -312,  1558,  1823,
-    1558,  -312,   157,    10,   744,   810,   862,   376,   941,  1108,
-    -312,   387,  1111,  -312,  1148,  1010,  1558,  1050,  1558,  1558,
-    1558,  1512,  1052,  1085,  1558,  1090,  1656,  1656,  -312,  1656,
-    1626,  -312,  -312,  -312,   308,  1187,  -312,   292,  -312,  -312,
-    -312,  1626,  1626,  1626,  1626,  1626,  1626,  -312,  1124,  1130,
-    1107,  -312,  -312,  -312,  -312,  1133,  -312,  -312,  -312,  -312,
-    -312,  -312,  -312,  -312,  1170,  1171,  1173,  1206,   322,  -312,
-    -312,  1182,  -312,  1208,   342,  -312,   579,  -312,   619,  -312,
-    -312,  -312,  -312,  1558,  1558,  1558,  1558,  1558,  1558,  1558,
-    1558,  1558,  1558,  1558,  1558,  1558,  1558,  1558,  1558,  1558,
-    1558,   825,  1558,  1558,  1558,  1558,  1558,  1558,  1558,  1558,
-    1558,  1558,  1558,  1558,  1558,  1558,  1558,  1558,  1558,  1558,
-    1558,  1558,  1558,  1558,  1558,  1558,  1558,  1558,  1558,  1558,
-    1558,  1558,  1558,  1558,  1558,  1558,  1558,  1558,  1579,  -312,
-       8,  1214,  1251,  -312,  1558,  1252,  -312,  1228,   231,  1291,
-    -312,  1292,  1393,  -312,  1426,  -312,  -312,  -312,  -312,  1875,
-    1308,  2195,   174,  1915,   258,  1558,  1307,  1348,  1955,  1346,
-    -312,  -312,    51,  1656,  1656,  1656,  1656,  1656,  1656,  1656,
-    1656,  1656,  1310,  -312,  1388,  1389,  -312,  -312,  -312,   -20,
-    1428,  1423,  1375,  -312,  1431,  1435,  1443,  1446,  -312,  1384,
-    1425,  1574,  1575,  1578,   865,   703,   907,   743,   785,   948,
-     988,  1028,  1069,  1109,  1149,  1190,  1230,  1270,   273,   659,
-    1311,   299,  -312,  2234,  2271,  2271,  2305,  2337,  2367,  2447,
-    2447,  2447,  2447,  2473,  2473,  2473,  2473,  2473,  2473,  2473,
-    2473,  2473,  2473,  2473,  2473,  2543,  2543,  2543,   499,   499,
-     499,   499,  -312,  -312,  -312,  -312,  -312,  -312,  -312,  1580,
-    1454,  1455,  -312,  1995,    25,  1582,  1584,  1587,   322,  -312,
-    -312,  -312,  1558,  1589,  1558,  -312,  1590,  2035,  -312,  -312,
-    -312,  1492,  -312,   443,   457,   390,  1530,  1530,   127,   127,
-    -312,  -312,  1751,  1656,  1656,  1628,   240,  -312,  -312,   325,
-    1493,   -84,  -312,  -312,  -312,  -312,  1515,  -312,  -312,  -312,
-    -312,  -312,  1558,  -312,  1558,  1558,  -312,  -312,  -312,  -312,
-    -312,  -312,  -312,  -312,  -312,  -312,  -312,  1558,  -312,  -312,
-    -312,  -312,  1516,  -312,  -312,  1558,  -312,  -312,  -312,  -312,
-    2075,  -312,  2195,  -312,  -312,  1490,  1494,  1496,  1548,  1617,
-    -312,  -312,  1601,  1602,  -312,  -312,  1498,  1627,  -312,  1351,
-    1391,  1432,  1472,  1501,  2115,  -312,  1509,  1524,  1527,  -312,
-    -312,  -312,  -312,  -312,  -312,  -312,  -312,  -312,  -312,  -312,
-    -312,  1558,  1518,  1519,  2155,  1640,  1652,  -312,  -312,  -312
+     -46,   -48,    56,  -320,   -78,  -320,    34,   394,   234,   -15,
+     -52,   -76,   -34,  -320,  -320,  -320,  -320,  -320,   428,  -320,
+    1613,  -320,   218,  -320,  -320,  -320,  -320,  -320,  -320,  -320,
+    -320,    59,  -320,   -23,  -320,    -4,    63,    74,  -320,  -320,
+    2482,     6,  2501,   -84,    33,    84,    41,   -65,   -65,   -65,
+      92,  -320,  -320,   139,  -320,  -320,  -320,   160,  -320,  -320,
+    -320,  -320,  -320,  -320,  -320,  -320,  -320,  -320,  -320,  -320,
+    -320,  -320,  -320,  -320,  -320,   343,   178,  -320,   188,  1574,
+     191,  -320,   193,  -320,   207,   243,  1517,  -320,  -320,  -320,
+    -320,  -320,  1640,  -320,  -320,  -320,  -320,   205,  -320,  1640,
+    -320,  -320,  -320,   205,   370,   375,  -320,  -320,   277,   257,
+    -320,  -320,   289,   396,  -320,   274,     1,  -320,   282,  -320,
+    -320,    88,   288,   -19,   -28,   325,  1640,   304,  -320,  -320,
+    -320,  -320,  -320,   306,   334,  -320,  -320,  -320,  -320,  -320,
+    -320,   335,   190,   361,   363,   352,  1770,  1828,  -320,  -320,
+    -320,  -320,  -320,  -320,   342,  -320,  1640,    19,  -320,  -320,
+     387,  -320,    68,  -320,    19,  -320,  -320,   485,   388,  -320,
+    2376,  -320,   374,  -320,  -320,   -47,  -320,  -320,   -14,  2520,
+     487,   395,  -320,    10,   494,  -320,   -30,   496,  -320,    42,
+     369,   305,   402,   404,   406,   411,  -320,  -320,  -320,  -320,
+    -320,   262,     2,   -20,  -320,   362,   399,    23,  1591,   332,
+     389,   157,   283,   403,   381,    60,   398,  -320,   397,  -320,
+    -320,  -320,  -320,  -320,   401,    43,  -320,  1591,  -117,  -320,
+      61,  -320,    69,  -320,  1555,     7,  1640,  1640,  1640,  -320,
+     -59,  -320,  1555,  1555,  1555,  1555,  1555,  1555,   -59,  -320,
+     416,  -320,  -320,  -320,   392,  -320,   442,  -320,  -320,  -320,
+    -320,  -320,  2402,  -320,  -320,  -320,   429,  -320,  -320,   -27,
+    -320,  -320,  -320,   -75,  -320,  -320,   426,   419,   424,   425,
+     427,   436,  -320,  -320,   453,  -320,  -320,   554,   556,   464,
+     503,  -320,   476,  -320,  -320,  -320,  -320,  -320,  1591,   606,
+    -320,  1591,   608,  -320,  1591,  1591,  1591,  1591,  1591,   518,
+     519,   521,   523,   555,   557,   558,   563,   566,   603,   639,
+     640,   648,   650,   681,   686,   687,   726,   727,  -320,  1591,
+    1898,  1591,  -320,    28,     3,   565,   579,   602,   391,   550,
+     731,  -320,  1485,   814,  -320,   854,   787,  1591,   788,  1591,
+    1591,  1591,  1544,   793,   794,  1591,   796,  1555,  1555,  -320,
+    1555,  1781,  -320,  -320,  -320,   180,   930,  -320,  1482,  -320,
+    -320,  -320,  1781,  1781,  1781,  1781,  1781,  1781,  -320,   865,
+     836,   849,  -320,  -320,  -320,  -320,   874,  -320,  -320,  -320,
+    -320,  -320,  -320,  -320,  -320,   876,   909,   910,   915,   157,
+    -320,  -320,   887,  -320,   914,   327,  -320,   564,  -320,   604,
+    -320,  -320,  -320,  -320,  1591,  1591,  1591,  1591,  1591,  1591,
+    1591,  1591,  1591,  1591,  1591,  1591,  1591,  1591,  1591,  1591,
+    1591,  1591,  1591,   812,  1591,  1591,  1591,  1591,  1591,  1591,
+    1591,  1591,  1591,  1591,  1591,  1591,  1591,  1591,  1591,  1591,
+    1591,  1591,  1591,  1591,  1591,  1591,  1591,  1591,  1591,  1591,
+    1591,  1591,  1591,  1591,  1591,  1591,  1591,  1591,  1591,  1591,
+     307,  -320,    13,   955,   956,  -320,  1591,   958,  -320,   969,
+     161,   996,  -320,   998,  1131,  -320,  1132,  -320,  -320,  -320,
+    -320,  1951,  1013,  2271,   151,  1991,   154,  1591,  1012,  1053,
+    2031,  1051,  -320,  -320,    37,  1555,  1555,  1555,  1555,  1555,
+    1555,  1555,  1555,  1555,  1015,  -320,  1093,  1094,  -320,  -320,
+    -320,   -17,  1129,  1127,  1080,  -320,  1133,  1134,  1136,  1173,
+    -320,  1089,  1171,  1302,  1339,  1342,   852,   689,   894,   729,
+     771,   934,   974,  1016,  1056,  1096,  1138,  1178,  1218,  1260,
+     200,   644,  1300,  1340,   260,  -320,  2310,  2347,  2347,  2381,
+    2413,  2443,  2523,  2523,  2523,  2523,  2549,  2549,  2549,  2549,
+    2549,  2549,  2549,  2549,  2549,  2549,  2549,  2549,  2631,  2631,
+    2631,   440,   440,   440,   440,  -320,  -320,  -320,  -320,  -320,
+    -320,  -320,  1375,  1214,  1249,  -320,  2071,     0,  1381,  1384,
+    1421,   157,  -320,  -320,  -320,  1591,  1424,  1591,  -320,  1461,
+    2111,  -320,  -320,  -320,  1282,  -320,  1657,   285,   344,   386,
+     386,   360,   360,  -320,  -320,  2535,  1555,  1555,  1731,   162,
+    -320,  -320,   323,  1322,   -84,  -320,  -320,  -320,  -320,  1362,
+    -320,  -320,  -320,  -320,  -320,  1591,  -320,  1591,  1591,  -320,
+    -320,  -320,  -320,  -320,  -320,  -320,  -320,  -320,  -320,  -320,
+    1591,  -320,  -320,  -320,  -320,  -320,  1364,  -320,  -320,  1591,
+    -320,  -320,  -320,  -320,  2151,  -320,  2271,  -320,  -320,  1368,
+    1371,  1376,  1739,  1772,  -320,  -320,  1484,  1521,  -320,  -320,
+    1415,  1546,  -320,  1382,  1422,  1462,  1504,  1453,  2191,  -320,
+    1380,  1473,  1475,  -320,  -320,  -320,  -320,  -320,  -320,  -320,
+    -320,  -320,  -320,  -320,  -320,  1591,  1460,  1463,  2231,  1593,
+    1595,  -320,  -320,  -320
 };
 
 /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
@@ -910,86 +913,87 @@ static const yytype_int16 yydefact[] =
        0,     8,     0,     9,    10,    11,    12,    13,    14,    17,
       67,     0,    18,     0,    16,     0,     0,     0,    15,    19,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,    73,    72,     0,    92,    91,    23,     0,   329,   330,
-     331,   332,   335,   336,   337,   338,   339,   345,   340,   341,
-     342,   343,   344,   333,   334,    27,     0,    29,     0,    31,
+       0,    73,    72,     0,    92,    91,    23,     0,   330,   331,
+     332,   333,   336,   337,   338,   339,   340,   346,   341,   342,
+     343,   344,   345,   334,   335,    27,     0,    29,     0,    31,
        0,    47,     0,    54,     0,     0,     0,    70,    68,    69,
-     149,    86,     0,   288,    87,    90,    89,    88,    85,     0,
+     149,    86,     0,   289,    87,    90,    89,    88,    85,     0,
       82,    84,    94,    83,     0,     0,    48,    49,     0,     0,
-      28,   300,     0,     0,    30,     0,     0,    58,     0,   310,
-     311,     0,     0,     0,     0,   326,    74,     0,    34,    35,
+      28,   301,     0,     0,    30,     0,     0,    58,     0,   311,
+     312,     0,     0,     0,     0,   327,    74,     0,    34,    35,
       36,    37,    38,     0,     0,    41,    42,    43,    44,    45,
-      46,     0,     0,     0,     0,     0,   144,     0,   277,   278,
-     279,   280,   128,   281,   127,   130,     0,   131,   110,   115,
-     117,   118,   129,   289,   131,    20,    21,     0,     0,   301,
-       0,    61,     0,    57,    59,     0,   312,   313,     0,     0,
-       0,     0,   291,     0,     0,   318,     0,     0,   327,     0,
+      46,     0,     0,     0,     0,     0,   144,     0,   278,   279,
+     280,   281,   128,   282,   127,   130,     0,   131,   110,   115,
+     117,   118,   129,   290,   131,    20,    21,     0,     0,   302,
+       0,    61,     0,    57,    59,     0,   313,   314,     0,     0,
+       0,     0,   292,     0,     0,   319,     0,     0,   328,     0,
      131,    75,     0,     0,     0,     0,    50,    51,    52,    53,
-      65,     0,     0,   247,   262,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   261,   259,     0,   282,     0,   283,
-     284,   285,   286,   287,     0,   260,   150,     0,     0,   258,
-       0,   177,   257,   114,     0,     0,     0,     0,     0,   133,
+      65,     0,     0,   248,   263,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   262,   260,     0,   283,     0,   284,
+     285,   286,   287,   288,     0,   261,   150,     0,     0,   259,
+       0,   177,   258,   114,     0,     0,     0,     0,     0,   133,
        0,   116,     0,     0,     0,     0,     0,     0,     0,    22,
-       0,   302,   299,   303,     0,    56,     0,   316,   314,   315,
-     309,   305,     0,   306,    63,   292,     0,   293,   295,     0,
-      62,   320,   319,     0,    64,    76,     0,     0,     0,     0,
-       0,     0,   259,   260,     0,   264,   257,     0,     0,     0,
-       0,   252,   251,   256,   253,   248,   249,   250,     0,     0,
-     255,     0,     0,   174,     0,     0,     0,     0,     0,     0,
+       0,   303,   300,   304,     0,    56,     0,   317,   315,   316,
+     310,   306,     0,   307,    63,   293,     0,   294,   296,     0,
+      62,   321,   320,     0,    64,    76,     0,     0,     0,     0,
+       0,     0,   260,   261,     0,   265,   258,     0,     0,     0,
+       0,   253,   252,   257,   254,   249,   250,   251,     0,     0,
+     256,     0,     0,   174,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   241,     0,     0,
-       0,   178,   257,     0,     0,     0,     0,     0,     0,   147,
-     276,     0,     0,   271,     0,     0,     0,     0,   323,     0,
-     323,     0,     0,     0,     0,     0,     0,     0,    95,     0,
-     126,    96,    97,   119,   112,   113,   111,     0,    79,   149,
-      80,   121,   122,   124,   125,   123,   120,    81,    24,     0,
-       0,   307,   304,   308,   294,     0,   296,   298,   290,   322,
-     321,   317,   328,    66,     0,     0,     0,     0,     0,   270,
-     269,     0,   246,     0,     0,   169,     0,   172,     0,   193,
-     220,   206,   194,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   323,     0,     0,
-     323,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   242,     0,
+       0,     0,   178,   258,     0,     0,     0,     0,     0,     0,
+     147,   277,     0,     0,   272,     0,     0,     0,     0,   324,
+       0,   324,     0,     0,     0,     0,     0,     0,     0,    95,
+       0,   126,    96,    97,   119,   112,   113,   111,     0,    79,
+     149,    80,   121,   122,   124,   125,   123,   120,    81,    24,
+       0,     0,   308,   305,   309,   295,     0,   297,   299,   291,
+     323,   322,   318,   329,    66,     0,     0,     0,     0,     0,
+     271,   270,     0,   247,     0,     0,   169,     0,   172,     0,
+     193,   220,   206,   194,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   324,     0,
+       0,     0,   324,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   179,
-       0,     0,     0,   151,     0,     0,   158,     0,     0,     0,
-     272,     0,   148,   268,     0,   266,   145,   165,   263,     0,
-       0,   324,     0,     0,     0,     0,     0,     0,     0,     0,
-     108,   109,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   138,     0,     0,   132,   142,   149,     0,
-       0,     0,     0,   297,     0,     0,     0,     0,   265,   245,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   179,     0,     0,     0,   151,     0,     0,   158,     0,
+       0,     0,   273,     0,   148,   269,     0,   267,   145,   165,
+     264,     0,     0,   325,     0,     0,     0,     0,     0,     0,
+       0,     0,   108,   109,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   138,     0,     0,   132,   142,
+     149,     0,     0,     0,     0,   298,     0,     0,     0,     0,
+     266,   246,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   180,   209,   208,   207,   197,   195,   196,   183,
-     184,   210,   211,   185,   188,   186,   187,   189,   190,   191,
-     192,   212,   213,   214,   215,   198,   199,   200,   181,   182,
-     216,   217,   201,   202,   204,   203,   205,   218,   219,     0,
-       0,     0,   239,     0,     0,     0,     0,     0,     0,   274,
-     146,   155,     0,     0,     0,   162,     0,     0,   164,   163,
-     153,     0,    98,   105,   106,   104,   102,   103,    99,   100,
-     101,   107,     0,     0,     0,     0,     0,    77,   141,     0,
-       0,     0,    32,    33,    39,    40,     0,   254,   171,   173,
-     175,   224,     0,   223,     0,     0,   230,   221,   222,   232,
-     233,   234,   229,   228,   231,   243,   235,     0,   237,   242,
-     170,   238,     0,   154,   152,     0,   168,   167,   166,   273,
-       0,   160,   325,   176,   159,     0,     0,     0,     0,     0,
-      78,   143,     0,     0,    26,    25,     0,     0,   244,     0,
-       0,     0,     0,     0,     0,   157,     0,     0,     0,   134,
-     137,   139,   140,    60,    55,   225,   226,   227,   236,   240,
-     156,     0,     0,     0,     0,     0,     0,   161,   135,   136
+       0,     0,     0,     0,     0,   180,   209,   208,   207,   197,
+     195,   196,   183,   184,   210,   211,   185,   188,   186,   187,
+     189,   190,   191,   192,   212,   213,   214,   215,   198,   199,
+     200,   181,   182,   216,   217,   201,   202,   204,   203,   205,
+     218,   219,     0,     0,     0,   240,     0,     0,     0,     0,
+       0,     0,   275,   146,   155,     0,     0,     0,   162,     0,
+       0,   164,   163,   153,     0,    98,   105,   106,   104,   102,
+     103,    99,   100,   101,   107,     0,     0,     0,     0,     0,
+      77,   141,     0,     0,     0,    32,    33,    39,    40,     0,
+     255,   171,   173,   175,   224,     0,   223,     0,     0,   230,
+     221,   222,   232,   233,   234,   229,   228,   231,   244,   235,
+       0,   237,   238,   243,   170,   239,     0,   154,   152,     0,
+     168,   167,   166,   274,     0,   160,   326,   176,   159,     0,
+       0,     0,     0,     0,    78,   143,     0,     0,    26,    25,
+       0,     0,   245,     0,     0,     0,     0,     0,     0,   157,
+       0,     0,     0,   134,   137,   139,   140,    60,    55,   225,
+     226,   227,   236,   241,   156,     0,     0,     0,     0,     0,
+       0,   161,   135,   136
 };
 
 /* YYPGOTO[NTERM-NUM].  */
 static const yytype_int16 yypgoto[] =
 {
-    -312,  -312,  1630,  1635,  -312,  -312,  -312,  -312,  -312,  -312,
-    -312,  -312,  -312,  -312,  -312,  -312,  -312,  1552,  -312,  -312,
-    -312,  -312,  -312,  -312,  -312,  -312,  -312,  -312,  -312,  1421,
-    -312,  -312,  -312,  -230,   -77,  -312,  1523,  -312,  -312,  -105,
-    -312,  1046,  -312,  -312,  1304,  1156,  -312,  -207,  -144,  -202,
-     -76,  1205,  1335,  -143,  -312,   -92,   -44,  1644,  -312,  -312,
-    1054,  -312,  -312,  -312,   479,  -312,  -312,  -312,  -311,  -312,
-       1
+    -320,  -320,  1573,  1577,  -320,  -320,  -320,  -320,  -320,  -320,
+    -320,  -320,  -320,  -320,  -320,  -320,  -320,  1498,  -320,  -320,
+    -320,  -320,  -320,  -320,  -320,  -320,  -320,  -320,  -320,  1369,
+    -320,  -320,  -320,  -206,   -80,  -320,  1469,  -320,  -320,  -131,
+    -320,   990,  -320,  -320,  1252,  1105,  -320,  -207,  -144,  -202,
+    -136,  1156,  1288,  -143,  -320,   -92,   -62,  1596,  -320,  -320,
+     997,  -320,  -320,  -320,   412,  -320,  -320,  -320,  -319,  -320,
+       8
 };
 
 /* YYDEFGOTO[NTERM-NUM].  */
@@ -997,11 +1001,11 @@ static const yytype_int16 yydefgoto[] =
 {
        0,     2,    14,    15,     3,    16,    17,    18,    19,    20,
       75,    79,    21,    22,    23,    24,   116,   117,    25,    26,
-      27,    28,    29,    30,    31,    32,    53,   190,    33,   370,
-      34,    35,    36,   360,   157,   158,   159,   160,   161,   240,
-     367,   628,   517,   518,   145,   146,   226,   491,   330,   299,
-     331,   229,   230,   300,   342,   361,   332,    97,   184,   269,
-     113,   170,   180,   262,   122,   178,   187,   273,   492,   189,
+      27,    28,    29,    30,    31,    32,    53,   190,    33,   371,
+      34,    35,    36,   361,   157,   158,   159,   160,   161,   240,
+     368,   631,   519,   520,   145,   146,   226,   493,   331,   299,
+     332,   229,   230,   300,   343,   362,   333,    97,   184,   269,
+     113,   170,   180,   262,   122,   178,   187,   273,   494,   189,
       76
 };
 
@@ -1010,646 +1014,665 @@ static const yytype_int16 yydefgoto[] =
    number is the opposite.  If YYTABLE_NINF, syntax error.  */
 static const yytype_int16 yytable[] =
 {
-     162,   329,   227,   231,   302,     5,     6,   162,    91,   626,
-     303,    38,   371,   372,   373,   374,   375,   376,   473,   201,
-     351,    80,   164,   255,     4,   111,   236,   173,   237,   181,
-     266,   238,   368,   664,   162,   236,    51,   237,    40,   494,
-     238,   107,   271,   110,     6,    41,   287,    42,   385,   191,
-     389,   112,   272,    98,   289,   162,    52,   290,   503,   248,
-     390,   504,    43,   505,   162,   288,    37,   256,   341,    44,
-     228,   204,    45,     7,     8,     9,   185,   391,    46,   235,
-     506,   507,    10,   508,   509,   277,   202,   510,   511,   346,
-     369,   404,   186,  -267,   406,    92,   347,   408,   409,   410,
-     411,   412,   232,   182,   267,    93,   268,     1,    94,    95,
-     627,    86,     8,     9,    11,   214,   548,   104,   105,   551,
-      10,   431,   386,   469,   387,   285,   500,   501,   115,   502,
-     352,   183,   291,    39,    12,   336,   353,   304,    96,   489,
-      99,   474,   493,    13,   162,   162,   162,   498,   475,    50,
-      93,   388,    11,   100,   101,   239,   665,   286,    90,   364,
-     365,   366,   363,   510,   511,   334,  -268,   286,   343,   257,
-    -268,   253,    12,    87,    54,   258,   292,   259,   293,    55,
-     263,    13,   242,   102,   612,   243,   244,   245,   246,   176,
-     362,   177,   294,   295,   296,   297,   260,   108,   362,   362,
-     362,   362,   362,   362,   298,    81,   534,   535,   536,   537,
-     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,
-      56,   549,   550,   275,   276,   553,   554,   555,   556,   557,
-     558,   559,   560,   561,   562,   563,   564,   565,   566,   567,
-     568,   569,   570,   571,   572,   573,   574,   575,   576,   577,
-     578,   579,   580,   581,   582,   583,   584,   585,   586,   587,
-     588,   480,   119,   383,   120,   114,   589,   593,   354,    82,
-     115,    83,   355,   613,   614,   615,   616,   617,   618,   619,
-     620,   621,   121,    47,    48,    49,    84,    85,   607,   470,
-     201,   147,   471,   286,   118,   472,   236,   485,   237,   247,
-     196,   238,   197,   148,   149,   150,   151,   603,   604,   152,
-     153,   154,   362,   362,  -266,   362,   237,   155,  -266,   238,
-     156,    57,   528,    58,    59,    60,    61,    62,    63,    64,
-      65,    66,    67,   201,    68,    69,    70,    71,    72,    73,
-     596,    74,   204,   597,   126,   432,   433,   434,   435,   682,
-     125,   436,   683,   437,   286,   438,   439,   440,   441,   442,
-     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
-     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
-     463,   464,   465,   466,   467,   204,   214,   201,   282,   163,
-      40,   606,   604,   678,   679,   670,   512,   672,   217,    42,
-     219,   513,   220,   221,   222,   223,   655,   604,   283,   514,
-     165,   337,   684,   685,    43,   515,   127,   284,   133,   506,
-     507,    44,   508,   509,    45,   202,   510,   511,   516,   214,
-      46,   282,   659,   604,   134,   689,   203,   690,   691,   204,
-     141,   217,   142,   219,   143,   220,   221,   222,   223,   144,
-     692,   283,    77,   504,   166,   505,   167,   169,   694,   362,
-     362,   362,   362,   362,   362,   362,   362,   362,   168,   505,
-     171,   291,   506,   507,   172,   508,   509,   175,   531,   510,
-     511,   227,   231,   214,   188,   282,   506,   507,   179,   508,
-     509,   192,   193,   510,   511,   217,   482,   219,   194,   220,
-     221,   222,   223,   195,   714,   283,   217,   338,   219,   339,
-     220,   221,   222,   223,   479,   292,   483,   293,   198,   217,
-     199,   219,   669,   220,   221,   222,   223,   123,   124,   340,
-     676,   294,   295,   296,   297,   461,   462,   463,   464,   465,
-     466,   467,   128,   301,   129,   130,   131,   132,   200,   228,
-     234,   241,   249,    78,   286,    58,    59,    60,    61,    62,
-      63,    64,    65,    66,    67,   250,    68,    69,    70,    71,
-      72,    73,   254,    74,   264,   265,   270,   274,   677,   362,
-     362,   232,   432,   433,   434,   435,   239,   278,   436,   279,
-     437,   280,   438,   439,   440,   441,   442,   443,   444,   445,
-     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
-     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
-     466,   467,   432,   433,   434,   435,   281,   335,   436,   344,
-     437,   345,   438,   439,   440,   441,   442,   443,   444,   445,
-     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
-     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
-     466,   467,   432,   433,   434,   435,   348,   349,   436,   350,
-     437,   378,   438,   439,   440,   441,   442,   443,   444,   445,
-     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
-     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
-     466,   467,   379,   380,   384,   392,   432,   433,   434,   435,
-     393,   394,   436,   398,   437,   532,   438,   439,   440,   441,
-     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
-     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
-     462,   463,   464,   465,   466,   467,   432,   433,   434,   435,
-     395,   396,   436,   399,   437,   533,   438,   439,   440,   441,
-     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
-     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
-     462,   463,   464,   465,   466,   467,   397,   400,   432,   433,
-     434,   435,   656,   657,   436,   401,   437,   402,   438,   439,
-     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
-     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
-     460,   461,   462,   463,   464,   465,   466,   467,   432,   433,
-     434,   435,   403,   413,   436,   405,   437,   642,   438,   439,
+     162,   330,   227,   231,   302,    91,   386,   162,   668,   173,
+     228,   475,   629,   236,   181,   237,   353,   255,   238,   164,
+     352,   369,   354,     1,   201,   236,   111,   237,    80,     4,
+     238,   303,   496,   248,   162,   390,   372,   373,   374,   375,
+     376,   377,    38,   266,   505,   391,   191,   506,   107,   507,
+     110,   119,   112,   120,    37,   162,     5,     6,    51,   277,
+       6,   256,   392,    54,   162,   285,   508,   509,   342,   510,
+     511,   121,    98,   512,   513,   337,   235,   204,    52,   370,
+     271,   387,   242,   388,   232,   243,   244,   245,   246,   182,
+     272,   405,   185,    92,   407,    50,   257,   409,   410,   411,
+     412,   413,   258,    93,   259,    55,    94,    95,   186,   550,
+     389,   115,   287,   554,   630,    90,   289,   183,   267,   290,
+     268,   214,   433,   260,   471,     7,     8,     9,    86,     8,
+       9,   288,   669,   118,    10,   476,    96,    10,   108,   286,
+     491,   364,   477,   495,   162,   162,   162,   335,   500,   286,
+     344,   502,   503,   114,   504,   239,   365,   366,   367,   304,
+      99,   472,   104,   105,   473,    39,    11,   474,   201,    11,
+      93,   615,   363,   100,   101,  -269,   275,   276,   253,  -269,
+     363,   363,   363,   363,   363,   363,    12,   263,   237,    12,
+      87,   238,   347,   355,   115,    13,  -268,   356,    13,   348,
+     247,  -267,   482,   102,   176,  -267,   177,   536,   537,   538,
+     539,   540,   541,   542,   543,   544,   545,   546,   547,   548,
+     549,   204,   551,   552,   553,   125,    81,   556,   557,   558,
+     559,   560,   561,   562,   563,   564,   565,   566,   567,   568,
+     569,   570,   571,   572,   573,   574,   575,   576,   577,   578,
+     579,   580,   581,   582,   583,   584,   585,   586,   587,   588,
+     589,   590,   591,   530,   196,   214,   197,   282,   592,   596,
+     384,   599,   686,   201,   600,   687,   286,   217,   126,   219,
+     487,   220,   221,   222,   223,   606,   607,   283,   609,   607,
+     610,    82,   127,    83,   338,   363,   363,   507,   363,   616,
+     617,   618,   619,   620,   621,   622,   623,   624,    84,    85,
+     133,   236,   163,   237,   508,   509,   238,   510,   511,   203,
+     134,   512,   513,   141,   202,   142,   204,    47,    48,    49,
+     434,   435,   436,   437,   658,   607,   438,   286,   439,   143,
      440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
-     460,   461,   462,   463,   464,   465,   466,   467,   432,   433,
-     434,   435,   407,   414,   436,   476,   437,   644,   438,   439,
-     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
-     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
-     460,   461,   462,   463,   464,   465,   466,   467,   415,   416,
-     432,   433,   434,   435,   417,   418,   436,   477,   437,   645,
-     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
+     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
+     214,   291,   282,   508,   509,   144,   510,   511,   165,   202,
+     512,   513,   217,   166,   219,   167,   220,   221,   222,   223,
+     168,   339,   283,   340,   663,   607,   512,   513,   674,   169,
+     676,   284,   201,   217,   171,   219,   172,   220,   221,   222,
+     223,   688,   689,   341,   175,   292,   202,   293,   510,   511,
+     682,   683,   512,   513,   179,   128,   291,   129,   130,   131,
+     132,   294,   295,   296,   297,   188,    56,   192,   693,   193,
+     694,   695,   334,   363,   363,   363,   363,   363,   363,   363,
+     363,   363,   217,   696,   219,   204,   220,   221,   222,   223,
+     123,   124,   698,   291,   533,   673,    40,   194,   195,   198,
+     292,   199,   293,    41,   234,    42,   463,   464,   465,   466,
+     467,   468,   469,   200,   227,   231,   294,   295,   296,   297,
+      43,   241,   228,   249,   254,   264,   250,    44,   298,   214,
+      45,   282,   270,   265,   274,   239,    46,   292,   718,   293,
+     278,   217,   279,   219,   280,   220,   221,   222,   223,   281,
+     346,   283,   336,   294,   295,   296,   297,   345,   380,   350,
+     481,   349,   381,   680,   351,   301,   393,   385,    57,   286,
+      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
+     379,    68,    69,    70,    71,    72,    73,   394,    74,   395,
+     396,   399,   397,   681,   363,   363,   232,   434,   435,   436,
+     437,   398,   400,   438,   401,   439,   402,   440,   441,   442,
+     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
+     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
+     463,   464,   465,   466,   467,   468,   469,   434,   435,   436,
+     437,   403,   404,   438,   406,   439,   408,   440,   441,   442,
+     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
+     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
+     463,   464,   465,   466,   467,   468,   469,   434,   435,   436,
+     437,   414,   415,   438,   416,   439,   417,   440,   441,   442,
+     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
+     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
+     463,   464,   465,   466,   467,   468,   469,   479,   418,   483,
+     419,   420,   434,   435,   436,   437,   421,   478,   438,   422,
+     439,   534,   440,   441,   442,   443,   444,   445,   446,   447,
+     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
+     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
+     468,   469,   434,   435,   436,   437,   423,   480,   438,  -276,
+     439,   535,   440,   441,   442,   443,   444,   445,   446,   447,
      448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
-     419,   432,   433,   434,   435,   420,   421,   436,   552,   437,
-     422,   438,   439,   440,   441,   442,   443,   444,   445,   446,
+     468,   469,   424,   425,   434,   435,   436,   437,   659,   660,
+     438,   426,   439,   427,   440,   441,   442,   443,   444,   445,
+     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
+     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
+     466,   467,   468,   469,   428,   434,   435,   436,   437,   429,
+     430,   438,   488,   439,   645,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
+     465,   466,   467,   468,   469,   434,   435,   436,   437,   431,
+     432,   438,   489,   439,   647,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
+     465,   466,   467,   468,   469,   490,   492,   434,   435,   436,
+     437,   498,   499,   438,   501,   439,   648,   440,   441,   442,
+     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
+     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
+     463,   464,   465,   466,   467,   468,   469,   434,   435,   436,
+     437,   238,   522,   438,   523,   439,   555,   440,   441,   442,
+     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
+     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
+     463,   464,   465,   466,   467,   468,   469,   434,   435,   436,
+     437,   524,   525,   438,   526,   439,   644,   440,   441,   442,
+     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
+     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
+     463,   464,   465,   466,   467,   468,   469,   527,   528,   434,
+     435,   436,   437,   529,   531,   438,   532,   439,   646,   440,
+     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
+     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
+     461,   462,   463,   464,   465,   466,   467,   468,   469,   434,
+     435,   436,   437,   594,   595,   438,   597,   439,   649,   440,
+     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
+     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
+     461,   462,   463,   464,   465,   466,   467,   468,   469,   434,
+     435,   436,   437,   598,   601,   438,   602,   439,   650,   440,
+     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
+     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
+     461,   462,   463,   464,   465,   466,   467,   468,   469,  -268,
+     603,   434,   435,   436,   437,   605,   611,   438,   625,   439,
+     651,   440,   441,   442,   443,   444,   445,   446,   447,   448,
+     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
+     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
+     469,   434,   435,   436,   437,   612,   614,   438,   634,   439,
+     652,   440,   441,   442,   443,   444,   445,   446,   447,   448,
+     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
+     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
+     469,   434,   435,   436,   437,   626,   627,   438,   639,   439,
+     653,   440,   441,   442,   443,   444,   445,   446,   447,   448,
+     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
+     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
+     469,   632,   633,   434,   435,   436,   437,   635,   636,   438,
+     637,   439,   654,   440,   441,   442,   443,   444,   445,   446,
      447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
-     467,   432,   433,   434,   435,   423,   478,   436,   641,   437,
-     424,   438,   439,   440,   441,   442,   443,   444,   445,   446,
+     467,   468,   469,   434,   435,   436,   437,   638,   640,   438,
+     641,   439,   655,   440,   441,   442,   443,   444,   445,   446,
      447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
-     467,   432,   433,   434,   435,   425,   426,   436,   427,   437,
-     643,   438,   439,   440,   441,   442,   443,   444,   445,   446,
+     467,   468,   469,   434,   435,   436,   437,   642,   665,   438,
+     643,   439,   656,   440,   441,   442,   443,   444,   445,   446,
      447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
-     467,   428,   432,   433,   434,   435,   429,   430,   436,   481,
-     437,   646,   438,   439,   440,   441,   442,   443,   444,   445,
-     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
-     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
-     466,   467,   432,   433,   434,   435,  -275,   488,   436,   486,
-     437,   647,   438,   439,   440,   441,   442,   443,   444,   445,
-     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
-     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
-     466,   467,   432,   433,   434,   435,   487,   490,   436,   496,
-     437,   648,   438,   439,   440,   441,   442,   443,   444,   445,
-     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
-     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
-     466,   467,   497,   432,   433,   434,   435,   499,   238,   436,
-     520,   437,   649,   438,   439,   440,   441,   442,   443,   444,
+     467,   468,   469,   664,   666,   434,   435,   436,   437,   670,
+     679,   438,   671,   439,   657,   440,   441,   442,   443,   444,
      445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
-     465,   466,   467,   432,   433,   434,   435,   521,   522,   436,
-     523,   437,   650,   438,   439,   440,   441,   442,   443,   444,
+     465,   466,   467,   468,   469,   434,   435,   436,   437,   672,
+     690,   438,   675,   439,   661,   440,   441,   442,   443,   444,
      445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
-     465,   466,   467,   432,   433,   434,   435,   524,   525,   436,
-     526,   437,   651,   438,   439,   440,   441,   442,   443,   444,
+     465,   466,   467,   468,   469,   434,   435,   436,   437,   677,
+     692,   438,   697,   439,   662,   440,   441,   442,   443,   444,
      445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
-     465,   466,   467,   527,   432,   433,   434,   435,   529,   530,
-     436,   591,   437,   652,   438,   439,   440,   441,   442,   443,
-     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
-     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
-     464,   465,   466,   467,   432,   433,   434,   435,   592,   594,
-     436,   595,   437,   653,   438,   439,   440,   441,   442,   443,
-     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
-     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
-     464,   465,   466,   467,   432,   433,   434,   435,   598,   599,
-     436,  -267,   437,   654,   438,   439,   440,   441,   442,   443,
-     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
-     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
-     464,   465,   466,   467,   600,   432,   433,   434,   435,   602,
-     608,   436,   622,   437,   658,   438,   439,   440,   441,   442,
-     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
-     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
-     463,   464,   465,   466,   467,   432,   433,   434,   435,   609,
-     611,   436,   631,   437,   705,   438,   439,   440,   441,   442,
+     465,   466,   467,   468,   469,   700,   701,   434,   435,   436,
+     437,   702,   715,   438,   705,   439,   709,   440,   441,   442,
      443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
-     463,   464,   465,   466,   467,   432,   433,   434,   435,   623,
-     624,   436,   636,   437,   706,   438,   439,   440,   441,   442,
+     463,   464,   465,   466,   467,   468,   469,   434,   435,   436,
+     437,   706,   707,   438,   708,   439,   710,   440,   441,   442,
      443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
-     463,   464,   465,   466,   467,   503,   699,   630,   504,   629,
-     505,   637,   508,   509,   632,   707,   510,   511,   633,   201,
-     135,   136,   137,   138,   139,   140,   634,   506,   507,   635,
-     508,   509,   638,   639,   510,   511,   640,   661,   660,   662,
-     666,   305,   667,   306,   203,   668,   202,   671,   673,   675,
-     686,   307,   308,   309,   310,   708,   311,   312,   313,   314,
-     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
-     325,   204,   688,   693,   503,   700,   696,   504,   697,   505,
-     698,   701,   702,   503,   703,   704,   504,   709,   505,   201,
-     711,   712,   291,   495,   713,   202,   506,   507,   718,   508,
-     509,   715,   716,   510,   511,   506,   507,   626,   508,   509,
-     719,    88,   510,   511,   203,   214,    89,   282,   174,   377,
-     233,   681,   326,   519,   625,   590,   484,   217,   327,   219,
-     103,   220,   221,   222,   223,   687,   292,   283,   293,   356,
-     328,   204,   205,   206,   207,   208,     0,     0,     0,     0,
-     357,     0,   294,   295,   296,   297,     0,   201,     0,     0,
-       0,     0,     0,   202,   148,   149,   150,   151,     0,     0,
-     152,   153,   154,     0,   333,   209,   210,   211,   155,   213,
-       0,   156,   203,     0,   217,   214,   219,   215,   220,   221,
-     222,   223,   216,     0,     0,     0,     0,   217,   218,   219,
-       0,   220,   221,   222,   223,   224,     0,   225,   680,   204,
-     205,   206,   207,   208,   358,     0,     0,     0,     0,     0,
-       0,   148,   149,   150,   151,   217,     0,   219,   153,   220,
-     221,   222,   223,     0,     0,     0,     0,     0,   359,     0,
-       0,     0,     0,   209,   210,   211,   212,   213,     0,     0,
-       0,     0,     0,   214,     0,   215,     0,     0,     0,     0,
-     216,     0,     0,     0,     0,   217,   218,   219,     0,   220,
-     221,   222,   223,   224,     0,   225,   432,   433,   434,   435,
-       0,     0,   436,     0,   437,     0,   438,   439,   440,   441,
-     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
-     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
-     462,   463,   464,   465,   466,   467,   148,   149,   150,   151,
-     217,     0,   219,   153,   220,   221,   222,   223,   432,   433,
-     434,   435,     0,   601,   436,     0,   437,   468,   438,   439,
-     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
-     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
-     460,   461,   462,   463,   464,   465,   466,   467,   432,   433,
-     434,   435,     0,   605,   436,     0,   437,     0,   438,   439,
-     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
-     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
-     460,   461,   462,   463,   464,   465,   466,   467,   432,   433,
-     434,   435,     0,   610,   436,     0,   437,     0,   438,   439,
-     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
-     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
-     460,   461,   462,   463,   464,   465,   466,   467,   432,   433,
-     434,   435,     0,   663,   436,     0,   437,     0,   438,   439,
-     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
-     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
-     460,   461,   462,   463,   464,   465,   466,   467,   432,   433,
-     434,   435,     0,   674,   436,     0,   437,     0,   438,   439,
-     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
-     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
-     460,   461,   462,   463,   464,   465,   466,   467,   432,   433,
-     434,   435,     0,   695,   436,     0,   437,     0,   438,   439,
-     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
-     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
-     460,   461,   462,   463,   464,   465,   466,   467,   432,   433,
-     434,   435,     0,   710,   436,     0,   437,     0,   438,   439,
-     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
-     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
-     460,   461,   462,   463,   464,   465,   466,   467,   432,   433,
-     434,   435,     0,   717,   436,     0,   437,     0,   438,   439,
-     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
-     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
-     460,   461,   462,   463,   464,   465,   466,   467,   432,   433,
-     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
+     463,   464,   465,   466,   467,   468,   469,   514,   357,    40,
+     713,   716,   515,   717,   719,   484,   711,   720,    42,   358,
+     516,   722,   201,   723,    88,   217,   517,   219,    89,   220,
+     221,   222,   223,    43,   174,   485,   233,   378,   685,   518,
+      44,    77,   521,    45,   305,   628,   306,   203,   593,    46,
+     486,   691,   103,     0,   307,   308,   309,   310,   712,   311,
+     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
+     322,   323,   324,   325,   326,   204,   135,   136,   137,   138,
+     139,   140,     0,     0,   359,     0,     0,   506,     0,   507,
+       0,   148,   149,   150,   151,   217,   497,   219,   153,   220,
+     221,   222,   223,     0,     0,     0,   508,   509,   360,   510,
+     511,     0,     0,   512,   513,     0,     0,     0,     0,   214,
+       0,   282,     0,     0,     0,     0,   327,     0,     0,     0,
+       0,   217,   328,   219,     0,   220,   221,   222,   223,     0,
+       0,   283,     0,    78,   329,    58,    59,    60,    61,    62,
+      63,    64,    65,    66,    67,     0,    68,    69,    70,    71,
+      72,    73,   201,    74,   147,     0,   505,   703,   202,   506,
+       0,   507,     0,     0,     0,     0,   148,   149,   150,   151,
+     629,     0,   152,   153,   154,     0,     0,   203,   508,   509,
+     155,   510,   511,   156,     0,   512,   513,     0,     0,   505,
+     704,   201,   506,     0,   507,     0,     0,   202,   505,     0,
+       0,   506,     0,   507,     0,   204,   205,   206,   207,   208,
+       0,   508,   509,     0,   510,   511,   203,     0,   512,   513,
+     508,   509,     0,   510,   511,     0,     0,   512,   513,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   209,
+     210,   211,     0,   213,   204,   205,   206,   207,   208,   214,
+       0,   215,     0,     0,     0,     0,   216,     0,     0,     0,
+       0,   217,   218,   219,     0,   220,   221,   222,   223,   224,
+       0,   225,   684,     0,     0,     0,     0,     0,   209,   210,
+     211,   212,   213,     0,     0,     0,     0,     0,   214,     0,
+     215,     0,     0,     0,     0,   216,     0,     0,     0,     0,
+     217,   218,   219,     0,   220,   221,   222,   223,   224,     0,
+     225,   434,   435,   436,   437,     0,     0,   438,     0,   439,
+       0,   440,   441,   442,   443,   444,   445,   446,   447,   448,
+     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
+     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
+     469,     0,     0,     0,   148,   149,   150,   151,     0,     0,
+     152,   153,   154,     0,   434,   435,   436,   437,   155,   604,
+     438,   156,   439,   470,   440,   441,   442,   443,   444,   445,
+     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
+     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
+     466,   467,   468,   469,   434,   435,   436,   437,     0,   608,
+     438,     0,   439,     0,   440,   441,   442,   443,   444,   445,
+     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
+     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
+     466,   467,   468,   469,   434,   435,   436,   437,     0,   613,
+     438,     0,   439,     0,   440,   441,   442,   443,   444,   445,
+     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
+     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
+     466,   467,   468,   469,   434,   435,   436,   437,     0,   667,
+     438,     0,   439,     0,   440,   441,   442,   443,   444,   445,
+     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
+     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
+     466,   467,   468,   469,   434,   435,   436,   437,     0,   678,
+     438,     0,   439,     0,   440,   441,   442,   443,   444,   445,
+     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
+     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
+     466,   467,   468,   469,   434,   435,   436,   437,     0,   699,
+     438,     0,   439,     0,   440,   441,   442,   443,   444,   445,
+     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
+     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
+     466,   467,   468,   469,   434,   435,   436,   437,     0,   714,
+     438,     0,   439,     0,   440,   441,   442,   443,   444,   445,
+     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
+     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
+     466,   467,   468,   469,   434,   435,   436,   437,     0,   721,
+     438,     0,   439,     0,   440,   441,   442,   443,   444,   445,
+     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
+     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
+     466,   467,   468,   469,   434,   435,   436,   437,     0,     0,
+     438,     0,   439,     0,   440,   441,   442,   443,   444,   445,
+     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
+     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
+     466,   467,   468,   469,   435,   436,   437,     0,     0,   438,
+       0,   439,     0,   440,   441,   442,   443,   444,   445,   446,
+     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
+     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
+     467,   468,   469,   437,     0,     0,   438,     0,   439,     0,
      440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
-     460,   461,   462,   463,   464,   465,   466,   467,   433,   434,
-     435,     0,     0,   436,     0,   437,     0,   438,   439,   440,
-     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
-     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
-     461,   462,   463,   464,   465,   466,   467,   435,     0,     0,
-     436,     0,   437,     0,   438,   439,   440,   441,   442,   443,
+     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
+     438,     0,   439,     0,   440,   441,   442,   443,   444,   445,
+     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
+     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
+     466,   467,   468,   469,   439,     0,   440,   441,   442,   443,
      444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
-     464,   465,   466,   467,   436,     0,   437,     0,   438,   439,
-     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
-     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
-     460,   461,   462,   463,   464,   465,   466,   467,   437,     0,
-     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
-     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
-     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
-     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
-     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
-     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
-     251,     0,    58,    59,    60,    61,    62,    63,    64,    65,
-      66,    67,     0,    68,    69,    70,    71,    72,    73,     0,
-      74,     0,     0,     0,     0,     0,   381,   252,    58,    59,
+     464,   465,   466,   467,   468,   469,   440,   441,   442,   443,
+     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
+     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
+     464,   465,   466,   467,   468,   469,   251,     0,    58,    59,
       60,    61,    62,    63,    64,    65,    66,    67,     0,    68,
       69,    70,    71,    72,    73,     0,    74,     0,     0,     0,
-       0,     0,     0,   382,   442,   443,   444,   445,   446,   447,
-     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
+       0,     0,   382,   252,    58,    59,    60,    61,    62,    63,
+      64,    65,    66,    67,     0,    68,    69,    70,    71,    72,
+      73,     0,    74,     0,     0,     0,     0,     0,     0,   383,
+     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
+     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
+     464,   465,   466,   467,   468,   469,  -277,  -277,  -277,  -277,
+    -277,  -277,  -277,  -277,  -277,  -277,  -277,  -277,   456,   457,
      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
-    -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,
-    -276,  -276,   454,   455,   456,   457,   458,   459,   460,   461,
-     462,   463,   464,   465,   466,   467,   106,     0,    58,    59,
-      60,    61,    62,    63,    64,    65,    66,    67,     0,    68,
-      69,    70,    71,    72,    73,   109,    74,    58,    59,    60,
-      61,    62,    63,    64,    65,    66,    67,     0,    68,    69,
-      70,    71,    72,    73,   261,    74,    58,    59,    60,    61,
-      62,    63,    64,    65,    66,    67,     0,    68,    69,    70,
-      71,    72,    73,     0,    74,   457,   458,   459,   460,   461,
-     462,   463,   464,   465,   466,   467
+     468,   469,   106,     0,    58,    59,    60,    61,    62,    63,
+      64,    65,    66,    67,     0,    68,    69,    70,    71,    72,
+      73,   109,    74,    58,    59,    60,    61,    62,    63,    64,
+      65,    66,    67,     0,    68,    69,    70,    71,    72,    73,
+     261,    74,    58,    59,    60,    61,    62,    63,    64,    65,
+      66,    67,     0,    68,    69,    70,    71,    72,    73,     0,
+      74,   148,   149,   150,   151,   217,     0,   219,   153,   220,
+     221,   222,   223,   459,   460,   461,   462,   463,   464,   465,
+     466,   467,   468,   469
 };
 
 static const yytype_int16 yycheck[] =
 {
-      92,   208,   146,   146,   206,     0,     1,    99,     9,    29,
-       8,     8,   242,   243,   244,   245,   246,   247,     8,    11,
-     227,    20,    99,    63,    76,   109,     6,     8,     8,    33,
-      33,    11,    79,     8,   126,     6,   109,     8,    71,   350,
-      11,    40,   109,    42,     1,    78,   109,    80,    33,   126,
-     109,   135,   119,     9,   135,   147,   129,   138,     7,   164,
-     119,    10,    95,    12,   156,   128,   131,   107,   212,   102,
-     146,    63,   105,    68,    69,    70,   119,   136,   111,   156,
-      29,    30,    77,    32,    33,   190,    17,    36,    37,   131,
-     137,   298,   135,   135,   301,    96,   138,   304,   305,   306,
-     307,   308,   146,   107,   107,   106,   109,    68,   109,   110,
-     130,    68,    69,    70,   109,   107,   427,    87,    88,   430,
-      77,   328,   107,   330,   109,   201,   356,   357,   109,   359,
-     132,   135,    63,   130,   129,   211,   138,   135,   139,   346,
-      96,   131,   349,   138,   236,   237,   238,   354,   138,   109,
-     106,   136,   109,   109,   110,   135,   131,   201,   137,   236,
-     237,   238,   133,    36,    37,   209,   131,   211,   212,   109,
-     135,   170,   129,   130,   138,   115,   107,   117,   109,   138,
-     179,   138,    14,   139,   133,    17,    18,    19,    20,   115,
-     234,   117,   123,   124,   125,   126,   136,   131,   242,   243,
-     244,   245,   246,   247,   135,     8,   413,   414,   415,   416,
+      92,   208,   146,   146,   206,     9,    33,    99,     8,     8,
+     146,     8,    29,     6,    33,     8,   133,    64,    11,    99,
+     227,    80,   139,    69,    11,     6,   110,     8,    20,    77,
+      11,     8,   351,   164,   126,   110,   242,   243,   244,   245,
+     246,   247,     8,    33,     7,   120,   126,    10,    40,    12,
+      42,   116,   136,   118,   132,   147,     0,     1,   110,   190,
+       1,   108,   137,   139,   156,   201,    29,    30,   212,    32,
+      33,   136,     9,    36,    37,   211,   156,    64,   130,   138,
+     110,   108,    14,   110,   146,    17,    18,    19,    20,   108,
+     120,   298,   120,    97,   301,   110,   110,   304,   305,   306,
+     307,   308,   116,   107,   118,   139,   110,   111,   136,   428,
+     137,   110,   110,   432,   131,   138,   136,   136,   108,   139,
+     110,   108,   329,   137,   331,    69,    70,    71,    69,    70,
+      71,   129,   132,    92,    78,   132,   140,    78,   132,   201,
+     347,   134,   139,   350,   236,   237,   238,   209,   355,   211,
+     212,   357,   358,   120,   360,   136,   236,   237,   238,   136,
+      97,   133,    88,    89,   136,   131,   110,   139,    11,   110,
+     107,   134,   234,   110,   111,   132,   134,   135,   170,   136,
+     242,   243,   244,   245,   246,   247,   130,   179,     8,   130,
+     131,    11,   132,   132,   110,   139,   136,   136,   139,   139,
+     132,   132,   338,   140,   116,   136,   118,   414,   415,   416,
      417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
-       8,   428,   429,   133,   134,   432,   433,   434,   435,   436,
+     427,    64,   429,   430,   431,   133,     8,   434,   435,   436,
      437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
      447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
-     467,   337,   115,   262,   117,   119,   468,   474,   131,    72,
-     109,    74,   135,   503,   504,   505,   506,   507,   508,   509,
-     510,   511,   135,    92,    93,    94,    89,    90,   495,   132,
-      11,   103,   135,   337,    91,   138,     6,   341,     8,   131,
-      73,    11,    75,   115,   116,   117,   118,   133,   134,   121,
-     122,   123,   356,   357,   131,   359,     8,   129,   135,    11,
-     132,   109,   398,   111,   112,   113,   114,   115,   116,   117,
-     118,   119,   120,    11,   122,   123,   124,   125,   126,   127,
-     109,   129,    63,   112,   138,     3,     4,     5,     6,   109,
-     132,     9,   112,    11,   398,    13,    14,    15,    16,    17,
-      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
-      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
-      38,    39,    40,    41,    42,    63,   107,    11,   109,   106,
-      71,   133,   134,   623,   624,   602,   104,   604,   119,    80,
-     121,   109,   123,   124,   125,   126,   133,   134,   129,   117,
-       8,    11,    87,    88,    95,   123,   131,   138,   131,    29,
-      30,   102,    32,    33,   105,    17,    36,    37,   136,   107,
-     111,   109,   133,   134,   131,   642,    36,   644,   645,    63,
-     131,   119,   131,   121,   131,   123,   124,   125,   126,   131,
-     657,   129,     8,    10,     8,    12,   107,   109,   665,   503,
-     504,   505,   506,   507,   508,   509,   510,   511,   132,    12,
-       8,    63,    29,    30,   131,    32,    33,   131,   136,    36,
-      37,   625,   625,   107,   109,   109,    29,    30,   135,    32,
-      33,   132,   132,    36,    37,   119,   109,   121,   132,   123,
-     124,   125,   126,   132,   711,   129,   119,   107,   121,   109,
-     123,   124,   125,   126,   138,   107,   129,   109,   107,   119,
-     107,   121,   598,   123,   124,   125,   126,    48,    49,   129,
-     622,   123,   124,   125,   126,    36,    37,    38,    39,    40,
-      41,    42,    81,   135,    83,    84,    85,    86,   130,   625,
-     131,   103,     8,   109,   598,   111,   112,   113,   114,   115,
-     116,   117,   118,   119,   120,   107,   122,   123,   124,   125,
-     126,   127,   119,   129,     8,   107,     8,     8,   622,   623,
-     624,   625,     3,     4,     5,     6,   135,   107,     9,   107,
-      11,   107,    13,    14,    15,    16,    17,    18,    19,    20,
-      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
-      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
-      41,    42,     3,     4,     5,     6,   107,   132,     9,   123,
-      11,   138,    13,    14,    15,    16,    17,    18,    19,    20,
+     467,   468,   469,   399,    74,   108,    76,   110,   470,   476,
+     262,   110,   110,    11,   113,   113,   338,   120,   139,   122,
+     342,   124,   125,   126,   127,   134,   135,   130,   134,   135,
+     497,    73,   132,    75,    11,   357,   358,    12,   360,   505,
+     506,   507,   508,   509,   510,   511,   512,   513,    90,    91,
+     132,     6,   107,     8,    29,    30,    11,    32,    33,    36,
+     132,    36,    37,   132,    17,   132,    64,    93,    94,    95,
+       3,     4,     5,     6,   134,   135,     9,   399,    11,   132,
+      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
+      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
+      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
+     108,    64,   110,    29,    30,   132,    32,    33,     8,    17,
+      36,    37,   120,     8,   122,   108,   124,   125,   126,   127,
+     133,   108,   130,   110,   134,   135,    36,    37,   605,   110,
+     607,   139,    11,   120,     8,   122,   132,   124,   125,   126,
+     127,    88,    89,   130,   132,   108,    17,   110,    32,    33,
+     626,   627,    36,    37,   136,    82,    64,    84,    85,    86,
+      87,   124,   125,   126,   127,   110,     8,   133,   645,   133,
+     647,   648,   110,   505,   506,   507,   508,   509,   510,   511,
+     512,   513,   120,   660,   122,    64,   124,   125,   126,   127,
+      48,    49,   669,    64,   137,   601,    72,   133,   133,   108,
+     108,   108,   110,    79,   132,    81,    36,    37,    38,    39,
+      40,    41,    42,   131,   628,   628,   124,   125,   126,   127,
+      96,   104,   628,     8,   120,     8,   108,   103,   136,   108,
+     106,   110,     8,   108,     8,   136,   112,   108,   715,   110,
+     108,   120,   108,   122,   108,   124,   125,   126,   127,   108,
+     139,   130,   133,   124,   125,   126,   127,   124,   136,   132,
+     139,   133,    90,   625,   133,   136,   110,   108,   110,   601,
+     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
+     134,   123,   124,   125,   126,   127,   128,   138,   130,   135,
+     135,   108,   135,   625,   626,   627,   628,     3,     4,     5,
+       6,   135,    18,     9,    18,    11,   112,    13,    14,    15,
+      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
+      36,    37,    38,    39,    40,    41,    42,     3,     4,     5,
+       6,   108,   136,     9,     8,    11,     8,    13,    14,    15,
+      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
+      36,    37,    38,    39,    40,    41,    42,     3,     4,     5,
+       6,   133,   133,     9,   133,    11,   133,    13,    14,    15,
+      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
+      36,    37,    38,    39,    40,    41,    42,   108,   133,   139,
+     133,   133,     3,     4,     5,     6,   133,   132,     9,   133,
+      11,   137,    13,    14,    15,    16,    17,    18,    19,    20,
       21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
       31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
-      41,    42,     3,     4,     5,     6,   132,   131,     9,   132,
-      11,   133,    13,    14,    15,    16,    17,    18,    19,    20,
+      41,    42,     3,     4,     5,     6,   133,   135,     9,     8,
+      11,   137,    13,    14,    15,    16,    17,    18,    19,    20,
       21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
       31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
-      41,    42,   135,    89,   107,   109,     3,     4,     5,     6,
-     137,   134,     9,   107,    11,   136,    13,    14,    15,    16,
-      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
-      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
-      37,    38,    39,    40,    41,    42,     3,     4,     5,     6,
-     134,   134,     9,    18,    11,   136,    13,    14,    15,    16,
-      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
-      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
-      37,    38,    39,    40,    41,    42,   134,    18,     3,     4,
-       5,     6,   133,   134,     9,   111,    11,   107,    13,    14,
-      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
-      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      35,    36,    37,    38,    39,    40,    41,    42,     3,     4,
-       5,     6,   135,   132,     9,     8,    11,   134,    13,    14,
-      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
-      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      35,    36,    37,    38,    39,    40,    41,    42,     3,     4,
-       5,     6,     8,   132,     9,   131,    11,   134,    13,    14,
-      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
-      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      35,    36,    37,    38,    39,    40,    41,    42,   132,   132,
-       3,     4,     5,     6,   132,   132,     9,   107,    11,   134,
-      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
-      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
-      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
-     132,     3,     4,     5,     6,   132,   132,     9,   133,    11,
-     132,    13,    14,    15,    16,    17,    18,    19,    20,    21,
+      41,    42,   133,   133,     3,     4,     5,     6,   134,   135,
+       9,   133,    11,   133,    13,    14,    15,    16,    17,    18,
+      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
+      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
+      39,    40,    41,    42,   133,     3,     4,     5,     6,   133,
+     133,     9,     8,    11,   135,    13,    14,    15,    16,    17,
+      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
+      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
+      38,    39,    40,    41,    42,     3,     4,     5,     6,   133,
+     133,     9,     8,    11,   135,    13,    14,    15,    16,    17,
+      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
+      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
+      38,    39,    40,    41,    42,   108,   108,     3,     4,     5,
+       6,   108,   108,     9,   108,    11,   135,    13,    14,    15,
+      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
+      36,    37,    38,    39,    40,    41,    42,     3,     4,     5,
+       6,    11,    77,     9,   108,    11,   134,    13,    14,    15,
+      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
+      36,    37,    38,    39,    40,    41,    42,     3,     4,     5,
+       6,   132,   108,     9,   108,    11,   134,    13,    14,    15,
+      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
+      36,    37,    38,    39,    40,    41,    42,   108,   108,     3,
+       4,     5,     6,   108,   137,     9,   112,    11,   134,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,   108,   108,     9,   108,    11,   134,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     3,
+       4,     5,     6,   134,   108,     9,   108,    11,   134,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,     8,
+       8,     3,     4,     5,     6,   132,   134,     9,   133,    11,
+     134,    13,    14,    15,    16,    17,    18,    19,    20,    21,
       22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
       32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,   132,   134,     9,   133,    11,
-     132,    13,    14,    15,    16,    17,    18,    19,    20,    21,
+      42,     3,     4,     5,     6,   132,   135,     9,   108,    11,
+     134,    13,    14,    15,    16,    17,    18,    19,    20,    21,
       22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
       32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,   132,   132,     9,   132,    11,
-     133,    13,    14,    15,    16,    17,    18,    19,    20,    21,
+      42,     3,     4,     5,     6,   132,   132,     9,   139,    11,
+     134,    13,    14,    15,    16,    17,    18,    19,    20,    21,
       22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
       32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,   132,     3,     4,     5,     6,   132,   132,     9,   138,
-      11,   133,    13,    14,    15,    16,    17,    18,    19,    20,
-      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
-      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
-      41,    42,     3,     4,     5,     6,     8,   107,     9,     8,
-      11,   133,    13,    14,    15,    16,    17,    18,    19,    20,
-      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
-      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
-      41,    42,     3,     4,     5,     6,     8,   107,     9,   107,
-      11,   133,    13,    14,    15,    16,    17,    18,    19,    20,
-      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
-      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
-      41,    42,   107,     3,     4,     5,     6,   107,    11,     9,
-      76,    11,   133,    13,    14,    15,    16,    17,    18,    19,
+      42,   132,   135,     3,     4,     5,     6,   134,   134,     9,
+     134,    11,   134,    13,    14,    15,    16,    17,    18,    19,
       20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
       30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
-      40,    41,    42,     3,     4,     5,     6,   107,   131,     9,
-     107,    11,   133,    13,    14,    15,    16,    17,    18,    19,
+      40,    41,    42,     3,     4,     5,     6,   134,   137,     9,
+       8,    11,   134,    13,    14,    15,    16,    17,    18,    19,
       20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
       30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
-      40,    41,    42,     3,     4,     5,     6,   107,   107,     9,
-     107,    11,   133,    13,    14,    15,    16,    17,    18,    19,
+      40,    41,    42,     3,     4,     5,     6,     8,   134,     9,
+       8,    11,   134,    13,    14,    15,    16,    17,    18,    19,
       20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
       30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
-      40,    41,    42,   107,     3,     4,     5,     6,   136,   111,
-       9,   107,    11,   133,    13,    14,    15,    16,    17,    18,
-      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
-      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
-      39,    40,    41,    42,     3,     4,     5,     6,   107,   107,
-       9,   133,    11,   133,    13,    14,    15,    16,    17,    18,
-      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
-      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
-      39,    40,    41,    42,     3,     4,     5,     6,   107,   107,
-       9,     8,    11,   133,    13,    14,    15,    16,    17,    18,
-      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
-      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
-      39,    40,    41,    42,     8,     3,     4,     5,     6,   131,
-     133,     9,   132,    11,   133,    13,    14,    15,    16,    17,
+      40,    41,    42,     8,   135,     3,     4,     5,     6,     8,
+     108,     9,     8,    11,   134,    13,    14,    15,    16,    17,
       18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
-      38,    39,    40,    41,    42,     3,     4,     5,     6,   131,
-     134,     9,   107,    11,   133,    13,    14,    15,    16,    17,
+      38,    39,    40,    41,    42,     3,     4,     5,     6,     8,
+     108,     9,     8,    11,   134,    13,    14,    15,    16,    17,
       18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
-      38,    39,    40,    41,    42,     3,     4,     5,     6,   131,
-     131,     9,   138,    11,   133,    13,    14,    15,    16,    17,
+      38,    39,    40,    41,    42,     3,     4,     5,     6,     8,
+     108,     9,   108,    11,   134,    13,    14,    15,    16,    17,
       18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
-      38,    39,    40,    41,    42,     7,     8,   134,    10,   131,
-      12,   136,    32,    33,   133,   133,    36,    37,   133,    11,
-      81,    82,    83,    84,    85,    86,   133,    29,    30,   133,
-      32,    33,     8,     8,    36,    37,     8,   133,     8,   134,
-       8,    33,     8,    35,    36,     8,    17,     8,     8,   107,
-     107,    43,    44,    45,    46,   133,    48,    49,    50,    51,
-      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
-      62,    63,   107,   107,     7,     8,   136,    10,   134,    12,
-     134,    30,    30,     7,   136,     8,    10,   136,    12,    11,
-     131,   117,    63,   131,   117,    17,    29,    30,     8,    32,
-      33,   133,   133,    36,    37,    29,    30,    29,    32,    33,
-       8,    31,    36,    37,    36,   107,    31,   109,   116,   248,
-     147,   625,   114,   369,   518,   470,   341,   119,   120,   121,
-      36,   123,   124,   125,   126,   631,   107,   129,   109,    33,
-     132,    63,    64,    65,    66,    67,    -1,    -1,    -1,    -1,
-      44,    -1,   123,   124,   125,   126,    -1,    11,    -1,    -1,
-      -1,    -1,    -1,    17,   115,   116,   117,   118,    -1,    -1,
-     121,   122,   123,    -1,   109,    97,    98,    99,   129,   101,
-      -1,   132,    36,    -1,   119,   107,   121,   109,   123,   124,
-     125,   126,   114,    -1,    -1,    -1,    -1,   119,   120,   121,
-      -1,   123,   124,   125,   126,   127,    -1,   129,   130,    63,
-      64,    65,    66,    67,   108,    -1,    -1,    -1,    -1,    -1,
-      -1,   115,   116,   117,   118,   119,    -1,   121,   122,   123,
-     124,   125,   126,    -1,    -1,    -1,    -1,    -1,   132,    -1,
-      -1,    -1,    -1,    97,    98,    99,   100,   101,    -1,    -1,
-      -1,    -1,    -1,   107,    -1,   109,    -1,    -1,    -1,    -1,
-     114,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,   123,
-     124,   125,   126,   127,    -1,   129,     3,     4,     5,     6,
-      -1,    -1,     9,    -1,    11,    -1,    13,    14,    15,    16,
-      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
-      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
-      37,    38,    39,    40,    41,    42,   115,   116,   117,   118,
-     119,    -1,   121,   122,   123,   124,   125,   126,     3,     4,
-       5,     6,    -1,     8,     9,    -1,    11,    64,    13,    14,
-      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
-      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      35,    36,    37,    38,    39,    40,    41,    42,     3,     4,
-       5,     6,    -1,     8,     9,    -1,    11,    -1,    13,    14,
-      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
-      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      35,    36,    37,    38,    39,    40,    41,    42,     3,     4,
-       5,     6,    -1,     8,     9,    -1,    11,    -1,    13,    14,
-      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
-      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      35,    36,    37,    38,    39,    40,    41,    42,     3,     4,
-       5,     6,    -1,     8,     9,    -1,    11,    -1,    13,    14,
-      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
-      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      35,    36,    37,    38,    39,    40,    41,    42,     3,     4,
-       5,     6,    -1,     8,     9,    -1,    11,    -1,    13,    14,
-      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
-      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      35,    36,    37,    38,    39,    40,    41,    42,     3,     4,
-       5,     6,    -1,     8,     9,    -1,    11,    -1,    13,    14,
-      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
-      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      35,    36,    37,    38,    39,    40,    41,    42,     3,     4,
-       5,     6,    -1,     8,     9,    -1,    11,    -1,    13,    14,
-      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
-      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      35,    36,    37,    38,    39,    40,    41,    42,     3,     4,
-       5,     6,    -1,     8,     9,    -1,    11,    -1,    13,    14,
-      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
-      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      35,    36,    37,    38,    39,    40,    41,    42,     3,     4,
-       5,     6,    -1,    -1,     9,    -1,    11,    -1,    13,    14,
-      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
-      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      35,    36,    37,    38,    39,    40,    41,    42,     4,     5,
-       6,    -1,    -1,     9,    -1,    11,    -1,    13,    14,    15,
+      38,    39,    40,    41,    42,   137,   135,     3,     4,     5,
+       6,   135,   132,     9,    30,    11,   134,    13,    14,    15,
+      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
+      36,    37,    38,    39,    40,    41,    42,     3,     4,     5,
+       6,    30,   137,     9,     8,    11,   134,    13,    14,    15,
       16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
       26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    40,    41,    42,     6,    -1,    -1,
+      36,    37,    38,    39,    40,    41,    42,   105,    33,    72,
+     137,   118,   110,   118,   134,   110,   134,   134,    81,    44,
+     118,     8,    11,     8,    31,   120,   124,   122,    31,   124,
+     125,   126,   127,    96,   116,   130,   147,   248,   628,   137,
+     103,     8,   370,   106,    33,   520,    35,    36,   472,   112,
+     342,   634,    36,    -1,    43,    44,    45,    46,   134,    48,
+      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
+      59,    60,    61,    62,    63,    64,    82,    83,    84,    85,
+      86,    87,    -1,    -1,   109,    -1,    -1,    10,    -1,    12,
+      -1,   116,   117,   118,   119,   120,   132,   122,   123,   124,
+     125,   126,   127,    -1,    -1,    -1,    29,    30,   133,    32,
+      33,    -1,    -1,    36,    37,    -1,    -1,    -1,    -1,   108,
+      -1,   110,    -1,    -1,    -1,    -1,   115,    -1,    -1,    -1,
+      -1,   120,   121,   122,    -1,   124,   125,   126,   127,    -1,
+      -1,   130,    -1,   110,   133,   112,   113,   114,   115,   116,
+     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
+     127,   128,    11,   130,   104,    -1,     7,     8,    17,    10,
+      -1,    12,    -1,    -1,    -1,    -1,   116,   117,   118,   119,
+      29,    -1,   122,   123,   124,    -1,    -1,    36,    29,    30,
+     130,    32,    33,   133,    -1,    36,    37,    -1,    -1,     7,
+       8,    11,    10,    -1,    12,    -1,    -1,    17,     7,    -1,
+      -1,    10,    -1,    12,    -1,    64,    65,    66,    67,    68,
+      -1,    29,    30,    -1,    32,    33,    36,    -1,    36,    37,
+      29,    30,    -1,    32,    33,    -1,    -1,    36,    37,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
+      99,   100,    -1,   102,    64,    65,    66,    67,    68,   108,
+      -1,   110,    -1,    -1,    -1,    -1,   115,    -1,    -1,    -1,
+      -1,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
+      -1,   130,   131,    -1,    -1,    -1,    -1,    -1,    98,    99,
+     100,   101,   102,    -1,    -1,    -1,    -1,    -1,   108,    -1,
+     110,    -1,    -1,    -1,    -1,   115,    -1,    -1,    -1,    -1,
+     120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
+     130,     3,     4,     5,     6,    -1,    -1,     9,    -1,    11,
+      -1,    13,    14,    15,    16,    17,    18,    19,    20,    21,
+      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
+      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
+      42,    -1,    -1,    -1,   116,   117,   118,   119,    -1,    -1,
+     122,   123,   124,    -1,     3,     4,     5,     6,   130,     8,
+       9,   133,    11,    65,    13,    14,    15,    16,    17,    18,
+      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
+      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
+      39,    40,    41,    42,     3,     4,     5,     6,    -1,     8,
        9,    -1,    11,    -1,    13,    14,    15,    16,    17,    18,
       19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
       29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
-      39,    40,    41,    42,     9,    -1,    11,    -1,    13,    14,
-      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
-      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      35,    36,    37,    38,    39,    40,    41,    42,    11,    -1,
-      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
-      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
-      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
+      39,    40,    41,    42,     3,     4,     5,     6,    -1,     8,
+       9,    -1,    11,    -1,    13,    14,    15,    16,    17,    18,
+      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
+      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
+      39,    40,    41,    42,     3,     4,     5,     6,    -1,     8,
+       9,    -1,    11,    -1,    13,    14,    15,    16,    17,    18,
+      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
+      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
+      39,    40,    41,    42,     3,     4,     5,     6,    -1,     8,
+       9,    -1,    11,    -1,    13,    14,    15,    16,    17,    18,
+      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
+      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
+      39,    40,    41,    42,     3,     4,     5,     6,    -1,     8,
+       9,    -1,    11,    -1,    13,    14,    15,    16,    17,    18,
+      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
+      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
+      39,    40,    41,    42,     3,     4,     5,     6,    -1,     8,
+       9,    -1,    11,    -1,    13,    14,    15,    16,    17,    18,
+      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
+      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
+      39,    40,    41,    42,     3,     4,     5,     6,    -1,     8,
+       9,    -1,    11,    -1,    13,    14,    15,    16,    17,    18,
+      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
+      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
+      39,    40,    41,    42,     3,     4,     5,     6,    -1,    -1,
+       9,    -1,    11,    -1,    13,    14,    15,    16,    17,    18,
+      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
+      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
+      39,    40,    41,    42,     4,     5,     6,    -1,    -1,     9,
+      -1,    11,    -1,    13,    14,    15,    16,    17,    18,    19,
+      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
+      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
+      40,    41,    42,     6,    -1,    -1,     9,    -1,    11,    -1,
       13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
       23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
       33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
-     109,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
-     119,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
-     129,    -1,    -1,    -1,    -1,    -1,   109,   136,   111,   112,
-     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
-     123,   124,   125,   126,   127,    -1,   129,    -1,    -1,    -1,
-      -1,    -1,    -1,   136,    17,    18,    19,    20,    21,    22,
-      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
-      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
+       9,    -1,    11,    -1,    13,    14,    15,    16,    17,    18,
+      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
+      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
+      39,    40,    41,    42,    11,    -1,    13,    14,    15,    16,
       17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
-      37,    38,    39,    40,    41,    42,   109,    -1,   111,   112,
-     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
-     123,   124,   125,   126,   127,   109,   129,   111,   112,   113,
-     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
-     124,   125,   126,   127,   109,   129,   111,   112,   113,   114,
-     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
-     125,   126,   127,    -1,   129,    32,    33,    34,    35,    36,
-      37,    38,    39,    40,    41,    42
+      37,    38,    39,    40,    41,    42,    13,    14,    15,    16,
+      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
+      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
+      37,    38,    39,    40,    41,    42,   110,    -1,   112,   113,
+     114,   115,   116,   117,   118,   119,   120,   121,    -1,   123,
+     124,   125,   126,   127,   128,    -1,   130,    -1,    -1,    -1,
+      -1,    -1,   110,   137,   112,   113,   114,   115,   116,   117,
+     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
+     128,    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,   137,
+      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
+      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
+      37,    38,    39,    40,    41,    42,    17,    18,    19,    20,
+      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
+      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
+      41,    42,   110,    -1,   112,   113,   114,   115,   116,   117,
+     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
+     128,   110,   130,   112,   113,   114,   115,   116,   117,   118,
+     119,   120,   121,    -1,   123,   124,   125,   126,   127,   128,
+     110,   130,   112,   113,   114,   115,   116,   117,   118,   119,
+     120,   121,    -1,   123,   124,   125,   126,   127,   128,    -1,
+     130,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
+     125,   126,   127,    32,    33,    34,    35,    36,    37,    38,
+      39,    40,    41,    42
 };
 
 /* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
    state STATE-NUM.  */
 static const yytype_uint8 yystos[] =
 {
-       0,    68,   141,   144,    76,     0,     1,    68,    69,    70,
-      77,   109,   129,   138,   142,   143,   145,   146,   147,   148,
-     149,   152,   153,   154,   155,   158,   159,   160,   161,   162,
-     163,   164,   165,   168,   170,   171,   172,   131,     8,   130,
-      71,    78,    80,    95,   102,   105,   111,    92,    93,    94,
-     109,   109,   129,   166,   138,   138,     8,   109,   111,   112,
-     113,   114,   115,   116,   117,   118,   119,   120,   122,   123,
-     124,   125,   126,   127,   129,   150,   210,     8,   109,   151,
-     210,     8,    72,    74,    89,    90,    68,   130,   142,   143,
-     137,     9,    96,   106,   109,   110,   139,   197,     9,    96,
-     109,   110,   139,   197,    87,    88,   109,   210,   131,   109,
-     210,   109,   135,   200,   119,   109,   156,   157,    91,   115,
-     117,   135,   204,   204,   204,   132,   138,   131,    81,    83,
-      84,    85,    86,   131,   131,    81,    82,    83,    84,    85,
-      86,   131,   131,   131,   131,   184,   185,   103,   115,   116,
-     117,   118,   121,   122,   123,   129,   132,   174,   175,   176,
-     177,   178,   195,   106,   174,     8,     8,   107,   132,   109,
-     201,     8,   131,     8,   157,   131,   115,   117,   205,   135,
-     202,    33,   107,   135,   198,   119,   135,   206,   109,   209,
-     167,   174,   132,   132,   132,   132,    73,    75,   107,   107,
-     130,    11,    17,    36,    63,    64,    65,    66,    67,    97,
-      98,    99,   100,   101,   107,   109,   114,   119,   120,   121,
-     123,   124,   125,   126,   127,   129,   186,   188,   190,   191,
-     192,   193,   196,   176,   131,   174,     6,     8,    11,   135,
-     179,   103,    14,    17,    18,    19,    20,   131,   179,     8,
-     107,   109,   136,   210,   119,    63,   107,   109,   115,   117,
-     136,   109,   203,   210,     8,   107,    33,   107,   109,   199,
-       8,   109,   119,   207,     8,   133,   134,   179,   107,   107,
-     107,   107,   109,   129,   138,   190,   196,   109,   128,   135,
-     138,    63,   107,   109,   123,   124,   125,   126,   135,   189,
-     193,   135,   189,     8,   135,    33,    35,    43,    44,    45,
+       0,    69,   142,   145,    77,     0,     1,    69,    70,    71,
+      78,   110,   130,   139,   143,   144,   146,   147,   148,   149,
+     150,   153,   154,   155,   156,   159,   160,   161,   162,   163,
+     164,   165,   166,   169,   171,   172,   173,   132,     8,   131,
+      72,    79,    81,    96,   103,   106,   112,    93,    94,    95,
+     110,   110,   130,   167,   139,   139,     8,   110,   112,   113,
+     114,   115,   116,   117,   118,   119,   120,   121,   123,   124,
+     125,   126,   127,   128,   130,   151,   211,     8,   110,   152,
+     211,     8,    73,    75,    90,    91,    69,   131,   143,   144,
+     138,     9,    97,   107,   110,   111,   140,   198,     9,    97,
+     110,   111,   140,   198,    88,    89,   110,   211,   132,   110,
+     211,   110,   136,   201,   120,   110,   157,   158,    92,   116,
+     118,   136,   205,   205,   205,   133,   139,   132,    82,    84,
+      85,    86,    87,   132,   132,    82,    83,    84,    85,    86,
+      87,   132,   132,   132,   132,   185,   186,   104,   116,   117,
+     118,   119,   122,   123,   124,   130,   133,   175,   176,   177,
+     178,   179,   196,   107,   175,     8,     8,   108,   133,   110,
+     202,     8,   132,     8,   158,   132,   116,   118,   206,   136,
+     203,    33,   108,   136,   199,   120,   136,   207,   110,   210,
+     168,   175,   133,   133,   133,   133,    74,    76,   108,   108,
+     131,    11,    17,    36,    64,    65,    66,    67,    68,    98,
+      99,   100,   101,   102,   108,   110,   115,   120,   121,   122,
+     124,   125,   126,   127,   128,   130,   187,   189,   191,   192,
+     193,   194,   197,   177,   132,   175,     6,     8,    11,   136,
+     180,   104,    14,    17,    18,    19,    20,   132,   180,     8,
+     108,   110,   137,   211,   120,    64,   108,   110,   116,   118,
+     137,   110,   204,   211,     8,   108,    33,   108,   110,   200,
+       8,   110,   120,   208,     8,   134,   135,   180,   108,   108,
+     108,   108,   110,   130,   139,   191,   197,   110,   129,   136,
+     139,    64,   108,   110,   124,   125,   126,   127,   136,   190,
+     194,   136,   190,     8,   136,    33,    35,    43,    44,    45,
       46,    48,    49,    50,    51,    52,    53,    54,    55,    56,
-      57,    58,    59,    60,    61,    62,   114,   120,   132,   187,
-     188,   190,   196,   109,   196,   132,   190,    11,   107,   109,
-     129,   188,   194,   196,   123,   138,   131,   138,   132,   131,
-     132,   187,   132,   138,   131,   135,    33,    44,   108,   132,
-     173,   195,   196,   133,   174,   174,   174,   180,    79,   137,
-     169,   173,   173,   173,   173,   173,   173,   169,   133,   135,
-      89,   109,   136,   210,   107,    33,   107,   109,   136,   109,
-     119,   136,   109,   137,   134,   134,   134,   134,   107,    18,
-      18,   111,   107,   135,   187,     8,   187,     8,   187,   187,
-     187,   187,   187,   132,   132,   132,   132,   132,   132,   132,
-     132,   132,   132,   132,   132,   132,   132,   132,   132,   132,
-     132,   187,     3,     4,     5,     6,     9,    11,    13,    14,
-      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
-      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      35,    36,    37,    38,    39,    40,    41,    42,    64,   187,
-     132,   135,   138,     8,   131,   138,   131,   107,   134,   138,
-     190,   138,   109,   129,   192,   196,     8,     8,   107,   187,
-     107,   187,   208,   187,   208,   131,   107,   107,   187,   107,
-     173,   173,   173,     7,    10,    12,    29,    30,    32,    33,
-      36,    37,   104,   109,   117,   123,   136,   182,   183,   184,
-      76,   107,   131,   107,   107,   107,   107,   107,   190,   136,
-     111,   136,   136,   136,   187,   187,   187,   187,   187,   187,
-     187,   187,   187,   187,   187,   187,   187,   187,   208,   187,
-     187,   208,   133,   187,   187,   187,   187,   187,   187,   187,
-     187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
-     187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
-     187,   187,   187,   187,   187,   187,   187,   187,   187,   189,
-     191,   107,   107,   187,   107,   133,   109,   112,   107,   107,
-       8,     8,   131,   133,   134,     8,   133,   187,   133,   131,
-       8,   134,   133,   173,   173,   173,   173,   173,   173,   173,
-     173,   173,   132,   131,   131,   185,    29,   130,   181,   131,
-     134,   107,   133,   133,   133,   133,   138,   136,     8,     8,
-       8,   133,   134,   133,   134,   134,   133,   133,   133,   133,
-     133,   133,   133,   133,   133,   133,   133,   134,   133,   133,
-       8,   133,   134,     8,     8,   131,     8,     8,     8,   190,
-     187,     8,   187,     8,     8,   107,   195,   196,   173,   173,
-     130,   181,   109,   112,    87,    88,   107,   200,   107,   187,
-     187,   187,   187,   107,   187,     8,   136,   134,   134,     8,
-       8,    30,    30,   136,     8,   133,   133,   133,   133,   136,
-       8,   131,   117,   117,   187,   133,   133,     8,     8,     8
+      57,    58,    59,    60,    61,    62,    63,   115,   121,   133,
+     188,   189,   191,   197,   110,   197,   133,   191,    11,   108,
+     110,   130,   189,   195,   197,   124,   139,   132,   139,   133,
+     132,   133,   188,   133,   139,   132,   136,    33,    44,   109,
+     133,   174,   196,   197,   134,   175,   175,   175,   181,    80,
+     138,   170,   174,   174,   174,   174,   174,   174,   170,   134,
+     136,    90,   110,   137,   211,   108,    33,   108,   110,   137,
+     110,   120,   137,   110,   138,   135,   135,   135,   135,   108,
+      18,    18,   112,   108,   136,   188,     8,   188,     8,   188,
+     188,   188,   188,   188,   133,   133,   133,   133,   133,   133,
+     133,   133,   133,   133,   133,   133,   133,   133,   133,   133,
+     133,   133,   133,   188,     3,     4,     5,     6,     9,    11,
+      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
+      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
+      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
+      65,   188,   133,   136,   139,     8,   132,   139,   132,   108,
+     135,   139,   191,   139,   110,   130,   193,   197,     8,     8,
+     108,   188,   108,   188,   209,   188,   209,   132,   108,   108,
+     188,   108,   174,   174,   174,     7,    10,    12,    29,    30,
+      32,    33,    36,    37,   105,   110,   118,   124,   137,   183,
+     184,   185,    77,   108,   132,   108,   108,   108,   108,   108,
+     191,   137,   112,   137,   137,   137,   188,   188,   188,   188,
+     188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
+     209,   188,   188,   188,   209,   134,   188,   188,   188,   188,
+     188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
+     188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
+     188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
+     188,   188,   190,   192,   108,   108,   188,   108,   134,   110,
+     113,   108,   108,     8,     8,   132,   134,   135,     8,   134,
+     188,   134,   132,     8,   135,   134,   174,   174,   174,   174,
+     174,   174,   174,   174,   174,   133,   132,   132,   186,    29,
+     131,   182,   132,   135,   108,   134,   134,   134,   134,   139,
+     137,     8,     8,     8,   134,   135,   134,   135,   135,   134,
+     134,   134,   134,   134,   134,   134,   134,   134,   134,   134,
+     135,   134,   134,   134,     8,   134,   135,     8,     8,   132,
+       8,     8,     8,   191,   188,     8,   188,     8,     8,   108,
+     196,   197,   174,   174,   131,   182,   110,   113,    88,    89,
+     108,   201,   108,   188,   188,   188,   188,   108,   188,     8,
+     137,   135,   135,     8,     8,    30,    30,   137,     8,   134,
+     134,   134,   134,   137,     8,   132,   118,   118,   188,   134,
+     134,     8,     8,     8
 };
 
 /* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
 static const yytype_uint8 yyr1[] =
 {
-       0,   140,   141,   141,   141,   141,   142,   142,   142,   142,
-     142,   142,   142,   142,   142,   142,   143,   143,   143,   143,
-     144,   144,   145,   146,   147,   147,   147,   147,   147,   148,
-     149,   149,   150,   150,   150,   150,   150,   150,   150,   151,
-     151,   151,   151,   151,   151,   151,   151,   152,   153,   153,
-     153,   153,   153,   153,   153,   154,   154,   155,   156,   156,
-     157,   158,   159,   160,   161,   162,   163,   164,   164,   164,
-     165,   166,   166,   166,   167,   167,   168,   169,   169,   169,
-     170,   170,   171,   171,   171,   171,   171,   171,   171,   171,
-     171,   172,   172,   172,   172,   173,   173,   173,   173,   173,
-     173,   173,   173,   173,   173,   173,   173,   173,   173,   173,
-     174,   174,   174,   174,   175,   175,   176,   176,   177,   177,
-     178,   178,   178,   178,   178,   178,   178,   178,   178,   178,
-     178,   179,   179,   180,   180,   180,   180,   180,   180,   181,
-     181,   182,   183,   183,   184,   184,   184,   184,   184,   185,
-     185,   185,   185,   186,   186,   186,   186,   186,   186,   186,
-     186,   186,   186,   186,   186,   186,   186,   186,   186,   186,
-     186,   186,   186,   186,   186,   186,   186,   186,   187,   187,
-     187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
-     187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
+       0,   141,   142,   142,   142,   142,   143,   143,   143,   143,
+     143,   143,   143,   143,   143,   143,   144,   144,   144,   144,
+     145,   145,   146,   147,   148,   148,   148,   148,   148,   149,
+     150,   150,   151,   151,   151,   151,   151,   151,   151,   152,
+     152,   152,   152,   152,   152,   152,   152,   153,   154,   154,
+     154,   154,   154,   154,   154,   155,   155,   156,   157,   157,
+     158,   159,   160,   161,   162,   163,   164,   165,   165,   165,
+     166,   167,   167,   167,   168,   168,   169,   170,   170,   170,
+     171,   171,   172,   172,   172,   172,   172,   172,   172,   172,
+     172,   173,   173,   173,   173,   174,   174,   174,   174,   174,
+     174,   174,   174,   174,   174,   174,   174,   174,   174,   174,
+     175,   175,   175,   175,   176,   176,   177,   177,   178,   178,
+     179,   179,   179,   179,   179,   179,   179,   179,   179,   179,
+     179,   180,   180,   181,   181,   181,   181,   181,   181,   182,
+     182,   183,   184,   184,   185,   185,   185,   185,   185,   186,
+     186,   186,   186,   187,   187,   187,   187,   187,   187,   187,
      187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
-     187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
-     187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
-     187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
-     187,   187,   187,   187,   188,   188,   188,   188,   189,   189,
-     189,   189,   189,   189,   189,   189,   189,   190,   190,   190,
-     190,   191,   191,   191,   191,   191,   192,   192,   192,   193,
-     193,   194,   194,   194,   194,   194,   194,   195,   195,   195,
-     195,   195,   196,   196,   196,   196,   196,   196,   197,   197,
-     198,   198,   198,   199,   199,   199,   199,   199,   199,   200,
-     200,   201,   201,   201,   202,   203,   203,   203,   203,   204,
-     204,   204,   205,   205,   205,   205,   205,   206,   206,   207,
-     207,   207,   207,   208,   208,   208,   209,   209,   209,   210,
-     210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
-     210,   210,   210,   210,   210,   210
+     187,   187,   187,   187,   187,   187,   187,   187,   188,   188,
+     188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
+     188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
+     188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
+     188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
+     188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
+     188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
+     188,   188,   188,   188,   188,   189,   189,   189,   189,   190,
+     190,   190,   190,   190,   190,   190,   190,   190,   191,   191,
+     191,   191,   192,   192,   192,   192,   192,   193,   193,   193,
+     194,   194,   195,   195,   195,   195,   195,   195,   196,   196,
+     196,   196,   196,   197,   197,   197,   197,   197,   197,   198,
+     198,   199,   199,   199,   200,   200,   200,   200,   200,   200,
+     201,   201,   202,   202,   202,   203,   204,   204,   204,   204,
+     205,   205,   205,   206,   206,   206,   206,   206,   207,   207,
+     208,   208,   208,   208,   209,   209,   209,   210,   210,   210,
+     211,   211,   211,   211,   211,   211,   211,   211,   211,   211,
+     211,   211,   211,   211,   211,   211,   211
 };
 
 /* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
@@ -1678,18 +1701,18 @@ static const yytype_int8 yyr2[] =
        3,     3,     3,     3,     3,     3,     2,     3,     3,     3,
        3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
        2,     4,     4,     4,     4,     6,     6,     6,     4,     4,
-       4,     4,     4,     4,     4,     4,     6,     4,     4,     3,
-       6,     1,     4,     4,     6,     4,     3,     1,     1,     1,
-       1,     1,     1,     1,     4,     1,     1,     1,     1,     1,
-       1,     1,     1,     3,     2,     4,     1,     1,     1,     3,
-       3,     1,     2,     4,     3,     1,     1,     1,     1,     1,
-       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
-       3,     1,     2,     1,     2,     1,     2,     3,     2,     3,
-       1,     1,     2,     2,     3,     1,     1,     2,     2,     3,
-       1,     1,     1,     1,     2,     2,     2,     3,     1,     1,
-       1,     2,     2,     0,     1,     3,     0,     1,     3,     1,
+       4,     4,     4,     4,     4,     4,     6,     4,     4,     4,
+       3,     6,     1,     4,     4,     6,     4,     3,     1,     1,
+       1,     1,     1,     1,     1,     4,     1,     1,     1,     1,
+       1,     1,     1,     1,     3,     2,     4,     1,     1,     1,
+       3,     3,     1,     2,     4,     3,     1,     1,     1,     1,
        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
-       1,     1,     1,     1,     1,     1
+       2,     3,     1,     2,     1,     2,     1,     2,     3,     2,
+       3,     1,     1,     2,     2,     3,     1,     1,     2,     2,
+       3,     1,     1,     1,     1,     2,     2,     2,     3,     1,
+       1,     1,     2,     2,     0,     1,     3,     0,     1,     3,
+       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
+       1,     1,     1,     1,     1,     1,     1
 };
 
 
@@ -2994,439 +3017,443 @@ yyreduce:
                              { (yyval.tree) = slgh->pcode.createOp(CPUI_POPCOUNT,(yyvsp[-1].tree)); }
     break;
 
-  case 238: /* expr: specificsymbol '(' integervarnode ')'  */
+  case 238: /* expr: OP_COUNTLEADINGZEROS '(' expr ')'  */
+                                      { (yyval.tree) = slgh->pcode.createOp(CPUI_COUNTLEADINGZEROS,(yyvsp[-1].tree)); }
+    break;
+
+  case 239: /* expr: specificsymbol '(' integervarnode ')'  */
                                           { (yyval.tree) = slgh->pcode.createOp(CPUI_SUBPIECE,new ExprTree((yyvsp[-3].specsym)->getVarnode()),new ExprTree((yyvsp[-1].varnode))); }
     break;
 
-  case 239: /* expr: specificsymbol ':' INTEGER  */
+  case 240: /* expr: specificsymbol ':' INTEGER  */
                                 { (yyval.tree) = slgh->pcode.createBitRange((yyvsp[-2].specsym),0,(uint4)(*(yyvsp[0].i) * 8)); delete (yyvsp[0].i); }
     break;
 
-  case 240: /* expr: specificsymbol '[' INTEGER ',' INTEGER ']'  */
+  case 241: /* expr: specificsymbol '[' INTEGER ',' INTEGER ']'  */
                                                { (yyval.tree) = slgh->pcode.createBitRange((yyvsp[-5].specsym),(uint4)*(yyvsp[-3].i),(uint4)*(yyvsp[-1].i)); delete (yyvsp[-3].i), delete (yyvsp[-1].i); }
     break;
 
-  case 241: /* expr: BITSYM  */
+  case 242: /* expr: BITSYM  */
                                 { (yyval.tree)=slgh->pcode.createBitRange((yyvsp[0].bitsym)->getParentSymbol(),(yyvsp[0].bitsym)->getBitOffset(),(yyvsp[0].bitsym)->numBits()); }
     break;
 
-  case 242: /* expr: USEROPSYM '(' paramlist ')'  */
+  case 243: /* expr: USEROPSYM '(' paramlist ')'  */
                                 { (yyval.tree) = slgh->pcode.createUserOp((yyvsp[-3].useropsym),(yyvsp[-1].param)); }
     break;
 
-  case 243: /* expr: OP_CPOOLREF '(' paramlist ')'  */
+  case 244: /* expr: OP_CPOOLREF '(' paramlist ')'  */
                                    { if ((*(yyvsp[-1].param)).size() < 2) { string errmsg = "Must at least two inputs to cpool"; yyerror(errmsg.c_str()); YYERROR; } (yyval.tree) = slgh->pcode.createVariadic(CPUI_CPOOLREF,(yyvsp[-1].param)); }
     break;
 
-  case 244: /* sizedstar: '*' '[' SPACESYM ']' ':' INTEGER  */
+  case 245: /* sizedstar: '*' '[' SPACESYM ']' ':' INTEGER  */
                                             { (yyval.starqual) = new StarQuality; (yyval.starqual)->size = *(yyvsp[0].i); delete (yyvsp[0].i); (yyval.starqual)->id=ConstTpl((yyvsp[-3].spacesym)->getSpace()); }
     break;
 
-  case 245: /* sizedstar: '*' '[' SPACESYM ']'  */
+  case 246: /* sizedstar: '*' '[' SPACESYM ']'  */
                                 { (yyval.starqual) = new StarQuality; (yyval.starqual)->size = 0; (yyval.starqual)->id=ConstTpl((yyvsp[-1].spacesym)->getSpace()); }
     break;
 
-  case 246: /* sizedstar: '*' ':' INTEGER  */
+  case 247: /* sizedstar: '*' ':' INTEGER  */
                                 { (yyval.starqual) = new StarQuality; (yyval.starqual)->size = *(yyvsp[0].i); delete (yyvsp[0].i); (yyval.starqual)->id=ConstTpl(slgh->getDefaultCodeSpace()); }
     break;
 
-  case 247: /* sizedstar: '*'  */
+  case 248: /* sizedstar: '*'  */
                                 { (yyval.starqual) = new StarQuality; (yyval.starqual)->size = 0; (yyval.starqual)->id=ConstTpl(slgh->getDefaultCodeSpace()); }
     break;
 
-  case 248: /* jumpdest: STARTSYM  */
+  case 249: /* jumpdest: STARTSYM  */
                                 { VarnodeTpl *sym = (yyvsp[0].startsym)->getVarnode(); (yyval.varnode) = new VarnodeTpl(ConstTpl(ConstTpl::j_curspace),sym->getOffset(),ConstTpl(ConstTpl::j_curspace_size)); delete sym; }
     break;
 
-  case 249: /* jumpdest: ENDSYM  */
+  case 250: /* jumpdest: ENDSYM  */
                                 { VarnodeTpl *sym = (yyvsp[0].endsym)->getVarnode(); (yyval.varnode) = new VarnodeTpl(ConstTpl(ConstTpl::j_curspace),sym->getOffset(),ConstTpl(ConstTpl::j_curspace_size)); delete sym; }
     break;
 
-  case 250: /* jumpdest: NEXT2SYM  */
+  case 251: /* jumpdest: NEXT2SYM  */
                                 { VarnodeTpl *sym = (yyvsp[0].next2sym)->getVarnode(); (yyval.varnode) = new VarnodeTpl(ConstTpl(ConstTpl::j_curspace),sym->getOffset(),ConstTpl(ConstTpl::j_curspace_size)); delete sym; }
     break;
 
-  case 251: /* jumpdest: INTEGER  */
+  case 252: /* jumpdest: INTEGER  */
                                 { (yyval.varnode) = new VarnodeTpl(ConstTpl(ConstTpl::j_curspace),ConstTpl(ConstTpl::real,*(yyvsp[0].i)),ConstTpl(ConstTpl::j_curspace_size)); delete (yyvsp[0].i); }
     break;
 
-  case 252: /* jumpdest: BADINTEGER  */
+  case 253: /* jumpdest: BADINTEGER  */
                                 { (yyval.varnode) = new VarnodeTpl(ConstTpl(ConstTpl::j_curspace),ConstTpl(ConstTpl::real,0),ConstTpl(ConstTpl::j_curspace_size)); yyerror("Parsed integer is too big (overflow)"); }
     break;
 
-  case 253: /* jumpdest: OPERANDSYM  */
+  case 254: /* jumpdest: OPERANDSYM  */
                                 { (yyval.varnode) = (yyvsp[0].operandsym)->getVarnode(); (yyvsp[0].operandsym)->setCodeAddress(); }
     break;
 
-  case 254: /* jumpdest: INTEGER '[' SPACESYM ']'  */
+  case 255: /* jumpdest: INTEGER '[' SPACESYM ']'  */
                                 { AddrSpace *spc = (yyvsp[-1].spacesym)->getSpace(); (yyval.varnode) = new VarnodeTpl(ConstTpl(spc),ConstTpl(ConstTpl::real,*(yyvsp[-3].i)),ConstTpl(ConstTpl::real,spc->getAddrSize())); delete (yyvsp[-3].i); }
     break;
 
-  case 255: /* jumpdest: label  */
+  case 256: /* jumpdest: label  */
                                 { (yyval.varnode) = new VarnodeTpl(ConstTpl(slgh->getConstantSpace()),ConstTpl(ConstTpl::j_relative,(yyvsp[0].labelsym)->getIndex()),ConstTpl(ConstTpl::real,sizeof(uintm))); (yyvsp[0].labelsym)->incrementRefCount(); }
     break;
 
-  case 256: /* jumpdest: STRING  */
+  case 257: /* jumpdest: STRING  */
                                 { string errmsg = "Unknown jump destination: "+*(yyvsp[0].str); delete (yyvsp[0].str); yyerror(errmsg.c_str()); YYERROR; }
     break;
 
-  case 257: /* varnode: specificsymbol  */
+  case 258: /* varnode: specificsymbol  */
                                 { (yyval.varnode) = (yyvsp[0].specsym)->getVarnode(); }
     break;
 
-  case 258: /* varnode: integervarnode  */
+  case 259: /* varnode: integervarnode  */
                                 { (yyval.varnode) = (yyvsp[0].varnode); }
     break;
 
-  case 259: /* varnode: STRING  */
+  case 260: /* varnode: STRING  */
                                 { string errmsg = "Unknown varnode parameter: "+*(yyvsp[0].str); delete (yyvsp[0].str); yyerror(errmsg.c_str()); YYERROR; }
     break;
 
-  case 260: /* varnode: SUBTABLESYM  */
+  case 261: /* varnode: SUBTABLESYM  */
                                 { string errmsg = "Subtable not attached to operand: "+(yyvsp[0].subtablesym)->getName(); yyerror(errmsg.c_str()); YYERROR; }
     break;
 
-  case 261: /* integervarnode: INTEGER  */
+  case 262: /* integervarnode: INTEGER  */
                                 { (yyval.varnode) = new VarnodeTpl(ConstTpl(slgh->getConstantSpace()),ConstTpl(ConstTpl::real,*(yyvsp[0].i)),ConstTpl(ConstTpl::real,0)); delete (yyvsp[0].i); }
     break;
 
-  case 262: /* integervarnode: BADINTEGER  */
+  case 263: /* integervarnode: BADINTEGER  */
                                 { (yyval.varnode) = new VarnodeTpl(ConstTpl(slgh->getConstantSpace()),ConstTpl(ConstTpl::real,0),ConstTpl(ConstTpl::real,0)); yyerror("Parsed integer is too big (overflow)"); }
     break;
 
-  case 263: /* integervarnode: INTEGER ':' INTEGER  */
+  case 264: /* integervarnode: INTEGER ':' INTEGER  */
                                 { (yyval.varnode) = new VarnodeTpl(ConstTpl(slgh->getConstantSpace()),ConstTpl(ConstTpl::real,*(yyvsp[-2].i)),ConstTpl(ConstTpl::real,*(yyvsp[0].i))); delete (yyvsp[-2].i); delete (yyvsp[0].i); }
     break;
 
-  case 264: /* integervarnode: '&' varnode  */
+  case 265: /* integervarnode: '&' varnode  */
                                 { (yyval.varnode) = slgh->pcode.addressOf((yyvsp[0].varnode),0); }
     break;
 
-  case 265: /* integervarnode: '&' ':' INTEGER varnode  */
+  case 266: /* integervarnode: '&' ':' INTEGER varnode  */
                                 { (yyval.varnode) = slgh->pcode.addressOf((yyvsp[0].varnode),*(yyvsp[-1].i)); delete (yyvsp[-1].i); }
     break;
 
-  case 266: /* lhsvarnode: specificsymbol  */
+  case 267: /* lhsvarnode: specificsymbol  */
                                 { (yyval.varnode) = (yyvsp[0].specsym)->getVarnode(); }
     break;
 
-  case 267: /* lhsvarnode: STRING  */
+  case 268: /* lhsvarnode: STRING  */
                                 { string errmsg = "Unknown assignment varnode: "+*(yyvsp[0].str); delete (yyvsp[0].str); yyerror(errmsg.c_str()); YYERROR; }
     break;
 
-  case 268: /* lhsvarnode: SUBTABLESYM  */
+  case 269: /* lhsvarnode: SUBTABLESYM  */
                                 { string errmsg = "Subtable not attached to operand: "+(yyvsp[0].subtablesym)->getName(); yyerror(errmsg.c_str()); YYERROR; }
     break;
 
-  case 269: /* label: '<' LABELSYM '>'  */
+  case 270: /* label: '<' LABELSYM '>'  */
                                 { (yyval.labelsym) = (yyvsp[-1].labelsym); }
     break;
 
-  case 270: /* label: '<' STRING '>'  */
+  case 271: /* label: '<' STRING '>'  */
                                 { (yyval.labelsym) = slgh->pcode.defineLabel( (yyvsp[-1].str) ); }
     break;
 
-  case 271: /* exportvarnode: specificsymbol  */
+  case 272: /* exportvarnode: specificsymbol  */
                                 { (yyval.varnode) = (yyvsp[0].specsym)->getVarnode(); }
     break;
 
-  case 272: /* exportvarnode: '&' varnode  */
+  case 273: /* exportvarnode: '&' varnode  */
                                 { (yyval.varnode) = slgh->pcode.addressOf((yyvsp[0].varnode),0); }
     break;
 
-  case 273: /* exportvarnode: '&' ':' INTEGER varnode  */
+  case 274: /* exportvarnode: '&' ':' INTEGER varnode  */
                                 { (yyval.varnode) = slgh->pcode.addressOf((yyvsp[0].varnode),*(yyvsp[-1].i)); delete (yyvsp[-1].i); }
     break;
 
-  case 274: /* exportvarnode: INTEGER ':' INTEGER  */
+  case 275: /* exportvarnode: INTEGER ':' INTEGER  */
                                 { (yyval.varnode) = new VarnodeTpl(ConstTpl(slgh->getConstantSpace()),ConstTpl(ConstTpl::real,*(yyvsp[-2].i)),ConstTpl(ConstTpl::real,*(yyvsp[0].i))); delete (yyvsp[-2].i); delete (yyvsp[0].i); }
     break;
 
-  case 275: /* exportvarnode: STRING  */
+  case 276: /* exportvarnode: STRING  */
                                 { string errmsg="Unknown export varnode: "+*(yyvsp[0].str); delete (yyvsp[0].str); yyerror(errmsg.c_str()); YYERROR; }
     break;
 
-  case 276: /* exportvarnode: SUBTABLESYM  */
+  case 277: /* exportvarnode: SUBTABLESYM  */
                                 { string errmsg = "Subtable not attached to operand: "+(yyvsp[0].subtablesym)->getName(); yyerror(errmsg.c_str()); YYERROR; }
     break;
 
-  case 277: /* familysymbol: VALUESYM  */
+  case 278: /* familysymbol: VALUESYM  */
                                 { (yyval.famsym) = (yyvsp[0].valuesym); }
     break;
 
-  case 278: /* familysymbol: VALUEMAPSYM  */
+  case 279: /* familysymbol: VALUEMAPSYM  */
                                 { (yyval.famsym) = (yyvsp[0].valuemapsym); }
     break;
 
-  case 279: /* familysymbol: CONTEXTSYM  */
+  case 280: /* familysymbol: CONTEXTSYM  */
                                 { (yyval.famsym) = (yyvsp[0].contextsym); }
     break;
 
-  case 280: /* familysymbol: NAMESYM  */
+  case 281: /* familysymbol: NAMESYM  */
                                 { (yyval.famsym) = (yyvsp[0].namesym); }
     break;
 
-  case 281: /* familysymbol: VARLISTSYM  */
+  case 282: /* familysymbol: VARLISTSYM  */
                                 { (yyval.famsym) = (yyvsp[0].varlistsym); }
     break;
 
-  case 282: /* specificsymbol: VARSYM  */
+  case 283: /* specificsymbol: VARSYM  */
                                 { (yyval.specsym) = (yyvsp[0].varsym); }
     break;
 
-  case 283: /* specificsymbol: SPECSYM  */
+  case 284: /* specificsymbol: SPECSYM  */
                                 { (yyval.specsym) = (yyvsp[0].specsym); }
     break;
 
-  case 284: /* specificsymbol: OPERANDSYM  */
+  case 285: /* specificsymbol: OPERANDSYM  */
                                 { (yyval.specsym) = (yyvsp[0].operandsym); }
     break;
 
-  case 285: /* specificsymbol: STARTSYM  */
+  case 286: /* specificsymbol: STARTSYM  */
                                 { (yyval.specsym) = (yyvsp[0].startsym); }
     break;
 
-  case 286: /* specificsymbol: ENDSYM  */
+  case 287: /* specificsymbol: ENDSYM  */
                                 { (yyval.specsym) = (yyvsp[0].endsym); }
     break;
 
-  case 287: /* specificsymbol: NEXT2SYM  */
+  case 288: /* specificsymbol: NEXT2SYM  */
                                 { (yyval.specsym) = (yyvsp[0].next2sym); }
     break;
 
-  case 288: /* charstring: CHAR  */
+  case 289: /* charstring: CHAR  */
                                 { (yyval.str) = new string; (*(yyval.str)) += (yyvsp[0].ch); }
     break;
 
-  case 289: /* charstring: charstring CHAR  */
+  case 290: /* charstring: charstring CHAR  */
                                 { (yyval.str) = (yyvsp[-1].str); (*(yyval.str)) += (yyvsp[0].ch); }
     break;
 
-  case 290: /* intblist: '[' intbpart ']'  */
+  case 291: /* intblist: '[' intbpart ']'  */
                                 { (yyval.biglist) = (yyvsp[-1].biglist); }
     break;
 
-  case 291: /* intblist: INTEGER  */
+  case 292: /* intblist: INTEGER  */
                                 { (yyval.biglist) = new vector<intb>; (yyval.biglist)->push_back(intb(*(yyvsp[0].i))); delete (yyvsp[0].i); }
     break;
 
-  case 292: /* intblist: '-' INTEGER  */
+  case 293: /* intblist: '-' INTEGER  */
                                 { (yyval.biglist) = new vector<intb>; (yyval.biglist)->push_back(-intb(*(yyvsp[0].i))); delete (yyvsp[0].i); }
     break;
 
-  case 293: /* intbpart: INTEGER  */
+  case 294: /* intbpart: INTEGER  */
                                 { (yyval.biglist) = new vector<intb>; (yyval.biglist)->push_back(intb(*(yyvsp[0].i))); delete (yyvsp[0].i); }
     break;
 
-  case 294: /* intbpart: '-' INTEGER  */
+  case 295: /* intbpart: '-' INTEGER  */
                                 { (yyval.biglist) = new vector<intb>; (yyval.biglist)->push_back(-intb(*(yyvsp[0].i))); delete (yyvsp[0].i); }
     break;
 
-  case 295: /* intbpart: STRING  */
+  case 296: /* intbpart: STRING  */
                                 { if (*(yyvsp[0].str)!="_") { string errmsg = "Expecting integer but saw: "+*(yyvsp[0].str); delete (yyvsp[0].str); yyerror(errmsg.c_str()); YYERROR; }
                                   (yyval.biglist) = new vector<intb>; (yyval.biglist)->push_back((intb)0xBADBEEF); delete (yyvsp[0].str); }
     break;
 
-  case 296: /* intbpart: intbpart INTEGER  */
+  case 297: /* intbpart: intbpart INTEGER  */
                                 { (yyval.biglist) = (yyvsp[-1].biglist); (yyval.biglist)->push_back(intb(*(yyvsp[0].i))); delete (yyvsp[0].i); }
     break;
 
-  case 297: /* intbpart: intbpart '-' INTEGER  */
+  case 298: /* intbpart: intbpart '-' INTEGER  */
                                 { (yyval.biglist) = (yyvsp[-2].biglist); (yyval.biglist)->push_back(-intb(*(yyvsp[0].i))); delete (yyvsp[0].i); }
     break;
 
-  case 298: /* intbpart: intbpart STRING  */
+  case 299: /* intbpart: intbpart STRING  */
                                 { if (*(yyvsp[0].str)!="_") { string errmsg = "Expecting integer but saw: "+*(yyvsp[0].str); delete (yyvsp[0].str); yyerror(errmsg.c_str()); YYERROR; }
                                   (yyval.biglist) = (yyvsp[-1].biglist); (yyval.biglist)->push_back((intb)0xBADBEEF); delete (yyvsp[0].str); }
     break;
 
-  case 299: /* stringlist: '[' stringpart ']'  */
+  case 300: /* stringlist: '[' stringpart ']'  */
                                 { (yyval.strlist) = (yyvsp[-1].strlist); }
     break;
 
-  case 300: /* stringlist: STRING  */
+  case 301: /* stringlist: STRING  */
                                 { (yyval.strlist) = new vector<string>; (yyval.strlist)->push_back(*(yyvsp[0].str)); delete (yyvsp[0].str); }
     break;
 
-  case 301: /* stringpart: STRING  */
+  case 302: /* stringpart: STRING  */
                                 { (yyval.strlist) = new vector<string>; (yyval.strlist)->push_back( *(yyvsp[0].str) ); delete (yyvsp[0].str); }
     break;
 
-  case 302: /* stringpart: stringpart STRING  */
+  case 303: /* stringpart: stringpart STRING  */
                                 { (yyval.strlist) = (yyvsp[-1].strlist); (yyval.strlist)->push_back(*(yyvsp[0].str)); delete (yyvsp[0].str); }
     break;
 
-  case 303: /* stringpart: stringpart anysymbol  */
+  case 304: /* stringpart: stringpart anysymbol  */
                                 { string errmsg = (yyvsp[0].anysym)->getName()+": redefined"; yyerror(errmsg.c_str()); YYERROR; }
     break;
 
-  case 304: /* anystringlist: '[' anystringpart ']'  */
+  case 305: /* anystringlist: '[' anystringpart ']'  */
                                      { (yyval.strlist) = (yyvsp[-1].strlist); }
     break;
 
-  case 305: /* anystringpart: STRING  */
+  case 306: /* anystringpart: STRING  */
                                 { (yyval.strlist) = new vector<string>; (yyval.strlist)->push_back( *(yyvsp[0].str) ); delete (yyvsp[0].str); }
     break;
 
-  case 306: /* anystringpart: anysymbol  */
+  case 307: /* anystringpart: anysymbol  */
                                 { (yyval.strlist) = new vector<string>; (yyval.strlist)->push_back( (yyvsp[0].anysym)->getName() ); }
     break;
 
-  case 307: /* anystringpart: anystringpart STRING  */
+  case 308: /* anystringpart: anystringpart STRING  */
                                 { (yyval.strlist) = (yyvsp[-1].strlist); (yyval.strlist)->push_back(*(yyvsp[0].str)); delete (yyvsp[0].str); }
     break;
 
-  case 308: /* anystringpart: anystringpart anysymbol  */
+  case 309: /* anystringpart: anystringpart anysymbol  */
                                 { (yyval.strlist) = (yyvsp[-1].strlist); (yyval.strlist)->push_back((yyvsp[0].anysym)->getName()); }
     break;
 
-  case 309: /* valuelist: '[' valuepart ']'  */
+  case 310: /* valuelist: '[' valuepart ']'  */
                                 { (yyval.symlist) = (yyvsp[-1].symlist); }
     break;
 
-  case 310: /* valuelist: VALUESYM  */
+  case 311: /* valuelist: VALUESYM  */
                                 { (yyval.symlist) = new vector<SleighSymbol *>; (yyval.symlist)->push_back((yyvsp[0].valuesym)); }
     break;
 
-  case 311: /* valuelist: CONTEXTSYM  */
+  case 312: /* valuelist: CONTEXTSYM  */
                                 { (yyval.symlist) = new vector<SleighSymbol *>; (yyval.symlist)->push_back((yyvsp[0].contextsym)); }
     break;
 
-  case 312: /* valuepart: VALUESYM  */
+  case 313: /* valuepart: VALUESYM  */
                                 { (yyval.symlist) = new vector<SleighSymbol *>; (yyval.symlist)->push_back( (yyvsp[0].valuesym) ); }
     break;
 
-  case 313: /* valuepart: CONTEXTSYM  */
+  case 314: /* valuepart: CONTEXTSYM  */
                                 { (yyval.symlist) = new vector<SleighSymbol *>; (yyval.symlist)->push_back((yyvsp[0].contextsym)); }
     break;
 
-  case 314: /* valuepart: valuepart VALUESYM  */
+  case 315: /* valuepart: valuepart VALUESYM  */
                                 { (yyval.symlist) = (yyvsp[-1].symlist); (yyval.symlist)->push_back((yyvsp[0].valuesym)); }
     break;
 
-  case 315: /* valuepart: valuepart CONTEXTSYM  */
+  case 316: /* valuepart: valuepart CONTEXTSYM  */
                                 { (yyval.symlist) = (yyvsp[-1].symlist); (yyval.symlist)->push_back((yyvsp[0].contextsym)); }
     break;
 
-  case 316: /* valuepart: valuepart STRING  */
+  case 317: /* valuepart: valuepart STRING  */
                                 { string errmsg = *(yyvsp[0].str)+": is not a value pattern"; delete (yyvsp[0].str); yyerror(errmsg.c_str()); YYERROR; }
     break;
 
-  case 317: /* varlist: '[' varpart ']'  */
+  case 318: /* varlist: '[' varpart ']'  */
                                 { (yyval.symlist) = (yyvsp[-1].symlist); }
     break;
 
-  case 318: /* varlist: VARSYM  */
+  case 319: /* varlist: VARSYM  */
                                 { (yyval.symlist) = new vector<SleighSymbol *>; (yyval.symlist)->push_back((yyvsp[0].varsym)); }
     break;
 
-  case 319: /* varpart: VARSYM  */
+  case 320: /* varpart: VARSYM  */
                                 { (yyval.symlist) = new vector<SleighSymbol *>; (yyval.symlist)->push_back((yyvsp[0].varsym)); }
     break;
 
-  case 320: /* varpart: STRING  */
+  case 321: /* varpart: STRING  */
                                 { if (*(yyvsp[0].str)!="_") { string errmsg = *(yyvsp[0].str)+": is not a varnode symbol"; delete (yyvsp[0].str); yyerror(errmsg.c_str()); YYERROR; }
 				  (yyval.symlist) = new vector<SleighSymbol *>; (yyval.symlist)->push_back((SleighSymbol *)0); delete (yyvsp[0].str); }
     break;
 
-  case 321: /* varpart: varpart VARSYM  */
+  case 322: /* varpart: varpart VARSYM  */
                                 { (yyval.symlist) = (yyvsp[-1].symlist); (yyval.symlist)->push_back((yyvsp[0].varsym)); }
     break;
 
-  case 322: /* varpart: varpart STRING  */
+  case 323: /* varpart: varpart STRING  */
                                 { if (*(yyvsp[0].str)!="_") { string errmsg = *(yyvsp[0].str)+": is not a varnode symbol"; delete (yyvsp[0].str); yyerror(errmsg.c_str()); YYERROR; }
                                   (yyval.symlist) = (yyvsp[-1].symlist); (yyval.symlist)->push_back((SleighSymbol *)0); delete (yyvsp[0].str); }
     break;
 
-  case 323: /* paramlist: %empty  */
+  case 324: /* paramlist: %empty  */
                                 { (yyval.param) = new vector<ExprTree *>; }
     break;
 
-  case 324: /* paramlist: expr  */
+  case 325: /* paramlist: expr  */
                                 { (yyval.param) = new vector<ExprTree *>; (yyval.param)->push_back((yyvsp[0].tree)); }
     break;
 
-  case 325: /* paramlist: paramlist ',' expr  */
+  case 326: /* paramlist: paramlist ',' expr  */
                                 { (yyval.param) = (yyvsp[-2].param); (yyval.param)->push_back((yyvsp[0].tree)); }
     break;
 
-  case 326: /* oplist: %empty  */
+  case 327: /* oplist: %empty  */
                                 { (yyval.strlist) = new vector<string>; }
     break;
 
-  case 327: /* oplist: STRING  */
+  case 328: /* oplist: STRING  */
                                 { (yyval.strlist) = new vector<string>; (yyval.strlist)->push_back(*(yyvsp[0].str)); delete (yyvsp[0].str); }
     break;
 
-  case 328: /* oplist: oplist ',' STRING  */
+  case 329: /* oplist: oplist ',' STRING  */
                                 { (yyval.strlist) = (yyvsp[-2].strlist); (yyval.strlist)->push_back(*(yyvsp[0].str)); delete (yyvsp[0].str); }
     break;
 
-  case 329: /* anysymbol: SPACESYM  */
+  case 330: /* anysymbol: SPACESYM  */
                                 { (yyval.anysym) = (yyvsp[0].spacesym); }
     break;
 
-  case 330: /* anysymbol: SECTIONSYM  */
+  case 331: /* anysymbol: SECTIONSYM  */
                                 { (yyval.anysym) = (yyvsp[0].sectionsym); }
     break;
 
-  case 331: /* anysymbol: TOKENSYM  */
+  case 332: /* anysymbol: TOKENSYM  */
                                 { (yyval.anysym) = (yyvsp[0].tokensym); }
     break;
 
-  case 332: /* anysymbol: USEROPSYM  */
+  case 333: /* anysymbol: USEROPSYM  */
                                 { (yyval.anysym) = (yyvsp[0].useropsym); }
     break;
 
-  case 333: /* anysymbol: MACROSYM  */
+  case 334: /* anysymbol: MACROSYM  */
                                 { (yyval.anysym) = (yyvsp[0].macrosym); }
     break;
 
-  case 334: /* anysymbol: SUBTABLESYM  */
+  case 335: /* anysymbol: SUBTABLESYM  */
                                 { (yyval.anysym) = (yyvsp[0].subtablesym); }
     break;
 
-  case 335: /* anysymbol: VALUESYM  */
+  case 336: /* anysymbol: VALUESYM  */
                                 { (yyval.anysym) = (yyvsp[0].valuesym); }
     break;
 
-  case 336: /* anysymbol: VALUEMAPSYM  */
+  case 337: /* anysymbol: VALUEMAPSYM  */
                                 { (yyval.anysym) = (yyvsp[0].valuemapsym); }
     break;
 
-  case 337: /* anysymbol: CONTEXTSYM  */
+  case 338: /* anysymbol: CONTEXTSYM  */
                                 { (yyval.anysym) = (yyvsp[0].contextsym); }
     break;
 
-  case 338: /* anysymbol: NAMESYM  */
+  case 339: /* anysymbol: NAMESYM  */
                                 { (yyval.anysym) = (yyvsp[0].namesym); }
     break;
 
-  case 339: /* anysymbol: VARSYM  */
+  case 340: /* anysymbol: VARSYM  */
                                 { (yyval.anysym) = (yyvsp[0].varsym); }
     break;
 
-  case 340: /* anysymbol: VARLISTSYM  */
+  case 341: /* anysymbol: VARLISTSYM  */
                                 { (yyval.anysym) = (yyvsp[0].varlistsym); }
     break;
 
-  case 341: /* anysymbol: OPERANDSYM  */
+  case 342: /* anysymbol: OPERANDSYM  */
                                 { (yyval.anysym) = (yyvsp[0].operandsym); }
     break;
 
-  case 342: /* anysymbol: STARTSYM  */
+  case 343: /* anysymbol: STARTSYM  */
                                 { (yyval.anysym) = (yyvsp[0].startsym); }
     break;
 
-  case 343: /* anysymbol: ENDSYM  */
+  case 344: /* anysymbol: ENDSYM  */
                                 { (yyval.anysym) = (yyvsp[0].endsym); }
     break;
 
-  case 344: /* anysymbol: NEXT2SYM  */
+  case 345: /* anysymbol: NEXT2SYM  */
                                 { (yyval.anysym) = (yyvsp[0].next2sym); }
     break;
 
-  case 345: /* anysymbol: BITSYM  */
+  case 346: /* anysymbol: BITSYM  */
                                 { (yyval.anysym) = (yyvsp[0].bitsym); }
     break;
 
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.hh
index 633bb0266..80920cefb 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.hh
@@ -101,73 +101,74 @@ extern int yydebug;
     OP_CPOOLREF = 302,             /* OP_CPOOLREF  */
     OP_NEW = 303,                  /* OP_NEW  */
     OP_POPCOUNT = 304,             /* OP_POPCOUNT  */
-    BADINTEGER = 305,              /* BADINTEGER  */
-    GOTO_KEY = 306,                /* GOTO_KEY  */
-    CALL_KEY = 307,                /* CALL_KEY  */
-    RETURN_KEY = 308,              /* RETURN_KEY  */
-    IF_KEY = 309,                  /* IF_KEY  */
-    DEFINE_KEY = 310,              /* DEFINE_KEY  */
-    ATTACH_KEY = 311,              /* ATTACH_KEY  */
-    MACRO_KEY = 312,               /* MACRO_KEY  */
-    SPACE_KEY = 313,               /* SPACE_KEY  */
-    TYPE_KEY = 314,                /* TYPE_KEY  */
-    RAM_KEY = 315,                 /* RAM_KEY  */
-    DEFAULT_KEY = 316,             /* DEFAULT_KEY  */
-    REGISTER_KEY = 317,            /* REGISTER_KEY  */
-    ENDIAN_KEY = 318,              /* ENDIAN_KEY  */
-    WITH_KEY = 319,                /* WITH_KEY  */
-    ALIGN_KEY = 320,               /* ALIGN_KEY  */
-    OP_UNIMPL = 321,               /* OP_UNIMPL  */
-    TOKEN_KEY = 322,               /* TOKEN_KEY  */
-    SIGNED_KEY = 323,              /* SIGNED_KEY  */
-    NOFLOW_KEY = 324,              /* NOFLOW_KEY  */
-    HEX_KEY = 325,                 /* HEX_KEY  */
-    DEC_KEY = 326,                 /* DEC_KEY  */
-    OCT_KEY = 327,                 /* OCT_KEY  */
-    BIN_KEY = 328,                 /* BIN_KEY  */
-    BIG_KEY = 329,                 /* BIG_KEY  */
-    LITTLE_KEY = 330,              /* LITTLE_KEY  */
-    SIZE_KEY = 331,                /* SIZE_KEY  */
-    WORDSIZE_KEY = 332,            /* WORDSIZE_KEY  */
-    OFFSET_KEY = 333,              /* OFFSET_KEY  */
-    NAMES_KEY = 334,               /* NAMES_KEY  */
-    VALUES_KEY = 335,              /* VALUES_KEY  */
-    VARIABLES_KEY = 336,           /* VARIABLES_KEY  */
-    PCODEOP_KEY = 337,             /* PCODEOP_KEY  */
-    IS_KEY = 338,                  /* IS_KEY  */
-    LOCAL_KEY = 339,               /* LOCAL_KEY  */
-    DELAYSLOT_KEY = 340,           /* DELAYSLOT_KEY  */
-    CROSSBUILD_KEY = 341,          /* CROSSBUILD_KEY  */
-    EXPORT_KEY = 342,              /* EXPORT_KEY  */
-    BUILD_KEY = 343,               /* BUILD_KEY  */
-    CONTEXT_KEY = 344,             /* CONTEXT_KEY  */
-    ELLIPSIS_KEY = 345,            /* ELLIPSIS_KEY  */
-    GLOBALSET_KEY = 346,           /* GLOBALSET_KEY  */
-    BITRANGE_KEY = 347,            /* BITRANGE_KEY  */
-    CHAR = 348,                    /* CHAR  */
-    INTEGER = 349,                 /* INTEGER  */
-    INTB = 350,                    /* INTB  */
-    STRING = 351,                  /* STRING  */
-    SYMBOLSTRING = 352,            /* SYMBOLSTRING  */
-    SPACESYM = 353,                /* SPACESYM  */
-    SECTIONSYM = 354,              /* SECTIONSYM  */
-    TOKENSYM = 355,                /* TOKENSYM  */
-    USEROPSYM = 356,               /* USEROPSYM  */
-    VALUESYM = 357,                /* VALUESYM  */
-    VALUEMAPSYM = 358,             /* VALUEMAPSYM  */
-    CONTEXTSYM = 359,              /* CONTEXTSYM  */
-    NAMESYM = 360,                 /* NAMESYM  */
-    VARSYM = 361,                  /* VARSYM  */
-    BITSYM = 362,                  /* BITSYM  */
-    SPECSYM = 363,                 /* SPECSYM  */
-    VARLISTSYM = 364,              /* VARLISTSYM  */
-    OPERANDSYM = 365,              /* OPERANDSYM  */
-    STARTSYM = 366,                /* STARTSYM  */
-    ENDSYM = 367,                  /* ENDSYM  */
-    NEXT2SYM = 368,                /* NEXT2SYM  */
-    MACROSYM = 369,                /* MACROSYM  */
-    LABELSYM = 370,                /* LABELSYM  */
-    SUBTABLESYM = 371              /* SUBTABLESYM  */
+    OP_COUNTLEADINGZEROS = 305,    /* OP_COUNTLEADINGZEROS  */
+    BADINTEGER = 306,              /* BADINTEGER  */
+    GOTO_KEY = 307,                /* GOTO_KEY  */
+    CALL_KEY = 308,                /* CALL_KEY  */
+    RETURN_KEY = 309,              /* RETURN_KEY  */
+    IF_KEY = 310,                  /* IF_KEY  */
+    DEFINE_KEY = 311,              /* DEFINE_KEY  */
+    ATTACH_KEY = 312,              /* ATTACH_KEY  */
+    MACRO_KEY = 313,               /* MACRO_KEY  */
+    SPACE_KEY = 314,               /* SPACE_KEY  */
+    TYPE_KEY = 315,                /* TYPE_KEY  */
+    RAM_KEY = 316,                 /* RAM_KEY  */
+    DEFAULT_KEY = 317,             /* DEFAULT_KEY  */
+    REGISTER_KEY = 318,            /* REGISTER_KEY  */
+    ENDIAN_KEY = 319,              /* ENDIAN_KEY  */
+    WITH_KEY = 320,                /* WITH_KEY  */
+    ALIGN_KEY = 321,               /* ALIGN_KEY  */
+    OP_UNIMPL = 322,               /* OP_UNIMPL  */
+    TOKEN_KEY = 323,               /* TOKEN_KEY  */
+    SIGNED_KEY = 324,              /* SIGNED_KEY  */
+    NOFLOW_KEY = 325,              /* NOFLOW_KEY  */
+    HEX_KEY = 326,                 /* HEX_KEY  */
+    DEC_KEY = 327,                 /* DEC_KEY  */
+    OCT_KEY = 328,                 /* OCT_KEY  */
+    BIN_KEY = 329,                 /* BIN_KEY  */
+    BIG_KEY = 330,                 /* BIG_KEY  */
+    LITTLE_KEY = 331,              /* LITTLE_KEY  */
+    SIZE_KEY = 332,                /* SIZE_KEY  */
+    WORDSIZE_KEY = 333,            /* WORDSIZE_KEY  */
+    OFFSET_KEY = 334,              /* OFFSET_KEY  */
+    NAMES_KEY = 335,               /* NAMES_KEY  */
+    VALUES_KEY = 336,              /* VALUES_KEY  */
+    VARIABLES_KEY = 337,           /* VARIABLES_KEY  */
+    PCODEOP_KEY = 338,             /* PCODEOP_KEY  */
+    IS_KEY = 339,                  /* IS_KEY  */
+    LOCAL_KEY = 340,               /* LOCAL_KEY  */
+    DELAYSLOT_KEY = 341,           /* DELAYSLOT_KEY  */
+    CROSSBUILD_KEY = 342,          /* CROSSBUILD_KEY  */
+    EXPORT_KEY = 343,              /* EXPORT_KEY  */
+    BUILD_KEY = 344,               /* BUILD_KEY  */
+    CONTEXT_KEY = 345,             /* CONTEXT_KEY  */
+    ELLIPSIS_KEY = 346,            /* ELLIPSIS_KEY  */
+    GLOBALSET_KEY = 347,           /* GLOBALSET_KEY  */
+    BITRANGE_KEY = 348,            /* BITRANGE_KEY  */
+    CHAR = 349,                    /* CHAR  */
+    INTEGER = 350,                 /* INTEGER  */
+    INTB = 351,                    /* INTB  */
+    STRING = 352,                  /* STRING  */
+    SYMBOLSTRING = 353,            /* SYMBOLSTRING  */
+    SPACESYM = 354,                /* SPACESYM  */
+    SECTIONSYM = 355,              /* SECTIONSYM  */
+    TOKENSYM = 356,                /* TOKENSYM  */
+    USEROPSYM = 357,               /* USEROPSYM  */
+    VALUESYM = 358,                /* VALUESYM  */
+    VALUEMAPSYM = 359,             /* VALUEMAPSYM  */
+    CONTEXTSYM = 360,              /* CONTEXTSYM  */
+    NAMESYM = 361,                 /* NAMESYM  */
+    VARSYM = 362,                  /* VARSYM  */
+    BITSYM = 363,                  /* BITSYM  */
+    SPECSYM = 364,                 /* SPECSYM  */
+    VARLISTSYM = 365,              /* VARLISTSYM  */
+    OPERANDSYM = 366,              /* OPERANDSYM  */
+    STARTSYM = 367,                /* STARTSYM  */
+    ENDSYM = 368,                  /* ENDSYM  */
+    NEXT2SYM = 369,                /* NEXT2SYM  */
+    MACROSYM = 370,                /* MACROSYM  */
+    LABELSYM = 371,                /* LABELSYM  */
+    SUBTABLESYM = 372              /* SUBTABLESYM  */
   };
   typedef enum yytokentype yytoken_kind_t;
 #endif
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.y b/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.y
index aae36de32..7ef0bbaee 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.y
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.y
@@ -94,7 +94,7 @@
 %right '!' '~'
 %token OP_ZEXT OP_CARRY OP_BORROW OP_SEXT OP_SCARRY OP_SBORROW OP_NAN OP_ABS
 %token OP_SQRT OP_CEIL OP_FLOOR OP_ROUND OP_INT2FLOAT OP_FLOAT2FLOAT
-%token OP_TRUNC OP_CPOOLREF OP_NEW OP_POPCOUNT
+%token OP_TRUNC OP_CPOOLREF OP_NEW OP_POPCOUNT OP_COUNTLEADINGZEROS
 
 %token BADINTEGER GOTO_KEY CALL_KEY RETURN_KEY IF_KEY
 %token DEFINE_KEY ATTACH_KEY MACRO_KEY SPACE_KEY TYPE_KEY RAM_KEY DEFAULT_KEY
@@ -448,6 +448,7 @@ expr: varnode { $$ = new ExprTree($1); }
   | OP_NEW '(' expr ')'     { $$ = slgh->pcode.createOp(CPUI_NEW,$3); }
   | OP_NEW '(' expr ',' expr ')' { $$ = slgh->pcode.createOp(CPUI_NEW,$3,$5); }
   | OP_POPCOUNT '(' expr ')' { $$ = slgh->pcode.createOp(CPUI_POPCOUNT,$3); }
+  | OP_COUNTLEADINGZEROS '(' expr ')' { $$ = slgh->pcode.createOp(CPUI_COUNTLEADINGZEROS,$3); }
   | specificsymbol '(' integervarnode ')' { $$ = slgh->pcode.createOp(CPUI_SUBPIECE,new ExprTree($1->getVarnode()),new ExprTree($3)); }
   | specificsymbol ':' INTEGER	{ $$ = slgh->pcode.createBitRange($1,0,(uint4)(*$3 * 8)); delete $3; }
   | specificsymbol '[' INTEGER ',' INTEGER ']' { $$ = slgh->pcode.createBitRange($1,(uint4)*$3,(uint4)*$5); delete $3, delete $5; }
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.cc
index 816e9b7d8..8ce2ead94 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.cc
@@ -367,8 +367,8 @@ static void yynoreturn yy_fatal_error ( const char* msg  );
 		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
 	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
 	(yy_c_buf_p) = yy_cp;
-#define YY_NUM_RULES 166
-#define YY_END_OF_BUFFER 167
+#define YY_NUM_RULES 167
+#define YY_END_OF_BUFFER 168
 /* This struct is not used in this scanner,
    but its presence is necessary. */
 struct yy_trans_info
@@ -376,10 +376,10 @@ struct yy_trans_info
 	flex_int32_t yy_verify;
 	flex_int32_t yy_nxt;
 	};
-static const flex_int16_t yy_accept[530] =
+static const flex_int16_t yy_accept[546] =
     {   0,
         0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-        0,    0,    0,    0,  167,   14,    7,    8,    6,   14,
+        0,    0,    0,    0,  168,   14,    7,    8,    6,   14,
         3,   13,    4,   13,   13,   13,   13,    5,    1,   60,
        58,   59,   60,   52,   60,   25,   53,   54,   54,   26,
        53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
@@ -387,12 +387,12 @@ static const flex_int16_t yy_accept[530] =
        17,   19,   18,   15,   70,   68,   69,   63,   70,   63,
        66,   64,   66,   61,   98,   96,   97,   98,   91,   98,
        87,   90,   92,   93,   93,   90,   90,   92,   85,   86,
-       89,   92,   92,   73,   88,   71,  163,  161,  162,  155,
+       89,   92,   92,   73,   88,   71,  164,  162,  163,  156,
 
-      156,  163,  155,  155,  157,  158,  158,  155,  155,  155,
-      155,  157,  157,  157,  157,  157,  157,  157,  157,  157,
-      157,  157,  157,  157,  157,  157,  155,  101,   99,  166,
-      166,  165,  164,    7,    6,    0,   13,   13,   13,   13,
+      157,  164,  156,  156,  158,  159,  159,  156,  156,  156,
+      156,  158,  158,  158,  158,  158,  158,  158,  158,  158,
+      158,  158,  158,  158,  158,  158,  156,  101,   99,  167,
+      167,  166,  165,    7,    6,    0,   13,   13,   13,   13,
        13,    1,    1,   58,    0,   57,   52,    0,   53,    0,
         0,   54,   53,   53,   53,   53,   53,   53,   53,   53,
        53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
@@ -400,42 +400,44 @@ static const flex_int16_t yy_accept[530] =
         0,   67,    0,   66,   65,   61,   61,   96,   78,   91,
         0,    0,    0,    0,   92,   92,    0,    0,   93,   77,
 
-       79,   80,   76,   92,   92,   71,   71,  161,  108,  156,
-        0,  103,  157,    0,    0,  158,  106,  109,  107,  110,
-      105,  104,  157,  157,  157,  157,  157,  157,  157,  157,
-      157,    0,  120,  118,  119,  121,  124,    0,  125,  157,
-      157,  146,  157,  157,  157,  157,  157,  157,  157,  112,
-      111,  114,  115,  157,  157,  157,  157,  157,  157,  102,
-       99,   99,    0,  165,  164,  164,    0,   13,   13,   13,
-       13,    0,   56,   55,   53,   43,   40,   53,   53,   38,
-       53,   53,   37,   53,   53,   53,   39,   53,   53,   53,
-       53,   53,   53,   53,   53,   53,   53,   53,   53,    0,
-
-        0,    0,    0,   82,    0,   84,   95,   94,   92,   92,
-        0,  160,  159,  135,  157,  157,  157,  157,  157,  157,
-      157,  157,  157,  123,  126,  122,  127,  157,  157,  157,
-      157,  134,  157,  157,  157,  157,  116,  117,  113,  157,
-      157,  157,  157,  157,  157,    2,    0,   13,   13,   13,
-       12,   24,    0,   53,   53,   53,   53,   53,   53,   53,
-       53,   53,   53,   53,   53,   53,   45,   53,   53,   28,
-       53,   53,   53,   16,    0,   62,    0,   72,    0,   81,
-       83,   92,   92,  100,    0,  157,  157,  148,  157,  137,
-      157,  157,  157,  157,  157,  157,  147,  157,  157,  157,
-
-      157,  157,  157,  157,  157,  131,  136,  157,  128,   13,
-       13,    9,   53,   53,   53,   53,   53,   53,   48,   53,
-       53,   53,   53,   53,   53,   27,   32,   53,   53,   53,
-       92,   92,  157,  153,  129,  143,  157,  157,  157,  157,
-      138,  157,  154,  157,  157,  157,  139,  157,  157,  142,
-       11,   10,   53,   53,   53,   53,   41,   44,   36,   47,
-       53,   53,   53,   35,   49,   53,   53,   92,   74,  130,
-      157,  157,  152,  157,  157,  157,  157,  149,  157,  132,
-       53,   53,   33,   30,   51,   53,   53,   53,   53,   92,
-      157,  157,  157,  157,  157,  157,  133,   53,   34,   53,
-
-       53,   53,   46,   92,  157,  157,  157,  157,  157,  145,
-       42,   29,   53,   50,   75,  157,  150,  157,  140,  144,
-       53,  151,  157,   53,  141,   53,   53,   31,    0
+       79,   80,   76,   92,   92,   71,   71,  162,  108,  157,
+        0,  103,  158,    0,    0,  159,  106,  109,  107,  110,
+      105,  104,  158,  158,  158,  158,  158,  158,  158,  158,
+      158,  158,    0,  120,  118,  119,  121,  124,    0,  125,
+      158,  158,  147,  158,  158,  158,  158,  158,  158,  158,
+      112,  111,  114,  115,  158,  158,  158,  158,  158,  158,
+      102,   99,   99,    0,  166,  165,  165,    0,   13,   13,
+       13,   13,    0,   56,   55,   53,   43,   40,   53,   53,
+       38,   53,   53,   37,   53,   53,   53,   39,   53,   53,
+       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
+
+        0,    0,    0,    0,   82,    0,   84,   95,   94,   92,
+       92,    0,  161,  160,  135,  158,  158,  158,  158,  158,
+      158,  158,  158,  158,  158,  123,  126,  122,  127,  158,
+      158,  158,  158,  134,  158,  158,  158,  158,  116,  117,
+      113,  158,  158,  158,  158,  158,  158,    2,    0,   13,
+       13,   13,   12,   24,    0,   53,   53,   53,   53,   53,
+       53,   53,   53,   53,   53,   53,   53,   53,   45,   53,
+       53,   28,   53,   53,   53,   16,    0,   62,    0,   72,
+        0,   81,   83,   92,   92,  100,    0,  158,  158,  149,
+      158,  137,  158,  158,  158,  158,  158,  158,  158,  148,
+
+      158,  158,  158,  158,  158,  158,  158,  158,  131,  136,
+      158,  128,   13,   13,    9,   53,   53,   53,   53,   53,
+       53,   48,   53,   53,   53,   53,   53,   53,   27,   32,
+       53,   53,   53,   92,   92,  158,  154,  129,  158,  143,
+      158,  158,  158,  158,  138,  158,  155,  158,  158,  158,
+      139,  158,  158,  142,   11,   10,   53,   53,   53,   53,
+       41,   44,   36,   47,   53,   53,   53,   35,   49,   53,
+       53,   92,   74,  130,  158,  158,  158,  153,  158,  158,
+      158,  158,  150,  158,  132,   53,   53,   33,   30,   51,
+       53,   53,   53,   53,   92,  158,  158,  158,  158,  158,
+
+      158,  158,  133,   53,   34,   53,   53,   53,   46,   92,
+      158,  158,  158,  158,  158,  158,  145,   42,   29,   53,
+       50,   75,  158,  158,  151,  158,  140,  144,   53,  158,
+      152,  158,   53,  158,  141,   53,  158,   53,  158,   31,
+      158,  158,  158,  146,    0
     } ;
 
 static const YY_CHAR yy_ec[256] =
@@ -447,13 +449,13 @@ static const YY_CHAR yy_ec[256] =
        13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
        23,   23,   23,   23,   23,   23,   23,   24,   25,   26,
        27,   28,   29,   30,   31,   31,   31,   31,   31,   31,
-       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
-       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
-       33,   11,   34,   35,   36,   11,   37,   38,   39,   40,
+       32,   32,   32,   32,   32,   33,   32,   32,   32,   32,
+       32,   32,   32,   32,   32,   32,   32,   32,   32,   34,
+       35,   11,   36,   37,   38,   11,   39,   40,   41,   42,
 
-       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
-       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
-       61,   62,   63,   64,   65,   66,    1,   11,   11,   11,
+       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
+       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
+       63,   64,   65,   66,   67,   68,    1,   11,   11,   11,
        11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
        11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
        11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
@@ -470,268 +472,275 @@ static const YY_CHAR yy_ec[256] =
        11,   11,   11,   11,   11
     } ;
 
-static const YY_CHAR yy_meta[67] =
+static const YY_CHAR yy_meta[69] =
     {   0,
         1,    1,    2,    3,    3,    3,    3,    3,    3,    3,
         3,    3,    4,    3,    3,    3,    3,    5,    3,    6,
         6,    6,    6,    3,    3,    3,    3,    3,    3,    3,
-        6,    5,    3,    3,    3,    5,    6,    6,    6,    6,
-        6,    6,    5,    5,    5,    5,    5,    5,    5,    5,
+        6,    5,    5,    5,    3,    3,    3,    5,    6,    6,
+        6,    6,    6,    6,    5,    5,    5,    5,    5,    5,
         5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
-        5,    5,    3,    3,    3,    3
+        5,    5,    5,    5,    3,    3,    3,    3
     } ;
 
-static const flex_int16_t yy_base[567] =
+static const flex_int16_t yy_base[583] =
     {   0,
-        0,  934,   66,  933,  132,  932,  198,  931,  264,  930,
-      330,  929,    0,  394,  958,  965,  396,  965,    0,  945,
-      965,    0,  965,  900,  914,  917,  908,  965,  949,  965,
-      397,  965,  945,    0,  938,  965,    0,  365,  384,  965,
-      901,  903,  896,  905,  895,  903,  898,  365,  369,  903,
-      372,  365,  361,  904,  889,  936,  965,  416,  965,  926,
-      965,    0,  965,  934,  965,  417,  965,  965,  930,  923,
-        0,  965,  879,  930,  965,  424,  965,  905,    0,  402,
-      965,  965,  913,  377,  409,  407,  408,    0,  965,  965,
-      965,  882,  879,  965,  965,  925,  965,  436,  965,  900,
-
-        0,  914,  965,  915,    0,  385,  421,  420,  897,  421,
-      888,  884,  399,  414,  880,  860,  455,  868,  415,  867,
-      417,  866,  420,  458,  862,  874,  850,  965,  910,  965,
-      909,  965,  908,  471,    0,    0,    0,  854,  867,  869,
-      851,  903,  965,  474,  899,  898,    0,    0,    0,  443,
-        0,  467,  858,  442,  852,  452,  861,  840,  843,  849,
-      855,  840,  853,  843,  844,  849,  450,  854,  843,  837,
-      447,  834,  884,  965,  498,    0,    0,  883,  965,  502,
-      879,  878,    0,    0,    0,  880,  965,  503,  965,    0,
-        0,  832,  827,  829,  861,    0,  459,    0,  493,  965,
-
-      965,  965,  965,  827,  832,  873,  965,  506,  965,    0,
-        0,  965,    0,  497,    0,  499,  965,  965,  965,  965,
-      965,  965,  820,  820,  828,  475,  827,  820,  819,  821,
-      816,  840,  965,  965,  965,  965,  839,  838,  837,  812,
-      806,    0,  805,  821,  809,  799,  805,  800,  798,  965,
-      965,  827,  497,  802,  815,  791,  796,  792,  788,  965,
-      844,  965,  843,  965,  842,  965,  831,  806,  797,  787,
-      796,  826,  506,    0,  795,    0,    0,  783,  780,    0,
-      798,  789,    0,  777,  791,  783,    0,  775,  789,  792,
-      782,  776,  784,  785,  782,  781,  764,  775,  779,  805,
-
-      804,  803,  775,  965,  760,    0,  510,    0,  775,  763,
-      798,  512,    0,    0,  756,  761,  760,  753,  758,  754,
-      749,  766,  751,  965,  965,  965,  965,  491,  750,  778,
-      762,    0,  747,  758,  739,  745,  965,  965,  965,  740,
-      739,  736,  735,  740,  733,  965,  775,  748,  736,  734,
-        0,  965,  771,  733,  745,  740,  723,  742,  730,  722,
-      725,  734,  733,  718,  717,  730,    0,  729,  719,    0,
-      727,  730,  711,  965,  752,  965,  751,  965,  750,  965,
-      965,  725,  709,  965,  747,  708,  718,    0,  696,    0,
-      708,  700,  693,  699,  696,  697,    0,  708,  701,  710,
-
-      696,  692,  705,  690,  689,    0,    0,  703,    0,  697,
-      699,    0,  690,  688,  677,  688,  685,  693,    0,  674,
-      676,  680,  678,  673,  688,    0,    0,  672,  688,  680,
-      676,  675,  663,    0,    0,    0,  683,  665,  663,  696,
-        0,  669,    0,  670,  658,  664,    0,  662,  651,    0,
-        0,    0,  670,  667,  653,  652,    0,    0,    0,    0,
-      655,  669,  664,    0,    0,  656,  641,  647,    0,    0,
-      644,  652,    0,  657,  647,  656,  646,    0,  636,    0,
-      644,  652,    0,    0,    0,  653,  637,  649,  648,  647,
-      642,  635,  637,  647,  644,  626,    0,  625,    0,  639,
-
-      643,  623,    0,  621,  574,  552,  523,  500,  485,    0,
-        0,    0,  485,    0,    0,  499,    0,  501,    0,    0,
-      485,    0,  480,  498,    0,  495,  468,    0,  965,  542,
-      548,  554,  556,  562,  566,  572,  574,  580,  582,  588,
-      592,  594,  600,  606,  608,  614,  620,  622,  628,  634,
-      640,  642,  644,  453,  646,  648,  650,  446,  652,  421,
-      655,  658,  661,  664,  667,  670
+        0,  962,   68,  961,  136,  960,  204,  959,  272,  958,
+      340,  957,    0,  406,  986,  993,  408,  993,    0,  973,
+      993,    0,  993,  926,  940,  943,  934,  993,  977,  993,
+      409,  993,  973,    0,  966,  993,    0,  375,  396,  993,
+      927,  929,  922,  931,  921,  929,  924,  375,  379,  929,
+      382,  375,  371,  930,  915,  964,  993,  428,  993,  954,
+      993,    0,  993,  962,  993,  429,  993,  993,  958,  951,
+        0,  993,  905,  958,  993,  436,  993,  933,    0,  414,
+      993,  993,  941,  387,  421,  419,  420,    0,  993,  993,
+      993,  908,  905,  993,  993,  953,  993,  448,  993,  928,
+
+        0,  942,  993,  943,    0,  395,  438,  428,  925,  435,
+      914,  910,  411,  426,  906,  886,  469,  894,  429,  893,
+      429,  892,  413,  466,  888,  900,  876,  993,  938,  993,
+      937,  993,  936,  485,    0,    0,    0,  880,  893,  895,
+      877,  931,  993,  489,  927,  926,    0,    0,    0,  457,
+        0,  478,  884,  458,  878,  461,  887,  866,  869,  875,
+      881,  866,  879,  869,  870,  875,  426,  880,  869,  863,
+      458,  860,  912,  993,  509,    0,    0,  911,  993,  513,
+      907,  906,    0,    0,    0,  908,  993,  516,  993,    0,
+        0,  858,  853,  855,  889,    0,  502,    0,  504,  993,
+
+      993,  993,  993,  853,  858,  901,  993,  526,  993,    0,
+        0,  993,    0,  511,    0,  513,  993,  993,  993,  993,
+      993,  993,  846,  846,  854,  487,  853,  840,  845,  844,
+      846,  841,  867,  993,  993,  993,  993,  866,  865,  864,
+      837,  831,    0,  830,  846,  834,  824,  830,  825,  823,
+      993,  993,  854,  511,  827,  840,  816,  821,  817,  813,
+      993,  871,  993,  870,  993,  869,  993,  858,  831,  822,
+      812,  821,  853,  520,    0,  820,    0,    0,  808,  805,
+        0,  823,  814,    0,  802,  816,  808,    0,  800,  814,
+      817,  807,  801,  809,  810,  807,  806,  789,  800,  804,
+
+      832,  831,  830,  800,  993,  785,    0,  524,    0,  800,
+      788,  825,  526,    0,    0,  781,  786,  785,  778,  783,
+      780,  778,  773,  790,  775,  993,  993,  993,  993,  503,
+      774,  804,  786,    0,  771,  782,  763,  769,  993,  993,
+      993,  764,  763,  760,  759,  764,  757,  993,  801,  772,
+      760,  758,    0,  993,  797,  757,  769,  764,  747,  766,
+      754,  746,  749,  758,  757,  742,  741,  754,    0,  753,
+      743,    0,  751,  754,  735,  993,  778,  993,  777,  993,
+      776,  993,  993,  749,  733,  993,  773,  732,  742,    0,
+      720,    0,  724,  731,  723,  716,  722,  719,  720,    0,
+
+      731,  724,  733,  719,  715,  728,  713,  712,    0,    0,
+      726,    0,  720,  722,    0,  713,  711,  700,  711,  708,
+      716,    0,  697,  699,  703,  701,  696,  711,    0,    0,
+      695,  711,  703,  699,  698,  686,    0,    0,  713,    0,
+      705,  687,  685,  720,    0,  691,    0,  692,  680,  686,
+        0,  684,  673,    0,    0,    0,  692,  689,  675,  674,
+        0,    0,    0,    0,  677,  691,  686,    0,    0,  678,
+      663,  669,    0,    0,  682,  665,  673,    0,  678,  668,
+      677,  667,    0,  657,    0,  665,  673,    0,    0,    0,
+      674,  658,  670,  669,  668,  671,  662,  655,  657,  667,
+
+      664,  646,    0,  645,    0,  659,  663,  643,    0,  641,
+      656,  647,  638,  642,  636,  635,    0,    0,    0,  635,
+        0,    0,  644,  594,    0,  583,    0,    0,  534,  518,
+        0,  497,  515,  508,    0,  511,  517,  507,  506,    0,
+      492,  476,  455,    0,  993,  556,  562,  568,  570,  576,
+      580,  586,  588,  594,  596,  602,  606,  608,  614,  620,
+      622,  628,  634,  636,  642,  648,  654,  656,  658,  498,
+      660,  662,  664,  445,  666,  433,  669,  672,  675,  678,
+      681,  684
     } ;
 
-static const flex_int16_t yy_def[567] =
+static const flex_int16_t yy_def[583] =
     {   0,
-      529,    1,  529,    3,  529,    5,  529,    7,  529,    9,
-      529,   11,  530,  531,  529,  529,  529,  529,  532,  529,
-      529,  533,  529,  533,  533,  533,  533,  529,  534,  529,
-      529,  529,  535,  536,  529,  529,  537,  529,  529,  529,
-      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
-      537,  537,  537,  537,  537,  538,  529,  529,  529,  529,
-      529,  539,  529,  540,  529,  529,  529,  529,  541,  529,
-      542,  529,  542,  543,  529,  529,  529,  529,  544,  529,
-      529,  529,  545,  529,  529,  529,  529,  545,  529,  529,
-      529,  545,  545,  529,  529,  546,  529,  529,  529,  529,
-
-      547,  529,  529,  529,  548,  529,  529,  529,  529,  529,
-      529,  548,  548,  548,  548,  548,  548,  548,  548,  548,
-      548,  548,  548,  548,  548,  548,  529,  529,  549,  529,
-      550,  529,  551,  529,  532,  552,  533,  533,  533,  533,
-      533,  534,  529,  529,  535,  529,  536,  553,  537,  529,
-      554,  529,  537,  537,  537,  537,  537,  537,  537,  537,
-      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
-      537,  537,  538,  529,  529,  555,  539,  540,  529,  529,
-      541,  529,  556,  542,  542,  543,  529,  529,  529,  544,
-      557,  529,  529,  529,  545,  545,  529,  558,  529,  529,
-
-      529,  529,  529,  545,  545,  546,  529,  529,  529,  547,
-      559,  529,  548,  529,  560,  529,  529,  529,  529,  529,
-      529,  529,  548,  548,  548,  548,  548,  548,  548,  548,
-      548,  529,  529,  529,  529,  529,  529,  529,  529,  548,
-      548,  548,  548,  548,  548,  548,  548,  548,  548,  529,
-      529,  529,  529,  548,  548,  548,  548,  548,  548,  529,
-      549,  529,  550,  529,  551,  529,  561,  533,  533,  533,
-      533,  562,  529,  554,  537,  537,  537,  537,  537,  537,
-      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
-      537,  537,  537,  537,  537,  537,  537,  537,  537,  563,
-
-      564,  565,  529,  529,  529,  545,  529,  558,  545,  545,
-      566,  529,  560,  548,  548,  548,  548,  548,  548,  548,
-      548,  548,  548,  529,  529,  529,  529,  548,  548,  548,
-      548,  548,  548,  548,  548,  548,  529,  529,  529,  548,
-      548,  548,  548,  548,  548,  529,  561,  533,  533,  533,
-      533,  529,  562,  537,  537,  537,  537,  537,  537,  537,
-      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
-      537,  537,  537,  529,  563,  529,  564,  529,  565,  529,
-      529,  545,  545,  529,  566,  548,  548,  548,  548,  548,
-      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
-
-      548,  548,  548,  548,  548,  548,  548,  548,  548,  533,
-      533,  533,  537,  537,  537,  537,  537,  537,  537,  537,
-      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
-      545,  545,  548,  548,  548,  548,  548,  548,  548,  548,
-      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
-      533,  533,  537,  537,  537,  537,  537,  537,  537,  537,
-      537,  537,  537,  537,  537,  537,  537,  545,  545,  548,
-      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
-      537,  537,  537,  537,  537,  537,  537,  537,  537,  545,
-      548,  548,  548,  548,  548,  548,  548,  537,  537,  537,
-
-      537,  537,  537,  545,  548,  548,  548,  548,  548,  548,
-      537,  537,  537,  537,  545,  548,  548,  548,  548,  548,
-      537,  548,  548,  537,  548,  537,  537,  537,    0,  529,
-      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
-      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
-      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
-      529,  529,  529,  529,  529,  529
+      545,    1,  545,    3,  545,    5,  545,    7,  545,    9,
+      545,   11,  546,  547,  545,  545,  545,  545,  548,  545,
+      545,  549,  545,  549,  549,  549,  549,  545,  550,  545,
+      545,  545,  551,  552,  545,  545,  553,  545,  545,  545,
+      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
+      553,  553,  553,  553,  553,  554,  545,  545,  545,  545,
+      545,  555,  545,  556,  545,  545,  545,  545,  557,  545,
+      558,  545,  558,  559,  545,  545,  545,  545,  560,  545,
+      545,  545,  561,  545,  545,  545,  545,  561,  545,  545,
+      545,  561,  561,  545,  545,  562,  545,  545,  545,  545,
+
+      563,  545,  545,  545,  564,  545,  545,  545,  545,  545,
+      545,  564,  564,  564,  564,  564,  564,  564,  564,  564,
+      564,  564,  564,  564,  564,  564,  545,  545,  565,  545,
+      566,  545,  567,  545,  548,  568,  549,  549,  549,  549,
+      549,  550,  545,  545,  551,  545,  552,  569,  553,  545,
+      570,  545,  553,  553,  553,  553,  553,  553,  553,  553,
+      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
+      553,  553,  554,  545,  545,  571,  555,  556,  545,  545,
+      557,  545,  572,  558,  558,  559,  545,  545,  545,  560,
+      573,  545,  545,  545,  561,  561,  545,  574,  545,  545,
+
+      545,  545,  545,  561,  561,  562,  545,  545,  545,  563,
+      575,  545,  564,  545,  576,  545,  545,  545,  545,  545,
+      545,  545,  564,  564,  564,  564,  564,  564,  564,  564,
+      564,  564,  545,  545,  545,  545,  545,  545,  545,  545,
+      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
+      545,  545,  545,  545,  564,  564,  564,  564,  564,  564,
+      545,  565,  545,  566,  545,  567,  545,  577,  549,  549,
+      549,  549,  578,  545,  570,  553,  553,  553,  553,  553,
+      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
+      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
+
+      579,  580,  581,  545,  545,  545,  561,  545,  574,  561,
+      561,  582,  545,  576,  564,  564,  564,  564,  564,  564,
+      564,  564,  564,  564,  564,  545,  545,  545,  545,  564,
+      564,  564,  564,  564,  564,  564,  564,  564,  545,  545,
+      545,  564,  564,  564,  564,  564,  564,  545,  577,  549,
+      549,  549,  549,  545,  578,  553,  553,  553,  553,  553,
+      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
+      553,  553,  553,  553,  553,  545,  579,  545,  580,  545,
+      581,  545,  545,  561,  561,  545,  582,  564,  564,  564,
+      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
+
+      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
+      564,  564,  549,  549,  549,  553,  553,  553,  553,  553,
+      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
+      553,  553,  553,  561,  561,  564,  564,  564,  564,  564,
+      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
+      564,  564,  564,  564,  549,  549,  553,  553,  553,  553,
+      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
+      553,  561,  561,  564,  564,  564,  564,  564,  564,  564,
+      564,  564,  564,  564,  564,  553,  553,  553,  553,  553,
+      553,  553,  553,  553,  561,  564,  564,  564,  564,  564,
+
+      564,  564,  564,  553,  553,  553,  553,  553,  553,  561,
+      564,  564,  564,  564,  564,  564,  564,  553,  553,  553,
+      553,  561,  564,  564,  564,  564,  564,  564,  553,  564,
+      564,  564,  553,  564,  564,  553,  564,  553,  564,  553,
+      564,  564,  564,  564,    0,  545,  545,  545,  545,  545,
+      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
+      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
+      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
+      545,  545
     } ;
 
-static const flex_int16_t yy_nxt[1032] =
+static const flex_int16_t yy_nxt[1062] =
     {   0,
        16,   17,   18,   17,   16,   16,   19,   20,   16,   16,
        16,   21,   21,   16,   16,   21,   21,   22,   16,   16,
        16,   16,   16,   23,   16,   16,   16,   16,   16,   16,
-       22,   22,   16,   16,   16,   22,   24,   22,   22,   25,
-       22,   22,   22,   22,   22,   22,   22,   22,   26,   22,
-       22,   22,   22,   22,   22,   22,   22,   22,   27,   22,
-       22,   22,   28,   16,   16,   16,   30,   31,   32,   31,
-       30,   33,   34,   35,   30,   30,   30,   36,   36,   30,
-       30,   36,   30,   37,   30,   38,   39,   39,   39,   36,
-       40,   30,   36,   30,   30,   30,   37,   37,   36,   36,
-
-       30,   37,   41,   42,   43,   44,   45,   37,   37,   46,
-       37,   37,   37,   47,   37,   48,   49,   50,   37,   51,
-       52,   53,   37,   54,   55,   37,   37,   37,   30,   30,
-       30,   30,   57,   58,   59,   58,   57,   57,   57,   60,
-       57,   57,   57,   61,   61,   57,   57,   61,   57,   62,
-       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
-       57,   57,   62,   62,   57,   57,   57,   62,   62,   62,
+       22,   22,   22,   22,   16,   16,   16,   22,   24,   22,
+       22,   25,   22,   22,   22,   22,   22,   22,   22,   22,
+       26,   22,   22,   22,   22,   22,   22,   22,   22,   22,
+       27,   22,   22,   22,   28,   16,   16,   16,   30,   31,
+       32,   31,   30,   33,   34,   35,   30,   30,   30,   36,
+       36,   30,   30,   36,   30,   37,   30,   38,   39,   39,
+       39,   36,   40,   30,   36,   30,   30,   30,   37,   37,
+
+       37,   37,   36,   36,   30,   37,   41,   42,   43,   44,
+       45,   37,   37,   46,   37,   37,   37,   47,   37,   48,
+       49,   50,   37,   51,   52,   53,   37,   54,   55,   37,
+       37,   37,   30,   30,   30,   30,   57,   58,   59,   58,
+       57,   57,   57,   60,   57,   57,   57,   61,   61,   57,
+       57,   61,   57,   62,   57,   57,   57,   57,   57,   57,
+       57,   57,   57,   57,   57,   57,   62,   62,   62,   62,
+       57,   57,   57,   62,   62,   62,   62,   62,   62,   62,
        62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
        62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
-       62,   62,   62,   62,   63,   57,   57,   57,   65,   66,
-
-       67,   66,   68,   69,   68,   70,   68,   68,   65,   68,
-       68,   68,   68,   68,   68,   71,   68,   68,   68,   68,
-       68,   68,   68,   68,   68,   68,   68,   68,   71,   71,
-       68,   68,   72,   71,   71,   71,   71,   71,   71,   71,
-       71,   71,   73,   71,   71,   71,   71,   71,   71,   71,
-       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
-       68,   68,   68,   68,   75,   76,   77,   76,   78,   75,
-       79,   80,   75,   81,   75,   82,   82,   82,   82,   82,
-       82,   83,   82,   84,   85,   85,   85,   82,   82,   86,
-       82,   87,   75,   75,   88,   88,   89,   90,   91,   88,
 
+       63,   57,   57,   57,   65,   66,   67,   66,   68,   69,
+       68,   70,   68,   68,   65,   68,   68,   68,   68,   68,
+       68,   71,   68,   68,   68,   68,   68,   68,   68,   68,
+       68,   68,   68,   68,   71,   71,   71,   71,   68,   68,
+       72,   71,   71,   71,   71,   71,   71,   71,   71,   71,
+       73,   71,   71,   71,   71,   71,   71,   71,   71,   71,
+       71,   71,   71,   71,   71,   71,   71,   71,   68,   68,
+       68,   68,   75,   76,   77,   76,   78,   75,   79,   80,
+       75,   81,   75,   82,   82,   82,   82,   82,   82,   83,
+       82,   84,   85,   85,   85,   82,   82,   86,   82,   87,
+
+       75,   75,   88,   88,   88,   88,   89,   90,   91,   88,
        88,   88,   88,   88,   88,   88,   92,   88,   88,   88,
        88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
        93,   88,   88,   88,   88,   88,   94,   95,   75,   82,
        97,   98,   99,   98,  100,   97,  101,  102,  103,  104,
        97,  103,  103,  103,  103,  103,  103,  105,  103,  106,
       107,  107,  107,  103,  103,  108,  109,  110,   97,   97,
-      105,  105,  103,  103,  111,  105,  112,  113,  114,  115,
-      116,  117,  118,  105,  119,  105,  105,  120,  105,  121,
-      105,  122,  105,  123,  124,  125,  105,  105,  105,  105,
-      105,  126,   97,  127,  128,  103,  132,  134,  144,  134,
-
-      144,  160,  150,  152,  152,  152,  152,  162,  165,  167,
-      163,  169,  166,  191,  197,  161,  168,  175,  180,  175,
-      180,  170,  214,  133,  151,  188,  313,  188,  199,  199,
-      199,  199,  200,  201,  202,  203,  198,  208,  192,  208,
-      216,  216,  216,  216,  215,  217,  218,  220,  221,  224,
-      226,  308,  193,  245,  227,  225,  242,  246,  274,  232,
-      248,  194,  273,  273,  243,  228,  250,  229,  233,  234,
-      249,  235,  134,  236,  134,  144,  251,  144,  307,  307,
-      237,  238,  239,  252,  276,  253,  152,  152,  152,  152,
-      280,  277,  292,  281,  297,  254,  255,  278,  256,  175,
-
-      298,  175,  240,  180,  188,  180,  188,  208,  528,  208,
-      257,  293,  199,  199,  199,  199,  312,  312,  216,  216,
-      216,  216,  317,  338,  339,  273,  273,  395,  318,  307,
-      307,  312,  312,  527,  526,  525,  524,  523,  522,  521,
-      520,  396,  130,  130,  130,  130,  130,  130,  131,  131,
-      131,  131,  131,  131,  135,  519,  135,  135,  135,  135,
-      137,  137,  142,  142,  142,  142,  142,  142,  145,  145,
-      145,  145,  147,  518,  147,  147,  147,  147,  149,  149,
-      173,  173,  173,  173,  173,  173,  177,  177,  178,  178,
-      178,  178,  178,  178,  181,  181,  181,  181,  184,  184,
-
-      186,  186,  186,  186,  186,  186,  190,  517,  190,  190,
-      190,  190,  196,  196,  206,  206,  206,  206,  206,  206,
-      210,  516,  210,  210,  210,  210,  213,  213,  261,  261,
-      261,  261,  261,  261,  263,  263,  263,  263,  263,  263,
-      265,  265,  265,  265,  265,  265,  267,  267,  272,  272,
-      300,  300,  301,  301,  302,  302,  311,  311,  347,  347,
-      347,  353,  353,  353,  375,  375,  375,  377,  377,  377,
-      379,  379,  379,  385,  385,  385,  515,  514,  513,  512,
-      511,  510,  509,  508,  507,  506,  505,  504,  503,  502,
-      501,  500,  499,  498,  497,  496,  495,  494,  493,  492,
-
-      491,  490,  489,  488,  487,  486,  485,  484,  483,  482,
-      481,  480,  479,  478,  477,  476,  475,  474,  473,  472,
-      471,  470,  469,  468,  467,  466,  465,  464,  463,  462,
-      461,  460,  459,  458,  457,  456,  455,  454,  453,  452,
-      451,  450,  449,  448,  447,  446,  445,  444,  443,  442,
-      441,  440,  439,  438,  437,  436,  435,  434,  433,  384,
-      432,  431,  378,  376,  374,  430,  429,  428,  427,  426,
-      425,  424,  423,  422,  421,  420,  419,  418,  417,  416,
-      415,  414,  413,  352,  412,  411,  410,  346,  409,  408,
-      407,  406,  405,  404,  403,  402,  401,  400,  399,  398,
-
-      397,  394,  393,  392,  391,  390,  389,  388,  387,  386,
-      384,  383,  382,  381,  380,  378,  376,  374,  373,  372,
-      371,  370,  369,  368,  367,  366,  365,  364,  363,  362,
-      361,  360,  359,  358,  357,  356,  355,  354,  352,  351,
-      350,  349,  348,  346,  266,  264,  262,  345,  344,  343,
-      342,  341,  340,  337,  336,  335,  334,  333,  332,  331,
-      330,  329,  328,  327,  326,  325,  324,  323,  322,  321,
-      320,  319,  316,  315,  314,  207,  310,  309,  306,  305,
-      304,  303,  187,  181,  182,  179,  174,  299,  296,  295,
-      294,  291,  290,  289,  288,  287,  286,  285,  284,  283,
-
-      282,  279,  275,  145,  146,  143,  271,  270,  269,  268,
-      266,  264,  262,  260,  259,  258,  247,  244,  241,  231,
-      230,  223,  222,  219,  212,  211,  209,  207,  205,  204,
-      195,  189,  187,  185,  183,  182,  179,  176,  174,  172,
-      171,  164,  159,  158,  157,  156,  155,  154,  153,  148,
-      146,  143,  141,  140,  139,  138,  136,  529,  129,   96,
-       74,   64,   56,   29,   15,  529,  529,  529,  529,  529,
-      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
-      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
-      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
-
-      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
-      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
-      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
-      529
+      105,  105,  105,  105,  103,  103,  111,  105,  112,  113,
+      114,  115,  116,  117,  118,  105,  119,  105,  105,  120,
+      105,  121,  105,  122,  105,  123,  124,  125,  105,  105,
+
+      105,  105,  105,  126,   97,  127,  128,  103,  132,  134,
+      144,  134,  144,  160,  150,  152,  152,  152,  152,  162,
+      165,  167,  163,  169,  166,  191,  197,  161,  168,  175,
+      180,  175,  180,  170,  214,  133,  151,  188,  314,  188,
+      199,  199,  199,  199,  200,  201,  202,  203,  198,  208,
+      309,  208,  192,  217,  218,  249,  215,  216,  216,  216,
+      216,  220,  221,  224,  226,  250,  193,  246,  227,  225,
+      293,  247,  243,  233,  251,  194,  274,  274,  228,  229,
+      244,  230,  234,  235,  252,  236,  134,  237,  134,  294,
+      144,  253,  144,  254,  238,  239,  240,  152,  152,  152,
+
+      152,  281,  277,  275,  282,  255,  256,  298,  257,  278,
+      175,  544,  175,  299,  180,  279,  180,  188,  241,  188,
+      258,  308,  308,  199,  199,  199,  199,  208,  543,  208,
+      313,  313,  216,  216,  216,  216,  318,  340,  341,  274,
+      274,  398,  319,  308,  308,  313,  313,  542,  541,  540,
+      539,  538,  537,  536,  535,  399,  130,  130,  130,  130,
+      130,  130,  131,  131,  131,  131,  131,  131,  135,  534,
+      135,  135,  135,  135,  137,  137,  142,  142,  142,  142,
+      142,  142,  145,  145,  145,  145,  147,  533,  147,  147,
+      147,  147,  149,  149,  173,  173,  173,  173,  173,  173,
+
+      177,  177,  178,  178,  178,  178,  178,  178,  181,  181,
+      181,  181,  184,  184,  186,  186,  186,  186,  186,  186,
+      190,  532,  190,  190,  190,  190,  196,  196,  206,  206,
+      206,  206,  206,  206,  210,  531,  210,  210,  210,  210,
+      213,  213,  262,  262,  262,  262,  262,  262,  264,  264,
+      264,  264,  264,  264,  266,  266,  266,  266,  266,  266,
+      268,  268,  273,  273,  301,  301,  302,  302,  303,  303,
+      312,  312,  349,  349,  349,  355,  355,  355,  377,  377,
+      377,  379,  379,  379,  381,  381,  381,  387,  387,  387,
+      530,  529,  528,  527,  526,  525,  524,  523,  522,  521,
+
+      520,  519,  518,  517,  516,  515,  514,  513,  512,  511,
+      510,  509,  508,  507,  506,  505,  504,  503,  502,  501,
+      500,  499,  498,  497,  496,  495,  494,  493,  492,  491,
+      490,  489,  488,  487,  486,  485,  484,  483,  482,  481,
+      480,  479,  478,  477,  476,  475,  474,  473,  472,  471,
+      470,  469,  468,  467,  466,  465,  464,  463,  462,  461,
+      460,  459,  458,  457,  456,  455,  454,  453,  452,  451,
+      450,  449,  448,  447,  446,  445,  444,  443,  442,  441,
+      440,  439,  438,  437,  436,  386,  435,  434,  380,  378,
+      376,  433,  432,  431,  430,  429,  428,  427,  426,  425,
+
+      424,  423,  422,  421,  420,  419,  418,  417,  416,  354,
+      415,  414,  413,  348,  412,  411,  410,  409,  408,  407,
+      406,  405,  404,  403,  402,  401,  400,  397,  396,  395,
+      394,  393,  392,  391,  390,  389,  388,  386,  385,  384,
+      383,  382,  380,  378,  376,  375,  374,  373,  372,  371,
+      370,  369,  368,  367,  366,  365,  364,  363,  362,  361,
+      360,  359,  358,  357,  356,  354,  353,  352,  351,  350,
+      348,  267,  265,  263,  347,  346,  345,  344,  343,  342,
+      339,  338,  337,  336,  335,  334,  333,  332,  331,  330,
+      329,  328,  327,  326,  325,  324,  323,  322,  321,  320,
+
+      317,  316,  315,  207,  311,  310,  307,  306,  305,  304,
+      187,  181,  182,  179,  174,  300,  297,  296,  295,  292,
+      291,  290,  289,  288,  287,  286,  285,  284,  283,  280,
+      276,  145,  146,  143,  272,  271,  270,  269,  267,  265,
+      263,  261,  260,  259,  248,  245,  242,  232,  231,  223,
+      222,  219,  212,  211,  209,  207,  205,  204,  195,  189,
+      187,  185,  183,  182,  179,  176,  174,  172,  171,  164,
+      159,  158,  157,  156,  155,  154,  153,  148,  146,  143,
+      141,  140,  139,  138,  136,  545,  129,   96,   74,   64,
+       56,   29,   15,  545,  545,  545,  545,  545,  545,  545,
+
+      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
+      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
+      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
+      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
+      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
+      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
+      545
     } ;
 
-static const flex_int16_t yy_chk[1032] =
+static const flex_int16_t yy_chk[1062] =
     {   0,
         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
@@ -739,7 +748,7 @@ static const flex_int16_t yy_chk[1032] =
         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
+        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
         3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
         3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
         3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
@@ -747,110 +756,113 @@ static const flex_int16_t yy_chk[1032] =
         3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
         3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
         3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
-        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
+        3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
+        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
         5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
         5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
         5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
         5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
         5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
-        5,    5,    5,    5,    5,    5,    5,    5,    7,    7,
 
+        5,    5,    5,    5,    7,    7,    7,    7,    7,    7,
         7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
         7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
         7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
         7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
         7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
         7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
-        7,    7,    7,    7,    9,    9,    9,    9,    9,    9,
-        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
+        7,    7,    9,    9,    9,    9,    9,    9,    9,    9,
         9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
         9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
 
         9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
         9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
         9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
+        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
        11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
        11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
        11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
        11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
        11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
-       11,   11,   11,   11,   11,   11,   14,   17,   31,   17,
-
-       31,   48,   38,   39,   39,   39,   39,   49,   51,   52,
-       49,   53,   51,   80,   84,   48,   52,   58,   66,   58,
-       66,   53,  106,   14,   38,   76,  560,   76,   85,   85,
-       85,   85,   86,   86,   87,   87,   84,   98,   80,   98,
-      107,  107,  107,  107,  106,  108,  108,  110,  110,  113,
-      114,  558,   80,  121,  114,  113,  119,  121,  554,  117,
-      123,   80,  150,  150,  119,  114,  124,  114,  117,  117,
-      123,  117,  134,  117,  134,  144,  124,  144,  197,  197,
-      117,  117,  117,  124,  154,  124,  152,  152,  152,  152,
-      156,  154,  167,  156,  171,  124,  124,  154,  124,  175,
-
-      171,  175,  117,  180,  188,  180,  188,  208,  527,  208,
-      124,  167,  199,  199,  199,  199,  214,  214,  216,  216,
-      216,  216,  226,  253,  253,  273,  273,  328,  226,  307,
-      307,  312,  312,  526,  524,  523,  521,  518,  516,  513,
-      509,  328,  530,  530,  530,  530,  530,  530,  531,  531,
-      531,  531,  531,  531,  532,  508,  532,  532,  532,  532,
-      533,  533,  534,  534,  534,  534,  534,  534,  535,  535,
-      535,  535,  536,  507,  536,  536,  536,  536,  537,  537,
-      538,  538,  538,  538,  538,  538,  539,  539,  540,  540,
-      540,  540,  540,  540,  541,  541,  541,  541,  542,  542,
-
-      543,  543,  543,  543,  543,  543,  544,  506,  544,  544,
-      544,  544,  545,  545,  546,  546,  546,  546,  546,  546,
-      547,  505,  547,  547,  547,  547,  548,  548,  549,  549,
-      549,  549,  549,  549,  550,  550,  550,  550,  550,  550,
-      551,  551,  551,  551,  551,  551,  552,  552,  553,  553,
-      555,  555,  556,  556,  557,  557,  559,  559,  561,  561,
-      561,  562,  562,  562,  563,  563,  563,  564,  564,  564,
-      565,  565,  565,  566,  566,  566,  504,  502,  501,  500,
-      498,  496,  495,  494,  493,  492,  491,  490,  489,  488,
-      487,  486,  482,  481,  479,  477,  476,  475,  474,  472,
-
-      471,  468,  467,  466,  463,  462,  461,  456,  455,  454,
-      453,  449,  448,  446,  445,  444,  442,  440,  439,  438,
-      437,  433,  432,  431,  430,  429,  428,  425,  424,  423,
-      422,  421,  420,  418,  417,  416,  415,  414,  413,  411,
-      410,  408,  405,  404,  403,  402,  401,  400,  399,  398,
-      396,  395,  394,  393,  392,  391,  389,  387,  386,  385,
-      383,  382,  379,  377,  375,  373,  372,  371,  369,  368,
-      366,  365,  364,  363,  362,  361,  360,  359,  358,  357,
-      356,  355,  354,  353,  350,  349,  348,  347,  345,  344,
-      343,  342,  341,  340,  336,  335,  334,  333,  331,  330,
-
-      329,  323,  322,  321,  320,  319,  318,  317,  316,  315,
-      311,  310,  309,  305,  303,  302,  301,  300,  299,  298,
-      297,  296,  295,  294,  293,  292,  291,  290,  289,  288,
-      286,  285,  284,  282,  281,  279,  278,  275,  272,  271,
-      270,  269,  268,  267,  265,  263,  261,  259,  258,  257,
-      256,  255,  254,  252,  249,  248,  247,  246,  245,  244,
-      243,  241,  240,  239,  238,  237,  232,  231,  230,  229,
-      228,  227,  225,  224,  223,  206,  205,  204,  195,  194,
-      193,  192,  186,  182,  181,  178,  173,  172,  170,  169,
-      168,  166,  165,  164,  163,  162,  161,  160,  159,  158,
-
-      157,  155,  153,  146,  145,  142,  141,  140,  139,  138,
-      133,  131,  129,  127,  126,  125,  122,  120,  118,  116,
-      115,  112,  111,  109,  104,  102,  100,   96,   93,   92,
-       83,   78,   74,   73,   70,   69,   64,   60,   56,   55,
-       54,   50,   47,   46,   45,   44,   43,   42,   41,   35,
-       33,   29,   27,   26,   25,   24,   20,   15,   12,   10,
-        8,    6,    4,    2,  529,  529,  529,  529,  529,  529,
-      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
-      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
-      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
-
-      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
-      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
-      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
-      529
+
+       11,   11,   11,   11,   11,   11,   11,   11,   14,   17,
+       31,   17,   31,   48,   38,   39,   39,   39,   39,   49,
+       51,   52,   49,   53,   51,   80,   84,   48,   52,   58,
+       66,   58,   66,   53,  106,   14,   38,   76,  576,   76,
+       85,   85,   85,   85,   86,   86,   87,   87,   84,   98,
+      574,   98,   80,  108,  108,  123,  106,  107,  107,  107,
+      107,  110,  110,  113,  114,  123,   80,  121,  114,  113,
+      167,  121,  119,  117,  124,   80,  150,  150,  114,  114,
+      119,  114,  117,  117,  124,  117,  134,  117,  134,  167,
+      144,  124,  144,  124,  117,  117,  117,  152,  152,  152,
+
+      152,  156,  154,  570,  156,  124,  124,  171,  124,  154,
+      175,  543,  175,  171,  180,  154,  180,  188,  117,  188,
+      124,  197,  197,  199,  199,  199,  199,  208,  542,  208,
+      214,  214,  216,  216,  216,  216,  226,  254,  254,  274,
+      274,  330,  226,  308,  308,  313,  313,  541,  539,  538,
+      537,  536,  534,  533,  532,  330,  546,  546,  546,  546,
+      546,  546,  547,  547,  547,  547,  547,  547,  548,  530,
+      548,  548,  548,  548,  549,  549,  550,  550,  550,  550,
+      550,  550,  551,  551,  551,  551,  552,  529,  552,  552,
+      552,  552,  553,  553,  554,  554,  554,  554,  554,  554,
+
+      555,  555,  556,  556,  556,  556,  556,  556,  557,  557,
+      557,  557,  558,  558,  559,  559,  559,  559,  559,  559,
+      560,  526,  560,  560,  560,  560,  561,  561,  562,  562,
+      562,  562,  562,  562,  563,  524,  563,  563,  563,  563,
+      564,  564,  565,  565,  565,  565,  565,  565,  566,  566,
+      566,  566,  566,  566,  567,  567,  567,  567,  567,  567,
+      568,  568,  569,  569,  571,  571,  572,  572,  573,  573,
+      575,  575,  577,  577,  577,  578,  578,  578,  579,  579,
+      579,  580,  580,  580,  581,  581,  581,  582,  582,  582,
+      523,  520,  516,  515,  514,  513,  512,  511,  510,  508,
+
+      507,  506,  504,  502,  501,  500,  499,  498,  497,  496,
+      495,  494,  493,  492,  491,  487,  486,  484,  482,  481,
+      480,  479,  477,  476,  475,  472,  471,  470,  467,  466,
+      465,  460,  459,  458,  457,  453,  452,  450,  449,  448,
+      446,  444,  443,  442,  441,  439,  436,  435,  434,  433,
+      432,  431,  428,  427,  426,  425,  424,  423,  421,  420,
+      419,  418,  417,  416,  414,  413,  411,  408,  407,  406,
+      405,  404,  403,  402,  401,  399,  398,  397,  396,  395,
+      394,  393,  391,  389,  388,  387,  385,  384,  381,  379,
+      377,  375,  374,  373,  371,  370,  368,  367,  366,  365,
+
+      364,  363,  362,  361,  360,  359,  358,  357,  356,  355,
+      352,  351,  350,  349,  347,  346,  345,  344,  343,  342,
+      338,  337,  336,  335,  333,  332,  331,  325,  324,  323,
+      322,  321,  320,  319,  318,  317,  316,  312,  311,  310,
+      306,  304,  303,  302,  301,  300,  299,  298,  297,  296,
+      295,  294,  293,  292,  291,  290,  289,  287,  286,  285,
+      283,  282,  280,  279,  276,  273,  272,  271,  270,  269,
+      268,  266,  264,  262,  260,  259,  258,  257,  256,  255,
+      253,  250,  249,  248,  247,  246,  245,  244,  242,  241,
+      240,  239,  238,  233,  232,  231,  230,  229,  228,  227,
+
+      225,  224,  223,  206,  205,  204,  195,  194,  193,  192,
+      186,  182,  181,  178,  173,  172,  170,  169,  168,  166,
+      165,  164,  163,  162,  161,  160,  159,  158,  157,  155,
+      153,  146,  145,  142,  141,  140,  139,  138,  133,  131,
+      129,  127,  126,  125,  122,  120,  118,  116,  115,  112,
+      111,  109,  104,  102,  100,   96,   93,   92,   83,   78,
+       74,   73,   70,   69,   64,   60,   56,   55,   54,   50,
+       47,   46,   45,   44,   43,   42,   41,   35,   33,   29,
+       27,   26,   25,   24,   20,   15,   12,   10,    8,    6,
+        4,    2,  545,  545,  545,  545,  545,  545,  545,  545,
+
+      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
+      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
+      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
+      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
+      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
+      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
+      545
     } ;
 
 /* Table of booleans, true if rule could match eol. */
-static const flex_int32_t yy_rule_can_match_eol[167] =
+static const flex_int32_t yy_rule_can_match_eol[168] =
     {   0,
 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
     0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
@@ -860,7 +872,7 @@ static const flex_int32_t yy_rule_can_match_eol[167] =
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-    0, 0, 1, 0, 1, 1, 0,     };
+    0, 0, 0, 1, 0, 1, 1, 0,     };
 
 static yy_state_type yy_last_accepting_state;
 static char *yy_last_accepting_cpos;
@@ -1615,13 +1627,13 @@ yy_match:
 			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
 				{
 				yy_current_state = (int) yy_def[yy_current_state];
-				if ( yy_current_state >= 530 )
+				if ( yy_current_state >= 546 )
 					yy_c = yy_meta[yy_c];
 				}
 			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
 			++yy_cp;
 			}
-		while ( yy_base[yy_current_state] != 965 );
+		while ( yy_base[yy_current_state] != 993 );
 
 yy_find_action:
 		yy_act = yy_accept[yy_current_state];
@@ -2248,55 +2260,55 @@ YY_RULE_SETUP
 	YY_BREAK
 case 146:
 YY_RULE_SETUP
-{ return IF_KEY; }
+{ return OP_COUNTLEADINGZEROS; }
 	YY_BREAK
 case 147:
 YY_RULE_SETUP
-{ return GOTO_KEY; }
+{ return IF_KEY; }
 	YY_BREAK
 case 148:
 YY_RULE_SETUP
-{ return CALL_KEY; }
+{ return GOTO_KEY; }
 	YY_BREAK
 case 149:
 YY_RULE_SETUP
-{ return RETURN_KEY; }
+{ return CALL_KEY; }
 	YY_BREAK
 case 150:
 YY_RULE_SETUP
-{ return DELAYSLOT_KEY; }
+{ return RETURN_KEY; }
 	YY_BREAK
 case 151:
 YY_RULE_SETUP
-{ return CROSSBUILD_KEY; }
+{ return DELAYSLOT_KEY; }
 	YY_BREAK
 case 152:
 YY_RULE_SETUP
-{ return EXPORT_KEY; }
+{ return CROSSBUILD_KEY; }
 	YY_BREAK
 case 153:
 YY_RULE_SETUP
-{ return BUILD_KEY; }
+{ return EXPORT_KEY; }
 	YY_BREAK
 case 154:
 YY_RULE_SETUP
-{ return LOCAL_KEY; }
+{ return BUILD_KEY; }
 	YY_BREAK
 case 155:
 YY_RULE_SETUP
-{ yylval.ch = yytext[0]; return yytext[0]; }
+{ return LOCAL_KEY; }
 	YY_BREAK
 case 156:
 YY_RULE_SETUP
-
+{ yylval.ch = yytext[0]; return yytext[0]; }
 	YY_BREAK
 case 157:
 YY_RULE_SETUP
-{ return find_symbol();   }
+
 	YY_BREAK
 case 158:
 YY_RULE_SETUP
-{ return scan_number(yytext,&yylval,false); }
+{ return find_symbol();   }
 	YY_BREAK
 case 159:
 YY_RULE_SETUP
@@ -2308,25 +2320,29 @@ YY_RULE_SETUP
 	YY_BREAK
 case 161:
 YY_RULE_SETUP
-
+{ return scan_number(yytext,&yylval,false); }
 	YY_BREAK
 case 162:
-/* rule 162 can match eol */
 YY_RULE_SETUP
-{ slgh->nextLine(); }
+
 	YY_BREAK
 case 163:
+/* rule 163 can match eol */
 YY_RULE_SETUP
-{ return yytext[0]; }
+{ slgh->nextLine(); }
 	YY_BREAK
 case 164:
-/* rule 164 can match eol */
 YY_RULE_SETUP
-{ slgh->nextLine(); BEGIN( preprocess(preproc,preproc) ); }
+{ return yytext[0]; }
 	YY_BREAK
 case 165:
 /* rule 165 can match eol */
 YY_RULE_SETUP
+{ slgh->nextLine(); BEGIN( preprocess(preproc,preproc) ); }
+	YY_BREAK
+case 166:
+/* rule 166 can match eol */
+YY_RULE_SETUP
 { slgh->nextLine(); }
 	YY_BREAK
 case YY_STATE_EOF(INITIAL):
@@ -2347,7 +2363,7 @@ case YY_STATE_EOF(preproc):
           slgh->parseFileFinished();
         }
 	YY_BREAK
-case 166:
+case 167:
 YY_RULE_SETUP
 ECHO;
 	YY_BREAK
@@ -2646,7 +2662,7 @@ static int yy_get_next_buffer (void)
 		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
 			{
 			yy_current_state = (int) yy_def[yy_current_state];
-			if ( yy_current_state >= 530 )
+			if ( yy_current_state >= 546 )
 				yy_c = yy_meta[yy_c];
 			}
 		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
@@ -2674,11 +2690,11 @@ static int yy_get_next_buffer (void)
 	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
 		{
 		yy_current_state = (int) yy_def[yy_current_state];
-		if ( yy_current_state >= 530 )
+		if ( yy_current_state >= 546 )
 			yy_c = yy_meta[yy_c];
 		}
 	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
-	yy_is_jam = (yy_current_state == 529);
+	yy_is_jam = (yy_current_state == 545);
 
 		return yy_is_jam ? 0 : yy_current_state;
 }
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.l b/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.l
index 459394f1d..df7e6ed9e 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.l
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.l
@@ -643,6 +643,7 @@ with   { BEGIN(pattern); withsection = 1; slgh->calcContextLayout(); return WITH
 <sem>cpool         { return OP_CPOOLREF; }
 <sem>newobject     { return OP_NEW; }
 <sem>popcount      { return OP_POPCOUNT; }
+<sem>countLeadingZeros { return OP_COUNTLEADINGZEROS; }
 <sem>if            { return IF_KEY; }
 <sem>goto          { return GOTO_KEY; }
 <sem>call          { return CALL_KEY; }
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/typeop.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/typeop.cc
index aa5744b0c..2b09dcb0e 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/typeop.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/typeop.cc
@@ -103,6 +103,7 @@ void TypeOp::registerInstructions(vector<TypeOp *> &inst,TypeFactory *tlst,
   inst[CPUI_INSERT] = new TypeOpInsert(tlst);
   inst[CPUI_EXTRACT] = new TypeOpExtract(tlst);
   inst[CPUI_POPCOUNT] = new TypeOpPopcount(tlst);
+  inst[CPUI_COUNTLEADINGZEROS] = new TypeOpCountLeadingZeros(tlst);
 }
 
 /// Change basic data-type info (signed vs unsigned) and operator names ( '>>' vs '>>>' )
@@ -2346,3 +2347,10 @@ TypeOpPopcount::TypeOpPopcount(TypeFactory *t)
   opflags = PcodeOp::unary;
   behave = new OpBehaviorPopcount();
 }
+
+TypeOpCountLeadingZeros::TypeOpCountLeadingZeros(TypeFactory *t)
+  : TypeOpFunc(t,CPUI_COUNTLEADINGZEROS,"COUNTLEADINGZEROS",TYPE_INT,TYPE_UNKNOWN)
+{
+  opflags = PcodeOp::unary;
+  behave = new OpBehaviorCountLeadingZeros();
+}
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/typeop.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/typeop.hh
index f8976eb5e..cfde1c4c6 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/typeop.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/typeop.hh
@@ -858,4 +858,11 @@ public:
   virtual void push(PrintLanguage *lng,const PcodeOp *op,const PcodeOp *readOp) const { lng->opPopcountOp(op); }
 };
 
+/// \brief Information about the COUNTLEADINGZEROS op-code
+class TypeOpCountLeadingZeros : public TypeOpFunc {
+public:
+  TypeOpCountLeadingZeros(TypeFactory *t);			///< Constructor
+  virtual void push(PrintLanguage *lng,const PcodeOp *op,const PcodeOp *readOp) const { lng->opCountLeadingZerosOp(op); }
+};
+
 #endif
diff --git a/Ghidra/Features/Decompiler/src/main/doc/pcoderef.xml b/Ghidra/Features/Decompiler/src/main/doc/pcoderef.xml
index 52cd43a88..4e2338d27 100644
--- a/Ghidra/Features/Decompiler/src/main/doc/pcoderef.xml
+++ b/Ghidra/Features/Decompiler/src/main/doc/pcoderef.xml
@@ -2,7 +2,7 @@
 <article id="pcoderef_title">
 <info>
   <title>P-Code Reference Manual</title>
-  <releaseinfo>Last updated September 5, 2019</releaseinfo>
+  <releaseinfo>Last updated July 11, 2022</releaseinfo>
 </info>
 <table xml:id="mytoc.htmltable" width="90%" frame='none'>
   <col width="25%"/>
@@ -136,6 +136,12 @@
  <td><link linkend="cpui_bool_and">BOOL_AND</link></td>
  <td><link linkend="cpui_new">NEW</link></td>
 </tr>
+<tr>
+ <td></td>
+ <td><link linkend="cpui_countleadingzeros">COUNTLEADINGZEROS</link></td>
+ <td></td>
+ <td></td>
+</tr>
 </tbody>
 </table>
 <sect1 id="index">
@@ -3937,6 +3943,50 @@ to SLEIGH <emphasis role="bold">bitrange</emphasis> syntax such as output = inpu
 </para>
 </sect2>
 
+<sect2 id="cpui_countleadingzeros"><title>COUNTLEADINGZEROS</title>
+<informalexample>
+<table xml:id="countleadingzeros.htmltable" frame="above" width="80%" rules="groups">
+<col width="23%"/>
+<col width="15%"/>
+<col width="61%"/>
+<thead>
+<tr>
+  <td align="center" colspan="2"><emphasis role="bold">Parameters</emphasis></td>
+  <td><emphasis role="bold">Description</emphasis></td>
+</tr>
+</thead>
+<tbody>
+<tr>
+  <td align='right'>input0</td>
+  <td/>
+  <td>Input varnode to count.</td>
+</tr>
+<tr>
+  <td align='right'>output</td>
+  <td/>
+  <td>Resulting integer varnode containing count.</td>
+</tr>
+</tbody>
+<tfoot>
+<tr>
+  <td align="center" colspan="2"><emphasis role="bold">Semantic statement</emphasis></td>
+  <td/>
+</tr>
+<tr>
+  <td/>
+  <td colspan="2"><code>output = countLeadingZeros(input0);</code></td>
+</tr>
+</tfoot>
+</table>
+</informalexample>
+<para>
+This operator counts the number of zeros starting at the most significant bit.
+For instance, for a 4-byte varnode, a value of 0 returns 32, a value of 1
+returns 31, and the value 2<superscript>31</superscript> returns 0.
+The resulting count is zero extended into the output varnode.
+</para>
+</sect2>
+
 </sect1>
 
 <sect1 id="reference">
@@ -4420,6 +4470,11 @@ to SLEIGH <emphasis role="bold">bitrange</emphasis> syntax such as output = inpu
   <td><code>&lt;na></code></td>
   <td>Extract a bit-range from a varnode</td>
 </tr>
+<tr>
+  <td>COUNTLEADINGZEROS</td>
+  <td><code>countLeadingZeros(v0)</code></td>
+  <td>Counts the number of leading zero bits</td>
+</tr>
 </tbody>
 </table>
 </informalexample>
diff --git a/Ghidra/Features/Decompiler/src/main/doc/sleigh.xml b/Ghidra/Features/Decompiler/src/main/doc/sleigh.xml
index e9fc067f9..307a8bbcc 100644
--- a/Ghidra/Features/Decompiler/src/main/doc/sleigh.xml
+++ b/Ghidra/Features/Decompiler/src/main/doc/sleigh.xml
@@ -4,7 +4,7 @@
   <title>SLEIGH</title>
   <subtitle>A Language for Rapid Processor Specification</subtitle>
   <pubdate>Originally published December 16, 2005</pubdate>
-  <releaseinfo>Last updated August 24, 2022</releaseinfo>
+  <releaseinfo>Last updated September 14, 2022</releaseinfo>
 </info>
 <simplesect id="sleigh_history">
 <info>
@@ -279,7 +279,8 @@ general purpose processor instruction sets. They break up into groups.
 </tr>
 <tr>
   <td>Logical</td>
-  <td><code>INT_NEGATE, INT_XOR, INT_AND, INT_OR, INT_LEFT, INT_RIGHT, INT_SRIGHT, POPCOUNT</code></td>
+  <td><code>INT_NEGATE, INT_XOR, INT_AND, INT_OR, INT_LEFT, INT_RIGHT, INT_SRIGHT,
+  POPCOUNT, COUNTLEADINGZEROS</code></td>
 </tr>
 <tr>
   <td>Integer Comparison</td>
@@ -3856,6 +3857,12 @@ to lowest.
   <td>Count the number of 1 bits in v0.
   </td>
 </tr>
+<tr>
+  <td><code>COUNTLEADINGZEROS</code></td>
+  <td><code>countLeadingZeros(v0)</code></td>
+  <td>Count the number of leading 0 bits in v0.
+  </td>
+</tr>
 <tr>
   <td><code>(simulated)</code></td>
   <td><code>v0[6,1]</code></td>
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcode/emulate/callother/CountLeadingOnesOpBehavior.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcode/emulate/callother/CountLeadingOnesOpBehavior.java
deleted file mode 100644
index 196f438a1..000000000
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcode/emulate/callother/CountLeadingOnesOpBehavior.java
+++ /dev/null
@@ -1,57 +0,0 @@
-/* ###
- * IP: GHIDRA
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package ghidra.pcode.emulate.callother;
-
-import ghidra.pcode.emulate.Emulate;
-import ghidra.pcode.memstate.MemoryState;
-import ghidra.pcodeCPort.error.LowlevelError;
-import ghidra.program.model.pcode.Varnode;
-
-public class CountLeadingOnesOpBehavior implements OpBehaviorOther {
-
-	@Override
-	public void evaluate(Emulate emu, Varnode out, Varnode[] inputs) {
-
-		if (out == null) {
-			throw new LowlevelError("CALLOTHER: Count Leading Ones op missing required output");
-		}
-
-		if (inputs.length != 2 || inputs[1].getSize() == 0 || inputs[1].isConstant()) {
-			throw new LowlevelError(
-				"CALLOTHER: Count Leading Ones op requires one non-constant varnode input");
-		}
-
-		// TODO: add support for larger varnode sizes
-
-		Varnode in = inputs[1];
-		if (in.getSize() > 8 || out.getSize() > 8) {
-			throw new LowlevelError(
-				"CALLOTHER: Count Leading Ones op only supports varnodes of size 8-bytes or less");
-		}
-
-		MemoryState memoryState = emu.getMemoryState();
-
-		long value = memoryState.getValue(in);
-		long mask = 1L << ((in.getSize() * 8) - 1);
-		long count = 0;
-		while ( (mask & value) != 0 ) {
-			++count;
-			value = value << 1;
-		}
-
-		memoryState.setValue(out, count);
-	}
-}
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcode/emulate/callother/CountLeadingZerosOpBehavior.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcode/emulate/callother/CountLeadingZerosOpBehavior.java
deleted file mode 100644
index b65ee6b27..000000000
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcode/emulate/callother/CountLeadingZerosOpBehavior.java
+++ /dev/null
@@ -1,60 +0,0 @@
-/* ###
- * IP: GHIDRA
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package ghidra.pcode.emulate.callother;
-
-import ghidra.pcode.emulate.Emulate;
-import ghidra.pcode.memstate.MemoryState;
-import ghidra.pcodeCPort.error.LowlevelError;
-import ghidra.program.model.pcode.Varnode;
-
-public class CountLeadingZerosOpBehavior implements OpBehaviorOther {
-
-	@Override
-	public void evaluate(Emulate emu, Varnode out, Varnode[] inputs) {
-
-		if (out == null) {
-			throw new LowlevelError("CALLOTHER: Count Leading Zeros op missing required output");
-		}
-
-		if (inputs.length != 2 || inputs[1].getSize() == 0 || inputs[1].isConstant()) {
-			throw new LowlevelError(
-				"CALLOTHER: Count Leading Zeros op requires one non-constant varnode input");
-		}
-
-		// TODO: add support for larger varnode sizes
-
-		Varnode in = inputs[1];
-		if (in.getSize() > 8 || out.getSize() > 8) {
-			throw new LowlevelError(
-				"CALLOTHER: Count Leading Zeros op only supports varnodes of size 8-bytes or less");
-		}
-
-		MemoryState memoryState = emu.getMemoryState();
-
-		long value = memoryState.getValue(in);
-		long mask = 1L << ((in.getSize() * 8) - 1);
-		long count = 0;
-		while (mask != 0) {
-			if ((mask & value) != 0) {
-				break;
-			}
-			++count;
-			mask >>>= 1;
-		}
-
-		memoryState.setValue(out, count);
-	}
-}
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcode/opbehavior/OpBehaviorCountLeadingZeros.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcode/opbehavior/OpBehaviorCountLeadingZeros.java
new file mode 100644
index 000000000..0f4e0381f
--- /dev/null
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcode/opbehavior/OpBehaviorCountLeadingZeros.java
@@ -0,0 +1,48 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package ghidra.pcode.opbehavior;
+
+import java.math.BigInteger;
+
+import ghidra.program.model.pcode.PcodeOp;
+
+public class OpBehaviorCountLeadingZeros extends UnaryOpBehavior {
+
+	public OpBehaviorCountLeadingZeros() {
+		super(PcodeOp.COUNTLEADINGZEROS);
+	}
+
+	@Override
+	public long evaluateUnary(int sizeout, int sizein, long val) {
+		long mask = 1L << ((sizein * 8) - 1);
+		long count = 0;
+		while (mask != 0) {
+			if ((mask & val) != 0) {
+				break;
+			}
+			++count;
+			mask >>>= 1;
+		}
+
+		return count;
+	}
+
+	@Override
+	public BigInteger evaluateUnary(int sizeout, int sizein, BigInteger unsignedIn1) {
+		// TODO Auto-generated method stub
+		return null;
+	}
+}
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcode/opbehavior/OpBehaviorFactory.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcode/opbehavior/OpBehaviorFactory.java
index 3bb4794ad..0008f0eca 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcode/opbehavior/OpBehaviorFactory.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcode/opbehavior/OpBehaviorFactory.java
@@ -104,6 +104,7 @@ public class OpBehaviorFactory {
 		opBehaviorMap.put(PcodeOp.INSERT, new SpecialOpBehavior(PcodeOp.INSERT));
 		opBehaviorMap.put(PcodeOp.EXTRACT, new SpecialOpBehavior(PcodeOp.EXTRACT));
 		opBehaviorMap.put(PcodeOp.POPCOUNT, new OpBehaviorPopcount());
+		opBehaviorMap.put(PcodeOp.COUNTLEADINGZEROS, new OpBehaviorCountLeadingZeros());
 	}
 
 	private OpBehaviorFactory() {
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/opcodes/OpCode.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/opcodes/OpCode.java
index 020ec96d6..d5a031d1f 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/opcodes/OpCode.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/opcodes/OpCode.java
@@ -113,6 +113,7 @@ public enum OpCode {
 	CPUI_INSERT,
 	CPUI_EXTRACT,
 	CPUI_POPCOUNT,
+	CPUI_COUNTLEADINGZEROS,
 
 	CPUI_MAX;
 
@@ -203,13 +204,14 @@ public enum OpCode {
 		"UNUSED1", "FLOAT_NAN", "FLOAT_ADD", "FLOAT_DIV", "FLOAT_MULT", "FLOAT_SUB",
 		"FLOAT_NEG", "FLOAT_ABS", "FLOAT_SQRT", "INT2FLOAT", "FLOAT2FLOAT", "TRUNC", "CEIL",
 		"FLOOR", "ROUND", "BUILD", "DELAY_SLOT", "PIECE", "SUBPIECE", "CAST", "LABEL",
-		"CROSSBUILD", "SEGMENTOP", "CPOOLREF", "NEW", "INSERT", "EXTRACT", "POPCOUNT" };
+		"CROSSBUILD", "SEGMENTOP", "CPOOLREF", "NEW", "INSERT", "EXTRACT", "POPCOUNT",
+		"COUNTLEADINGZEROS" };
 
 	public static String get_opname(OpCode op) {
 		return opcode_name[op.ordinal()];
 	}
 
-	static final int opcode_indices[] = { 0, 39, 37, 40, 38, 4, 6, 60, 7, 8, 9, 64, 5, 57, 1, 68, 66,
+	static final int opcode_indices[] = { 0, 39, 37, 40, 38, 4, 6, 60, 7, 8, 9, 64, 5, 57, 1, 73, 68, 66,
 			61, 71, 55, 52, 47, 48, 41, 43, 44, 49, 46, 51, 42, 53, 50, 58, 70, 54, 24, 19, 27, 21,
 			33, 11, 29, 15, 16, 32, 25, 12, 28, 35, 30, 23, 22, 34, 18, 13, 14, 36, 31, 20, 26, 17,
 			65, 2, 69, 62, 72, 10, 59, 67, 3, 63, 56, 45 };
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/PcodeCompile.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/PcodeCompile.java
index fa4b7a2d1..08a05abc3 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/PcodeCompile.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/PcodeCompile.java
@@ -996,6 +996,9 @@ public abstract class PcodeCompile {
 		if ("popcount".equals(name) && hasOperands(1, operands, location, name)) {
 			return createOp(location, OpCode.CPUI_POPCOUNT, r);
 		}
+		if ("countLeadingZeros".equals(name) && hasOperands(1, operands, location, name)) {
+			return createOp(location, OpCode.CPUI_COUNTLEADINGZEROS, r);
+		}
 
 		return null;
 	}
@@ -1073,6 +1076,9 @@ public abstract class PcodeCompile {
 		if ("popcount".equals(name)) {
 			return true;
 		}
+		if ("countLeadingZeros".equals(name)) {
+			return true;
+		}
 
 		return false;
 	}
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/DynamicHash.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/DynamicHash.java
index 5cf5d0833..fab69c049 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/DynamicHash.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/DynamicHash.java
@@ -75,7 +75,7 @@ public class DynamicHash {
 		0,				// CAST is skipped
 		PcodeOp.INT_ADD, PcodeOp.INT_ADD,		// PTRADD and PTRSUB hash same as INT_ADD
 		PcodeOp.SEGMENTOP, PcodeOp.CPOOLREF, PcodeOp.NEW, PcodeOp.INSERT, PcodeOp.EXTRACT,
-		PcodeOp.POPCOUNT };
+		PcodeOp.POPCOUNT, PcodeOp.COUNTLEADINGZEROS };
 
 	/**
 	 * An edge between a Varnode and a PcodeOp
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/PcodeOp.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/PcodeOp.java
index aa889a4fe..6e5dbc45c 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/PcodeOp.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/pcode/PcodeOp.java
@@ -132,8 +132,9 @@ public class PcodeOp {
 	public static final int INSERT = 70;
 	public static final int EXTRACT = 71;
 	public static final int POPCOUNT = 72;
+	public static final int COUNTLEADINGZEROS = 73;
 
-	public static final int PCODE_MAX = 73;
+	public static final int PCODE_MAX = 75;
 
 	private static Hashtable<String, Integer> opcodeTable;
 
@@ -689,6 +690,8 @@ public class PcodeOp {
 				return "EXTRACT";
 			case POPCOUNT:
 				return "POPCOUNT";
+			case COUNTLEADINGZEROS:
+				return "COUNTLEADINGZEROS";
 
 			default:
 				return "INVALID_OP";
diff --git a/Ghidra/Processors/68000/data/languages/68000.pspec b/Ghidra/Processors/68000/data/languages/68000.pspec
index 14df2cbd6..52e71d47e 100644
--- a/Ghidra/Processors/68000/data/languages/68000.pspec
+++ b/Ghidra/Processors/68000/data/languages/68000.pspec
@@ -2,7 +2,6 @@
 
 <processor_spec>
   <properties>
-    <property key="emulateInstructionStateModifierClass" value="ghidra.program.emulation.m68kEmulateInstructionStateModifier"/>
     <property key="assemblyRating:68000:BE:32:default" value="PLATINUM"/>
   </properties>
   <programcounter register="PC"/>
diff --git a/Ghidra/Processors/68000/data/languages/68000.sinc b/Ghidra/Processors/68000/data/languages/68000.sinc
index ef66c488b..a196dbcea 100644
--- a/Ghidra/Processors/68000/data/languages/68000.sinc
+++ b/Ghidra/Processors/68000/data/languages/68000.sinc
@@ -861,8 +861,6 @@ with : extGUARD=1 {
    logflags(); tmp:4 = e2l; getbitfield(tmp, f_off, f_wd); f_reg = tmp; resbitflags(f_reg, f_wd-1);
 }
 
-define pcodeop countLeadingZeros;
-
 :bfffo e2l{f_off:f_wd},f_reg	is opbig=0xed & op67=3 & $(DAT_DIR_CTL_ADDR_MODES); f_off & f_wd & f_reg & flddo=0 & fldoffdat=0 & flddw=0 & fldwddat=0; e2l
 					[ savmod2=savmod1; regtsan=regtfan; ] {
 	# "Find First One in Bit Field" pronounced "boo-foe"
diff --git a/Ghidra/Processors/68000/src/main/java/ghidra/program/emulation/m68kEmulateInstructionStateModifier.java b/Ghidra/Processors/68000/src/main/java/ghidra/program/emulation/m68kEmulateInstructionStateModifier.java
deleted file mode 100644
index 98a56cd98..000000000
--- a/Ghidra/Processors/68000/src/main/java/ghidra/program/emulation/m68kEmulateInstructionStateModifier.java
+++ /dev/null
@@ -1,145 +0,0 @@
-/* ###
- * IP: GHIDRA
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package ghidra.program.emulation;
-
-import ghidra.pcode.emulate.Emulate;
-import ghidra.pcode.emulate.EmulateInstructionStateModifier;
-import ghidra.pcode.emulate.callother.CountLeadingZerosOpBehavior;
-import ghidra.pcode.emulate.callother.OpBehaviorOther;
-import ghidra.pcode.memstate.MemoryState;
-import ghidra.pcodeCPort.error.LowlevelError;
-import ghidra.program.model.pcode.Varnode;
-
-public class m68kEmulateInstructionStateModifier extends EmulateInstructionStateModifier {
-
-/*
-	private Register ismReg;
-	private Register isaModeReg;
-	private RegisterValue ISA_MODE0;
-	private RegisterValue ISA_MODE1;
-*/
-
-	public m68kEmulateInstructionStateModifier(Emulate emu) {
-		super(emu);
-/*
-		ismReg = language.getRegister("ISM");
-		isaModeReg = language.getRegister("ISA_MODE");
-		if (ismReg == null || isaModeReg == null) {
-			throw new RuntimeException("Expected language " + language.getLanguageID() +
-				" to have ISM and ISA_MODE registers defined");
-		}
-		ISA_MODE1 = new RegisterValue(isaModeReg, BigInteger.ONE);
-		ISA_MODE0 = new RegisterValue(isaModeReg, BigInteger.ZERO);
-*/
-
-		// These classes are defined here:
-		// ghidra/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcode/emulate/callother
-
-		registerPcodeOpBehavior("countLeadingZeros", new CountLeadingZerosOpBehavior());
-		registerPcodeOpBehavior("findFirstOne", new FindFirstOneOpBehavior());
-	}
-
-	/**
-	 * Initialize ISM register based upon context-register state before first
-	 * instruction is executed.
-	 */
-/*
-    @Override
-    public void initialExecuteCallback(Emulate emulate, Address current_address, RegisterValue contextRegisterValue) throws LowlevelError {
-            BigInteger isaModeValue = BigInteger.ZERO;
-            if (contextRegisterValue != null) {
-                    isaModeValue = contextRegisterValue.getRegisterValue(isaModeReg).getUnsignedValueIgnoreMask();
-            }
-            if (!BigInteger.ZERO.equals(isaModeValue)) {
-                    isaModeValue = BigInteger.ONE;
-            }
-            emu.getMemoryState().setValue(ismReg, isaModeValue);
-    }
-*/
-
-	/**
-	 * Use ISM register value to establish ISA_MODE when branching/calling. If
-	 * ISM = 0, check for odd destination address which may occur when
-	 * jumping/returning indirectly to Thumb mode. It is assumed that language
-	 * will properly handle context changes during the flow of execution, we
-	 * need only fix the current program counter.
-	 */
-/*
-    @Override
-    public void postExecuteCallback(Emulate emulate, Address lastExecuteAddress,
-                    PcodeOp[] lastExecutePcode, int lastPcodeIndex, Address currentAddress)
-                    throws LowlevelError {
-            if (lastPcodeIndex < 0) {
-                    // ignore fall-through condition
-                    return;
-            }
-            int lastOp = lastExecutePcode[lastPcodeIndex].getOpcode();
-            if (lastOp != PcodeOp.BRANCH && lastOp != PcodeOp.CBRANCH && lastOp != PcodeOp.BRANCHIND &&
-                    lastOp != PcodeOp.CALL && lastOp != PcodeOp.CALLIND && lastOp != PcodeOp.RETURN) {
-                    // only concerned with Branch, Call or Return ops
-                    return;
-            }
-            long tbValue = emu.getMemoryState().getValue(ismReg);
-            if (tbValue == 1) {
-                    // Thumb mode
-                    emu.setContextRegisterValue(ISA_MODE1); // change context to be consistent with ISM value
-                    if ((currentAddress.getOffset() & 0x1) == 1) {
-                            emulate.setExecuteAddress(currentAddress.previous());
-                    }
-            }
-            else {
-
-                    if ((currentAddress.getOffset() & 0x1) == 1) {
-                            throw new LowlevelError(
-                                    "Flow to odd address occurred without setting ISM register (16-bit mode)");
-                    }
-
-                    // MIPS mode
-                    emu.setContextRegisterValue(ISA_MODE0); // change context to be consistent with ISM value
-            }
-    }
-*/
-
-	private static class FindFirstOneOpBehavior implements OpBehaviorOther {
-
-		@Override
-		public void evaluate(Emulate emu, Varnode out, Varnode[] inputs) {
-			if (out == null) {
-				throw new LowlevelError("CALLOTHER: Find First One op missing required output");
-			}
-
-			if (inputs.length != 2 || inputs[1].getSize() == 0 || !inputs[1].isRegister()) {
-				throw new LowlevelError(
-					"CALLOTHER: Find First One op requires one register varnode input");
-			}
-
-			Varnode in = inputs[1];
-			MemoryState memoryState = emu.getMemoryState();
-
-			long value = memoryState.getValue(in);
-			long size = in.getSize() * 8;
-			long count = size - 1;
-			long mask = 1L << count;
-			while ((count >= 0) && ((mask & value) == 0)) {
-				--count;
-				value = value << 1;
-			}
-
-			memoryState.setValue(out, count >= 0 ? count : size);
-		}
-
-	}
-}
diff --git a/Ghidra/Processors/ARM/data/languages/ARM.sinc b/Ghidra/Processors/ARM/data/languages/ARM.sinc
index 5869bfe29..09f31819e 100644
--- a/Ghidra/Processors/ARM/data/languages/ARM.sinc
+++ b/Ghidra/Processors/ARM/data/languages/ARM.sinc
@@ -117,7 +117,6 @@ define context contextreg
 	ARMcondCk	= (35,35)   # Finished ARM condition check phase
 ;
 
-define pcodeop count_leading_zeroes;
 define pcodeop coprocessor_function;
 define pcodeop coprocessor_function2;
 define pcodeop coprocessor_load;
diff --git a/Ghidra/Processors/ARM/data/languages/ARMTHUMBinstructions.sinc b/Ghidra/Processors/ARM/data/languages/ARMTHUMBinstructions.sinc
index 85dad7d02..4ba138801 100644
--- a/Ghidra/Processors/ARM/data/languages/ARMTHUMBinstructions.sinc
+++ b/Ghidra/Processors/ARM/data/languages/ARMTHUMBinstructions.sinc
@@ -1608,7 +1608,7 @@ define pcodeop IndexCheck;
 :clz^ItCond	Rd0811,Rm0003		is TMode=1 & ItCond & op4=0xfab & Rm0003; op12=15 & Rd0811
 {
   build ItCond;
-  Rd0811 = count_leading_zeroes(Rm0003);
+  Rd0811 = countLeadingZeros(Rm0003);
 }
 
 :cmn^ItCond	Rn0003,ThumbExpandImm12  is TMode=1 & ItCond & (op11=0x1e & thc0909=0 & sop0508=8 & thc0404=1 & Rn0003; thc1515=0 & thc0811=15) & ThumbExpandImm12
diff --git a/Ghidra/Processors/ARM/data/languages/ARMinstructions.sinc b/Ghidra/Processors/ARM/data/languages/ARMinstructions.sinc
index 785f5a36f..661fc9c9c 100644
--- a/Ghidra/Processors/ARM/data/languages/ARMinstructions.sinc
+++ b/Ghidra/Processors/ARM/data/languages/ARMinstructions.sinc
@@ -2484,7 +2484,7 @@ ArmPCRelImmed12: reloff		is U23=0 & immed & rotate
 {
   build COND;
   build rm;
-  Rd = count_leading_zeroes(rm);
+  Rd = countLeadingZeros(rm);
 }
 
 @endif # VERSION_5
diff --git a/Ghidra/Processors/ARM/src/main/java/ghidra/program/emulation/ARMEmulateInstructionStateModifier.java b/Ghidra/Processors/ARM/src/main/java/ghidra/program/emulation/ARMEmulateInstructionStateModifier.java
index f5ce6859d..eaeb514c9 100644
--- a/Ghidra/Processors/ARM/src/main/java/ghidra/program/emulation/ARMEmulateInstructionStateModifier.java
+++ b/Ghidra/Processors/ARM/src/main/java/ghidra/program/emulation/ARMEmulateInstructionStateModifier.java
@@ -19,7 +19,6 @@ import java.math.BigInteger;
 
 import ghidra.pcode.emulate.Emulate;
 import ghidra.pcode.emulate.EmulateInstructionStateModifier;
-import ghidra.pcode.emulate.callother.CountLeadingZerosOpBehavior;
 import ghidra.pcode.error.LowlevelError;
 import ghidra.program.model.address.Address;
 import ghidra.program.model.lang.Register;
@@ -46,8 +45,6 @@ public class ARMEmulateInstructionStateModifier extends EmulateInstructionStateM
 			aMode = new RegisterValue(TModeReg, BigInteger.ZERO);
 		}
 
-		registerPcodeOpBehavior("count_leading_zeroes", new CountLeadingZerosOpBehavior());
-
 		/**
 		 * We could registerPcodeOpBehavior for one or more of the following pcodeop's:
 		 *  
@@ -85,7 +82,6 @@ public class ARMEmulateInstructionStateModifier extends EmulateInstructionStateM
 		  coprocessor_store2
 		  coprocessor_storelong
 		  coprocessor_storelong2
-		  count_leading_zeroes
 		  disableDataAbortInterrupts
 		  disableFIQinterrupts
 		  disableIRQinterrupts
diff --git a/Ghidra/Processors/MIPS/data/languages/mips.sinc b/Ghidra/Processors/MIPS/data/languages/mips.sinc
index d30d348c8..30cd0152c 100755
--- a/Ghidra/Processors/MIPS/data/languages/mips.sinc
+++ b/Ghidra/Processors/MIPS/data/languages/mips.sinc
@@ -910,12 +910,6 @@ define pcodeop getCopRegH;
 define pcodeop setCopReg;
 define pcodeop setCopRegH;
 
-# countLeadingOnes(val)
-define pcodeop countLeadingOnes;
-
-# countLeadingZeros(val)
-define pcodeop countLeadingZeros;
-
 # extractField(value, msbd, lsb)
 define pcodeop extractField;
 
diff --git a/Ghidra/Processors/MIPS/data/languages/mips32Instructions.sinc b/Ghidra/Processors/MIPS/data/languages/mips32Instructions.sinc
index 1e261d553..8ef8533ce 100644
--- a/Ghidra/Processors/MIPS/data/languages/mips32Instructions.sinc
+++ b/Ghidra/Processors/MIPS/data/languages/mips32Instructions.sinc
@@ -1001,7 +1001,7 @@ define pcodeop SYNC;
 # 0111 00ss ssst tttt dddd d000 0010 0001
 :clo RD, RSsrc                  is $(AMODE) & REL6=0 & prime=0x1C & sa=0x0 & fct=0x21 & RD & RSsrc {
     # Count leading ones in a word
-    RD = countLeadingOnes( RSsrc );
+    RD = countLeadingZeros( ~RSsrc );
 }
 
 # 0111 00ss ssst tttt dddd d000 0010 0000
@@ -1627,7 +1627,7 @@ define pcodeop popcnt;
 }
 
 :clo RD, RSsrc                  	is $(AMODE) & REL6=1 & prime=0x00 & op=0 & sa=0x1 & fct=0x11 & RD & RSsrc {
-    RD = countLeadingOnes( RSsrc );
+    RD = countLeadingZeros( ~RSsrc );
 }
 
 :clz RD, RSsrc                  	is $(AMODE) & REL6=1 & prime=0x00 & op=0 & sa=0x1 & fct=0x10 & RD & RSsrc {
diff --git a/Ghidra/Processors/MIPS/data/languages/mips64Instructions.sinc b/Ghidra/Processors/MIPS/data/languages/mips64Instructions.sinc
index 3c09b0b42..758053510 100644
--- a/Ghidra/Processors/MIPS/data/languages/mips64Instructions.sinc
+++ b/Ghidra/Processors/MIPS/data/languages/mips64Instructions.sinc
@@ -7,7 +7,7 @@
 
 # 0111 00ss ssst tttt dddd d000 0010 0101
 :dclo RD, RSsrc                 is $(AMODE) & ((REL6=0 & prime=0x1C & sa=0x0 & fct=0x25) | (REL6=1 & prime=0x00 & sa=0x1 & fct=0x13 & op=0)) & RD & RSsrc {
-    RD = countLeadingOnes( RSsrc );    
+    RD = countLeadingZeros( ~RSsrc );
 }
 # 0111 00ss ssst tttt dddd d000 0010 0100
 :dclz RD, RSsrc                 is $(AMODE) & ((REL6=0 & prime=0x1C & sa=0x0 & fct=0x24) | (REL6=1 & prime=0x00 & sa=0x1 & fct=0x12 & op=0)) & RD & RSsrc {
diff --git a/Ghidra/Processors/MIPS/data/languages/mipsmicro.sinc b/Ghidra/Processors/MIPS/data/languages/mipsmicro.sinc
index 23870b951..0e01c1f9f 100644
--- a/Ghidra/Processors/MIPS/data/languages/mipsmicro.sinc
+++ b/Ghidra/Processors/MIPS/data/languages/mipsmicro.sinc
@@ -697,7 +697,7 @@ STORE_TOP16: STORE_SREG^ra,EXT_CODE4E(sp) is mic_listr6 & REL6=1 & STORE_SREG &
 }
 
 :clo mic_rt32_5, RS0L						is ISA_MODE=1 & RELP=0 & mic_op=0b000000 & mic_rt32_5 & RS0L ; micb_poolax=0b111100 & micb_axf=0b0100101100   {
-    mic_rt32_5 = countLeadingOnes( RS0L );
+    mic_rt32_5 = countLeadingZeros( ~RS0L );
 }
 
 :clz mic_rt32_5, RS0L						is ISA_MODE=1 & RELP=0 & mic_op=0b000000 & mic_rt32_5 & RS0L ; micb_poolax=0b111100 & micb_axf=0b0101101100 {
@@ -1676,7 +1676,7 @@ STORE_TOP16: STORE_SREG^ra,EXT_CODE4E(sp) is mic_listr6 & REL6=1 & STORE_SREG &
 }
 
 :dclo mic_rt32_5, mic_rs32_0				is ISA_MODE=1 & RELP=0 & mic_op=0b010110 & mic_rt32_5 & mic_rs32_0 ; micb_poolax=0b111100 & micb_axf=0b0100101100 {
-    mic_rt32_5 = countLeadingOnes( mic_rs32_0 );
+    mic_rt32_5 = countLeadingZeros( ~mic_rs32_0 );
 }
 
 :dclz mic_rt32_5, mic_rs32_0				is ISA_MODE=1 & RELP=0 & mic_op=0b010110 & mic_rt32_5 & mic_rs32_0 ; micb_poolax=0b111100 & micb_axf=0b0101101100   {
diff --git a/Ghidra/Processors/MIPS/src/main/java/ghidra/program/emulation/MIPSEmulateInstructionStateModifier.java b/Ghidra/Processors/MIPS/src/main/java/ghidra/program/emulation/MIPSEmulateInstructionStateModifier.java
index a47332f56..374838074 100644
--- a/Ghidra/Processors/MIPS/src/main/java/ghidra/program/emulation/MIPSEmulateInstructionStateModifier.java
+++ b/Ghidra/Processors/MIPS/src/main/java/ghidra/program/emulation/MIPSEmulateInstructionStateModifier.java
@@ -19,8 +19,6 @@ import java.math.BigInteger;
 
 import ghidra.pcode.emulate.Emulate;
 import ghidra.pcode.emulate.EmulateInstructionStateModifier;
-import ghidra.pcode.emulate.callother.CountLeadingOnesOpBehavior;
-import ghidra.pcode.emulate.callother.CountLeadingZerosOpBehavior;
 import ghidra.pcode.error.LowlevelError;
 import ghidra.program.model.address.Address;
 import ghidra.program.model.lang.Register;
@@ -49,13 +47,6 @@ public class MIPSEmulateInstructionStateModifier extends EmulateInstructionState
 			ISA_MODE0 = new RegisterValue(isaModeReg, BigInteger.ZERO);
 		}
 
-		// These classes are defined here:
-		// ghidra/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcode/emulate/callother
-
-		registerPcodeOpBehavior("countLeadingZeros", new CountLeadingZerosOpBehavior());
-
-		registerPcodeOpBehavior("countLeadingOnes", new CountLeadingOnesOpBehavior());
-
 		/**
 		 * We could registerPcodeOpBehavior for one or more of the following
 		 * pcodeop's:
diff --git a/Ghidra/Processors/PowerPC/data/languages/ppc_common.sinc b/Ghidra/Processors/PowerPC/data/languages/ppc_common.sinc
index 8498e4bdc..aaa76cc4a 100644
--- a/Ghidra/Processors/PowerPC/data/languages/ppc_common.sinc
+++ b/Ghidra/Processors/PowerPC/data/languages/ppc_common.sinc
@@ -1415,7 +1415,6 @@ attach variables vrC_8_15 [vr0_8_15 vr1_8_15 vr2_8_15 vr3_8_15 vr4_8_15 vr5_8_15
 ################################################################
 
 define pcodeop clearHistory;
-define pcodeop countLeadingZeros;
 define pcodeop countTrailingZeros;
 define pcodeop dataCacheBlockAllocate;
 define pcodeop dataCacheBlockFlush;
diff --git a/Ghidra/Processors/PowerPC/src/main/java/ghidra/program/emulation/PPCEmulateInstructionStateModifier.java b/Ghidra/Processors/PowerPC/src/main/java/ghidra/program/emulation/PPCEmulateInstructionStateModifier.java
index 4b6a7a3cc..1e44af9bd 100644
--- a/Ghidra/Processors/PowerPC/src/main/java/ghidra/program/emulation/PPCEmulateInstructionStateModifier.java
+++ b/Ghidra/Processors/PowerPC/src/main/java/ghidra/program/emulation/PPCEmulateInstructionStateModifier.java
@@ -19,7 +19,6 @@ import java.math.BigInteger;
 
 import ghidra.pcode.emulate.Emulate;
 import ghidra.pcode.emulate.EmulateInstructionStateModifier;
-import ghidra.pcode.emulate.callother.CountLeadingZerosOpBehavior;
 import ghidra.pcode.emulate.callother.OpBehaviorOther;
 import ghidra.pcode.memstate.MemoryState;
 import ghidra.pcodeCPort.error.LowlevelError;
@@ -30,7 +29,6 @@ public class PPCEmulateInstructionStateModifier extends EmulateInstructionStateM
 	public PPCEmulateInstructionStateModifier(Emulate emu) {
 		super(emu);
 
-		registerPcodeOpBehavior("countLeadingZeros", new CountLeadingZerosOpBehavior());
 		registerPcodeOpBehavior("vectorPermute", new vectorPermuteOpBehavior());
 
 	}
diff --git a/Ghidra/Processors/x86/data/languages/lzcnt.sinc b/Ghidra/Processors/x86/data/languages/lzcnt.sinc
index be3861b87..b6a120dc1 100644
--- a/Ghidra/Processors/x86/data/languages/lzcnt.sinc
+++ b/Ghidra/Processors/x86/data/languages/lzcnt.sinc
@@ -11,57 +11,22 @@ macro lzcntflags(input, output) {
 
 :LZCNT Reg16, rm16	is vexMode=0 & opsize=0 & $(PRE_66) & $(PRE_F3) & byte=0x0F; byte=0xBD; Reg16 ... & rm16 {
 
-  countTmp:2 = 0;
-  inputTmp:2 = rm16;
-
- <loopbegin>
-  if ((inputTmp & 0x8000) != 0) goto <loopend>;
-
-  countTmp = countTmp + 1;
-  inputTmp = (inputTmp << 1) | 1;
-  goto <loopbegin>;
-
- <loopend>
-  lzcntflags(rm16, countTmp);
-  Reg16 = countTmp;
- 
+  Reg16 = countLeadingZeros(rm16);
+  lzcntflags(rm16, Reg16);
 }
 
 :LZCNT Reg32, rm32	is vexMode=0 & opsize=1 & $(PRE_F3) & byte=0x0F; byte=0xBD; Reg32 ... & check_Reg32_dest ... & rm32 {
 
-  countTmp:4 = 0;
-  inputTmp:4 = rm32;
-
- <loopbegin>
-  if ((inputTmp & 0x80000000) != 0) goto <loopend>;
-
-  countTmp = countTmp + 1;
-  inputTmp = (inputTmp << 1) | 1;
-  goto <loopbegin>;
-
- <loopend>
-  lzcntflags(rm32, countTmp);
-  Reg32 = countTmp;
+  Reg32 = countLeadingZeros(rm32);
+  lzcntflags(rm32, Reg32);
   build check_Reg32_dest;
 }
 
 @ifdef IA64
 :LZCNT Reg64, rm64	is $(LONGMODE_ON) & vexMode=0 & opsize=2 & $(PRE_F3) & $(REX_W) & byte=0x0F; byte=0xBD; Reg64 ... & rm64 {
 
-  countTmp:8 = 0;
-  inputTmp:8 = rm64;
-
- <loopbegin>
-  if ((inputTmp & 0x8000000000000000) != 0) goto <loopend>;
-
-  countTmp = countTmp + 1;
-  inputTmp = (inputTmp << 1) | 1;
-  goto <loopbegin>;
-
- <loopend>
-  lzcntflags(rm64, countTmp);
-  Reg64 = countTmp;
-  
+  Reg64 = countLeadingZeros(rm64);
+  lzcntflags(rm64, Reg64);
 }
 @endif
 
diff --git a/GhidraBuild/EclipsePlugins/GhidraSleighEditor/ghidra.xtext.sleigh/src/ghidra/xtext/sleigh/Sleigh.xtext b/GhidraBuild/EclipsePlugins/GhidraSleighEditor/ghidra.xtext.sleigh/src/ghidra/xtext/sleigh/Sleigh.xtext
index ed7bf29e7..bd0a24091 100644
--- a/GhidraBuild/EclipsePlugins/GhidraSleighEditor/ghidra.xtext.sleigh/src/ghidra/xtext/sleigh/Sleigh.xtext
+++ b/GhidraBuild/EclipsePlugins/GhidraSleighEditor/ghidra.xtext.sleigh/src/ghidra/xtext/sleigh/Sleigh.xtext
@@ -661,6 +661,7 @@ exprSingle returns Expression:
 	| pcodeop='floor' '(' op1=expr ')'
 	| pcodeop='round' '(' op1=expr ')'
 	| pcodeop='popcount' '(' op1=expr ')'
+	| pcodeop='countLeadingZeros' '(' op1=expr ')'
 	| pcodeop='cpool' '(' op1=expr ',' op2=expr ',' op3=expr ')'
 	| pcodeop='newobject' '(' op1=newObjParams ')'
 	| op=[macroOrPcode] op1=paramlist
@@ -1142,4 +1143,4 @@ terminal WS			: (' '|'\t'|'\r'|'\n')+;
 //
 //terminal DEFINENAME: 'synthetic:DEFINENAME';
 //terminal BEGINDEFINE: 'synthetic:BEGINDEFINE';  
-//terminal ENDDEFINE: 'synthetic:ENDDEFINE';
\ No newline at end of file
+//terminal ENDDEFINE: 'synthetic:ENDDEFINE';
diff --git a/GhidraDocs/languages/html/additionalpcode.html b/GhidraDocs/languages/html/additionalpcode.html
index cf80077a5..2f26d5e73 100644
--- a/GhidraDocs/languages/html/additionalpcode.html
+++ b/GhidraDocs/languages/html/additionalpcode.html
@@ -430,6 +430,49 @@ This operation is never generated as raw p-code, even though it is equivalent
 to SLEIGH <span class="bold"><strong>bitrange</strong></span> syntax such as output = input0[10,1].
 </p>
 </div>
+<div class="sect2">
+<div class="titlepage"><div><div><h3 class="title">
+<a name="cpui_countleadingzeros"></a>COUNTLEADINGZEROS</h3></div></div></div>
+<div class="informalexample"><div class="table">
+<a name="countleadingzeros.htmltable"></a><table xml:id="countleadingzeros.htmltable" frame="above" width="80%" rules="groups">
+<col width="23%">
+<col width="15%">
+<col width="61%">
+<thead><tr>
+  <td align="center" colspan="2"><span class="bold"><strong>Parameters</strong></span></td>
+  <td><span class="bold"><strong>Description</strong></span></td>
+</tr></thead>
+<tbody>
+<tr>
+  <td align="right">input0</td>
+  <td></td>
+  <td>Input varnode to count.</td>
+</tr>
+<tr>
+  <td align="right">output</td>
+  <td></td>
+  <td>Resulting integer varnode containing count.</td>
+</tr>
+</tbody>
+<tfoot>
+<tr>
+  <td align="center" colspan="2"><span class="bold"><strong>Semantic statement</strong></span></td>
+  <td></td>
+</tr>
+<tr>
+  <td></td>
+  <td colspan="2"><code class="code">output = countLeadingZeros(input0);</code></td>
+</tr>
+</tfoot>
+</table>
+</div></div>
+<p>
+This operator counts the number of zeros starting at the most significant bit.
+For instance, for a 4-byte varnode, a value of 0 returns 32, a value of 1
+returns 31, and the value 2<sup>31</sup> returns 0.
+The resulting count is zero extended into the output varnode.
+</p>
+</div>
 </div>
 <div class="navfooter">
 <hr>
diff --git a/GhidraDocs/languages/html/pcoderef.html b/GhidraDocs/languages/html/pcoderef.html
index 255621d35..322b4d0a0 100644
--- a/GhidraDocs/languages/html/pcoderef.html
+++ b/GhidraDocs/languages/html/pcoderef.html
@@ -26,7 +26,7 @@
 <div>
 <div><h1 class="title">
 <a name="pcoderef_title"></a>P-Code Reference Manual</h1></div>
-<div><p class="releaseinfo">Last updated September 5, 2019</p></div>
+<div><p class="releaseinfo">Last updated July 11, 2022</p></div>
 </div>
 <hr>
 </div>
@@ -163,6 +163,12 @@
  <td><a class="link" href="pcodedescription.html#cpui_bool_and" title="BOOL_AND">BOOL_AND</a></td>
  <td><a class="link" href="pseudo-ops.html#cpui_new" title="NEW">NEW</a></td>
 </tr>
+<tr>
+ <td></td>
+ <td><a class="link" href="additionalpcode.html#cpui_countleadingzeros" title="COUNTLEADINGZEROS">COUNTLEADINGZEROS</a></td>
+ <td></td>
+ <td></td>
+</tr>
 </tbody>
 </table>
 </div>
diff --git a/GhidraDocs/languages/html/reference.html b/GhidraDocs/languages/html/reference.html
index 9b694c154..74d045592 100644
--- a/GhidraDocs/languages/html/reference.html
+++ b/GhidraDocs/languages/html/reference.html
@@ -501,6 +501,11 @@
   <td><code class="code">&lt;na&gt;</code></td>
   <td>Extract a bit-range from a varnode</td>
 </tr>
+<tr>
+  <td>COUNTLEADINGZEROS</td>
+  <td><code class="code">countLeadingZeros(v0)</code></td>
+  <td>Counts the number of leading zero bits</td>
+</tr>
 </tbody>
 </table>
 </div></div>
diff --git a/GhidraDocs/languages/html/sleigh.html b/GhidraDocs/languages/html/sleigh.html
index aede7a2eb..6025ab0d7 100644
--- a/GhidraDocs/languages/html/sleigh.html
+++ b/GhidraDocs/languages/html/sleigh.html
@@ -27,7 +27,7 @@
 <div><h1 class="title">
 <a name="sleigh_title"></a>SLEIGH</h1></div>
 <div><h3 class="subtitle"><i>A Language for Rapid Processor Specification</i></h3></div>
-<div><p class="releaseinfo">Last updated August 24, 2022</p></div>
+<div><p class="releaseinfo">Last updated September 14, 2022</p></div>
 <div><p class="pubdate">Originally published December 16, 2005</p></div>
 </div>
 <hr>
@@ -372,7 +372,8 @@ general purpose processor instruction sets. They break up into groups.
 </tr>
 <tr>
   <td>Logical</td>
-  <td><code class="code">INT_NEGATE, INT_XOR, INT_AND, INT_OR, INT_LEFT, INT_RIGHT, INT_SRIGHT, POPCOUNT</code></td>
+  <td><code class="code">INT_NEGATE, INT_XOR, INT_AND, INT_OR, INT_LEFT, INT_RIGHT, INT_SRIGHT,
+  POPCOUNT, COUNTLEADINGZEROS</code></td>
 </tr>
 <tr>
   <td>Integer Comparison</td>
diff --git a/GhidraDocs/languages/html/sleigh_ref.html b/GhidraDocs/languages/html/sleigh_ref.html
index 4914495b4..6e7ea4d2c 100644
--- a/GhidraDocs/languages/html/sleigh_ref.html
+++ b/GhidraDocs/languages/html/sleigh_ref.html
@@ -83,6 +83,12 @@ to lowest.
   <td>Count the number of 1 bits in v0.
   </td>
 </tr>
+<tr>
+  <td><code class="code">COUNTLEADINGZEROS</code></td>
+  <td><code class="code">countLeadingZeros(v0)</code></td>
+  <td>Count the number of leading 0 bits in v0.
+  </td>
+</tr>
 <tr>
   <td><code class="code">(simulated)</code></td>
   <td><code class="code">v0[6,1]</code></td>
-- 
2.39.0

