From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Alessandro Gatti <a.gatti@frob.it>
Date: Sat, 4 Jan 2020 05:00:31 +0100
Subject: [PATCH] 1409: Implement decimal format modifier in Sleigh files.

---
 .../Decompiler/src/decompile/cpp/context.hh   |    1 +
 .../src/decompile/cpp/sleighbase.cc           |    2 +-
 .../src/decompile/cpp/slgh_compile.cc         |    6 +-
 .../src/decompile/cpp/slgh_compile.hh         |    2 +-
 .../Decompiler/src/decompile/cpp/slghparse.cc | 2439 +++++++++--------
 .../Decompiler/src/decompile/cpp/slghparse.hh |  176 +-
 .../Decompiler/src/decompile/cpp/slghparse.y  |   14 +-
 .../src/decompile/cpp/slghpatexpress.cc       |   22 +-
 .../src/decompile/cpp/slghpatexpress.hh       |    7 +-
 .../Decompiler/src/decompile/cpp/slghscan.cc  |  934 +++----
 .../Decompiler/src/decompile/cpp/slghscan.l   |    2 +
 .../antlr/ghidra/sleigh/grammar/BaseLexer.g   |   14 +-
 .../ghidra/sleigh/grammar/SleighCompiler.g    |    6 +-
 .../antlr/ghidra/sleigh/grammar/SleighEcho.g  |    2 +
 .../ghidra/sleigh/grammar/SleighParser.g      |   20 +-
 .../sleigh/expression/TokenField.java         |   12 +
 .../sleigh/symbol/OperandSymbol.java          |   13 +-
 .../pcodeCPort/sleighbase/SleighBase.java     |    2 +-
 .../pcodeCPort/slgh_compile/FieldQuality.java |    6 +-
 .../slgh_compile/SleighCompile.java           |    2 +-
 .../pcodeCPort/slghpatexpress/TokenField.java |    7 +-
 GhidraDocs/languages/html/sleigh_tokens.html  |   15 +-
 22 files changed, 1898 insertions(+), 1806 deletions(-)

diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/context.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/context.hh
index 8ae7012a6..8771ddd37 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/context.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/context.hh
@@ -24,6 +24,7 @@ class Token {			// A multiple-byte sized chunk of pattern in a bitstream
   int4 size;			// Number of bytes in token;
   int4 index;			// Index of this token, for resolving offsets
   bool bigendian;
+  uint4 base;			// The display base for the token, if used.
 public:
   Token(const string &nm,int4 sz,bool be,int4 ind) : name(nm) { size = sz; bigendian=be; index = ind; }
   int4 getSize(void) const { return size; }
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/sleighbase.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/sleighbase.cc
index 6b170df8e..4786165a4 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/sleighbase.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/sleighbase.cc
@@ -15,7 +15,7 @@
  */
 #include "sleighbase.hh"
 
-const int4 SleighBase::SLA_FORMAT_VERSION = 3;
+const int4 SleighBase::SLA_FORMAT_VERSION = 4;
 
 const uint4 SleighBase::MAX_UNIQUE_SIZE = 128;
 
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slgh_compile.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/slgh_compile.cc
index fb9e94d34..f5b646c65 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slgh_compile.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slgh_compile.cc
@@ -73,7 +73,7 @@ FieldQuality::FieldQuality(string *nm,uintb *l,uintb *h)
   high = *h;
   signext = false;
   flow = true;
-  hex = true;
+  base = 16;
   delete nm;
   delete l;
   delete h;
@@ -1882,7 +1882,7 @@ int4 SleighCompile::calcContextVarLayout(int4 start,int4 sz,int4 numbits)
       qual = contexttable[i+start].qual;
       uint4 l = qual->low - min + low;
       uint4 h = numbits-1-(max-qual->high);
-      ContextField *field = new ContextField(qual->signext,l,h);
+      ContextField *field = new ContextField(qual->signext,l,h,qual->base);
       addSymbol(new ContextSymbol(qual->name,field,sym,qual->low,qual->high,qual->flow));
     }
     
@@ -2498,7 +2498,7 @@ void SleighCompile::addTokenField(TokenSymbol *sym,FieldQuality *qual)
     s << "Field '" << qual->name << "' high must be less than token size";
     reportError(getCurrentLocation(), s.str());
   }
-  TokenField *field = new TokenField(sym->getToken(),qual->signext,qual->low,qual->high);
+  TokenField *field = new TokenField(sym->getToken(),qual->signext,qual->low,qual->high,qual->base);
   addSymbol(new ValueSymbol(qual->name,field));
   delete qual;
 }
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slgh_compile.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/slgh_compile.hh
index 91e12244b..5c4871807 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slgh_compile.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slgh_compile.hh
@@ -93,7 +93,7 @@ struct FieldQuality {
   uint4 high;		///< The most significant bit of the field within the token
   bool signext;		///< \b true if the field's value is signed
   bool flow;		///< \b true if the context \b flows for this field.
-  bool hex;		///< \b true if the field value is displayed in hex
+  uint4 base;		///< Base of number (2, 8, 10 or 16)
   FieldQuality(string *nm,uintb *l,uintb *h);	///< Constructor
 };
 
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.cc
index fe40d59a6..a6541ac49 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.cc
@@ -191,130 +191,132 @@ enum yysymbol_kind_t
   YYSYMBOL_NOFLOW_KEY = 82,                /* NOFLOW_KEY  */
   YYSYMBOL_HEX_KEY = 83,                   /* HEX_KEY  */
   YYSYMBOL_DEC_KEY = 84,                   /* DEC_KEY  */
-  YYSYMBOL_BIG_KEY = 85,                   /* BIG_KEY  */
-  YYSYMBOL_LITTLE_KEY = 86,                /* LITTLE_KEY  */
-  YYSYMBOL_SIZE_KEY = 87,                  /* SIZE_KEY  */
-  YYSYMBOL_WORDSIZE_KEY = 88,              /* WORDSIZE_KEY  */
-  YYSYMBOL_OFFSET_KEY = 89,                /* OFFSET_KEY  */
-  YYSYMBOL_NAMES_KEY = 90,                 /* NAMES_KEY  */
-  YYSYMBOL_VALUES_KEY = 91,                /* VALUES_KEY  */
-  YYSYMBOL_VARIABLES_KEY = 92,             /* VARIABLES_KEY  */
-  YYSYMBOL_PCODEOP_KEY = 93,               /* PCODEOP_KEY  */
-  YYSYMBOL_IS_KEY = 94,                    /* IS_KEY  */
-  YYSYMBOL_LOCAL_KEY = 95,                 /* LOCAL_KEY  */
-  YYSYMBOL_DELAYSLOT_KEY = 96,             /* DELAYSLOT_KEY  */
-  YYSYMBOL_CROSSBUILD_KEY = 97,            /* CROSSBUILD_KEY  */
-  YYSYMBOL_EXPORT_KEY = 98,                /* EXPORT_KEY  */
-  YYSYMBOL_BUILD_KEY = 99,                 /* BUILD_KEY  */
-  YYSYMBOL_CONTEXT_KEY = 100,              /* CONTEXT_KEY  */
-  YYSYMBOL_ELLIPSIS_KEY = 101,             /* ELLIPSIS_KEY  */
-  YYSYMBOL_GLOBALSET_KEY = 102,            /* GLOBALSET_KEY  */
-  YYSYMBOL_BITRANGE_KEY = 103,             /* BITRANGE_KEY  */
-  YYSYMBOL_CHAR = 104,                     /* CHAR  */
-  YYSYMBOL_INTEGER = 105,                  /* INTEGER  */
-  YYSYMBOL_INTB = 106,                     /* INTB  */
-  YYSYMBOL_STRING = 107,                   /* STRING  */
-  YYSYMBOL_SYMBOLSTRING = 108,             /* SYMBOLSTRING  */
-  YYSYMBOL_SPACESYM = 109,                 /* SPACESYM  */
-  YYSYMBOL_SECTIONSYM = 110,               /* SECTIONSYM  */
-  YYSYMBOL_TOKENSYM = 111,                 /* TOKENSYM  */
-  YYSYMBOL_USEROPSYM = 112,                /* USEROPSYM  */
-  YYSYMBOL_VALUESYM = 113,                 /* VALUESYM  */
-  YYSYMBOL_VALUEMAPSYM = 114,              /* VALUEMAPSYM  */
-  YYSYMBOL_CONTEXTSYM = 115,               /* CONTEXTSYM  */
-  YYSYMBOL_NAMESYM = 116,                  /* NAMESYM  */
-  YYSYMBOL_VARSYM = 117,                   /* VARSYM  */
-  YYSYMBOL_BITSYM = 118,                   /* BITSYM  */
-  YYSYMBOL_SPECSYM = 119,                  /* SPECSYM  */
-  YYSYMBOL_VARLISTSYM = 120,               /* VARLISTSYM  */
-  YYSYMBOL_OPERANDSYM = 121,               /* OPERANDSYM  */
-  YYSYMBOL_STARTSYM = 122,                 /* STARTSYM  */
-  YYSYMBOL_ENDSYM = 123,                   /* ENDSYM  */
-  YYSYMBOL_NEXT2SYM = 124,                 /* NEXT2SYM  */
-  YYSYMBOL_MACROSYM = 125,                 /* MACROSYM  */
-  YYSYMBOL_LABELSYM = 126,                 /* LABELSYM  */
-  YYSYMBOL_SUBTABLESYM = 127,              /* SUBTABLESYM  */
-  YYSYMBOL_128_ = 128,                     /* '}'  */
-  YYSYMBOL_129_ = 129,                     /* '='  */
-  YYSYMBOL_130_ = 130,                     /* '('  */
-  YYSYMBOL_131_ = 131,                     /* ')'  */
-  YYSYMBOL_132_ = 132,                     /* ','  */
-  YYSYMBOL_133_ = 133,                     /* '['  */
-  YYSYMBOL_134_ = 134,                     /* ']'  */
-  YYSYMBOL_135_ = 135,                     /* '{'  */
-  YYSYMBOL_136_ = 136,                     /* ':'  */
-  YYSYMBOL_137_ = 137,                     /* ' '  */
-  YYSYMBOL_YYACCEPT = 138,                 /* $accept  */
-  YYSYMBOL_spec = 139,                     /* spec  */
-  YYSYMBOL_definition = 140,               /* definition  */
-  YYSYMBOL_constructorlike = 141,          /* constructorlike  */
-  YYSYMBOL_endiandef = 142,                /* endiandef  */
-  YYSYMBOL_aligndef = 143,                 /* aligndef  */
-  YYSYMBOL_tokendef = 144,                 /* tokendef  */
-  YYSYMBOL_tokenprop = 145,                /* tokenprop  */
-  YYSYMBOL_contextdef = 146,               /* contextdef  */
-  YYSYMBOL_contextprop = 147,              /* contextprop  */
-  YYSYMBOL_fielddef = 148,                 /* fielddef  */
-  YYSYMBOL_contextfielddef = 149,          /* contextfielddef  */
-  YYSYMBOL_spacedef = 150,                 /* spacedef  */
-  YYSYMBOL_spaceprop = 151,                /* spaceprop  */
-  YYSYMBOL_varnodedef = 152,               /* varnodedef  */
-  YYSYMBOL_bitrangedef = 153,              /* bitrangedef  */
-  YYSYMBOL_bitrangelist = 154,             /* bitrangelist  */
-  YYSYMBOL_bitrangesingle = 155,           /* bitrangesingle  */
-  YYSYMBOL_pcodeopdef = 156,               /* pcodeopdef  */
-  YYSYMBOL_valueattach = 157,              /* valueattach  */
-  YYSYMBOL_nameattach = 158,               /* nameattach  */
-  YYSYMBOL_varattach = 159,                /* varattach  */
-  YYSYMBOL_macrodef = 160,                 /* macrodef  */
-  YYSYMBOL_withblockstart = 161,           /* withblockstart  */
-  YYSYMBOL_withblockmid = 162,             /* withblockmid  */
-  YYSYMBOL_withblock = 163,                /* withblock  */
-  YYSYMBOL_id_or_nil = 164,                /* id_or_nil  */
-  YYSYMBOL_bitpat_or_nil = 165,            /* bitpat_or_nil  */
-  YYSYMBOL_macrostart = 166,               /* macrostart  */
-  YYSYMBOL_rtlbody = 167,                  /* rtlbody  */
-  YYSYMBOL_constructor = 168,              /* constructor  */
-  YYSYMBOL_constructprint = 169,           /* constructprint  */
-  YYSYMBOL_subtablestart = 170,            /* subtablestart  */
-  YYSYMBOL_pexpression = 171,              /* pexpression  */
-  YYSYMBOL_pequation = 172,                /* pequation  */
-  YYSYMBOL_elleq = 173,                    /* elleq  */
-  YYSYMBOL_ellrt = 174,                    /* ellrt  */
-  YYSYMBOL_atomic = 175,                   /* atomic  */
-  YYSYMBOL_constraint = 176,               /* constraint  */
-  YYSYMBOL_contextblock = 177,             /* contextblock  */
-  YYSYMBOL_contextlist = 178,              /* contextlist  */
-  YYSYMBOL_section_def = 179,              /* section_def  */
-  YYSYMBOL_rtlfirstsection = 180,          /* rtlfirstsection  */
-  YYSYMBOL_rtlcontinue = 181,              /* rtlcontinue  */
-  YYSYMBOL_rtl = 182,                      /* rtl  */
-  YYSYMBOL_rtlmid = 183,                   /* rtlmid  */
-  YYSYMBOL_statement = 184,                /* statement  */
-  YYSYMBOL_expr = 185,                     /* expr  */
-  YYSYMBOL_sizedstar = 186,                /* sizedstar  */
-  YYSYMBOL_jumpdest = 187,                 /* jumpdest  */
-  YYSYMBOL_varnode = 188,                  /* varnode  */
-  YYSYMBOL_integervarnode = 189,           /* integervarnode  */
-  YYSYMBOL_lhsvarnode = 190,               /* lhsvarnode  */
-  YYSYMBOL_label = 191,                    /* label  */
-  YYSYMBOL_exportvarnode = 192,            /* exportvarnode  */
-  YYSYMBOL_familysymbol = 193,             /* familysymbol  */
-  YYSYMBOL_specificsymbol = 194,           /* specificsymbol  */
-  YYSYMBOL_charstring = 195,               /* charstring  */
-  YYSYMBOL_intblist = 196,                 /* intblist  */
-  YYSYMBOL_intbpart = 197,                 /* intbpart  */
-  YYSYMBOL_stringlist = 198,               /* stringlist  */
-  YYSYMBOL_stringpart = 199,               /* stringpart  */
-  YYSYMBOL_anystringlist = 200,            /* anystringlist  */
-  YYSYMBOL_anystringpart = 201,            /* anystringpart  */
-  YYSYMBOL_valuelist = 202,                /* valuelist  */
-  YYSYMBOL_valuepart = 203,                /* valuepart  */
-  YYSYMBOL_varlist = 204,                  /* varlist  */
-  YYSYMBOL_varpart = 205,                  /* varpart  */
-  YYSYMBOL_paramlist = 206,                /* paramlist  */
-  YYSYMBOL_oplist = 207,                   /* oplist  */
-  YYSYMBOL_anysymbol = 208                 /* anysymbol  */
+  YYSYMBOL_OCT_KEY = 85,                   /* OCT_KEY  */
+  YYSYMBOL_BIN_KEY = 86,                   /* BIN_KEY  */
+  YYSYMBOL_BIG_KEY = 87,                   /* BIG_KEY  */
+  YYSYMBOL_LITTLE_KEY = 88,                /* LITTLE_KEY  */
+  YYSYMBOL_SIZE_KEY = 89,                  /* SIZE_KEY  */
+  YYSYMBOL_WORDSIZE_KEY = 90,              /* WORDSIZE_KEY  */
+  YYSYMBOL_OFFSET_KEY = 91,                /* OFFSET_KEY  */
+  YYSYMBOL_NAMES_KEY = 92,                 /* NAMES_KEY  */
+  YYSYMBOL_VALUES_KEY = 93,                /* VALUES_KEY  */
+  YYSYMBOL_VARIABLES_KEY = 94,             /* VARIABLES_KEY  */
+  YYSYMBOL_PCODEOP_KEY = 95,               /* PCODEOP_KEY  */
+  YYSYMBOL_IS_KEY = 96,                    /* IS_KEY  */
+  YYSYMBOL_LOCAL_KEY = 97,                 /* LOCAL_KEY  */
+  YYSYMBOL_DELAYSLOT_KEY = 98,             /* DELAYSLOT_KEY  */
+  YYSYMBOL_CROSSBUILD_KEY = 99,            /* CROSSBUILD_KEY  */
+  YYSYMBOL_EXPORT_KEY = 100,               /* EXPORT_KEY  */
+  YYSYMBOL_BUILD_KEY = 101,                /* BUILD_KEY  */
+  YYSYMBOL_CONTEXT_KEY = 102,              /* CONTEXT_KEY  */
+  YYSYMBOL_ELLIPSIS_KEY = 103,             /* ELLIPSIS_KEY  */
+  YYSYMBOL_GLOBALSET_KEY = 104,            /* GLOBALSET_KEY  */
+  YYSYMBOL_BITRANGE_KEY = 105,             /* BITRANGE_KEY  */
+  YYSYMBOL_CHAR = 106,                     /* CHAR  */
+  YYSYMBOL_INTEGER = 107,                  /* INTEGER  */
+  YYSYMBOL_INTB = 108,                     /* INTB  */
+  YYSYMBOL_STRING = 109,                   /* STRING  */
+  YYSYMBOL_SYMBOLSTRING = 110,             /* SYMBOLSTRING  */
+  YYSYMBOL_SPACESYM = 111,                 /* SPACESYM  */
+  YYSYMBOL_SECTIONSYM = 112,               /* SECTIONSYM  */
+  YYSYMBOL_TOKENSYM = 113,                 /* TOKENSYM  */
+  YYSYMBOL_USEROPSYM = 114,                /* USEROPSYM  */
+  YYSYMBOL_VALUESYM = 115,                 /* VALUESYM  */
+  YYSYMBOL_VALUEMAPSYM = 116,              /* VALUEMAPSYM  */
+  YYSYMBOL_CONTEXTSYM = 117,               /* CONTEXTSYM  */
+  YYSYMBOL_NAMESYM = 118,                  /* NAMESYM  */
+  YYSYMBOL_VARSYM = 119,                   /* VARSYM  */
+  YYSYMBOL_BITSYM = 120,                   /* BITSYM  */
+  YYSYMBOL_SPECSYM = 121,                  /* SPECSYM  */
+  YYSYMBOL_VARLISTSYM = 122,               /* VARLISTSYM  */
+  YYSYMBOL_OPERANDSYM = 123,               /* OPERANDSYM  */
+  YYSYMBOL_STARTSYM = 124,                 /* STARTSYM  */
+  YYSYMBOL_ENDSYM = 125,                   /* ENDSYM  */
+  YYSYMBOL_NEXT2SYM = 126,                 /* NEXT2SYM  */
+  YYSYMBOL_MACROSYM = 127,                 /* MACROSYM  */
+  YYSYMBOL_LABELSYM = 128,                 /* LABELSYM  */
+  YYSYMBOL_SUBTABLESYM = 129,              /* SUBTABLESYM  */
+  YYSYMBOL_130_ = 130,                     /* '}'  */
+  YYSYMBOL_131_ = 131,                     /* '='  */
+  YYSYMBOL_132_ = 132,                     /* '('  */
+  YYSYMBOL_133_ = 133,                     /* ')'  */
+  YYSYMBOL_134_ = 134,                     /* ','  */
+  YYSYMBOL_135_ = 135,                     /* '['  */
+  YYSYMBOL_136_ = 136,                     /* ']'  */
+  YYSYMBOL_137_ = 137,                     /* '{'  */
+  YYSYMBOL_138_ = 138,                     /* ':'  */
+  YYSYMBOL_139_ = 139,                     /* ' '  */
+  YYSYMBOL_YYACCEPT = 140,                 /* $accept  */
+  YYSYMBOL_spec = 141,                     /* spec  */
+  YYSYMBOL_definition = 142,               /* definition  */
+  YYSYMBOL_constructorlike = 143,          /* constructorlike  */
+  YYSYMBOL_endiandef = 144,                /* endiandef  */
+  YYSYMBOL_aligndef = 145,                 /* aligndef  */
+  YYSYMBOL_tokendef = 146,                 /* tokendef  */
+  YYSYMBOL_tokenprop = 147,                /* tokenprop  */
+  YYSYMBOL_contextdef = 148,               /* contextdef  */
+  YYSYMBOL_contextprop = 149,              /* contextprop  */
+  YYSYMBOL_fielddef = 150,                 /* fielddef  */
+  YYSYMBOL_contextfielddef = 151,          /* contextfielddef  */
+  YYSYMBOL_spacedef = 152,                 /* spacedef  */
+  YYSYMBOL_spaceprop = 153,                /* spaceprop  */
+  YYSYMBOL_varnodedef = 154,               /* varnodedef  */
+  YYSYMBOL_bitrangedef = 155,              /* bitrangedef  */
+  YYSYMBOL_bitrangelist = 156,             /* bitrangelist  */
+  YYSYMBOL_bitrangesingle = 157,           /* bitrangesingle  */
+  YYSYMBOL_pcodeopdef = 158,               /* pcodeopdef  */
+  YYSYMBOL_valueattach = 159,              /* valueattach  */
+  YYSYMBOL_nameattach = 160,               /* nameattach  */
+  YYSYMBOL_varattach = 161,                /* varattach  */
+  YYSYMBOL_macrodef = 162,                 /* macrodef  */
+  YYSYMBOL_withblockstart = 163,           /* withblockstart  */
+  YYSYMBOL_withblockmid = 164,             /* withblockmid  */
+  YYSYMBOL_withblock = 165,                /* withblock  */
+  YYSYMBOL_id_or_nil = 166,                /* id_or_nil  */
+  YYSYMBOL_bitpat_or_nil = 167,            /* bitpat_or_nil  */
+  YYSYMBOL_macrostart = 168,               /* macrostart  */
+  YYSYMBOL_rtlbody = 169,                  /* rtlbody  */
+  YYSYMBOL_constructor = 170,              /* constructor  */
+  YYSYMBOL_constructprint = 171,           /* constructprint  */
+  YYSYMBOL_subtablestart = 172,            /* subtablestart  */
+  YYSYMBOL_pexpression = 173,              /* pexpression  */
+  YYSYMBOL_pequation = 174,                /* pequation  */
+  YYSYMBOL_elleq = 175,                    /* elleq  */
+  YYSYMBOL_ellrt = 176,                    /* ellrt  */
+  YYSYMBOL_atomic = 177,                   /* atomic  */
+  YYSYMBOL_constraint = 178,               /* constraint  */
+  YYSYMBOL_contextblock = 179,             /* contextblock  */
+  YYSYMBOL_contextlist = 180,              /* contextlist  */
+  YYSYMBOL_section_def = 181,              /* section_def  */
+  YYSYMBOL_rtlfirstsection = 182,          /* rtlfirstsection  */
+  YYSYMBOL_rtlcontinue = 183,              /* rtlcontinue  */
+  YYSYMBOL_rtl = 184,                      /* rtl  */
+  YYSYMBOL_rtlmid = 185,                   /* rtlmid  */
+  YYSYMBOL_statement = 186,                /* statement  */
+  YYSYMBOL_expr = 187,                     /* expr  */
+  YYSYMBOL_sizedstar = 188,                /* sizedstar  */
+  YYSYMBOL_jumpdest = 189,                 /* jumpdest  */
+  YYSYMBOL_varnode = 190,                  /* varnode  */
+  YYSYMBOL_integervarnode = 191,           /* integervarnode  */
+  YYSYMBOL_lhsvarnode = 192,               /* lhsvarnode  */
+  YYSYMBOL_label = 193,                    /* label  */
+  YYSYMBOL_exportvarnode = 194,            /* exportvarnode  */
+  YYSYMBOL_familysymbol = 195,             /* familysymbol  */
+  YYSYMBOL_specificsymbol = 196,           /* specificsymbol  */
+  YYSYMBOL_charstring = 197,               /* charstring  */
+  YYSYMBOL_intblist = 198,                 /* intblist  */
+  YYSYMBOL_intbpart = 199,                 /* intbpart  */
+  YYSYMBOL_stringlist = 200,               /* stringlist  */
+  YYSYMBOL_stringpart = 201,               /* stringpart  */
+  YYSYMBOL_anystringlist = 202,            /* anystringlist  */
+  YYSYMBOL_anystringpart = 203,            /* anystringpart  */
+  YYSYMBOL_valuelist = 204,                /* valuelist  */
+  YYSYMBOL_valuepart = 205,                /* valuepart  */
+  YYSYMBOL_varlist = 206,                  /* varlist  */
+  YYSYMBOL_varpart = 207,                  /* varpart  */
+  YYSYMBOL_paramlist = 208,                /* paramlist  */
+  YYSYMBOL_oplist = 209,                   /* oplist  */
+  YYSYMBOL_anysymbol = 210                 /* anysymbol  */
 };
 typedef enum yysymbol_kind_t yysymbol_kind_t;
 
@@ -642,19 +644,19 @@ union yyalloc
 /* YYFINAL -- State number of the termination state.  */
 #define YYFINAL  5
 /* YYLAST -- Last index in YYTABLE.  */
-#define YYLAST   2617
+#define YYLAST   2585
 
 /* YYNTOKENS -- Number of terminals.  */
-#define YYNTOKENS  138
+#define YYNTOKENS  140
 /* YYNNTS -- Number of nonterminals.  */
 #define YYNNTS  71
 /* YYNRULES -- Number of rules.  */
-#define YYNRULES  341
+#define YYNRULES  345
 /* YYNSTATES -- Number of states.  */
-#define YYNSTATES  716
+#define YYNSTATES  720
 
 /* YYMAXUTOK -- Last valid token kind.  */
-#define YYMAXUTOK   369
+#define YYMAXUTOK   371
 
 
 /* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
@@ -671,16 +673,16 @@ static const yytype_uint8 yytranslate[] =
        0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,   137,    43,     2,     2,     2,    38,    11,     2,
-     130,   131,    36,    32,   132,    33,     2,    37,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,   136,     8,
-      17,   129,    18,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,   139,    43,     2,     2,     2,    38,    11,     2,
+     132,   133,    36,    32,   134,    33,     2,    37,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,   138,     8,
+      17,   131,    18,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,   133,     2,   134,     9,     2,     2,     2,     2,     2,
+       2,   135,     2,   136,     9,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,   135,     6,   128,    44,     2,     2,     2,
+       2,     2,     2,   137,     6,   130,    44,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
@@ -704,7 +706,8 @@ static const yytype_uint8 yytranslate[] =
       88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
       98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
      108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
-     118,   119,   120,   121,   122,   123,   124,   125,   126,   127
+     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
+     128,   129
 };
 
 #if YYDEBUG
@@ -714,38 +717,38 @@ static const yytype_int16 yyrline[] =
        0,   158,   158,   159,   160,   161,   163,   164,   165,   166,
      167,   168,   169,   170,   171,   172,   174,   175,   176,   177,
      179,   180,   182,   184,   186,   187,   188,   189,   190,   192,
-     194,   195,   198,   199,   200,   201,   202,   204,   205,   206,
-     207,   208,   209,   211,   213,   214,   215,   216,   217,   218,
-     219,   221,   223,   225,   227,   228,   230,   233,   235,   237,
-     239,   241,   244,   246,   247,   248,   250,   252,   253,   254,
-     257,   258,   261,   263,   264,   265,   267,   268,   270,   271,
-     272,   273,   274,   275,   276,   277,   278,   280,   281,   282,
-     283,   285,   287,   290,   291,   292,   293,   294,   295,   296,
-     297,   298,   299,   300,   301,   302,   304,   305,   306,   307,
-     309,   310,   312,   313,   315,   316,   318,   319,   320,   321,
-     322,   323,   324,   327,   328,   329,   330,   332,   333,   335,
-     336,   337,   338,   339,   340,   342,   343,   345,   347,   348,
-     350,   351,   352,   353,   354,   356,   357,   358,   359,   361,
-     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
+     194,   195,   198,   199,   200,   201,   202,   203,   204,   206,
+     207,   208,   209,   210,   211,   212,   213,   215,   217,   218,
+     219,   220,   221,   222,   223,   225,   227,   229,   231,   232,
+     234,   237,   239,   241,   243,   245,   248,   250,   251,   252,
+     254,   256,   257,   258,   261,   262,   265,   267,   268,   269,
+     271,   272,   274,   275,   276,   277,   278,   279,   280,   281,
+     282,   284,   285,   286,   287,   289,   291,   294,   295,   296,
+     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
+     308,   309,   310,   311,   313,   314,   316,   317,   319,   320,
+     322,   323,   324,   325,   326,   327,   328,   331,   332,   333,
+     334,   336,   337,   339,   340,   341,   342,   343,   344,   346,
+     347,   349,   351,   352,   354,   355,   356,   357,   358,   360,
+     361,   362,   363,   365,   366,   367,   368,   369,   370,   371,
      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
-     382,   383,   384,   385,   387,   388,   389,   390,   391,   392,
+     382,   383,   384,   385,   386,   387,   388,   389,   391,   392,
      393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
      423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
      433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
      443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
-     454,   455,   456,   457,   459,   460,   461,   462,   463,   464,
-     465,   466,   467,   469,   470,   471,   472,   474,   475,   476,
-     477,   478,   480,   481,   482,   484,   485,   487,   488,   489,
-     490,   491,   492,   494,   495,   496,   497,   498,   500,   501,
-     502,   503,   504,   505,   507,   508,   510,   511,   512,   514,
-     515,   516,   518,   519,   520,   523,   524,   526,   527,   528,
-     530,   532,   533,   534,   535,   537,   538,   539,   541,   542,
-     543,   544,   545,   547,   548,   550,   551,   553,   554,   557,
-     558,   559,   561,   562,   563,   565,   566,   567,   568,   569,
+     453,   454,   455,   456,   458,   459,   460,   461,   463,   464,
+     465,   466,   467,   468,   469,   470,   471,   473,   474,   475,
+     476,   478,   479,   480,   481,   482,   484,   485,   486,   488,
+     489,   491,   492,   493,   494,   495,   496,   498,   499,   500,
+     501,   502,   504,   505,   506,   507,   508,   509,   511,   512,
+     514,   515,   516,   518,   519,   520,   522,   523,   524,   527,
+     528,   530,   531,   532,   534,   536,   537,   538,   539,   541,
+     542,   543,   545,   546,   547,   548,   549,   551,   552,   554,
+     555,   557,   558,   561,   562,   563,   565,   566,   567,   569,
      570,   571,   572,   573,   574,   575,   576,   577,   578,   579,
-     580,   581
+     580,   581,   582,   583,   584,   585
 };
 #endif
 
@@ -776,26 +779,26 @@ static const char *const yytname[] =
   "DEFINE_KEY", "ATTACH_KEY", "MACRO_KEY", "SPACE_KEY", "TYPE_KEY",
   "RAM_KEY", "DEFAULT_KEY", "REGISTER_KEY", "ENDIAN_KEY", "WITH_KEY",
   "ALIGN_KEY", "OP_UNIMPL", "TOKEN_KEY", "SIGNED_KEY", "NOFLOW_KEY",
-  "HEX_KEY", "DEC_KEY", "BIG_KEY", "LITTLE_KEY", "SIZE_KEY",
-  "WORDSIZE_KEY", "OFFSET_KEY", "NAMES_KEY", "VALUES_KEY", "VARIABLES_KEY",
-  "PCODEOP_KEY", "IS_KEY", "LOCAL_KEY", "DELAYSLOT_KEY", "CROSSBUILD_KEY",
-  "EXPORT_KEY", "BUILD_KEY", "CONTEXT_KEY", "ELLIPSIS_KEY",
-  "GLOBALSET_KEY", "BITRANGE_KEY", "CHAR", "INTEGER", "INTB", "STRING",
-  "SYMBOLSTRING", "SPACESYM", "SECTIONSYM", "TOKENSYM", "USEROPSYM",
-  "VALUESYM", "VALUEMAPSYM", "CONTEXTSYM", "NAMESYM", "VARSYM", "BITSYM",
-  "SPECSYM", "VARLISTSYM", "OPERANDSYM", "STARTSYM", "ENDSYM", "NEXT2SYM",
-  "MACROSYM", "LABELSYM", "SUBTABLESYM", "'}'", "'='", "'('", "')'", "','",
-  "'['", "']'", "'{'", "':'", "' '", "$accept", "spec", "definition",
-  "constructorlike", "endiandef", "aligndef", "tokendef", "tokenprop",
-  "contextdef", "contextprop", "fielddef", "contextfielddef", "spacedef",
-  "spaceprop", "varnodedef", "bitrangedef", "bitrangelist",
-  "bitrangesingle", "pcodeopdef", "valueattach", "nameattach", "varattach",
-  "macrodef", "withblockstart", "withblockmid", "withblock", "id_or_nil",
-  "bitpat_or_nil", "macrostart", "rtlbody", "constructor",
-  "constructprint", "subtablestart", "pexpression", "pequation", "elleq",
-  "ellrt", "atomic", "constraint", "contextblock", "contextlist",
-  "section_def", "rtlfirstsection", "rtlcontinue", "rtl", "rtlmid",
-  "statement", "expr", "sizedstar", "jumpdest", "varnode",
+  "HEX_KEY", "DEC_KEY", "OCT_KEY", "BIN_KEY", "BIG_KEY", "LITTLE_KEY",
+  "SIZE_KEY", "WORDSIZE_KEY", "OFFSET_KEY", "NAMES_KEY", "VALUES_KEY",
+  "VARIABLES_KEY", "PCODEOP_KEY", "IS_KEY", "LOCAL_KEY", "DELAYSLOT_KEY",
+  "CROSSBUILD_KEY", "EXPORT_KEY", "BUILD_KEY", "CONTEXT_KEY",
+  "ELLIPSIS_KEY", "GLOBALSET_KEY", "BITRANGE_KEY", "CHAR", "INTEGER",
+  "INTB", "STRING", "SYMBOLSTRING", "SPACESYM", "SECTIONSYM", "TOKENSYM",
+  "USEROPSYM", "VALUESYM", "VALUEMAPSYM", "CONTEXTSYM", "NAMESYM",
+  "VARSYM", "BITSYM", "SPECSYM", "VARLISTSYM", "OPERANDSYM", "STARTSYM",
+  "ENDSYM", "NEXT2SYM", "MACROSYM", "LABELSYM", "SUBTABLESYM", "'}'",
+  "'='", "'('", "')'", "','", "'['", "']'", "'{'", "':'", "' '", "$accept",
+  "spec", "definition", "constructorlike", "endiandef", "aligndef",
+  "tokendef", "tokenprop", "contextdef", "contextprop", "fielddef",
+  "contextfielddef", "spacedef", "spaceprop", "varnodedef", "bitrangedef",
+  "bitrangelist", "bitrangesingle", "pcodeopdef", "valueattach",
+  "nameattach", "varattach", "macrodef", "withblockstart", "withblockmid",
+  "withblock", "id_or_nil", "bitpat_or_nil", "macrostart", "rtlbody",
+  "constructor", "constructprint", "subtablestart", "pexpression",
+  "pequation", "elleq", "ellrt", "atomic", "constraint", "contextblock",
+  "contextlist", "section_def", "rtlfirstsection", "rtlcontinue", "rtl",
+  "rtlmid", "statement", "expr", "sizedstar", "jumpdest", "varnode",
   "integervarnode", "lhsvarnode", "label", "exportvarnode", "familysymbol",
   "specificsymbol", "charstring", "intblist", "intbpart", "stringlist",
   "stringpart", "anystringlist", "anystringpart", "valuelist", "valuepart",
@@ -809,12 +812,12 @@ yysymbol_name (yysymbol_kind_t yysymbol)
 }
 #endif
 
-#define YYPACT_NINF (-316)
+#define YYPACT_NINF (-312)
 
 #define yypact_value_is_default(Yyn) \
   ((Yyn) == YYPACT_NINF)
 
-#define YYTABLE_NINF (-272)
+#define YYTABLE_NINF (-276)
 
 #define yytable_value_is_error(Yyn) \
   ((Yyn) == YYTABLE_NINF)
@@ -823,78 +826,78 @@ yysymbol_name (yysymbol_kind_t yysymbol)
    STATE-NUM.  */
 static const yytype_int16 yypact[] =
 {
-     -39,   -23,     8,  -316,   -41,  -316,     2,    88,   245,     0,
-     -38,   -37,   -14,  -316,  -316,  -316,  -316,  -316,   426,  -316,
-     453,  -316,    62,  -316,  -316,  -316,  -316,  -316,  -316,  -316,
-    -316,    49,  -316,    10,  -316,    16,   191,   123,  -316,  -316,
-    2427,    70,  2446,   -21,   111,   189,   204,   -61,   -61,   -61,
-     173,  -316,  -316,   171,  -316,  -316,  -316,   182,  -316,  -316,
-    -316,  -316,  -316,  -316,  -316,  -316,  -316,  -316,  -316,  -316,
-    -316,  -316,  -316,  -316,  -316,   203,   185,  -316,   193,   186,
-     210,  -316,   213,  -316,   217,   231,   220,  -316,  -316,  -316,
-    -316,  -316,   211,  -316,  -316,  -316,  -316,   214,  -316,   211,
-    -316,  -316,  -316,   214,   336,   347,  -316,  -316,   289,   267,
-    -316,  -316,   297,   400,  -316,   284,    55,  -316,   295,  -316,
-    -316,   159,   299,    47,   -24,   315,   211,   308,  -316,  -316,
-    -316,   310,   349,  -316,  -316,  -316,  -316,   353,   215,   372,
-     373,   364,  1692,  1754,  -316,  -316,  -316,  -316,  -316,  -316,
-     369,  -316,   211,    15,  -316,  -316,   395,  -316,    26,  -316,
-      15,  -316,  -316,   492,   401,  -316,  2302,  -316,   396,  -316,
-    -316,   -57,  -316,  -316,   -34,  2467,   497,   409,  -316,     9,
-     507,  -316,   -85,   509,  -316,   261,   385,   190,   414,   415,
-     417,   418,  -316,  -316,  -316,  -316,  -316,   293,   -70,    21,
-    -316,   388,  1613,     5,  1556,   226,   399,  1577,   304,   424,
-     394,    50,   422,  -316,   425,  -316,  -316,  -316,  -316,  -316,
-     429,   -58,  -316,  1556,   -40,  -316,    41,  -316,    60,  -316,
-    1662,    27,   211,   211,   211,  -316,   -51,  -316,  1662,  1662,
-    1662,  1662,  1662,  1662,   -51,  -316,   441,  -316,  -316,  -316,
-     446,  -316,   468,  -316,  -316,  -316,  -316,  -316,  2328,  -316,
-    -316,  -316,   451,  -316,  -316,   -13,  -316,  -316,  -316,   -43,
-    -316,  -316,   450,   455,   449,   459,   461,   463,  -316,  -316,
-     525,  -316,  -316,   613,   615,   526,   565,  -316,   538,  -316,
-    -316,  -316,  -316,  -316,  1556,   665,  -316,  1556,   667,  -316,
-    1556,  1556,  1556,  1556,  1556,   576,   577,   582,   585,   622,
-     625,   658,   659,   669,   704,   709,   744,   749,   784,   785,
-     820,   825,   826,  -316,  1556,  1822,  1556,  -316,    54,     3,
-     584,   648,   703,   380,   661,   909,  -316,   367,   952,  -316,
-     987,   770,  1556,   891,  1556,  1556,  1556,  1512,   895,   930,
-    1556,   931,  1662,  1662,  -316,  1662,   423,  -316,  -316,  -316,
-     167,  1029,  -316,   187,  -316,  -316,  -316,   423,   423,   423,
-     423,   423,   423,  -316,   995,   971,   992,  -316,  -316,  -316,
-    -316,   972,  -316,  -316,  -316,  -316,  -316,  -316,  -316,  -316,
-     976,  1011,  1012,  1051,  1577,  -316,  -316,  1023,  -316,  1052,
-     348,  -316,   583,  -316,   623,  -316,  -316,  -316,  -316,  1556,
-    1556,  1556,  1556,  1556,  1556,  1556,  1556,  1556,  1556,  1556,
-    1556,  1556,  1556,  1556,  1556,  1556,  1556,   827,  1556,  1556,
-    1556,  1556,  1556,  1556,  1556,  1556,  1556,  1556,  1556,  1556,
-    1556,  1556,  1556,  1556,  1556,  1556,  1556,  1556,  1556,  1556,
-    1556,  1556,  1556,  1556,  1556,  1556,  1556,  1556,  1556,  1556,
-    1556,  1556,  1556,  1556,  1700,  -316,    -8,  1087,  1092,  -316,
-    1556,  1093,  -316,  1071,    85,  1132,  -316,  1133,  1234,  -316,
-    1269,  -316,  -316,  -316,  -316,  1874,  1153,  2194,   271,  1914,
-     275,  1556,  1147,  1184,  1954,  1186,  -316,  -316,    29,  1662,
-    1662,  1662,  1662,  1662,  1662,  1662,  1662,  1662,  1189,  -316,
-    1194,  1229,  -316,  -316,  -316,    39,  1274,  1227,  1258,  -316,
-    1267,  1268,  1303,  1308,  -316,  1304,  1310,  1471,  1476,  1511,
-     867,   705,   907,   745,   787,   948,   988,  1028,  1069,  1109,
-    1149,  1190,  1230,  1270,   287,   663,  1311,   305,  -316,  2233,
-    2270,  2270,  2304,  2336,  2366,  2465,  2465,  2465,  2465,  2491,
-    2491,  2491,  2491,  2491,  2491,  2491,  2491,  2491,  2491,  2491,
-    2491,  2575,  2575,  2575,   408,   408,   408,   408,  -316,  -316,
-    -316,  -316,  -316,  -316,  -316,  1516,  1349,  1388,  -316,  1994,
-       4,  1549,  1551,  1553,  1577,  -316,  -316,  -316,  1556,  1554,
-    1556,  -316,  1557,  2034,  -316,  -316,  -316,  1459,  -316,  2444,
-    2435,   495,   273,   273,   421,   421,  -316,  -316,  2482,  1662,
-    1662,  1626,   117,  -316,  -316,   387,  1461,   -21,  -316,  -316,
-    -316,  -316,  1463,  -316,  -316,  -316,  -316,  -316,  1556,  -316,
-    1556,  1556,  -316,  -316,  -316,  -316,  -316,  -316,  -316,  -316,
-    -316,  -316,  -316,  1556,  -316,  -316,  -316,  -316,  1464,  -316,
-    -316,  1556,  -316,  -316,  -316,  -316,  2074,  -316,  2194,  -316,
-    -316,  1436,  1439,  1440,  1548,  1615,  -316,  -316,  1543,  1544,
-    -316,  -316,  1441,  1568,  -316,  1351,  1391,  1432,  1472,  1445,
-    2114,  -316,  1453,  1468,  1475,  -316,  -316,  -316,  -316,  -316,
-    -316,  -316,  -316,  -316,  -316,  -316,  -316,  1556,  1455,  1456,
-    2154,  1585,  1586,  -316,  -316,  -316
+      39,   -52,     5,  -312,   -65,  -312,     3,   -33,   191,    40,
+     -73,    36,    41,  -312,  -312,  -312,  -312,  -312,   212,  -312,
+     444,  -312,   197,  -312,  -312,  -312,  -312,  -312,  -312,  -312,
+    -312,    43,  -312,    21,  -312,    -1,    44,    30,  -312,  -312,
+    2407,    66,  2426,   -84,   146,   161,   203,   147,   147,   147,
+     218,  -312,  -312,   206,  -312,  -312,  -312,   285,  -312,  -312,
+    -312,  -312,  -312,  -312,  -312,  -312,  -312,  -312,  -312,  -312,
+    -312,  -312,  -312,  -312,  -312,   461,   287,  -312,   303,  1489,
+     309,  -312,   311,  -312,   313,   318,   319,  -312,  -312,  -312,
+    -312,  -312,   188,  -312,  -312,  -312,  -312,   283,  -312,   188,
+    -312,  -312,  -312,   283,   402,   446,  -312,  -312,   349,   336,
+    -312,  -312,   348,   462,  -312,   343,    19,  -312,   346,  -312,
+    -312,    74,   353,    -4,   -43,   375,   188,   359,  -312,  -312,
+    -312,  -312,  -312,   360,   366,  -312,  -312,  -312,  -312,  -312,
+    -312,   371,   227,   411,   413,   418,  1696,  1599,  -312,  -312,
+    -312,  -312,  -312,  -312,   419,  -312,   188,    20,  -312,  -312,
+     448,  -312,   168,  -312,    20,  -312,  -312,   544,   458,  -312,
+    2301,  -312,   453,  -312,  -312,   -40,  -312,  -312,    60,  2445,
+     566,   468,  -312,    -3,   568,  -312,   -67,   569,  -312,    90,
+     451,   290,   480,   482,   484,   519,  -312,  -312,  -312,  -312,
+    -312,   279,   -63,   -81,  -312,    69,   408,     2,  1558,  1615,
+     495,   322,   400,   506,   493,   -42,   534,  -312,   536,  -312,
+    -312,  -312,  -312,  -312,   537,    35,  -312,  1558,    -2,  -312,
+     137,  -312,   183,  -312,  1656,    29,   188,   188,   188,  -312,
+     -47,  -312,  1656,  1656,  1656,  1656,  1656,  1656,   -47,  -312,
+     538,  -312,  -312,  -312,   567,  -312,   614,  -312,  -312,  -312,
+    -312,  -312,  2327,  -312,  -312,  -312,   597,  -312,  -312,    15,
+    -312,  -312,  -312,   -59,  -312,  -312,   596,   573,   577,   616,
+     617,   652,  -312,  -312,   606,  -312,  -312,   735,   769,   684,
+     690,  -312,   697,  -312,  -312,  -312,  -312,  -312,  1558,   827,
+    -312,  1558,   864,  -312,  1558,  1558,  1558,  1558,  1558,   701,
+     741,   776,   777,   782,   783,   818,   823,   824,   828,   863,
+     868,   903,   904,   906,   939,   944,   945,  -312,  1558,  1823,
+    1558,  -312,   157,    10,   744,   810,   862,   376,   941,  1108,
+    -312,   387,  1111,  -312,  1148,  1010,  1558,  1050,  1558,  1558,
+    1558,  1512,  1052,  1085,  1558,  1090,  1656,  1656,  -312,  1656,
+    1626,  -312,  -312,  -312,   308,  1187,  -312,   292,  -312,  -312,
+    -312,  1626,  1626,  1626,  1626,  1626,  1626,  -312,  1124,  1130,
+    1107,  -312,  -312,  -312,  -312,  1133,  -312,  -312,  -312,  -312,
+    -312,  -312,  -312,  -312,  1170,  1171,  1173,  1206,   322,  -312,
+    -312,  1182,  -312,  1208,   342,  -312,   579,  -312,   619,  -312,
+    -312,  -312,  -312,  1558,  1558,  1558,  1558,  1558,  1558,  1558,
+    1558,  1558,  1558,  1558,  1558,  1558,  1558,  1558,  1558,  1558,
+    1558,   825,  1558,  1558,  1558,  1558,  1558,  1558,  1558,  1558,
+    1558,  1558,  1558,  1558,  1558,  1558,  1558,  1558,  1558,  1558,
+    1558,  1558,  1558,  1558,  1558,  1558,  1558,  1558,  1558,  1558,
+    1558,  1558,  1558,  1558,  1558,  1558,  1558,  1558,  1579,  -312,
+       8,  1214,  1251,  -312,  1558,  1252,  -312,  1228,   231,  1291,
+    -312,  1292,  1393,  -312,  1426,  -312,  -312,  -312,  -312,  1875,
+    1308,  2195,   174,  1915,   258,  1558,  1307,  1348,  1955,  1346,
+    -312,  -312,    51,  1656,  1656,  1656,  1656,  1656,  1656,  1656,
+    1656,  1656,  1310,  -312,  1388,  1389,  -312,  -312,  -312,   -20,
+    1428,  1423,  1375,  -312,  1431,  1435,  1443,  1446,  -312,  1384,
+    1425,  1574,  1575,  1578,   865,   703,   907,   743,   785,   948,
+     988,  1028,  1069,  1109,  1149,  1190,  1230,  1270,   273,   659,
+    1311,   299,  -312,  2234,  2271,  2271,  2305,  2337,  2367,  2447,
+    2447,  2447,  2447,  2473,  2473,  2473,  2473,  2473,  2473,  2473,
+    2473,  2473,  2473,  2473,  2473,  2543,  2543,  2543,   499,   499,
+     499,   499,  -312,  -312,  -312,  -312,  -312,  -312,  -312,  1580,
+    1454,  1455,  -312,  1995,    25,  1582,  1584,  1587,   322,  -312,
+    -312,  -312,  1558,  1589,  1558,  -312,  1590,  2035,  -312,  -312,
+    -312,  1492,  -312,   443,   457,   390,  1530,  1530,   127,   127,
+    -312,  -312,  1751,  1656,  1656,  1628,   240,  -312,  -312,   325,
+    1493,   -84,  -312,  -312,  -312,  -312,  1515,  -312,  -312,  -312,
+    -312,  -312,  1558,  -312,  1558,  1558,  -312,  -312,  -312,  -312,
+    -312,  -312,  -312,  -312,  -312,  -312,  -312,  1558,  -312,  -312,
+    -312,  -312,  1516,  -312,  -312,  1558,  -312,  -312,  -312,  -312,
+    2075,  -312,  2195,  -312,  -312,  1490,  1494,  1496,  1548,  1617,
+    -312,  -312,  1601,  1602,  -312,  -312,  1498,  1627,  -312,  1351,
+    1391,  1432,  1472,  1501,  2115,  -312,  1509,  1524,  1527,  -312,
+    -312,  -312,  -312,  -312,  -312,  -312,  -312,  -312,  -312,  -312,
+    -312,  1558,  1518,  1519,  2155,  1640,  1652,  -312,  -312,  -312
 };
 
 /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
@@ -903,90 +906,90 @@ static const yytype_int16 yypact[] =
 static const yytype_int16 yydefact[] =
 {
        0,     0,     0,     2,     0,     1,     0,     0,     0,     0,
-      67,     0,     0,    89,     4,     5,     3,     6,     0,     7,
+      71,     0,     0,    93,     4,     5,     3,     6,     0,     7,
        0,     8,     0,     9,    10,    11,    12,    13,    14,    17,
-      63,     0,    18,     0,    16,     0,     0,     0,    15,    19,
+      67,     0,    18,     0,    16,     0,     0,     0,    15,    19,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,    69,    68,     0,    88,    87,    23,     0,   325,   326,
-     327,   328,   331,   332,   333,   334,   335,   341,   336,   337,
-     338,   339,   340,   329,   330,    27,     0,    29,     0,    31,
-       0,    43,     0,    50,     0,     0,     0,    66,    64,    65,
-     145,    82,     0,   284,    83,    86,    85,    84,    81,     0,
-      78,    80,    90,    79,     0,     0,    44,    45,     0,     0,
-      28,   296,     0,     0,    30,     0,     0,    54,     0,   306,
-     307,     0,     0,     0,     0,   322,    70,     0,    34,    35,
-      36,     0,     0,    39,    40,    41,    42,     0,     0,     0,
-       0,     0,   140,     0,   273,   274,   275,   276,   124,   277,
-     123,   126,     0,   127,   106,   111,   113,   114,   125,   285,
-     127,    20,    21,     0,     0,   297,     0,    57,     0,    53,
-      55,     0,   308,   309,     0,     0,     0,     0,   287,     0,
-       0,   314,     0,     0,   323,     0,   127,    71,     0,     0,
-       0,     0,    46,    47,    48,    49,    61,     0,     0,   243,
-     258,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     257,   255,     0,   278,     0,   279,   280,   281,   282,   283,
-       0,   256,   146,     0,     0,   254,     0,   173,   253,   110,
-       0,     0,     0,     0,     0,   129,     0,   112,     0,     0,
-       0,     0,     0,     0,     0,    22,     0,   298,   295,   299,
-       0,    52,     0,   312,   310,   311,   305,   301,     0,   302,
-      59,   288,     0,   289,   291,     0,    58,   316,   315,     0,
-      60,    72,     0,     0,     0,     0,     0,     0,   255,   256,
-       0,   260,   253,     0,     0,     0,     0,   248,   247,   252,
-     249,   244,   245,   246,     0,     0,   251,     0,     0,   170,
+       0,    73,    72,     0,    92,    91,    23,     0,   329,   330,
+     331,   332,   335,   336,   337,   338,   339,   345,   340,   341,
+     342,   343,   344,   333,   334,    27,     0,    29,     0,    31,
+       0,    47,     0,    54,     0,     0,     0,    70,    68,    69,
+     149,    86,     0,   288,    87,    90,    89,    88,    85,     0,
+      82,    84,    94,    83,     0,     0,    48,    49,     0,     0,
+      28,   300,     0,     0,    30,     0,     0,    58,     0,   310,
+     311,     0,     0,     0,     0,   326,    74,     0,    34,    35,
+      36,    37,    38,     0,     0,    41,    42,    43,    44,    45,
+      46,     0,     0,     0,     0,     0,   144,     0,   277,   278,
+     279,   280,   128,   281,   127,   130,     0,   131,   110,   115,
+     117,   118,   129,   289,   131,    20,    21,     0,     0,   301,
+       0,    61,     0,    57,    59,     0,   312,   313,     0,     0,
+       0,     0,   291,     0,     0,   318,     0,     0,   327,     0,
+     131,    75,     0,     0,     0,     0,    50,    51,    52,    53,
+      65,     0,     0,   247,   262,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   261,   259,     0,   282,     0,   283,
+     284,   285,   286,   287,     0,   260,   150,     0,     0,   258,
+       0,   177,   257,   114,     0,     0,     0,     0,     0,   133,
+       0,   116,     0,     0,     0,     0,     0,     0,     0,    22,
+       0,   302,   299,   303,     0,    56,     0,   316,   314,   315,
+     309,   305,     0,   306,    63,   292,     0,   293,   295,     0,
+      62,   320,   319,     0,    64,    76,     0,     0,     0,     0,
+       0,     0,   259,   260,     0,   264,   257,     0,     0,     0,
+       0,   252,   251,   256,   253,   248,   249,   250,     0,     0,
+     255,     0,     0,   174,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   241,     0,     0,
+       0,   178,   257,     0,     0,     0,     0,     0,     0,   147,
+     276,     0,     0,   271,     0,     0,     0,     0,   323,     0,
+     323,     0,     0,     0,     0,     0,     0,     0,    95,     0,
+     126,    96,    97,   119,   112,   113,   111,     0,    79,   149,
+      80,   121,   122,   124,   125,   123,   120,    81,    24,     0,
+       0,   307,   304,   308,   294,     0,   296,   298,   290,   322,
+     321,   317,   328,    66,     0,     0,     0,     0,     0,   270,
+     269,     0,   246,     0,     0,   169,     0,   172,     0,   193,
+     220,   206,   194,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   323,     0,     0,
+     323,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   237,     0,     0,     0,   174,   253,     0,
-       0,     0,     0,     0,     0,   143,   272,     0,     0,   267,
-       0,     0,     0,     0,   319,     0,   319,     0,     0,     0,
-       0,     0,     0,     0,    91,     0,   122,    92,    93,   115,
-     108,   109,   107,     0,    75,   145,    76,   117,   118,   120,
-     121,   119,   116,    77,    24,     0,     0,   303,   300,   304,
-     290,     0,   292,   294,   286,   318,   317,   313,   324,    62,
-       0,     0,     0,     0,     0,   266,   265,     0,   242,     0,
-       0,   165,     0,   168,     0,   189,   216,   202,   190,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   319,     0,     0,   319,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   179,
+       0,     0,     0,   151,     0,     0,   158,     0,     0,     0,
+     272,     0,   148,   268,     0,   266,   145,   165,   263,     0,
+       0,   324,     0,     0,     0,     0,     0,     0,     0,     0,
+     108,   109,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   138,     0,     0,   132,   142,   149,     0,
+       0,     0,     0,   297,     0,     0,     0,     0,   265,   245,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   175,     0,     0,     0,   147,
-       0,     0,   154,     0,     0,     0,   268,     0,   144,   264,
-       0,   262,   141,   161,   259,     0,     0,   320,     0,     0,
-       0,     0,     0,     0,     0,     0,   104,   105,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   134,
-       0,     0,   128,   138,   145,     0,     0,     0,     0,   293,
-       0,     0,     0,     0,   261,   241,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   176,   205,
-     204,   203,   193,   191,   192,   179,   180,   206,   207,   181,
-     184,   182,   183,   185,   186,   187,   188,   208,   209,   210,
-     211,   194,   195,   196,   177,   178,   212,   213,   197,   198,
-     200,   199,   201,   214,   215,     0,     0,     0,   235,     0,
-       0,     0,     0,     0,     0,   270,   142,   151,     0,     0,
-       0,   158,     0,     0,   160,   159,   149,     0,    94,   101,
-     102,   100,    98,    99,    95,    96,    97,   103,     0,     0,
-       0,     0,     0,    73,   137,     0,     0,     0,    32,    33,
-      37,    38,     0,   250,   167,   169,   171,   220,     0,   219,
-       0,     0,   226,   217,   218,   228,   229,   230,   225,   224,
-     227,   239,   231,     0,   233,   238,   166,   234,     0,   150,
-     148,     0,   164,   163,   162,   269,     0,   156,   321,   172,
-     155,     0,     0,     0,     0,     0,    74,   139,     0,     0,
-      26,    25,     0,     0,   240,     0,     0,     0,     0,     0,
-       0,   153,     0,     0,     0,   130,   133,   135,   136,    56,
-      51,   221,   222,   223,   232,   236,   152,     0,     0,     0,
-       0,     0,     0,   157,   131,   132
+       0,     0,   180,   209,   208,   207,   197,   195,   196,   183,
+     184,   210,   211,   185,   188,   186,   187,   189,   190,   191,
+     192,   212,   213,   214,   215,   198,   199,   200,   181,   182,
+     216,   217,   201,   202,   204,   203,   205,   218,   219,     0,
+       0,     0,   239,     0,     0,     0,     0,     0,     0,   274,
+     146,   155,     0,     0,     0,   162,     0,     0,   164,   163,
+     153,     0,    98,   105,   106,   104,   102,   103,    99,   100,
+     101,   107,     0,     0,     0,     0,     0,    77,   141,     0,
+       0,     0,    32,    33,    39,    40,     0,   254,   171,   173,
+     175,   224,     0,   223,     0,     0,   230,   221,   222,   232,
+     233,   234,   229,   228,   231,   243,   235,     0,   237,   242,
+     170,   238,     0,   154,   152,     0,   168,   167,   166,   273,
+       0,   160,   325,   176,   159,     0,     0,     0,     0,     0,
+      78,   143,     0,     0,    26,    25,     0,     0,   244,     0,
+       0,     0,     0,     0,     0,   157,     0,     0,     0,   134,
+     137,   139,   140,    60,    55,   225,   226,   227,   236,   240,
+     156,     0,     0,     0,     0,     0,     0,   161,   135,   136
 };
 
 /* YYPGOTO[NTERM-NUM].  */
 static const yytype_int16 yypgoto[] =
 {
-    -316,  -316,  1564,  1565,  -316,  -316,  -316,  -316,  -316,  -316,
-    -316,  -316,  -316,  -316,  -316,  -316,  -316,  1481,  -316,  -316,
-    -316,  -316,  -316,  -316,  -316,  -316,  -316,  -316,  -316,  1354,
-    -316,  -316,  -316,  -224,   -69,  -316,  1477,  -316,  -316,   -73,
-    -316,  1000,  -316,  -316,  1259,  1112,  -316,  -199,  -141,  -198,
-     -60,  1162,  1292,  -140,  -316,   -92,   -36,  1595,  -316,  -316,
-    1005,  -316,  -316,  -316,   427,  -316,  -316,  -316,  -315,  -316,
-       7
+    -312,  -312,  1630,  1635,  -312,  -312,  -312,  -312,  -312,  -312,
+    -312,  -312,  -312,  -312,  -312,  -312,  -312,  1552,  -312,  -312,
+    -312,  -312,  -312,  -312,  -312,  -312,  -312,  -312,  -312,  1421,
+    -312,  -312,  -312,  -230,   -77,  -312,  1523,  -312,  -312,  -105,
+    -312,  1046,  -312,  -312,  1304,  1156,  -312,  -207,  -144,  -202,
+     -76,  1205,  1335,  -143,  -312,   -92,   -44,  1644,  -312,  -312,
+    1054,  -312,  -312,  -312,   479,  -312,  -312,  -312,  -311,  -312,
+       1
 };
 
 /* YYDEFGOTO[NTERM-NUM].  */
@@ -994,11 +997,11 @@ static const yytype_int16 yydefgoto[] =
 {
        0,     2,    14,    15,     3,    16,    17,    18,    19,    20,
       75,    79,    21,    22,    23,    24,   116,   117,    25,    26,
-      27,    28,    29,    30,    31,    32,    53,   186,    33,   366,
-      34,    35,    36,   356,   153,   154,   155,   156,   157,   236,
-     363,   624,   513,   514,   141,   142,   222,   487,   326,   295,
-     327,   225,   226,   296,   338,   357,   328,    97,   180,   265,
-     113,   166,   176,   258,   122,   174,   183,   269,   488,   185,
+      27,    28,    29,    30,    31,    32,    53,   190,    33,   370,
+      34,    35,    36,   360,   157,   158,   159,   160,   161,   240,
+     367,   628,   517,   518,   145,   146,   226,   491,   330,   299,
+     331,   229,   230,   300,   342,   361,   332,    97,   184,   269,
+     113,   170,   180,   262,   122,   178,   187,   273,   492,   189,
       76
 };
 
@@ -1007,652 +1010,646 @@ static const yytype_int16 yydefgoto[] =
    number is the opposite.  If YYTABLE_NINF, syntax error.  */
 static const yytype_int16 yytable[] =
 {
-     158,   223,   227,   197,   298,   325,   251,   158,     5,     6,
-      38,   469,   660,   299,   367,   368,   369,   370,   371,   372,
-     381,   232,   267,   233,   347,    91,   234,    80,   364,     1,
-     160,   490,   268,   232,   158,   233,   499,   283,   234,   500,
-     238,   501,   262,   239,   240,   241,   242,   107,   252,   110,
-       6,   158,   119,     4,   120,   200,   284,   187,   502,   503,
-     158,   504,   505,   169,   385,   506,   507,   337,   622,    51,
-      81,  -264,   121,   253,   386,  -264,     7,     8,     9,   254,
-     177,   255,   224,   231,   365,    10,   111,   244,    37,    52,
-     348,   387,   382,   181,   383,   400,   349,   210,   402,    54,
-     256,   404,   405,   406,   407,   408,   228,    50,   544,   182,
-      92,   547,   112,   273,   263,    11,   264,    86,     8,     9,
-      93,   384,    55,    94,    95,   427,    10,   465,   496,   497,
-      39,   498,   470,   661,    82,    12,    83,   281,   300,   471,
-     158,   158,   158,   485,    13,    90,   489,   332,   235,    84,
-      85,   494,   178,    96,   285,   243,    11,   286,   359,    40,
-     608,   282,   115,   360,   361,   362,    41,   623,    42,   330,
-     350,   282,   339,   249,   351,   233,    12,    87,   234,   342,
-     179,    43,   259,  -263,   466,    13,   343,   467,    44,  -262,
-     468,    45,   592,  -262,   358,   593,   232,    46,   233,   108,
-      98,   234,   358,   358,   358,   358,   358,   358,   104,   105,
-     530,   531,   532,   533,   534,   535,   536,   537,   538,   539,
-     540,   541,   542,   543,   678,   545,   546,   679,   114,   549,
-     550,   551,   552,   553,   554,   555,   556,   557,   558,   559,
-     560,   561,   562,   563,   564,   565,   566,   567,   568,   569,
-     570,   571,   572,   573,   574,   575,   576,   577,   578,   579,
-     580,   581,   582,   583,   584,   379,   585,   133,   134,   135,
-     136,   589,   172,   476,   173,   609,   610,   611,   612,   613,
-     614,   615,   616,   617,   128,    99,   129,   130,   192,   508,
-     193,    40,   603,   118,   509,    93,   115,   282,   100,   101,
-      42,   481,   510,   125,   197,   504,   505,   126,   511,   506,
-     507,   127,   143,    43,   131,   333,   358,   358,   159,   358,
-      44,   512,   132,    45,   144,   145,   146,   147,   102,    46,
-     148,   149,   150,   329,   524,    47,    48,    49,   151,   137,
-     199,   152,   138,   213,   161,   215,   139,   216,   217,   218,
-     219,   428,   429,   430,   431,   162,   200,   432,   282,   433,
-     140,   434,   435,   436,   437,   438,   439,   440,   441,   442,
+     162,   329,   227,   231,   302,     5,     6,   162,    91,   626,
+     303,    38,   371,   372,   373,   374,   375,   376,   473,   201,
+     351,    80,   164,   255,     4,   111,   236,   173,   237,   181,
+     266,   238,   368,   664,   162,   236,    51,   237,    40,   494,
+     238,   107,   271,   110,     6,    41,   287,    42,   385,   191,
+     389,   112,   272,    98,   289,   162,    52,   290,   503,   248,
+     390,   504,    43,   505,   162,   288,    37,   256,   341,    44,
+     228,   204,    45,     7,     8,     9,   185,   391,    46,   235,
+     506,   507,    10,   508,   509,   277,   202,   510,   511,   346,
+     369,   404,   186,  -267,   406,    92,   347,   408,   409,   410,
+     411,   412,   232,   182,   267,    93,   268,     1,    94,    95,
+     627,    86,     8,     9,    11,   214,   548,   104,   105,   551,
+      10,   431,   386,   469,   387,   285,   500,   501,   115,   502,
+     352,   183,   291,    39,    12,   336,   353,   304,    96,   489,
+      99,   474,   493,    13,   162,   162,   162,   498,   475,    50,
+      93,   388,    11,   100,   101,   239,   665,   286,    90,   364,
+     365,   366,   363,   510,   511,   334,  -268,   286,   343,   257,
+    -268,   253,    12,    87,    54,   258,   292,   259,   293,    55,
+     263,    13,   242,   102,   612,   243,   244,   245,   246,   176,
+     362,   177,   294,   295,   296,   297,   260,   108,   362,   362,
+     362,   362,   362,   362,   298,    81,   534,   535,   536,   537,
+     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,
+      56,   549,   550,   275,   276,   553,   554,   555,   556,   557,
+     558,   559,   560,   561,   562,   563,   564,   565,   566,   567,
+     568,   569,   570,   571,   572,   573,   574,   575,   576,   577,
+     578,   579,   580,   581,   582,   583,   584,   585,   586,   587,
+     588,   480,   119,   383,   120,   114,   589,   593,   354,    82,
+     115,    83,   355,   613,   614,   615,   616,   617,   618,   619,
+     620,   621,   121,    47,    48,    49,    84,    85,   607,   470,
+     201,   147,   471,   286,   118,   472,   236,   485,   237,   247,
+     196,   238,   197,   148,   149,   150,   151,   603,   604,   152,
+     153,   154,   362,   362,  -266,   362,   237,   155,  -266,   238,
+     156,    57,   528,    58,    59,    60,    61,    62,    63,    64,
+      65,    66,    67,   201,    68,    69,    70,    71,    72,    73,
+     596,    74,   204,   597,   126,   432,   433,   434,   435,   682,
+     125,   436,   683,   437,   286,   438,   439,   440,   441,   442,
      443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
-     463,   197,   271,   272,   163,   674,   675,   164,   210,   666,
-     278,   668,   599,   600,   165,   198,   602,   600,   167,   334,
-     213,   335,   215,   168,   216,   217,   218,   219,   651,   600,
-     279,   213,   184,   215,   171,   216,   217,   218,   219,   280,
-     499,   336,   175,   500,    56,   501,   655,   600,   188,   685,
-     189,   686,   687,   200,   457,   458,   459,   460,   461,   462,
-     463,   287,   502,   503,   688,   504,   505,   506,   507,   506,
-     507,    77,   690,   358,   358,   358,   358,   358,   358,   358,
-     358,   358,   680,   681,   478,   123,   124,   194,   195,   190,
-     223,   227,   527,   191,   213,   210,   215,   278,   216,   217,
-     218,   219,   196,   288,   479,   289,   237,   213,   230,   215,
-     245,   216,   217,   218,   219,   260,   246,   279,   710,   290,
-     291,   292,   293,   250,   261,   266,   475,   270,   235,   274,
-     275,   294,   276,   277,   502,   503,   672,   504,   505,   331,
-     341,   506,   507,    57,   665,    58,    59,    60,    61,    62,
-      63,    64,    65,    66,    67,   340,    68,    69,    70,    71,
-      72,    73,   344,    74,   345,   376,   380,   388,   282,   346,
-      78,   224,    58,    59,    60,    61,    62,    63,    64,    65,
-      66,    67,   374,    68,    69,    70,    71,    72,    73,   375,
-      74,   390,   673,   358,   358,   228,   428,   429,   430,   431,
-     389,   391,   432,   392,   433,   393,   434,   435,   436,   437,
-     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
-     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
-     458,   459,   460,   461,   462,   463,   428,   429,   430,   431,
-     394,   395,   432,   396,   433,   397,   434,   435,   436,   437,
-     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
-     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
-     458,   459,   460,   461,   462,   463,   428,   429,   430,   431,
-     398,   399,   432,   401,   433,   403,   434,   435,   436,   437,
+     463,   464,   465,   466,   467,   204,   214,   201,   282,   163,
+      40,   606,   604,   678,   679,   670,   512,   672,   217,    42,
+     219,   513,   220,   221,   222,   223,   655,   604,   283,   514,
+     165,   337,   684,   685,    43,   515,   127,   284,   133,   506,
+     507,    44,   508,   509,    45,   202,   510,   511,   516,   214,
+      46,   282,   659,   604,   134,   689,   203,   690,   691,   204,
+     141,   217,   142,   219,   143,   220,   221,   222,   223,   144,
+     692,   283,    77,   504,   166,   505,   167,   169,   694,   362,
+     362,   362,   362,   362,   362,   362,   362,   362,   168,   505,
+     171,   291,   506,   507,   172,   508,   509,   175,   531,   510,
+     511,   227,   231,   214,   188,   282,   506,   507,   179,   508,
+     509,   192,   193,   510,   511,   217,   482,   219,   194,   220,
+     221,   222,   223,   195,   714,   283,   217,   338,   219,   339,
+     220,   221,   222,   223,   479,   292,   483,   293,   198,   217,
+     199,   219,   669,   220,   221,   222,   223,   123,   124,   340,
+     676,   294,   295,   296,   297,   461,   462,   463,   464,   465,
+     466,   467,   128,   301,   129,   130,   131,   132,   200,   228,
+     234,   241,   249,    78,   286,    58,    59,    60,    61,    62,
+      63,    64,    65,    66,    67,   250,    68,    69,    70,    71,
+      72,    73,   254,    74,   264,   265,   270,   274,   677,   362,
+     362,   232,   432,   433,   434,   435,   239,   278,   436,   279,
+     437,   280,   438,   439,   440,   441,   442,   443,   444,   445,
+     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
+     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
+     466,   467,   432,   433,   434,   435,   281,   335,   436,   344,
+     437,   345,   438,   439,   440,   441,   442,   443,   444,   445,
+     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
+     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
+     466,   467,   432,   433,   434,   435,   348,   349,   436,   350,
+     437,   378,   438,   439,   440,   441,   442,   443,   444,   445,
+     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
+     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
+     466,   467,   379,   380,   384,   392,   432,   433,   434,   435,
+     393,   394,   436,   398,   437,   532,   438,   439,   440,   441,
+     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
+     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
+     462,   463,   464,   465,   466,   467,   432,   433,   434,   435,
+     395,   396,   436,   399,   437,   533,   438,   439,   440,   441,
+     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
+     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
+     462,   463,   464,   465,   466,   467,   397,   400,   432,   433,
+     434,   435,   656,   657,   436,   401,   437,   402,   438,   439,
+     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
+     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
+     460,   461,   462,   463,   464,   465,   466,   467,   432,   433,
+     434,   435,   403,   413,   436,   405,   437,   642,   438,   439,
+     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
+     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
+     460,   461,   462,   463,   464,   465,   466,   467,   432,   433,
+     434,   435,   407,   414,   436,   476,   437,   644,   438,   439,
+     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
+     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
+     460,   461,   462,   463,   464,   465,   466,   467,   415,   416,
+     432,   433,   434,   435,   417,   418,   436,   477,   437,   645,
      438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
      448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
-     458,   459,   460,   461,   462,   463,   409,   410,   428,   429,
-     430,   431,   411,   472,   432,   412,   433,   528,   434,   435,
-     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
+     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
+     419,   432,   433,   434,   435,   420,   421,   436,   552,   437,
+     422,   438,   439,   440,   441,   442,   443,   444,   445,   446,
+     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
+     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
+     467,   432,   433,   434,   435,   423,   478,   436,   641,   437,
+     424,   438,   439,   440,   441,   442,   443,   444,   445,   446,
+     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
+     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
+     467,   432,   433,   434,   435,   425,   426,   436,   427,   437,
+     643,   438,   439,   440,   441,   442,   443,   444,   445,   446,
+     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
+     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
+     467,   428,   432,   433,   434,   435,   429,   430,   436,   481,
+     437,   646,   438,   439,   440,   441,   442,   443,   444,   445,
      446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
-     456,   457,   458,   459,   460,   461,   462,   463,   428,   429,
-     430,   431,   413,   473,   432,   414,   433,   529,   434,   435,
-     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
+     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
+     466,   467,   432,   433,   434,   435,  -275,   488,   436,   486,
+     437,   647,   438,   439,   440,   441,   442,   443,   444,   445,
      446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
-     456,   457,   458,   459,   460,   461,   462,   463,   415,   416,
-     428,   429,   430,   431,   652,   653,   432,   477,   433,   417,
-     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
-     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
-     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
-     428,   429,   430,   431,   418,   474,   432,   638,   433,   419,
-     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
+     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
+     466,   467,   432,   433,   434,   435,   487,   490,   436,   496,
+     437,   648,   438,   439,   440,   441,   442,   443,   444,   445,
+     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
+     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
+     466,   467,   497,   432,   433,   434,   435,   499,   238,   436,
+     520,   437,   649,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
+     465,   466,   467,   432,   433,   434,   435,   521,   522,   436,
+     523,   437,   650,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
+     465,   466,   467,   432,   433,   434,   435,   524,   525,   436,
+     526,   437,   651,   438,   439,   440,   441,   442,   443,   444,
+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
+     465,   466,   467,   527,   432,   433,   434,   435,   529,   530,
+     436,   591,   437,   652,   438,   439,   440,   441,   442,   443,
      444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
-     428,   429,   430,   431,   420,   484,   432,   640,   433,   421,
-     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
+     464,   465,   466,   467,   432,   433,   434,   435,   592,   594,
+     436,   595,   437,   653,   438,   439,   440,   441,   442,   443,
      444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
-     428,   429,   430,   431,   422,   423,   432,  -271,   433,   641,
-     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
+     464,   465,   466,   467,   432,   433,   434,   435,   598,   599,
+     436,  -267,   437,   654,   438,   439,   440,   441,   442,   443,
      444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
-     424,   428,   429,   430,   431,   425,   426,   432,   548,   433,
-     482,   434,   435,   436,   437,   438,   439,   440,   441,   442,
+     464,   465,   466,   467,   600,   432,   433,   434,   435,   602,
+     608,   436,   622,   437,   658,   438,   439,   440,   441,   442,
      443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
-     463,   428,   429,   430,   431,   483,   486,   432,   637,   433,
-     492,   434,   435,   436,   437,   438,   439,   440,   441,   442,
+     463,   464,   465,   466,   467,   432,   433,   434,   435,   609,
+     611,   436,   631,   437,   705,   438,   439,   440,   441,   442,
      443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
-     463,   428,   429,   430,   431,   493,   495,   432,   639,   433,
-     234,   434,   435,   436,   437,   438,   439,   440,   441,   442,
+     463,   464,   465,   466,   467,   432,   433,   434,   435,   623,
+     624,   436,   636,   437,   706,   438,   439,   440,   441,   442,
      443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
-     463,   516,   428,   429,   430,   431,   517,   519,   432,   642,
-     433,   520,   434,   435,   436,   437,   438,   439,   440,   441,
-     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
-     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
-     462,   463,   428,   429,   430,   431,   521,   522,   432,   643,
-     433,   518,   434,   435,   436,   437,   438,   439,   440,   441,
-     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
-     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
-     462,   463,   428,   429,   430,   431,   523,   525,   432,   644,
-     433,   526,   434,   435,   436,   437,   438,   439,   440,   441,
+     463,   464,   465,   466,   467,   503,   699,   630,   504,   629,
+     505,   637,   508,   509,   632,   707,   510,   511,   633,   201,
+     135,   136,   137,   138,   139,   140,   634,   506,   507,   635,
+     508,   509,   638,   639,   510,   511,   640,   661,   660,   662,
+     666,   305,   667,   306,   203,   668,   202,   671,   673,   675,
+     686,   307,   308,   309,   310,   708,   311,   312,   313,   314,
+     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
+     325,   204,   688,   693,   503,   700,   696,   504,   697,   505,
+     698,   701,   702,   503,   703,   704,   504,   709,   505,   201,
+     711,   712,   291,   495,   713,   202,   506,   507,   718,   508,
+     509,   715,   716,   510,   511,   506,   507,   626,   508,   509,
+     719,    88,   510,   511,   203,   214,    89,   282,   174,   377,
+     233,   681,   326,   519,   625,   590,   484,   217,   327,   219,
+     103,   220,   221,   222,   223,   687,   292,   283,   293,   356,
+     328,   204,   205,   206,   207,   208,     0,     0,     0,     0,
+     357,     0,   294,   295,   296,   297,     0,   201,     0,     0,
+       0,     0,     0,   202,   148,   149,   150,   151,     0,     0,
+     152,   153,   154,     0,   333,   209,   210,   211,   155,   213,
+       0,   156,   203,     0,   217,   214,   219,   215,   220,   221,
+     222,   223,   216,     0,     0,     0,     0,   217,   218,   219,
+       0,   220,   221,   222,   223,   224,     0,   225,   680,   204,
+     205,   206,   207,   208,   358,     0,     0,     0,     0,     0,
+       0,   148,   149,   150,   151,   217,     0,   219,   153,   220,
+     221,   222,   223,     0,     0,     0,     0,     0,   359,     0,
+       0,     0,     0,   209,   210,   211,   212,   213,     0,     0,
+       0,     0,     0,   214,     0,   215,     0,     0,     0,     0,
+     216,     0,     0,     0,     0,   217,   218,   219,     0,   220,
+     221,   222,   223,   224,     0,   225,   432,   433,   434,   435,
+       0,     0,   436,     0,   437,     0,   438,   439,   440,   441,
      442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
-     462,   463,   587,   428,   429,   430,   431,   588,   590,   432,
-     645,   433,   591,   434,   435,   436,   437,   438,   439,   440,
-     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
-     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
-     461,   462,   463,   428,   429,   430,   431,   594,   595,   432,
-     646,   433,  -263,   434,   435,   436,   437,   438,   439,   440,
-     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
-     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
-     461,   462,   463,   428,   429,   430,   431,   596,   604,   432,
-     647,   433,   598,   434,   435,   436,   437,   438,   439,   440,
-     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
-     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
-     461,   462,   463,   605,   428,   429,   430,   431,   607,   618,
-     432,   648,   433,   619,   434,   435,   436,   437,   438,   439,
+     462,   463,   464,   465,   466,   467,   148,   149,   150,   151,
+     217,     0,   219,   153,   220,   221,   222,   223,   432,   433,
+     434,   435,     0,   601,   436,     0,   437,   468,   438,   439,
      440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
-     460,   461,   462,   463,   428,   429,   430,   431,   620,   626,
-     432,   649,   433,   627,   434,   435,   436,   437,   438,   439,
+     460,   461,   462,   463,   464,   465,   466,   467,   432,   433,
+     434,   435,     0,   605,   436,     0,   437,     0,   438,   439,
      440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
-     460,   461,   462,   463,   428,   429,   430,   431,   628,   629,
-     432,   650,   433,   625,   434,   435,   436,   437,   438,   439,
+     460,   461,   462,   463,   464,   465,   466,   467,   432,   433,
+     434,   435,     0,   610,   436,     0,   437,     0,   438,   439,
      440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
-     460,   461,   462,   463,   630,   428,   429,   430,   431,   631,
-     632,   432,   654,   433,   633,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   460,   461,   462,   463,   428,   429,   430,   431,   634,
-     657,   432,   701,   433,   635,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   460,   461,   462,   463,   428,   429,   430,   431,   636,
-     658,   432,   702,   433,   656,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   460,   461,   462,   463,   499,   695,   662,   500,   663,
-     501,   664,   667,   703,   671,   669,   682,   197,   684,   689,
-     692,   693,   694,   697,   698,   699,   700,   502,   503,   705,
-     504,   505,   707,   708,   506,   507,   711,   712,   197,   301,
-     709,   302,   199,   714,   715,    88,    89,   170,   373,   303,
-     304,   305,   306,   704,   307,   308,   309,   310,   311,   312,
-     313,   314,   315,   316,   317,   318,   319,   320,   321,   200,
-     229,   677,   499,   696,   515,   500,   621,   501,   586,   480,
-     198,   103,   683,     0,     0,     0,     0,   197,     0,     0,
-     200,   491,     0,   198,   502,   503,     0,   504,   505,     0,
-       0,   506,   507,     0,     0,   622,     0,     0,     0,     0,
-       0,   210,   199,   278,     0,     0,     0,     0,   322,     0,
-       0,     0,     0,   213,   323,   215,   287,   216,   217,   218,
-     219,     0,   210,   279,   278,     0,   324,     0,     0,   200,
-     201,   202,   203,   204,   213,   352,   215,     0,   216,   217,
-     218,   219,     0,   197,   279,     0,   353,     0,     0,   198,
-       0,     0,     0,     0,     0,     0,     0,   198,   288,     0,
-     289,   205,   206,   207,     0,   209,     0,     0,   199,     0,
-       0,   210,     0,   211,   290,   291,   292,   293,   212,     0,
-       0,     0,     0,   213,   214,   215,   297,   216,   217,   218,
-     219,   220,     0,   221,   676,   200,   201,   202,   203,   204,
-       0,     0,     0,   287,     0,     0,     0,     0,   354,     0,
-       0,     0,     0,     0,     0,   144,   145,   146,   147,   213,
-       0,   215,   149,   216,   217,   218,   219,   205,   206,   207,
-     208,   209,   355,     0,     0,     0,     0,   210,     0,   211,
-       0,     0,     0,     0,   212,   288,     0,   289,     0,   213,
-     214,   215,     0,   216,   217,   218,   219,   220,     0,   221,
-       0,   290,   291,   292,   293,   428,   429,   430,   431,     0,
-       0,   432,     0,   433,     0,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   460,   461,   462,   463,     0,     0,   144,   145,   146,
-     147,     0,     0,   148,   149,   150,     0,   428,   429,   430,
-     431,   151,   597,   432,   152,   433,   464,   434,   435,   436,
-     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
-     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
-     457,   458,   459,   460,   461,   462,   463,   428,   429,   430,
-     431,     0,   601,   432,     0,   433,     0,   434,   435,   436,
-     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
-     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
-     457,   458,   459,   460,   461,   462,   463,   428,   429,   430,
-     431,     0,   606,   432,     0,   433,     0,   434,   435,   436,
-     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
-     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
-     457,   458,   459,   460,   461,   462,   463,   428,   429,   430,
-     431,     0,   659,   432,     0,   433,     0,   434,   435,   436,
-     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
-     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
-     457,   458,   459,   460,   461,   462,   463,   428,   429,   430,
-     431,     0,   670,   432,     0,   433,     0,   434,   435,   436,
-     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
-     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
-     457,   458,   459,   460,   461,   462,   463,   428,   429,   430,
-     431,     0,   691,   432,     0,   433,     0,   434,   435,   436,
-     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
-     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
-     457,   458,   459,   460,   461,   462,   463,   428,   429,   430,
-     431,     0,   706,   432,     0,   433,     0,   434,   435,   436,
-     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
-     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
-     457,   458,   459,   460,   461,   462,   463,   428,   429,   430,
-     431,     0,   713,   432,     0,   433,     0,   434,   435,   436,
-     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
-     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
-     457,   458,   459,   460,   461,   462,   463,   428,   429,   430,
-     431,     0,     0,   432,     0,   433,     0,   434,   435,   436,
-     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
-     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
-     457,   458,   459,   460,   461,   462,   463,   429,   430,   431,
-       0,     0,   432,     0,   433,     0,   434,   435,   436,   437,
-     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
-     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
-     458,   459,   460,   461,   462,   463,   431,     0,     0,   432,
-       0,   433,     0,   434,   435,   436,   437,   438,   439,   440,
+     460,   461,   462,   463,   464,   465,   466,   467,   432,   433,
+     434,   435,     0,   663,   436,     0,   437,     0,   438,   439,
+     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
+     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
+     460,   461,   462,   463,   464,   465,   466,   467,   432,   433,
+     434,   435,     0,   674,   436,     0,   437,     0,   438,   439,
+     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
+     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
+     460,   461,   462,   463,   464,   465,   466,   467,   432,   433,
+     434,   435,     0,   695,   436,     0,   437,     0,   438,   439,
+     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
+     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
+     460,   461,   462,   463,   464,   465,   466,   467,   432,   433,
+     434,   435,     0,   710,   436,     0,   437,     0,   438,   439,
+     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
+     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
+     460,   461,   462,   463,   464,   465,   466,   467,   432,   433,
+     434,   435,     0,   717,   436,     0,   437,     0,   438,   439,
+     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
+     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
+     460,   461,   462,   463,   464,   465,   466,   467,   432,   433,
+     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
+     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
+     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
+     460,   461,   462,   463,   464,   465,   466,   467,   433,   434,
+     435,     0,     0,   436,     0,   437,     0,   438,   439,   440,
      441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
      451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
-     461,   462,   463,   432,     0,   433,     0,   434,   435,   436,
-     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
-     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
-     457,   458,   459,   460,   461,   462,   463,   433,     0,   434,
-     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
-     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
-     455,   456,   457,   458,   459,   460,   461,   462,   463,   434,
-     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
-     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
-     455,   456,   457,   458,   459,   460,   461,   462,   463,   247,
-       0,    58,    59,    60,    61,    62,    63,    64,    65,    66,
-      67,     0,    68,    69,    70,    71,    72,    73,     0,    74,
-       0,     0,     0,     0,     0,   377,   248,    58,    59,    60,
-      61,    62,    63,    64,    65,    66,    67,   501,    68,    69,
-      70,    71,    72,    73,   500,    74,   501,     0,     0,     0,
-       0,     0,   378,     0,   502,   503,     0,   504,   505,     0,
-       0,   506,   507,   502,   503,     0,   504,   505,     0,     0,
-     506,   507,   438,   439,   440,   441,   442,   443,   444,   445,
-     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
-     456,   457,   458,   459,   460,   461,   462,   463,  -272,  -272,
-    -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,
+     461,   462,   463,   464,   465,   466,   467,   435,     0,     0,
+     436,     0,   437,     0,   438,   439,   440,   441,   442,   443,
+     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
+     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
+     464,   465,   466,   467,   436,     0,   437,     0,   438,   439,
+     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
-     460,   461,   462,   463,   106,     0,    58,    59,    60,    61,
-      62,    63,    64,    65,    66,    67,     0,    68,    69,    70,
-      71,    72,    73,   109,    74,    58,    59,    60,    61,    62,
-      63,    64,    65,    66,    67,     0,    68,    69,    70,    71,
-      72,    73,     0,    74,   257,     0,    58,    59,    60,    61,
+     460,   461,   462,   463,   464,   465,   466,   467,   437,     0,
+     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
+     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
+     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
+     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
+     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
+     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
+     251,     0,    58,    59,    60,    61,    62,    63,    64,    65,
+      66,    67,     0,    68,    69,    70,    71,    72,    73,     0,
+      74,     0,     0,     0,     0,     0,   381,   252,    58,    59,
+      60,    61,    62,    63,    64,    65,    66,    67,     0,    68,
+      69,    70,    71,    72,    73,     0,    74,     0,     0,     0,
+       0,     0,     0,   382,   442,   443,   444,   445,   446,   447,
+     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
+     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
+    -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,
+    -276,  -276,   454,   455,   456,   457,   458,   459,   460,   461,
+     462,   463,   464,   465,   466,   467,   106,     0,    58,    59,
+      60,    61,    62,    63,    64,    65,    66,    67,     0,    68,
+      69,    70,    71,    72,    73,   109,    74,    58,    59,    60,
+      61,    62,    63,    64,    65,    66,    67,     0,    68,    69,
+      70,    71,    72,    73,   261,    74,    58,    59,    60,    61,
       62,    63,    64,    65,    66,    67,     0,    68,    69,    70,
-      71,    72,    73,     0,    74,   144,   145,   146,   147,   213,
-       0,   215,   149,   216,   217,   218,   219,   453,   454,   455,
-     456,   457,   458,   459,   460,   461,   462,   463
+      71,    72,    73,     0,    74,   457,   458,   459,   460,   461,
+     462,   463,   464,   465,   466,   467
 };
 
 static const yytype_int16 yycheck[] =
 {
-      92,   142,   142,    11,   202,   204,    63,    99,     0,     1,
-       8,     8,     8,     8,   238,   239,   240,   241,   242,   243,
-      33,     6,   107,     8,   223,     9,    11,    20,    79,    68,
-      99,   346,   117,     6,   126,     8,     7,   107,    11,    10,
-      14,    12,    33,    17,    18,    19,    20,    40,   105,    42,
-       1,   143,   113,    76,   115,    63,   126,   126,    29,    30,
-     152,    32,    33,     8,   107,    36,    37,   208,    29,   107,
-       8,   129,   133,   107,   117,   133,    68,    69,    70,   113,
-      33,   115,   142,   152,   135,    77,   107,   160,   129,   127,
-     130,   134,   105,   117,   107,   294,   136,   105,   297,   136,
-     134,   300,   301,   302,   303,   304,   142,   107,   423,   133,
-      94,   426,   133,   186,   105,   107,   107,    68,    69,    70,
-     104,   134,   136,   107,   108,   324,    77,   326,   352,   353,
-     128,   355,   129,   129,    72,   127,    74,   197,   133,   136,
-     232,   233,   234,   342,   136,   135,   345,   207,   133,    87,
-      88,   350,   105,   137,   133,   129,   107,   136,   131,    71,
-     131,   197,   107,   232,   233,   234,    78,   128,    80,   205,
-     129,   207,   208,   166,   133,     8,   127,   128,    11,   129,
-     133,    93,   175,   133,   130,   136,   136,   133,   100,   129,
-     136,   103,   107,   133,   230,   110,     6,   109,     8,   129,
-       9,    11,   238,   239,   240,   241,   242,   243,    85,    86,
-     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
-     419,   420,   421,   422,   107,   424,   425,   110,   117,   428,
-     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
-     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
-     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
-     459,   460,   461,   462,   463,   258,   464,    81,    82,    83,
-      84,   470,   113,   333,   115,   499,   500,   501,   502,   503,
-     504,   505,   506,   507,    81,    94,    83,    84,    73,   102,
-      75,    71,   491,    89,   107,   104,   107,   333,   107,   108,
-      80,   337,   115,   130,    11,    32,    33,   136,   121,    36,
-      37,   129,   101,    93,   129,    11,   352,   353,   104,   355,
-     100,   134,   129,   103,   113,   114,   115,   116,   137,   109,
-     119,   120,   121,   107,   394,    90,    91,    92,   127,   129,
-      36,   130,   129,   117,     8,   119,   129,   121,   122,   123,
-     124,     3,     4,     5,     6,     8,    63,     9,   394,    11,
-     129,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,    11,   131,   132,   105,   619,   620,   130,   105,   598,
-     107,   600,   131,   132,   107,    17,   131,   132,     8,   105,
-     117,   107,   119,   129,   121,   122,   123,   124,   131,   132,
-     127,   117,   107,   119,   129,   121,   122,   123,   124,   136,
-       7,   127,   133,    10,     8,    12,   131,   132,   130,   638,
-     130,   640,   641,    63,    36,    37,    38,    39,    40,    41,
-      42,    63,    29,    30,   653,    32,    33,    36,    37,    36,
-      37,     8,   661,   499,   500,   501,   502,   503,   504,   505,
-     506,   507,    85,    86,   107,    48,    49,   105,   105,   130,
-     621,   621,   134,   130,   117,   105,   119,   107,   121,   122,
-     123,   124,   128,   105,   127,   107,   101,   117,   129,   119,
-       8,   121,   122,   123,   124,     8,   105,   127,   707,   121,
-     122,   123,   124,   117,   105,     8,   136,     8,   133,   105,
-     105,   133,   105,   105,    29,    30,   618,    32,    33,   130,
-     136,    36,    37,   107,   594,   109,   110,   111,   112,   113,
-     114,   115,   116,   117,   118,   121,   120,   121,   122,   123,
-     124,   125,   130,   127,   129,    87,   105,   107,   594,   130,
-     107,   621,   109,   110,   111,   112,   113,   114,   115,   116,
-     117,   118,   131,   120,   121,   122,   123,   124,   125,   133,
-     127,   132,   618,   619,   620,   621,     3,     4,     5,     6,
-     135,   132,     9,   132,    11,   132,    13,    14,    15,    16,
-      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
-      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
-      37,    38,    39,    40,    41,    42,     3,     4,     5,     6,
-     105,    18,     9,    18,    11,   109,    13,    14,    15,    16,
+      92,   208,   146,   146,   206,     0,     1,    99,     9,    29,
+       8,     8,   242,   243,   244,   245,   246,   247,     8,    11,
+     227,    20,    99,    63,    76,   109,     6,     8,     8,    33,
+      33,    11,    79,     8,   126,     6,   109,     8,    71,   350,
+      11,    40,   109,    42,     1,    78,   109,    80,    33,   126,
+     109,   135,   119,     9,   135,   147,   129,   138,     7,   164,
+     119,    10,    95,    12,   156,   128,   131,   107,   212,   102,
+     146,    63,   105,    68,    69,    70,   119,   136,   111,   156,
+      29,    30,    77,    32,    33,   190,    17,    36,    37,   131,
+     137,   298,   135,   135,   301,    96,   138,   304,   305,   306,
+     307,   308,   146,   107,   107,   106,   109,    68,   109,   110,
+     130,    68,    69,    70,   109,   107,   427,    87,    88,   430,
+      77,   328,   107,   330,   109,   201,   356,   357,   109,   359,
+     132,   135,    63,   130,   129,   211,   138,   135,   139,   346,
+      96,   131,   349,   138,   236,   237,   238,   354,   138,   109,
+     106,   136,   109,   109,   110,   135,   131,   201,   137,   236,
+     237,   238,   133,    36,    37,   209,   131,   211,   212,   109,
+     135,   170,   129,   130,   138,   115,   107,   117,   109,   138,
+     179,   138,    14,   139,   133,    17,    18,    19,    20,   115,
+     234,   117,   123,   124,   125,   126,   136,   131,   242,   243,
+     244,   245,   246,   247,   135,     8,   413,   414,   415,   416,
+     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
+       8,   428,   429,   133,   134,   432,   433,   434,   435,   436,
+     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
+     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
+     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
+     467,   337,   115,   262,   117,   119,   468,   474,   131,    72,
+     109,    74,   135,   503,   504,   505,   506,   507,   508,   509,
+     510,   511,   135,    92,    93,    94,    89,    90,   495,   132,
+      11,   103,   135,   337,    91,   138,     6,   341,     8,   131,
+      73,    11,    75,   115,   116,   117,   118,   133,   134,   121,
+     122,   123,   356,   357,   131,   359,     8,   129,   135,    11,
+     132,   109,   398,   111,   112,   113,   114,   115,   116,   117,
+     118,   119,   120,    11,   122,   123,   124,   125,   126,   127,
+     109,   129,    63,   112,   138,     3,     4,     5,     6,   109,
+     132,     9,   112,    11,   398,    13,    14,    15,    16,    17,
+      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
+      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
+      38,    39,    40,    41,    42,    63,   107,    11,   109,   106,
+      71,   133,   134,   623,   624,   602,   104,   604,   119,    80,
+     121,   109,   123,   124,   125,   126,   133,   134,   129,   117,
+       8,    11,    87,    88,    95,   123,   131,   138,   131,    29,
+      30,   102,    32,    33,   105,    17,    36,    37,   136,   107,
+     111,   109,   133,   134,   131,   642,    36,   644,   645,    63,
+     131,   119,   131,   121,   131,   123,   124,   125,   126,   131,
+     657,   129,     8,    10,     8,    12,   107,   109,   665,   503,
+     504,   505,   506,   507,   508,   509,   510,   511,   132,    12,
+       8,    63,    29,    30,   131,    32,    33,   131,   136,    36,
+      37,   625,   625,   107,   109,   109,    29,    30,   135,    32,
+      33,   132,   132,    36,    37,   119,   109,   121,   132,   123,
+     124,   125,   126,   132,   711,   129,   119,   107,   121,   109,
+     123,   124,   125,   126,   138,   107,   129,   109,   107,   119,
+     107,   121,   598,   123,   124,   125,   126,    48,    49,   129,
+     622,   123,   124,   125,   126,    36,    37,    38,    39,    40,
+      41,    42,    81,   135,    83,    84,    85,    86,   130,   625,
+     131,   103,     8,   109,   598,   111,   112,   113,   114,   115,
+     116,   117,   118,   119,   120,   107,   122,   123,   124,   125,
+     126,   127,   119,   129,     8,   107,     8,     8,   622,   623,
+     624,   625,     3,     4,     5,     6,   135,   107,     9,   107,
+      11,   107,    13,    14,    15,    16,    17,    18,    19,    20,
+      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
+      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
+      41,    42,     3,     4,     5,     6,   107,   132,     9,   123,
+      11,   138,    13,    14,    15,    16,    17,    18,    19,    20,
+      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
+      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
+      41,    42,     3,     4,     5,     6,   132,   131,     9,   132,
+      11,   133,    13,    14,    15,    16,    17,    18,    19,    20,
+      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
+      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
+      41,    42,   135,    89,   107,   109,     3,     4,     5,     6,
+     137,   134,     9,   107,    11,   136,    13,    14,    15,    16,
       17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
       37,    38,    39,    40,    41,    42,     3,     4,     5,     6,
-     105,   133,     9,     8,    11,     8,    13,    14,    15,    16,
+     134,   134,     9,    18,    11,   136,    13,    14,    15,    16,
       17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
-      37,    38,    39,    40,    41,    42,   130,   130,     3,     4,
-       5,     6,   130,   129,     9,   130,    11,   134,    13,    14,
+      37,    38,    39,    40,    41,    42,   134,    18,     3,     4,
+       5,     6,   133,   134,     9,   111,    11,   107,    13,    14,
       15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
       35,    36,    37,    38,    39,    40,    41,    42,     3,     4,
-       5,     6,   130,   105,     9,   130,    11,   134,    13,    14,
+       5,     6,   135,   132,     9,     8,    11,   134,    13,    14,
       15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      35,    36,    37,    38,    39,    40,    41,    42,   130,   130,
-       3,     4,     5,     6,   131,   132,     9,   136,    11,   130,
-      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
-      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
-      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
-       3,     4,     5,     6,   130,   132,     9,   132,    11,   130,
-      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
-      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
-      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
-       3,     4,     5,     6,   130,   105,     9,   132,    11,   130,
-      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
-      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
-      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
-       3,     4,     5,     6,   130,   130,     9,     8,    11,   132,
+      35,    36,    37,    38,    39,    40,    41,    42,     3,     4,
+       5,     6,     8,   132,     9,   131,    11,   134,    13,    14,
+      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
+      35,    36,    37,    38,    39,    40,    41,    42,   132,   132,
+       3,     4,     5,     6,   132,   132,     9,   107,    11,   134,
       13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
       23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
       33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
-     130,     3,     4,     5,     6,   130,   130,     9,   131,    11,
-       8,    13,    14,    15,    16,    17,    18,    19,    20,    21,
+     132,     3,     4,     5,     6,   132,   132,     9,   133,    11,
+     132,    13,    14,    15,    16,    17,    18,    19,    20,    21,
       22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
       32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,     8,   105,     9,   131,    11,
-     105,    13,    14,    15,    16,    17,    18,    19,    20,    21,
+      42,     3,     4,     5,     6,   132,   134,     9,   133,    11,
+     132,    13,    14,    15,    16,    17,    18,    19,    20,    21,
       22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
       32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,     3,     4,     5,     6,   105,   105,     9,   131,    11,
-      11,    13,    14,    15,    16,    17,    18,    19,    20,    21,
+      42,     3,     4,     5,     6,   132,   132,     9,   132,    11,
+     133,    13,    14,    15,    16,    17,    18,    19,    20,    21,
       22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
       32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,    76,     3,     4,     5,     6,   105,   105,     9,   131,
-      11,   105,    13,    14,    15,    16,    17,    18,    19,    20,
+      42,   132,     3,     4,     5,     6,   132,   132,     9,   138,
+      11,   133,    13,    14,    15,    16,    17,    18,    19,    20,
       21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
       31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
-      41,    42,     3,     4,     5,     6,   105,   105,     9,   131,
-      11,   129,    13,    14,    15,    16,    17,    18,    19,    20,
+      41,    42,     3,     4,     5,     6,     8,   107,     9,     8,
+      11,   133,    13,    14,    15,    16,    17,    18,    19,    20,
       21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
       31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
-      41,    42,     3,     4,     5,     6,   105,   134,     9,   131,
-      11,   109,    13,    14,    15,    16,    17,    18,    19,    20,
+      41,    42,     3,     4,     5,     6,     8,   107,     9,   107,
+      11,   133,    13,    14,    15,    16,    17,    18,    19,    20,
       21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
       31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
-      41,    42,   105,     3,     4,     5,     6,   105,   105,     9,
-     131,    11,   131,    13,    14,    15,    16,    17,    18,    19,
+      41,    42,   107,     3,     4,     5,     6,   107,    11,     9,
+      76,    11,   133,    13,    14,    15,    16,    17,    18,    19,
       20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
       30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
-      40,    41,    42,     3,     4,     5,     6,   105,   105,     9,
-     131,    11,     8,    13,    14,    15,    16,    17,    18,    19,
+      40,    41,    42,     3,     4,     5,     6,   107,   131,     9,
+     107,    11,   133,    13,    14,    15,    16,    17,    18,    19,
       20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
       30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
-      40,    41,    42,     3,     4,     5,     6,     8,   131,     9,
-     131,    11,   129,    13,    14,    15,    16,    17,    18,    19,
+      40,    41,    42,     3,     4,     5,     6,   107,   107,     9,
+     107,    11,   133,    13,    14,    15,    16,    17,    18,    19,
       20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
       30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
-      40,    41,    42,   129,     3,     4,     5,     6,   132,   130,
-       9,   131,    11,   129,    13,    14,    15,    16,    17,    18,
+      40,    41,    42,   107,     3,     4,     5,     6,   136,   111,
+       9,   107,    11,   133,    13,    14,    15,    16,    17,    18,
       19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
       29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
-      39,    40,    41,    42,     3,     4,     5,     6,   129,   132,
-       9,   131,    11,   105,    13,    14,    15,    16,    17,    18,
+      39,    40,    41,    42,     3,     4,     5,     6,   107,   107,
+       9,   133,    11,   133,    13,    14,    15,    16,    17,    18,
       19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
       29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
-      39,    40,    41,    42,     3,     4,     5,     6,   131,   131,
-       9,   131,    11,   129,    13,    14,    15,    16,    17,    18,
+      39,    40,    41,    42,     3,     4,     5,     6,   107,   107,
+       9,     8,    11,   133,    13,    14,    15,    16,    17,    18,
       19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
       29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
-      39,    40,    41,    42,   131,     3,     4,     5,     6,   131,
-     136,     9,   131,    11,   134,    13,    14,    15,    16,    17,
+      39,    40,    41,    42,     8,     3,     4,     5,     6,   131,
+     133,     9,   132,    11,   133,    13,    14,    15,    16,    17,
       18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
-      38,    39,    40,    41,    42,     3,     4,     5,     6,     8,
-     131,     9,   131,    11,     8,    13,    14,    15,    16,    17,
+      38,    39,    40,    41,    42,     3,     4,     5,     6,   131,
+     134,     9,   107,    11,   133,    13,    14,    15,    16,    17,
       18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
-      38,    39,    40,    41,    42,     3,     4,     5,     6,     8,
-     132,     9,   131,    11,     8,    13,    14,    15,    16,    17,
+      38,    39,    40,    41,    42,     3,     4,     5,     6,   131,
+     131,     9,   138,    11,   133,    13,    14,    15,    16,    17,
       18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
-      38,    39,    40,    41,    42,     7,     8,     8,    10,     8,
-      12,     8,     8,   131,   105,     8,   105,    11,   105,   105,
-     134,   132,   132,    30,    30,   134,     8,    29,    30,   134,
-      32,    33,   129,   115,    36,    37,   131,   131,    11,    33,
-     115,    35,    36,     8,     8,    31,    31,   116,   244,    43,
-      44,    45,    46,   131,    48,    49,    50,    51,    52,    53,
-      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
-     143,   621,     7,     8,   365,    10,   514,    12,   466,   337,
-      17,    36,   627,    -1,    -1,    -1,    -1,    11,    -1,    -1,
-      63,   129,    -1,    17,    29,    30,    -1,    32,    33,    -1,
-      -1,    36,    37,    -1,    -1,    29,    -1,    -1,    -1,    -1,
-      -1,   105,    36,   107,    -1,    -1,    -1,    -1,   112,    -1,
-      -1,    -1,    -1,   117,   118,   119,    63,   121,   122,   123,
-     124,    -1,   105,   127,   107,    -1,   130,    -1,    -1,    63,
-      64,    65,    66,    67,   117,    33,   119,    -1,   121,   122,
-     123,   124,    -1,    11,   127,    -1,    44,    -1,    -1,    17,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    17,   105,    -1,
-     107,    95,    96,    97,    -1,    99,    -1,    -1,    36,    -1,
-      -1,   105,    -1,   107,   121,   122,   123,   124,   112,    -1,
-      -1,    -1,    -1,   117,   118,   119,   133,   121,   122,   123,
-     124,   125,    -1,   127,   128,    63,    64,    65,    66,    67,
-      -1,    -1,    -1,    63,    -1,    -1,    -1,    -1,   106,    -1,
-      -1,    -1,    -1,    -1,    -1,   113,   114,   115,   116,   117,
-      -1,   119,   120,   121,   122,   123,   124,    95,    96,    97,
-      98,    99,   130,    -1,    -1,    -1,    -1,   105,    -1,   107,
-      -1,    -1,    -1,    -1,   112,   105,    -1,   107,    -1,   117,
-     118,   119,    -1,   121,   122,   123,   124,   125,    -1,   127,
-      -1,   121,   122,   123,   124,     3,     4,     5,     6,    -1,
-      -1,     9,    -1,    11,    -1,    13,    14,    15,    16,    17,
-      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
-      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
-      38,    39,    40,    41,    42,    -1,    -1,   113,   114,   115,
-     116,    -1,    -1,   119,   120,   121,    -1,     3,     4,     5,
-       6,   127,     8,     9,   130,    11,    64,    13,    14,    15,
-      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    40,    41,    42,     3,     4,     5,
-       6,    -1,     8,     9,    -1,    11,    -1,    13,    14,    15,
-      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    40,    41,    42,     3,     4,     5,
-       6,    -1,     8,     9,    -1,    11,    -1,    13,    14,    15,
-      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    40,    41,    42,     3,     4,     5,
-       6,    -1,     8,     9,    -1,    11,    -1,    13,    14,    15,
-      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    40,    41,    42,     3,     4,     5,
-       6,    -1,     8,     9,    -1,    11,    -1,    13,    14,    15,
-      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    40,    41,    42,     3,     4,     5,
-       6,    -1,     8,     9,    -1,    11,    -1,    13,    14,    15,
-      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    40,    41,    42,     3,     4,     5,
-       6,    -1,     8,     9,    -1,    11,    -1,    13,    14,    15,
-      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    40,    41,    42,     3,     4,     5,
-       6,    -1,     8,     9,    -1,    11,    -1,    13,    14,    15,
-      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    40,    41,    42,     3,     4,     5,
-       6,    -1,    -1,     9,    -1,    11,    -1,    13,    14,    15,
-      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    40,    41,    42,     4,     5,     6,
+      38,    39,    40,    41,    42,     7,     8,   134,    10,   131,
+      12,   136,    32,    33,   133,   133,    36,    37,   133,    11,
+      81,    82,    83,    84,    85,    86,   133,    29,    30,   133,
+      32,    33,     8,     8,    36,    37,     8,   133,     8,   134,
+       8,    33,     8,    35,    36,     8,    17,     8,     8,   107,
+     107,    43,    44,    45,    46,   133,    48,    49,    50,    51,
+      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
+      62,    63,   107,   107,     7,     8,   136,    10,   134,    12,
+     134,    30,    30,     7,   136,     8,    10,   136,    12,    11,
+     131,   117,    63,   131,   117,    17,    29,    30,     8,    32,
+      33,   133,   133,    36,    37,    29,    30,    29,    32,    33,
+       8,    31,    36,    37,    36,   107,    31,   109,   116,   248,
+     147,   625,   114,   369,   518,   470,   341,   119,   120,   121,
+      36,   123,   124,   125,   126,   631,   107,   129,   109,    33,
+     132,    63,    64,    65,    66,    67,    -1,    -1,    -1,    -1,
+      44,    -1,   123,   124,   125,   126,    -1,    11,    -1,    -1,
+      -1,    -1,    -1,    17,   115,   116,   117,   118,    -1,    -1,
+     121,   122,   123,    -1,   109,    97,    98,    99,   129,   101,
+      -1,   132,    36,    -1,   119,   107,   121,   109,   123,   124,
+     125,   126,   114,    -1,    -1,    -1,    -1,   119,   120,   121,
+      -1,   123,   124,   125,   126,   127,    -1,   129,   130,    63,
+      64,    65,    66,    67,   108,    -1,    -1,    -1,    -1,    -1,
+      -1,   115,   116,   117,   118,   119,    -1,   121,   122,   123,
+     124,   125,   126,    -1,    -1,    -1,    -1,    -1,   132,    -1,
+      -1,    -1,    -1,    97,    98,    99,   100,   101,    -1,    -1,
+      -1,    -1,    -1,   107,    -1,   109,    -1,    -1,    -1,    -1,
+     114,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,   123,
+     124,   125,   126,   127,    -1,   129,     3,     4,     5,     6,
       -1,    -1,     9,    -1,    11,    -1,    13,    14,    15,    16,
       17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
-      37,    38,    39,    40,    41,    42,     6,    -1,    -1,     9,
-      -1,    11,    -1,    13,    14,    15,    16,    17,    18,    19,
-      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
-      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
-      40,    41,    42,     9,    -1,    11,    -1,    13,    14,    15,
+      37,    38,    39,    40,    41,    42,   115,   116,   117,   118,
+     119,    -1,   121,   122,   123,   124,   125,   126,     3,     4,
+       5,     6,    -1,     8,     9,    -1,    11,    64,    13,    14,
+      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
+      35,    36,    37,    38,    39,    40,    41,    42,     3,     4,
+       5,     6,    -1,     8,     9,    -1,    11,    -1,    13,    14,
+      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
+      35,    36,    37,    38,    39,    40,    41,    42,     3,     4,
+       5,     6,    -1,     8,     9,    -1,    11,    -1,    13,    14,
+      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
+      35,    36,    37,    38,    39,    40,    41,    42,     3,     4,
+       5,     6,    -1,     8,     9,    -1,    11,    -1,    13,    14,
+      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
+      35,    36,    37,    38,    39,    40,    41,    42,     3,     4,
+       5,     6,    -1,     8,     9,    -1,    11,    -1,    13,    14,
+      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
+      35,    36,    37,    38,    39,    40,    41,    42,     3,     4,
+       5,     6,    -1,     8,     9,    -1,    11,    -1,    13,    14,
+      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
+      35,    36,    37,    38,    39,    40,    41,    42,     3,     4,
+       5,     6,    -1,     8,     9,    -1,    11,    -1,    13,    14,
+      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
+      35,    36,    37,    38,    39,    40,    41,    42,     3,     4,
+       5,     6,    -1,     8,     9,    -1,    11,    -1,    13,    14,
+      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
+      35,    36,    37,    38,    39,    40,    41,    42,     3,     4,
+       5,     6,    -1,    -1,     9,    -1,    11,    -1,    13,    14,
+      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
+      35,    36,    37,    38,    39,    40,    41,    42,     4,     5,
+       6,    -1,    -1,     9,    -1,    11,    -1,    13,    14,    15,
       16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
       26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    40,    41,    42,    11,    -1,    13,
-      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
-      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
-      34,    35,    36,    37,    38,    39,    40,    41,    42,    13,
-      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
-      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
-      34,    35,    36,    37,    38,    39,    40,    41,    42,   107,
-      -1,   109,   110,   111,   112,   113,   114,   115,   116,   117,
-     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
-      -1,    -1,    -1,    -1,    -1,   107,   134,   109,   110,   111,
-     112,   113,   114,   115,   116,   117,   118,    12,   120,   121,
-     122,   123,   124,   125,    10,   127,    12,    -1,    -1,    -1,
-      -1,    -1,   134,    -1,    29,    30,    -1,    32,    33,    -1,
-      -1,    36,    37,    29,    30,    -1,    32,    33,    -1,    -1,
-      36,    37,    17,    18,    19,    20,    21,    22,    23,    24,
-      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-      35,    36,    37,    38,    39,    40,    41,    42,    17,    18,
+      36,    37,    38,    39,    40,    41,    42,     6,    -1,    -1,
+       9,    -1,    11,    -1,    13,    14,    15,    16,    17,    18,
       19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
       29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
-      39,    40,    41,    42,   107,    -1,   109,   110,   111,   112,
-     113,   114,   115,   116,   117,   118,    -1,   120,   121,   122,
-     123,   124,   125,   107,   127,   109,   110,   111,   112,   113,
-     114,   115,   116,   117,   118,    -1,   120,   121,   122,   123,
-     124,   125,    -1,   127,   107,    -1,   109,   110,   111,   112,
-     113,   114,   115,   116,   117,   118,    -1,   120,   121,   122,
-     123,   124,   125,    -1,   127,   113,   114,   115,   116,   117,
-      -1,   119,   120,   121,   122,   123,   124,    32,    33,    34,
-      35,    36,    37,    38,    39,    40,    41,    42
+      39,    40,    41,    42,     9,    -1,    11,    -1,    13,    14,
+      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
+      35,    36,    37,    38,    39,    40,    41,    42,    11,    -1,
+      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
+      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
+      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
+      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
+      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
+      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
+     109,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
+     119,   120,    -1,   122,   123,   124,   125,   126,   127,    -1,
+     129,    -1,    -1,    -1,    -1,    -1,   109,   136,   111,   112,
+     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
+     123,   124,   125,   126,   127,    -1,   129,    -1,    -1,    -1,
+      -1,    -1,    -1,   136,    17,    18,    19,    20,    21,    22,
+      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
+      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
+      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
+      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
+      37,    38,    39,    40,    41,    42,   109,    -1,   111,   112,
+     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
+     123,   124,   125,   126,   127,   109,   129,   111,   112,   113,
+     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
+     124,   125,   126,   127,   109,   129,   111,   112,   113,   114,
+     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
+     125,   126,   127,    -1,   129,    32,    33,    34,    35,    36,
+      37,    38,    39,    40,    41,    42
 };
 
 /* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
    state STATE-NUM.  */
 static const yytype_uint8 yystos[] =
 {
-       0,    68,   139,   142,    76,     0,     1,    68,    69,    70,
-      77,   107,   127,   136,   140,   141,   143,   144,   145,   146,
-     147,   150,   151,   152,   153,   156,   157,   158,   159,   160,
-     161,   162,   163,   166,   168,   169,   170,   129,     8,   128,
-      71,    78,    80,    93,   100,   103,   109,    90,    91,    92,
-     107,   107,   127,   164,   136,   136,     8,   107,   109,   110,
-     111,   112,   113,   114,   115,   116,   117,   118,   120,   121,
-     122,   123,   124,   125,   127,   148,   208,     8,   107,   149,
-     208,     8,    72,    74,    87,    88,    68,   128,   140,   141,
-     135,     9,    94,   104,   107,   108,   137,   195,     9,    94,
-     107,   108,   137,   195,    85,    86,   107,   208,   129,   107,
-     208,   107,   133,   198,   117,   107,   154,   155,    89,   113,
-     115,   133,   202,   202,   202,   130,   136,   129,    81,    83,
-      84,   129,   129,    81,    82,    83,    84,   129,   129,   129,
-     129,   182,   183,   101,   113,   114,   115,   116,   119,   120,
-     121,   127,   130,   172,   173,   174,   175,   176,   193,   104,
-     172,     8,     8,   105,   130,   107,   199,     8,   129,     8,
-     155,   129,   113,   115,   203,   133,   200,    33,   105,   133,
-     196,   117,   133,   204,   107,   207,   165,   172,   130,   130,
-     130,   130,    73,    75,   105,   105,   128,    11,    17,    36,
-      63,    64,    65,    66,    67,    95,    96,    97,    98,    99,
-     105,   107,   112,   117,   118,   119,   121,   122,   123,   124,
-     125,   127,   184,   186,   188,   189,   190,   191,   194,   174,
-     129,   172,     6,     8,    11,   133,   177,   101,    14,    17,
-      18,    19,    20,   129,   177,     8,   105,   107,   134,   208,
-     117,    63,   105,   107,   113,   115,   134,   107,   201,   208,
-       8,   105,    33,   105,   107,   197,     8,   107,   117,   205,
-       8,   131,   132,   177,   105,   105,   105,   105,   107,   127,
-     136,   188,   194,   107,   126,   133,   136,    63,   105,   107,
-     121,   122,   123,   124,   133,   187,   191,   133,   187,     8,
-     133,    33,    35,    43,    44,    45,    46,    48,    49,    50,
-      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
-      61,    62,   112,   118,   130,   185,   186,   188,   194,   107,
-     194,   130,   188,    11,   105,   107,   127,   186,   192,   194,
-     121,   136,   129,   136,   130,   129,   130,   185,   130,   136,
-     129,   133,    33,    44,   106,   130,   171,   193,   194,   131,
-     172,   172,   172,   178,    79,   135,   167,   171,   171,   171,
-     171,   171,   171,   167,   131,   133,    87,   107,   134,   208,
-     105,    33,   105,   107,   134,   107,   117,   134,   107,   135,
-     132,   132,   132,   132,   105,    18,    18,   109,   105,   133,
-     185,     8,   185,     8,   185,   185,   185,   185,   185,   130,
-     130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
-     130,   130,   130,   130,   130,   130,   130,   185,     3,     4,
-       5,     6,     9,    11,    13,    14,    15,    16,    17,    18,
-      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
-      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
-      39,    40,    41,    42,    64,   185,   130,   133,   136,     8,
-     129,   136,   129,   105,   132,   136,   188,   136,   107,   127,
-     190,   194,     8,     8,   105,   185,   105,   185,   206,   185,
-     206,   129,   105,   105,   185,   105,   171,   171,   171,     7,
-      10,    12,    29,    30,    32,    33,    36,    37,   102,   107,
-     115,   121,   134,   180,   181,   182,    76,   105,   129,   105,
-     105,   105,   105,   105,   188,   134,   109,   134,   134,   134,
-     185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
-     185,   185,   185,   185,   206,   185,   185,   206,   131,   185,
-     185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
-     185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
-     185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
-     185,   185,   185,   185,   185,   187,   189,   105,   105,   185,
-     105,   131,   107,   110,   105,   105,     8,     8,   129,   131,
-     132,     8,   131,   185,   131,   129,     8,   132,   131,   171,
-     171,   171,   171,   171,   171,   171,   171,   171,   130,   129,
-     129,   183,    29,   128,   179,   129,   132,   105,   131,   131,
-     131,   131,   136,   134,     8,     8,     8,   131,   132,   131,
-     132,   132,   131,   131,   131,   131,   131,   131,   131,   131,
-     131,   131,   131,   132,   131,   131,     8,   131,   132,     8,
-       8,   129,     8,     8,     8,   188,   185,     8,   185,     8,
-       8,   105,   193,   194,   171,   171,   128,   179,   107,   110,
-      85,    86,   105,   198,   105,   185,   185,   185,   185,   105,
-     185,     8,   134,   132,   132,     8,     8,    30,    30,   134,
-       8,   131,   131,   131,   131,   134,     8,   129,   115,   115,
-     185,   131,   131,     8,     8,     8
+       0,    68,   141,   144,    76,     0,     1,    68,    69,    70,
+      77,   109,   129,   138,   142,   143,   145,   146,   147,   148,
+     149,   152,   153,   154,   155,   158,   159,   160,   161,   162,
+     163,   164,   165,   168,   170,   171,   172,   131,     8,   130,
+      71,    78,    80,    95,   102,   105,   111,    92,    93,    94,
+     109,   109,   129,   166,   138,   138,     8,   109,   111,   112,
+     113,   114,   115,   116,   117,   118,   119,   120,   122,   123,
+     124,   125,   126,   127,   129,   150,   210,     8,   109,   151,
+     210,     8,    72,    74,    89,    90,    68,   130,   142,   143,
+     137,     9,    96,   106,   109,   110,   139,   197,     9,    96,
+     109,   110,   139,   197,    87,    88,   109,   210,   131,   109,
+     210,   109,   135,   200,   119,   109,   156,   157,    91,   115,
+     117,   135,   204,   204,   204,   132,   138,   131,    81,    83,
+      84,    85,    86,   131,   131,    81,    82,    83,    84,    85,
+      86,   131,   131,   131,   131,   184,   185,   103,   115,   116,
+     117,   118,   121,   122,   123,   129,   132,   174,   175,   176,
+     177,   178,   195,   106,   174,     8,     8,   107,   132,   109,
+     201,     8,   131,     8,   157,   131,   115,   117,   205,   135,
+     202,    33,   107,   135,   198,   119,   135,   206,   109,   209,
+     167,   174,   132,   132,   132,   132,    73,    75,   107,   107,
+     130,    11,    17,    36,    63,    64,    65,    66,    67,    97,
+      98,    99,   100,   101,   107,   109,   114,   119,   120,   121,
+     123,   124,   125,   126,   127,   129,   186,   188,   190,   191,
+     192,   193,   196,   176,   131,   174,     6,     8,    11,   135,
+     179,   103,    14,    17,    18,    19,    20,   131,   179,     8,
+     107,   109,   136,   210,   119,    63,   107,   109,   115,   117,
+     136,   109,   203,   210,     8,   107,    33,   107,   109,   199,
+       8,   109,   119,   207,     8,   133,   134,   179,   107,   107,
+     107,   107,   109,   129,   138,   190,   196,   109,   128,   135,
+     138,    63,   107,   109,   123,   124,   125,   126,   135,   189,
+     193,   135,   189,     8,   135,    33,    35,    43,    44,    45,
+      46,    48,    49,    50,    51,    52,    53,    54,    55,    56,
+      57,    58,    59,    60,    61,    62,   114,   120,   132,   187,
+     188,   190,   196,   109,   196,   132,   190,    11,   107,   109,
+     129,   188,   194,   196,   123,   138,   131,   138,   132,   131,
+     132,   187,   132,   138,   131,   135,    33,    44,   108,   132,
+     173,   195,   196,   133,   174,   174,   174,   180,    79,   137,
+     169,   173,   173,   173,   173,   173,   173,   169,   133,   135,
+      89,   109,   136,   210,   107,    33,   107,   109,   136,   109,
+     119,   136,   109,   137,   134,   134,   134,   134,   107,    18,
+      18,   111,   107,   135,   187,     8,   187,     8,   187,   187,
+     187,   187,   187,   132,   132,   132,   132,   132,   132,   132,
+     132,   132,   132,   132,   132,   132,   132,   132,   132,   132,
+     132,   187,     3,     4,     5,     6,     9,    11,    13,    14,
+      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
+      35,    36,    37,    38,    39,    40,    41,    42,    64,   187,
+     132,   135,   138,     8,   131,   138,   131,   107,   134,   138,
+     190,   138,   109,   129,   192,   196,     8,     8,   107,   187,
+     107,   187,   208,   187,   208,   131,   107,   107,   187,   107,
+     173,   173,   173,     7,    10,    12,    29,    30,    32,    33,
+      36,    37,   104,   109,   117,   123,   136,   182,   183,   184,
+      76,   107,   131,   107,   107,   107,   107,   107,   190,   136,
+     111,   136,   136,   136,   187,   187,   187,   187,   187,   187,
+     187,   187,   187,   187,   187,   187,   187,   187,   208,   187,
+     187,   208,   133,   187,   187,   187,   187,   187,   187,   187,
+     187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
+     187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
+     187,   187,   187,   187,   187,   187,   187,   187,   187,   189,
+     191,   107,   107,   187,   107,   133,   109,   112,   107,   107,
+       8,     8,   131,   133,   134,     8,   133,   187,   133,   131,
+       8,   134,   133,   173,   173,   173,   173,   173,   173,   173,
+     173,   173,   132,   131,   131,   185,    29,   130,   181,   131,
+     134,   107,   133,   133,   133,   133,   138,   136,     8,     8,
+       8,   133,   134,   133,   134,   134,   133,   133,   133,   133,
+     133,   133,   133,   133,   133,   133,   133,   134,   133,   133,
+       8,   133,   134,     8,     8,   131,     8,     8,     8,   190,
+     187,     8,   187,     8,     8,   107,   195,   196,   173,   173,
+     130,   181,   109,   112,    87,    88,   107,   200,   107,   187,
+     187,   187,   187,   107,   187,     8,   136,   134,   134,     8,
+       8,    30,    30,   136,     8,   133,   133,   133,   133,   136,
+       8,   131,   117,   117,   187,   133,   133,     8,     8,     8
 };
 
 /* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
 static const yytype_uint8 yyr1[] =
 {
-       0,   138,   139,   139,   139,   139,   140,   140,   140,   140,
-     140,   140,   140,   140,   140,   140,   141,   141,   141,   141,
-     142,   142,   143,   144,   145,   145,   145,   145,   145,   146,
-     147,   147,   148,   148,   148,   148,   148,   149,   149,   149,
-     149,   149,   149,   150,   151,   151,   151,   151,   151,   151,
-     151,   152,   152,   153,   154,   154,   155,   156,   157,   158,
-     159,   160,   161,   162,   162,   162,   163,   164,   164,   164,
-     165,   165,   166,   167,   167,   167,   168,   168,   169,   169,
-     169,   169,   169,   169,   169,   169,   169,   170,   170,   170,
-     170,   171,   171,   171,   171,   171,   171,   171,   171,   171,
-     171,   171,   171,   171,   171,   171,   172,   172,   172,   172,
-     173,   173,   174,   174,   175,   175,   176,   176,   176,   176,
-     176,   176,   176,   176,   176,   176,   176,   177,   177,   178,
-     178,   178,   178,   178,   178,   179,   179,   180,   181,   181,
-     182,   182,   182,   182,   182,   183,   183,   183,   183,   184,
-     184,   184,   184,   184,   184,   184,   184,   184,   184,   184,
-     184,   184,   184,   184,   184,   184,   184,   184,   184,   184,
-     184,   184,   184,   184,   185,   185,   185,   185,   185,   185,
-     185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
-     185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
-     185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
-     185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
-     185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
-     185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
-     186,   186,   186,   186,   187,   187,   187,   187,   187,   187,
-     187,   187,   187,   188,   188,   188,   188,   189,   189,   189,
-     189,   189,   190,   190,   190,   191,   191,   192,   192,   192,
-     192,   192,   192,   193,   193,   193,   193,   193,   194,   194,
-     194,   194,   194,   194,   195,   195,   196,   196,   196,   197,
-     197,   197,   197,   197,   197,   198,   198,   199,   199,   199,
-     200,   201,   201,   201,   201,   202,   202,   202,   203,   203,
-     203,   203,   203,   204,   204,   205,   205,   205,   205,   206,
-     206,   206,   207,   207,   207,   208,   208,   208,   208,   208,
-     208,   208,   208,   208,   208,   208,   208,   208,   208,   208,
-     208,   208
+       0,   140,   141,   141,   141,   141,   142,   142,   142,   142,
+     142,   142,   142,   142,   142,   142,   143,   143,   143,   143,
+     144,   144,   145,   146,   147,   147,   147,   147,   147,   148,
+     149,   149,   150,   150,   150,   150,   150,   150,   150,   151,
+     151,   151,   151,   151,   151,   151,   151,   152,   153,   153,
+     153,   153,   153,   153,   153,   154,   154,   155,   156,   156,
+     157,   158,   159,   160,   161,   162,   163,   164,   164,   164,
+     165,   166,   166,   166,   167,   167,   168,   169,   169,   169,
+     170,   170,   171,   171,   171,   171,   171,   171,   171,   171,
+     171,   172,   172,   172,   172,   173,   173,   173,   173,   173,
+     173,   173,   173,   173,   173,   173,   173,   173,   173,   173,
+     174,   174,   174,   174,   175,   175,   176,   176,   177,   177,
+     178,   178,   178,   178,   178,   178,   178,   178,   178,   178,
+     178,   179,   179,   180,   180,   180,   180,   180,   180,   181,
+     181,   182,   183,   183,   184,   184,   184,   184,   184,   185,
+     185,   185,   185,   186,   186,   186,   186,   186,   186,   186,
+     186,   186,   186,   186,   186,   186,   186,   186,   186,   186,
+     186,   186,   186,   186,   186,   186,   186,   186,   187,   187,
+     187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
+     187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
+     187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
+     187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
+     187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
+     187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
+     187,   187,   187,   187,   188,   188,   188,   188,   189,   189,
+     189,   189,   189,   189,   189,   189,   189,   190,   190,   190,
+     190,   191,   191,   191,   191,   191,   192,   192,   192,   193,
+     193,   194,   194,   194,   194,   194,   194,   195,   195,   195,
+     195,   195,   196,   196,   196,   196,   196,   196,   197,   197,
+     198,   198,   198,   199,   199,   199,   199,   199,   199,   200,
+     200,   201,   201,   201,   202,   203,   203,   203,   203,   204,
+     204,   204,   205,   205,   205,   205,   205,   206,   206,   207,
+     207,   207,   207,   208,   208,   208,   209,   209,   209,   210,
+     210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
+     210,   210,   210,   210,   210,   210
 };
 
 /* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
@@ -1661,38 +1658,38 @@ static const yytype_int8 yyr2[] =
        0,     2,     1,     2,     2,     2,     1,     1,     1,     1,
        1,     1,     1,     1,     1,     2,     1,     1,     1,     2,
        5,     5,     5,     2,     6,     9,     9,     2,     3,     2,
-       3,     2,     7,     7,     2,     2,     2,     7,     7,     2,
-       2,     2,     2,     2,     3,     3,     4,     4,     4,     4,
-       2,    10,     5,     4,     1,     2,     8,     4,     5,     5,
-       5,     4,     6,     1,     2,     2,     2,     0,     1,     1,
-       0,     1,     5,     3,     4,     1,     5,     5,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     1,
-       2,     1,     1,     1,     3,     3,     3,     3,     3,     3,
-       3,     3,     3,     3,     2,     2,     1,     3,     3,     3,
-       2,     1,     2,     1,     1,     3,     3,     3,     3,     3,
-       3,     3,     3,     1,     1,     1,     1,     0,     3,     0,
-       5,     8,     8,     5,     2,     3,     3,     2,     1,     3,
-       1,     4,     5,     3,     4,     0,     2,     4,     6,     4,
-       5,     4,     7,     6,     3,     5,     5,     9,     4,     4,
-       4,     3,     5,     5,     5,     3,     5,     5,     3,     5,
-       2,     5,     5,     1,     1,     2,     3,     3,     3,     3,
-       3,     3,     3,     3,     3,     3,     3,     3,     3,     2,
-       2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
-       3,     3,     2,     3,     3,     3,     3,     3,     3,     3,
-       3,     3,     3,     3,     3,     3,     2,     4,     4,     4,
-       4,     6,     6,     6,     4,     4,     4,     4,     4,     4,
-       4,     4,     6,     4,     4,     3,     6,     1,     4,     4,
-       6,     4,     3,     1,     1,     1,     1,     1,     1,     1,
-       4,     1,     1,     1,     1,     1,     1,     1,     1,     3,
-       2,     4,     1,     1,     1,     3,     3,     1,     2,     4,
-       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
-       1,     1,     1,     1,     1,     2,     3,     1,     2,     1,
-       2,     1,     2,     3,     2,     3,     1,     1,     2,     2,
-       3,     1,     1,     2,     2,     3,     1,     1,     1,     1,
-       2,     2,     2,     3,     1,     1,     1,     2,     2,     0,
-       1,     3,     0,     1,     3,     1,     1,     1,     1,     1,
+       3,     2,     7,     7,     2,     2,     2,     2,     2,     7,
+       7,     2,     2,     2,     2,     2,     2,     2,     3,     3,
+       4,     4,     4,     4,     2,    10,     5,     4,     1,     2,
+       8,     4,     5,     5,     5,     4,     6,     1,     2,     2,
+       2,     0,     1,     1,     0,     1,     5,     3,     4,     1,
+       5,     5,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     1,     2,     1,     1,     1,     3,     3,
+       3,     3,     3,     3,     3,     3,     3,     3,     2,     2,
+       1,     3,     3,     3,     2,     1,     2,     1,     1,     3,
+       3,     3,     3,     3,     3,     3,     3,     1,     1,     1,
+       1,     0,     3,     0,     5,     8,     8,     5,     2,     3,
+       3,     2,     1,     3,     1,     4,     5,     3,     4,     0,
+       2,     4,     6,     4,     5,     4,     7,     6,     3,     5,
+       5,     9,     4,     4,     4,     3,     5,     5,     5,     3,
+       5,     5,     3,     5,     2,     5,     5,     1,     1,     2,
+       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
+       3,     3,     3,     2,     2,     3,     3,     3,     3,     3,
+       3,     3,     3,     3,     3,     3,     2,     3,     3,     3,
+       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
+       2,     4,     4,     4,     4,     6,     6,     6,     4,     4,
+       4,     4,     4,     4,     4,     4,     6,     4,     4,     3,
+       6,     1,     4,     4,     6,     4,     3,     1,     1,     1,
+       1,     1,     1,     1,     4,     1,     1,     1,     1,     1,
+       1,     1,     1,     3,     2,     4,     1,     1,     1,     3,
+       3,     1,     2,     4,     3,     1,     1,     1,     1,     1,
+       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
+       3,     1,     2,     1,     2,     1,     2,     3,     2,     3,
+       1,     1,     2,     2,     3,     1,     1,     2,     2,     3,
+       1,     1,     1,     1,     2,     2,     2,     3,     1,     1,
+       1,     2,     2,     0,     1,     3,     0,     1,     3,     1,
        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
-       1,     1
+       1,     1,     1,     1,     1,     1
 };
 
 
@@ -2221,1199 +2218,1215 @@ yyreduce:
     break;
 
   case 35: /* fielddef: fielddef HEX_KEY  */
-                                        { (yyval.fieldqual) = (yyvsp[-1].fieldqual); (yyval.fieldqual)->hex = true; }
+                                        { (yyval.fieldqual) = (yyvsp[-1].fieldqual); (yyval.fieldqual)->base = 16; }
     break;
 
   case 36: /* fielddef: fielddef DEC_KEY  */
-                                        { (yyval.fieldqual) = (yyvsp[-1].fieldqual); (yyval.fieldqual)->hex = false; }
+                                        { (yyval.fieldqual) = (yyvsp[-1].fieldqual); (yyval.fieldqual)->base = 10; }
     break;
 
-  case 37: /* contextfielddef: STRING '=' '(' INTEGER ',' INTEGER ')'  */
+  case 37: /* fielddef: fielddef OCT_KEY  */
+                                        { (yyval.fieldqual) = (yyvsp[-1].fieldqual); (yyval.fieldqual)->base = 8; }
+    break;
+
+  case 38: /* fielddef: fielddef BIN_KEY  */
+                                        { (yyval.fieldqual) = (yyvsp[-1].fieldqual); (yyval.fieldqual)->base = 2; }
+    break;
+
+  case 39: /* contextfielddef: STRING '=' '(' INTEGER ',' INTEGER ')'  */
                                                         { (yyval.fieldqual) = new FieldQuality((yyvsp[-6].str),(yyvsp[-3].i),(yyvsp[-1].i)); }
     break;
 
-  case 38: /* contextfielddef: anysymbol '=' '(' INTEGER ',' INTEGER ')'  */
+  case 40: /* contextfielddef: anysymbol '=' '(' INTEGER ',' INTEGER ')'  */
                                               { delete (yyvsp[-3].i); delete (yyvsp[-1].i); string errmsg = (yyvsp[-6].anysym)->getName()+": redefined as field"; yyerror(errmsg.c_str()); YYERROR; }
     break;
 
-  case 39: /* contextfielddef: contextfielddef SIGNED_KEY  */
+  case 41: /* contextfielddef: contextfielddef SIGNED_KEY  */
                                                 { (yyval.fieldqual) = (yyvsp[-1].fieldqual); (yyval.fieldqual)->signext = true; }
     break;
 
-  case 40: /* contextfielddef: contextfielddef NOFLOW_KEY  */
+  case 42: /* contextfielddef: contextfielddef NOFLOW_KEY  */
                                                 { (yyval.fieldqual) = (yyvsp[-1].fieldqual); (yyval.fieldqual)->flow = false; }
     break;
 
-  case 41: /* contextfielddef: contextfielddef HEX_KEY  */
-                                                { (yyval.fieldqual) = (yyvsp[-1].fieldqual); (yyval.fieldqual)->hex = true; }
+  case 43: /* contextfielddef: contextfielddef HEX_KEY  */
+                                                { (yyval.fieldqual) = (yyvsp[-1].fieldqual); (yyval.fieldqual)->base = 16; }
+    break;
+
+  case 44: /* contextfielddef: contextfielddef DEC_KEY  */
+                                                { (yyval.fieldqual) = (yyvsp[-1].fieldqual); (yyval.fieldqual)->base = 10; }
+    break;
+
+  case 45: /* contextfielddef: contextfielddef OCT_KEY  */
+                                                { (yyval.fieldqual) = (yyvsp[-1].fieldqual); (yyval.fieldqual)->base = 8; }
     break;
 
-  case 42: /* contextfielddef: contextfielddef DEC_KEY  */
-                                                { (yyval.fieldqual) = (yyvsp[-1].fieldqual); (yyval.fieldqual)->hex = false; }
+  case 46: /* contextfielddef: contextfielddef BIN_KEY  */
+                                                { (yyval.fieldqual) = (yyvsp[-1].fieldqual); (yyval.fieldqual)->base = 2; }
     break;
 
-  case 43: /* spacedef: spaceprop ';'  */
+  case 47: /* spacedef: spaceprop ';'  */
                                         { slgh->newSpace((yyvsp[-1].spacequal)); }
     break;
 
-  case 44: /* spaceprop: DEFINE_KEY SPACE_KEY STRING  */
+  case 48: /* spaceprop: DEFINE_KEY SPACE_KEY STRING  */
                                         { (yyval.spacequal) = new SpaceQuality(*(yyvsp[0].str)); delete (yyvsp[0].str); }
     break;
 
-  case 45: /* spaceprop: DEFINE_KEY SPACE_KEY anysymbol  */
+  case 49: /* spaceprop: DEFINE_KEY SPACE_KEY anysymbol  */
                                         { string errmsg = (yyvsp[0].anysym)->getName()+": redefined as space"; yyerror(errmsg.c_str()); YYERROR; }
     break;
 
-  case 46: /* spaceprop: spaceprop TYPE_KEY '=' RAM_KEY  */
+  case 50: /* spaceprop: spaceprop TYPE_KEY '=' RAM_KEY  */
                                         { (yyval.spacequal) = (yyvsp[-3].spacequal); (yyval.spacequal)->type = SpaceQuality::ramtype; }
     break;
 
-  case 47: /* spaceprop: spaceprop TYPE_KEY '=' REGISTER_KEY  */
+  case 51: /* spaceprop: spaceprop TYPE_KEY '=' REGISTER_KEY  */
                                         { (yyval.spacequal) = (yyvsp[-3].spacequal); (yyval.spacequal)->type = SpaceQuality::registertype; }
     break;
 
-  case 48: /* spaceprop: spaceprop SIZE_KEY '=' INTEGER  */
+  case 52: /* spaceprop: spaceprop SIZE_KEY '=' INTEGER  */
                                         { (yyval.spacequal) = (yyvsp[-3].spacequal); (yyval.spacequal)->size = *(yyvsp[0].i); delete (yyvsp[0].i); }
     break;
 
-  case 49: /* spaceprop: spaceprop WORDSIZE_KEY '=' INTEGER  */
+  case 53: /* spaceprop: spaceprop WORDSIZE_KEY '=' INTEGER  */
                                         { (yyval.spacequal) = (yyvsp[-3].spacequal); (yyval.spacequal)->wordsize = *(yyvsp[0].i); delete (yyvsp[0].i); }
     break;
 
-  case 50: /* spaceprop: spaceprop DEFAULT_KEY  */
+  case 54: /* spaceprop: spaceprop DEFAULT_KEY  */
                                         { (yyval.spacequal) = (yyvsp[-1].spacequal); (yyval.spacequal)->isdefault = true; }
     break;
 
-  case 51: /* varnodedef: DEFINE_KEY SPACESYM OFFSET_KEY '=' INTEGER SIZE_KEY '=' INTEGER stringlist ';'  */
+  case 55: /* varnodedef: DEFINE_KEY SPACESYM OFFSET_KEY '=' INTEGER SIZE_KEY '=' INTEGER stringlist ';'  */
                                                                                            {
                slgh->defineVarnodes((yyvsp[-8].spacesym),(yyvsp[-5].i),(yyvsp[-2].i),(yyvsp[-1].strlist)); }
     break;
 
-  case 52: /* varnodedef: DEFINE_KEY SPACESYM OFFSET_KEY '=' BADINTEGER  */
+  case 56: /* varnodedef: DEFINE_KEY SPACESYM OFFSET_KEY '=' BADINTEGER  */
                                                   { yyerror("Parsed integer is too big (overflow)"); YYERROR; }
     break;
 
-  case 56: /* bitrangesingle: STRING '=' VARSYM '[' INTEGER ',' INTEGER ']'  */
+  case 60: /* bitrangesingle: STRING '=' VARSYM '[' INTEGER ',' INTEGER ']'  */
                                                               {
                slgh->defineBitrange((yyvsp[-7].str),(yyvsp[-5].varsym),(uint4)*(yyvsp[-3].i),(uint4)*(yyvsp[-1].i)); delete (yyvsp[-3].i); delete (yyvsp[-1].i); }
     break;
 
-  case 57: /* pcodeopdef: DEFINE_KEY PCODEOP_KEY stringlist ';'  */
+  case 61: /* pcodeopdef: DEFINE_KEY PCODEOP_KEY stringlist ';'  */
                                                   { slgh->addUserOp((yyvsp[-1].strlist)); }
     break;
 
-  case 58: /* valueattach: ATTACH_KEY VALUES_KEY valuelist intblist ';'  */
+  case 62: /* valueattach: ATTACH_KEY VALUES_KEY valuelist intblist ';'  */
                                                           { slgh->attachValues((yyvsp[-2].symlist),(yyvsp[-1].biglist)); }
     break;
 
-  case 59: /* nameattach: ATTACH_KEY NAMES_KEY valuelist anystringlist ';'  */
+  case 63: /* nameattach: ATTACH_KEY NAMES_KEY valuelist anystringlist ';'  */
                                                              { slgh->attachNames((yyvsp[-2].symlist),(yyvsp[-1].strlist)); }
     break;
 
-  case 60: /* varattach: ATTACH_KEY VARIABLES_KEY valuelist varlist ';'  */
+  case 64: /* varattach: ATTACH_KEY VARIABLES_KEY valuelist varlist ';'  */
                                                           { slgh->attachVarnodes((yyvsp[-2].symlist),(yyvsp[-1].symlist)); }
     break;
 
-  case 61: /* macrodef: macrostart '{' rtl '}'  */
+  case 65: /* macrodef: macrostart '{' rtl '}'  */
                                         { slgh->buildMacro((yyvsp[-3].macrosym),(yyvsp[-1].sem)); }
     break;
 
-  case 62: /* withblockstart: WITH_KEY id_or_nil ':' bitpat_or_nil contextblock '{'  */
+  case 66: /* withblockstart: WITH_KEY id_or_nil ':' bitpat_or_nil contextblock '{'  */
                                                                        {  slgh->pushWith((yyvsp[-4].subtablesym),(yyvsp[-2].pateq),(yyvsp[-1].contop)); }
     break;
 
-  case 66: /* withblock: withblockmid '}'  */
+  case 70: /* withblock: withblockmid '}'  */
                              { slgh->popWith(); }
     break;
 
-  case 67: /* id_or_nil: %empty  */
+  case 71: /* id_or_nil: %empty  */
                         { (yyval.subtablesym) = (SubtableSymbol *)0; }
     break;
 
-  case 68: /* id_or_nil: SUBTABLESYM  */
+  case 72: /* id_or_nil: SUBTABLESYM  */
                         { (yyval.subtablesym) = (yyvsp[0].subtablesym); }
     break;
 
-  case 69: /* id_or_nil: STRING  */
+  case 73: /* id_or_nil: STRING  */
                         { (yyval.subtablesym) = slgh->newTable((yyvsp[0].str)); }
     break;
 
-  case 70: /* bitpat_or_nil: %empty  */
+  case 74: /* bitpat_or_nil: %empty  */
                            { (yyval.pateq) = (PatternEquation *)0; }
     break;
 
-  case 71: /* bitpat_or_nil: pequation  */
+  case 75: /* bitpat_or_nil: pequation  */
                            { (yyval.pateq) = (yyvsp[0].pateq); }
     break;
 
-  case 72: /* macrostart: MACRO_KEY STRING '(' oplist ')'  */
+  case 76: /* macrostart: MACRO_KEY STRING '(' oplist ')'  */
                                             { (yyval.macrosym) = slgh->createMacro((yyvsp[-3].str),(yyvsp[-1].strlist)); }
     break;
 
-  case 73: /* rtlbody: '{' rtl '}'  */
+  case 77: /* rtlbody: '{' rtl '}'  */
                      { (yyval.sectionstart) = slgh->standaloneSection((yyvsp[-1].sem)); }
     break;
 
-  case 74: /* rtlbody: '{' rtlcontinue rtlmid '}'  */
+  case 78: /* rtlbody: '{' rtlcontinue rtlmid '}'  */
                                { (yyval.sectionstart) = slgh->finalNamedSection((yyvsp[-2].sectionstart),(yyvsp[-1].sem)); }
     break;
 
-  case 75: /* rtlbody: OP_UNIMPL  */
+  case 79: /* rtlbody: OP_UNIMPL  */
                      { (yyval.sectionstart) = (SectionVector *)0; }
     break;
 
-  case 76: /* constructor: constructprint IS_KEY pequation contextblock rtlbody  */
+  case 80: /* constructor: constructprint IS_KEY pequation contextblock rtlbody  */
                                                                   { slgh->buildConstructor((yyvsp[-4].construct),(yyvsp[-2].pateq),(yyvsp[-1].contop),(yyvsp[0].sectionstart)); }
     break;
 
-  case 77: /* constructor: subtablestart IS_KEY pequation contextblock rtlbody  */
+  case 81: /* constructor: subtablestart IS_KEY pequation contextblock rtlbody  */
                                                                   { slgh->buildConstructor((yyvsp[-4].construct),(yyvsp[-2].pateq),(yyvsp[-1].contop),(yyvsp[0].sectionstart)); }
     break;
 
-  case 78: /* constructprint: subtablestart STRING  */
+  case 82: /* constructprint: subtablestart STRING  */
                                         { (yyval.construct) = (yyvsp[-1].construct); (yyval.construct)->addSyntax(*(yyvsp[0].str)); delete (yyvsp[0].str); }
     break;
 
-  case 79: /* constructprint: subtablestart charstring  */
+  case 83: /* constructprint: subtablestart charstring  */
                                         { (yyval.construct) = (yyvsp[-1].construct); (yyval.construct)->addSyntax(*(yyvsp[0].str)); delete (yyvsp[0].str); }
     break;
 
-  case 80: /* constructprint: subtablestart SYMBOLSTRING  */
+  case 84: /* constructprint: subtablestart SYMBOLSTRING  */
                                         { (yyval.construct) = (yyvsp[-1].construct); if (slgh->isInRoot((yyvsp[-1].construct))) { (yyval.construct)->addSyntax(*(yyvsp[0].str)); delete (yyvsp[0].str); } else slgh->newOperand((yyvsp[-1].construct),(yyvsp[0].str)); }
     break;
 
-  case 81: /* constructprint: subtablestart '^'  */
+  case 85: /* constructprint: subtablestart '^'  */
                                                 { (yyval.construct) = (yyvsp[-1].construct); if (!slgh->isInRoot((yyvsp[-1].construct))) { yyerror("Unexpected '^' at start of print pieces");  YYERROR; } }
     break;
 
-  case 82: /* constructprint: constructprint '^'  */
+  case 86: /* constructprint: constructprint '^'  */
                                                 { (yyval.construct) = (yyvsp[-1].construct); }
     break;
 
-  case 83: /* constructprint: constructprint STRING  */
+  case 87: /* constructprint: constructprint STRING  */
                                                 { (yyval.construct) = (yyvsp[-1].construct); (yyval.construct)->addSyntax(*(yyvsp[0].str)); delete (yyvsp[0].str); }
     break;
 
-  case 84: /* constructprint: constructprint charstring  */
+  case 88: /* constructprint: constructprint charstring  */
                                         { (yyval.construct) = (yyvsp[-1].construct); (yyval.construct)->addSyntax(*(yyvsp[0].str)); delete (yyvsp[0].str); }
     break;
 
-  case 85: /* constructprint: constructprint ' '  */
+  case 89: /* constructprint: constructprint ' '  */
                                                 { (yyval.construct) = (yyvsp[-1].construct); (yyval.construct)->addSyntax(string(" ")); }
     break;
 
-  case 86: /* constructprint: constructprint SYMBOLSTRING  */
+  case 90: /* constructprint: constructprint SYMBOLSTRING  */
                                         { (yyval.construct) = (yyvsp[-1].construct); slgh->newOperand((yyvsp[-1].construct),(yyvsp[0].str)); }
     break;
 
-  case 87: /* subtablestart: SUBTABLESYM ':'  */
+  case 91: /* subtablestart: SUBTABLESYM ':'  */
                                 { (yyval.construct) = slgh->createConstructor((yyvsp[-1].subtablesym)); }
     break;
 
-  case 88: /* subtablestart: STRING ':'  */
+  case 92: /* subtablestart: STRING ':'  */
                                                 { SubtableSymbol *sym=slgh->newTable((yyvsp[-1].str)); (yyval.construct) = slgh->createConstructor(sym); }
     break;
 
-  case 89: /* subtablestart: ':'  */
+  case 93: /* subtablestart: ':'  */
                                                         { (yyval.construct) = slgh->createConstructor((SubtableSymbol *)0); }
     break;
 
-  case 90: /* subtablestart: subtablestart ' '  */
+  case 94: /* subtablestart: subtablestart ' '  */
                                         { (yyval.construct) = (yyvsp[-1].construct); }
     break;
 
-  case 91: /* pexpression: INTB  */
+  case 95: /* pexpression: INTB  */
                                         { (yyval.patexp) = new ConstantValue(*(yyvsp[0].big)); delete (yyvsp[0].big); }
     break;
 
-  case 92: /* pexpression: familysymbol  */
+  case 96: /* pexpression: familysymbol  */
                                         { if ((actionon==1)&&((yyvsp[0].famsym)->getType() != SleighSymbol::context_symbol))
                                              { string errmsg="Global symbol "+(yyvsp[0].famsym)->getName(); errmsg += " is not allowed in action expression"; yyerror(errmsg.c_str()); } (yyval.patexp) = (yyvsp[0].famsym)->getPatternValue(); }
     break;
 
-  case 93: /* pexpression: specificsymbol  */
+  case 97: /* pexpression: specificsymbol  */
                                         { (yyval.patexp) = (yyvsp[0].specsym)->getPatternExpression(); }
     break;
 
-  case 94: /* pexpression: '(' pexpression ')'  */
+  case 98: /* pexpression: '(' pexpression ')'  */
                                         { (yyval.patexp) = (yyvsp[-1].patexp); }
     break;
 
-  case 95: /* pexpression: pexpression '+' pexpression  */
+  case 99: /* pexpression: pexpression '+' pexpression  */
                                         { (yyval.patexp) = new PlusExpression((yyvsp[-2].patexp),(yyvsp[0].patexp)); }
     break;
 
-  case 96: /* pexpression: pexpression '-' pexpression  */
+  case 100: /* pexpression: pexpression '-' pexpression  */
                                         { (yyval.patexp) = new SubExpression((yyvsp[-2].patexp),(yyvsp[0].patexp)); }
     break;
 
-  case 97: /* pexpression: pexpression '*' pexpression  */
+  case 101: /* pexpression: pexpression '*' pexpression  */
                                         { (yyval.patexp) = new MultExpression((yyvsp[-2].patexp),(yyvsp[0].patexp)); }
     break;
 
-  case 98: /* pexpression: pexpression OP_LEFT pexpression  */
+  case 102: /* pexpression: pexpression OP_LEFT pexpression  */
                                         { (yyval.patexp) = new LeftShiftExpression((yyvsp[-2].patexp),(yyvsp[0].patexp)); }
     break;
 
-  case 99: /* pexpression: pexpression OP_RIGHT pexpression  */
+  case 103: /* pexpression: pexpression OP_RIGHT pexpression  */
                                         { (yyval.patexp) = new RightShiftExpression((yyvsp[-2].patexp),(yyvsp[0].patexp)); }
     break;
 
-  case 100: /* pexpression: pexpression OP_AND pexpression  */
+  case 104: /* pexpression: pexpression OP_AND pexpression  */
                                         { (yyval.patexp) = new AndExpression((yyvsp[-2].patexp),(yyvsp[0].patexp)); }
     break;
 
-  case 101: /* pexpression: pexpression OP_OR pexpression  */
+  case 105: /* pexpression: pexpression OP_OR pexpression  */
                                         { (yyval.patexp) = new OrExpression((yyvsp[-2].patexp),(yyvsp[0].patexp)); }
     break;
 
-  case 102: /* pexpression: pexpression OP_XOR pexpression  */
+  case 106: /* pexpression: pexpression OP_XOR pexpression  */
                                         { (yyval.patexp) = new XorExpression((yyvsp[-2].patexp),(yyvsp[0].patexp)); }
     break;
 
-  case 103: /* pexpression: pexpression '/' pexpression  */
+  case 107: /* pexpression: pexpression '/' pexpression  */
                                         { (yyval.patexp) = new DivExpression((yyvsp[-2].patexp),(yyvsp[0].patexp)); }
     break;
 
-  case 104: /* pexpression: '-' pexpression  */
+  case 108: /* pexpression: '-' pexpression  */
                                         { (yyval.patexp) = new MinusExpression((yyvsp[0].patexp)); }
     break;
 
-  case 105: /* pexpression: '~' pexpression  */
+  case 109: /* pexpression: '~' pexpression  */
                                         { (yyval.patexp) = new NotExpression((yyvsp[0].patexp)); }
     break;
 
-  case 107: /* pequation: pequation '&' pequation  */
+  case 111: /* pequation: pequation '&' pequation  */
                                         { (yyval.pateq) = new EquationAnd((yyvsp[-2].pateq),(yyvsp[0].pateq)); }
     break;
 
-  case 108: /* pequation: pequation '|' pequation  */
+  case 112: /* pequation: pequation '|' pequation  */
                                         { (yyval.pateq) = new EquationOr((yyvsp[-2].pateq),(yyvsp[0].pateq)); }
     break;
 
-  case 109: /* pequation: pequation ';' pequation  */
+  case 113: /* pequation: pequation ';' pequation  */
                                         { (yyval.pateq) = new EquationCat((yyvsp[-2].pateq),(yyvsp[0].pateq)); }
     break;
 
-  case 110: /* elleq: ELLIPSIS_KEY ellrt  */
+  case 114: /* elleq: ELLIPSIS_KEY ellrt  */
                                         { (yyval.pateq) = new EquationLeftEllipsis((yyvsp[0].pateq)); }
     break;
 
-  case 112: /* ellrt: atomic ELLIPSIS_KEY  */
+  case 116: /* ellrt: atomic ELLIPSIS_KEY  */
                                         { (yyval.pateq) = new EquationRightEllipsis((yyvsp[-1].pateq)); }
     break;
 
-  case 115: /* atomic: '(' pequation ')'  */
+  case 119: /* atomic: '(' pequation ')'  */
                                         { (yyval.pateq) = (yyvsp[-1].pateq); }
     break;
 
-  case 116: /* constraint: familysymbol '=' pexpression  */
+  case 120: /* constraint: familysymbol '=' pexpression  */
                                          { (yyval.pateq) = new EqualEquation((yyvsp[-2].famsym)->getPatternValue(),(yyvsp[0].patexp)); }
     break;
 
-  case 117: /* constraint: familysymbol OP_NOTEQUAL pexpression  */
+  case 121: /* constraint: familysymbol OP_NOTEQUAL pexpression  */
                                          { (yyval.pateq) = new NotEqualEquation((yyvsp[-2].famsym)->getPatternValue(),(yyvsp[0].patexp)); }
     break;
 
-  case 118: /* constraint: familysymbol '<' pexpression  */
+  case 122: /* constraint: familysymbol '<' pexpression  */
                                         { (yyval.pateq) = new LessEquation((yyvsp[-2].famsym)->getPatternValue(),(yyvsp[0].patexp)); }
     break;
 
-  case 119: /* constraint: familysymbol OP_LESSEQUAL pexpression  */
+  case 123: /* constraint: familysymbol OP_LESSEQUAL pexpression  */
                                           { (yyval.pateq) = new LessEqualEquation((yyvsp[-2].famsym)->getPatternValue(),(yyvsp[0].patexp)); }
     break;
 
-  case 120: /* constraint: familysymbol '>' pexpression  */
+  case 124: /* constraint: familysymbol '>' pexpression  */
                                         { (yyval.pateq) = new GreaterEquation((yyvsp[-2].famsym)->getPatternValue(),(yyvsp[0].patexp)); }
     break;
 
-  case 121: /* constraint: familysymbol OP_GREATEQUAL pexpression  */
+  case 125: /* constraint: familysymbol OP_GREATEQUAL pexpression  */
                                            { (yyval.pateq) = new GreaterEqualEquation((yyvsp[-2].famsym)->getPatternValue(),(yyvsp[0].patexp)); }
     break;
 
-  case 122: /* constraint: OPERANDSYM '=' pexpression  */
+  case 126: /* constraint: OPERANDSYM '=' pexpression  */
                                         { (yyval.pateq) = slgh->constrainOperand((yyvsp[-2].operandsym),(yyvsp[0].patexp));
-                                          if ((yyval.pateq) == (PatternEquation *)0) 
+                                          if ((yyval.pateq) == (PatternEquation *)0)
                                             { string errmsg="Constraining currently undefined operand "+(yyvsp[-2].operandsym)->getName(); yyerror(errmsg.c_str()); } }
     break;
 
-  case 123: /* constraint: OPERANDSYM  */
+  case 127: /* constraint: OPERANDSYM  */
                                         { (yyval.pateq) = new OperandEquation((yyvsp[0].operandsym)->getIndex()); slgh->selfDefine((yyvsp[0].operandsym)); }
     break;
 
-  case 124: /* constraint: SPECSYM  */
+  case 128: /* constraint: SPECSYM  */
                                         { (yyval.pateq) = new UnconstrainedEquation((yyvsp[0].specsym)->getPatternExpression()); }
     break;
 
-  case 125: /* constraint: familysymbol  */
+  case 129: /* constraint: familysymbol  */
                                         { (yyval.pateq) = slgh->defineInvisibleOperand((yyvsp[0].famsym)); }
     break;
 
-  case 126: /* constraint: SUBTABLESYM  */
+  case 130: /* constraint: SUBTABLESYM  */
                                         { (yyval.pateq) = slgh->defineInvisibleOperand((yyvsp[0].subtablesym)); }
     break;
 
-  case 127: /* contextblock: %empty  */
+  case 131: /* contextblock: %empty  */
                                         { (yyval.contop) = (vector<ContextChange *> *)0; }
     break;
 
-  case 128: /* contextblock: '[' contextlist ']'  */
+  case 132: /* contextblock: '[' contextlist ']'  */
                                         { (yyval.contop) = (yyvsp[-1].contop); }
     break;
 
-  case 129: /* contextlist: %empty  */
+  case 133: /* contextlist: %empty  */
                                         { (yyval.contop) = new vector<ContextChange *>; }
     break;
 
-  case 130: /* contextlist: contextlist CONTEXTSYM '=' pexpression ';'  */
+  case 134: /* contextlist: contextlist CONTEXTSYM '=' pexpression ';'  */
                                                 { (yyval.contop) = (yyvsp[-4].contop); if (!slgh->contextMod((yyvsp[-4].contop),(yyvsp[-3].contextsym),(yyvsp[-1].patexp))) { string errmsg="Cannot use 'inst_next' or 'inst_next2' to set context variable: "+(yyvsp[-3].contextsym)->getName(); yyerror(errmsg.c_str()); YYERROR; } }
     break;
 
-  case 131: /* contextlist: contextlist GLOBALSET_KEY '(' familysymbol ',' CONTEXTSYM ')' ';'  */
+  case 135: /* contextlist: contextlist GLOBALSET_KEY '(' familysymbol ',' CONTEXTSYM ')' ';'  */
                                                                       { (yyval.contop) = (yyvsp[-7].contop); slgh->contextSet((yyvsp[-7].contop),(yyvsp[-4].famsym),(yyvsp[-2].contextsym)); }
     break;
 
-  case 132: /* contextlist: contextlist GLOBALSET_KEY '(' specificsymbol ',' CONTEXTSYM ')' ';'  */
+  case 136: /* contextlist: contextlist GLOBALSET_KEY '(' specificsymbol ',' CONTEXTSYM ')' ';'  */
                                                                         { (yyval.contop) = (yyvsp[-7].contop); slgh->contextSet((yyvsp[-7].contop),(yyvsp[-4].specsym),(yyvsp[-2].contextsym)); }
     break;
 
-  case 133: /* contextlist: contextlist OPERANDSYM '=' pexpression ';'  */
+  case 137: /* contextlist: contextlist OPERANDSYM '=' pexpression ';'  */
                                                { (yyval.contop) = (yyvsp[-4].contop); slgh->defineOperand((yyvsp[-3].operandsym),(yyvsp[-1].patexp)); }
     break;
 
-  case 134: /* contextlist: contextlist STRING  */
+  case 138: /* contextlist: contextlist STRING  */
                                         { string errmsg="Expecting context symbol, not "+*(yyvsp[0].str); delete (yyvsp[0].str); yyerror(errmsg.c_str()); YYERROR; }
     break;
 
-  case 135: /* section_def: OP_LEFT STRING OP_RIGHT  */
+  case 139: /* section_def: OP_LEFT STRING OP_RIGHT  */
                                         { (yyval.sectionsym) = slgh->newSectionSymbol( *(yyvsp[-1].str) ); delete (yyvsp[-1].str); }
     break;
 
-  case 136: /* section_def: OP_LEFT SECTIONSYM OP_RIGHT  */
+  case 140: /* section_def: OP_LEFT SECTIONSYM OP_RIGHT  */
                                         { (yyval.sectionsym) = (yyvsp[-1].sectionsym); }
     break;
 
-  case 137: /* rtlfirstsection: rtl section_def  */
+  case 141: /* rtlfirstsection: rtl section_def  */
                                         { (yyval.sectionstart) = slgh->firstNamedSection((yyvsp[-1].sem),(yyvsp[0].sectionsym)); }
     break;
 
-  case 138: /* rtlcontinue: rtlfirstsection  */
+  case 142: /* rtlcontinue: rtlfirstsection  */
                              { (yyval.sectionstart) = (yyvsp[0].sectionstart); }
     break;
 
-  case 139: /* rtlcontinue: rtlcontinue rtlmid section_def  */
+  case 143: /* rtlcontinue: rtlcontinue rtlmid section_def  */
                                         { (yyval.sectionstart) = slgh->nextNamedSection((yyvsp[-2].sectionstart),(yyvsp[-1].sem),(yyvsp[0].sectionsym)); }
     break;
 
-  case 140: /* rtl: rtlmid  */
+  case 144: /* rtl: rtlmid  */
             { (yyval.sem) = (yyvsp[0].sem); if ((yyval.sem)->getOpvec().empty() && ((yyval.sem)->getResult() == (HandleTpl *)0)) slgh->recordNop(); }
     break;
 
-  case 141: /* rtl: rtlmid EXPORT_KEY exportvarnode ';'  */
+  case 145: /* rtl: rtlmid EXPORT_KEY exportvarnode ';'  */
                                         { (yyval.sem) = slgh->setResultVarnode((yyvsp[-3].sem),(yyvsp[-1].varnode)); }
     break;
 
-  case 142: /* rtl: rtlmid EXPORT_KEY sizedstar lhsvarnode ';'  */
+  case 146: /* rtl: rtlmid EXPORT_KEY sizedstar lhsvarnode ';'  */
                                                { (yyval.sem) = slgh->setResultStarVarnode((yyvsp[-4].sem),(yyvsp[-2].starqual),(yyvsp[-1].varnode)); }
     break;
 
-  case 143: /* rtl: rtlmid EXPORT_KEY STRING  */
+  case 147: /* rtl: rtlmid EXPORT_KEY STRING  */
                                         { string errmsg="Unknown export varnode: "+*(yyvsp[0].str); delete (yyvsp[0].str); yyerror(errmsg.c_str()); YYERROR; }
     break;
 
-  case 144: /* rtl: rtlmid EXPORT_KEY sizedstar STRING  */
+  case 148: /* rtl: rtlmid EXPORT_KEY sizedstar STRING  */
                                         { string errmsg="Unknown pointer varnode: "+*(yyvsp[0].str); delete (yyvsp[-1].starqual); delete (yyvsp[0].str); yyerror(errmsg.c_str()); YYERROR; }
     break;
 
-  case 145: /* rtlmid: %empty  */
+  case 149: /* rtlmid: %empty  */
                                         { (yyval.sem) = new ConstructTpl(); }
     break;
 
-  case 146: /* rtlmid: rtlmid statement  */
+  case 150: /* rtlmid: rtlmid statement  */
                                         { (yyval.sem) = (yyvsp[-1].sem); if (!(yyval.sem)->addOpList(*(yyvsp[0].stmt))) { delete (yyvsp[0].stmt); yyerror("Multiple delayslot declarations"); YYERROR; } delete (yyvsp[0].stmt); }
     break;
 
-  case 147: /* rtlmid: rtlmid LOCAL_KEY STRING ';'  */
+  case 151: /* rtlmid: rtlmid LOCAL_KEY STRING ';'  */
                                 { (yyval.sem) = (yyvsp[-3].sem); slgh->pcode.newLocalDefinition((yyvsp[-1].str)); }
     break;
 
-  case 148: /* rtlmid: rtlmid LOCAL_KEY STRING ':' INTEGER ';'  */
+  case 152: /* rtlmid: rtlmid LOCAL_KEY STRING ':' INTEGER ';'  */
                                             { (yyval.sem) = (yyvsp[-5].sem); slgh->pcode.newLocalDefinition((yyvsp[-3].str),*(yyvsp[-1].i)); delete (yyvsp[-1].i); }
     break;
 
-  case 149: /* statement: lhsvarnode '=' expr ';'  */
+  case 153: /* statement: lhsvarnode '=' expr ';'  */
                                         { (yyvsp[-1].tree)->setOutput((yyvsp[-3].varnode)); (yyval.stmt) = ExprTree::toVector((yyvsp[-1].tree)); }
     break;
 
-  case 150: /* statement: LOCAL_KEY STRING '=' expr ';'  */
+  case 154: /* statement: LOCAL_KEY STRING '=' expr ';'  */
                                         { (yyval.stmt) = slgh->pcode.newOutput(true,(yyvsp[-1].tree),(yyvsp[-3].str)); }
     break;
 
-  case 151: /* statement: STRING '=' expr ';'  */
+  case 155: /* statement: STRING '=' expr ';'  */
                                         { (yyval.stmt) = slgh->pcode.newOutput(false,(yyvsp[-1].tree),(yyvsp[-3].str)); }
     break;
 
-  case 152: /* statement: LOCAL_KEY STRING ':' INTEGER '=' expr ';'  */
+  case 156: /* statement: LOCAL_KEY STRING ':' INTEGER '=' expr ';'  */
                                                 { (yyval.stmt) = slgh->pcode.newOutput(true,(yyvsp[-1].tree),(yyvsp[-5].str),*(yyvsp[-3].i)); delete (yyvsp[-3].i); }
     break;
 
-  case 153: /* statement: STRING ':' INTEGER '=' expr ';'  */
+  case 157: /* statement: STRING ':' INTEGER '=' expr ';'  */
                                         { (yyval.stmt) = slgh->pcode.newOutput(true,(yyvsp[-1].tree),(yyvsp[-5].str),*(yyvsp[-3].i)); delete (yyvsp[-3].i); }
     break;
 
-  case 154: /* statement: LOCAL_KEY specificsymbol '='  */
+  case 158: /* statement: LOCAL_KEY specificsymbol '='  */
                                  { (yyval.stmt) = (vector<OpTpl *> *)0; string errmsg = "Redefinition of symbol: "+(yyvsp[-1].specsym)->getName(); yyerror(errmsg.c_str()); YYERROR; }
     break;
 
-  case 155: /* statement: sizedstar expr '=' expr ';'  */
+  case 159: /* statement: sizedstar expr '=' expr ';'  */
                                         { (yyval.stmt) = slgh->pcode.createStore((yyvsp[-4].starqual),(yyvsp[-3].tree),(yyvsp[-1].tree)); }
     break;
 
-  case 156: /* statement: USEROPSYM '(' paramlist ')' ';'  */
+  case 160: /* statement: USEROPSYM '(' paramlist ')' ';'  */
                                         { (yyval.stmt) = slgh->pcode.createUserOpNoOut((yyvsp[-4].useropsym),(yyvsp[-2].param)); }
     break;
 
-  case 157: /* statement: lhsvarnode '[' INTEGER ',' INTEGER ']' '=' expr ';'  */
+  case 161: /* statement: lhsvarnode '[' INTEGER ',' INTEGER ']' '=' expr ';'  */
                                                         { (yyval.stmt) = slgh->pcode.assignBitRange((yyvsp[-8].varnode),(uint4)*(yyvsp[-6].i),(uint4)*(yyvsp[-4].i),(yyvsp[-1].tree)); delete (yyvsp[-6].i), delete (yyvsp[-4].i); }
     break;
 
-  case 158: /* statement: BITSYM '=' expr ';'  */
+  case 162: /* statement: BITSYM '=' expr ';'  */
                                         { (yyval.stmt)=slgh->pcode.assignBitRange((yyvsp[-3].bitsym)->getParentSymbol()->getVarnode(),(yyvsp[-3].bitsym)->getBitOffset(),(yyvsp[-3].bitsym)->numBits(),(yyvsp[-1].tree)); }
     break;
 
-  case 159: /* statement: varnode ':' INTEGER '='  */
+  case 163: /* statement: varnode ':' INTEGER '='  */
                                         { delete (yyvsp[-3].varnode); delete (yyvsp[-1].i); yyerror("Illegal truncation on left-hand side of assignment"); YYERROR; }
     break;
 
-  case 160: /* statement: varnode '(' INTEGER ')'  */
+  case 164: /* statement: varnode '(' INTEGER ')'  */
                                         { delete (yyvsp[-3].varnode); delete (yyvsp[-1].i); yyerror("Illegal subpiece on left-hand side of assignment"); YYERROR; }
     break;
 
-  case 161: /* statement: BUILD_KEY OPERANDSYM ';'  */
+  case 165: /* statement: BUILD_KEY OPERANDSYM ';'  */
                                         { (yyval.stmt) = slgh->pcode.createOpConst(BUILD,(yyvsp[-1].operandsym)->getIndex()); }
     break;
 
-  case 162: /* statement: CROSSBUILD_KEY varnode ',' SECTIONSYM ';'  */
+  case 166: /* statement: CROSSBUILD_KEY varnode ',' SECTIONSYM ';'  */
                                               { (yyval.stmt) = slgh->createCrossBuild((yyvsp[-3].varnode),(yyvsp[-1].sectionsym)); }
     break;
 
-  case 163: /* statement: CROSSBUILD_KEY varnode ',' STRING ';'  */
+  case 167: /* statement: CROSSBUILD_KEY varnode ',' STRING ';'  */
                                             { (yyval.stmt) = slgh->createCrossBuild((yyvsp[-3].varnode),slgh->newSectionSymbol(*(yyvsp[-1].str))); delete (yyvsp[-1].str); }
     break;
 
-  case 164: /* statement: DELAYSLOT_KEY '(' INTEGER ')' ';'  */
+  case 168: /* statement: DELAYSLOT_KEY '(' INTEGER ')' ';'  */
                                         { (yyval.stmt) = slgh->pcode.createOpConst(DELAY_SLOT,*(yyvsp[-2].i)); delete (yyvsp[-2].i); }
     break;
 
-  case 165: /* statement: GOTO_KEY jumpdest ';'  */
+  case 169: /* statement: GOTO_KEY jumpdest ';'  */
                                         { (yyval.stmt) = slgh->pcode.createOpNoOut(CPUI_BRANCH,new ExprTree((yyvsp[-1].varnode))); }
     break;
 
-  case 166: /* statement: IF_KEY expr GOTO_KEY jumpdest ';'  */
+  case 170: /* statement: IF_KEY expr GOTO_KEY jumpdest ';'  */
                                         { (yyval.stmt) = slgh->pcode.createOpNoOut(CPUI_CBRANCH,new ExprTree((yyvsp[-1].varnode)),(yyvsp[-3].tree)); }
     break;
 
-  case 167: /* statement: GOTO_KEY '[' expr ']' ';'  */
+  case 171: /* statement: GOTO_KEY '[' expr ']' ';'  */
                                         { (yyval.stmt) = slgh->pcode.createOpNoOut(CPUI_BRANCHIND,(yyvsp[-2].tree)); }
     break;
 
-  case 168: /* statement: CALL_KEY jumpdest ';'  */
+  case 172: /* statement: CALL_KEY jumpdest ';'  */
                                         { (yyval.stmt) = slgh->pcode.createOpNoOut(CPUI_CALL,new ExprTree((yyvsp[-1].varnode))); }
     break;
 
-  case 169: /* statement: CALL_KEY '[' expr ']' ';'  */
+  case 173: /* statement: CALL_KEY '[' expr ']' ';'  */
                                         { (yyval.stmt) = slgh->pcode.createOpNoOut(CPUI_CALLIND,(yyvsp[-2].tree)); }
     break;
 
-  case 170: /* statement: RETURN_KEY ';'  */
+  case 174: /* statement: RETURN_KEY ';'  */
                                         { yyerror("Must specify an indirect parameter for return"); YYERROR; }
     break;
 
-  case 171: /* statement: RETURN_KEY '[' expr ']' ';'  */
+  case 175: /* statement: RETURN_KEY '[' expr ']' ';'  */
                                         { (yyval.stmt) = slgh->pcode.createOpNoOut(CPUI_RETURN,(yyvsp[-2].tree)); }
     break;
 
-  case 172: /* statement: MACROSYM '(' paramlist ')' ';'  */
+  case 176: /* statement: MACROSYM '(' paramlist ')' ';'  */
                                         { (yyval.stmt) = slgh->createMacroUse((yyvsp[-4].macrosym),(yyvsp[-2].param)); }
     break;
 
-  case 173: /* statement: label  */
+  case 177: /* statement: label  */
                                         { (yyval.stmt) = slgh->pcode.placeLabel( (yyvsp[0].labelsym) ); }
     break;
 
-  case 174: /* expr: varnode  */
+  case 178: /* expr: varnode  */
               { (yyval.tree) = new ExprTree((yyvsp[0].varnode)); }
     break;
 
-  case 175: /* expr: sizedstar expr  */
+  case 179: /* expr: sizedstar expr  */
                                 { (yyval.tree) = slgh->pcode.createLoad((yyvsp[-1].starqual),(yyvsp[0].tree)); }
     break;
 
-  case 176: /* expr: '(' expr ')'  */
+  case 180: /* expr: '(' expr ')'  */
                                 { (yyval.tree) = (yyvsp[-1].tree); }
     break;
 
-  case 177: /* expr: expr '+' expr  */
+  case 181: /* expr: expr '+' expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_ADD,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 178: /* expr: expr '-' expr  */
+  case 182: /* expr: expr '-' expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_SUB,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 179: /* expr: expr OP_EQUAL expr  */
+  case 183: /* expr: expr OP_EQUAL expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_EQUAL,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 180: /* expr: expr OP_NOTEQUAL expr  */
+  case 184: /* expr: expr OP_NOTEQUAL expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_NOTEQUAL,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 181: /* expr: expr '<' expr  */
+  case 185: /* expr: expr '<' expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_LESS,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 182: /* expr: expr OP_GREATEQUAL expr  */
+  case 186: /* expr: expr OP_GREATEQUAL expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_LESSEQUAL,(yyvsp[0].tree),(yyvsp[-2].tree)); }
     break;
 
-  case 183: /* expr: expr OP_LESSEQUAL expr  */
+  case 187: /* expr: expr OP_LESSEQUAL expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_LESSEQUAL,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 184: /* expr: expr '>' expr  */
+  case 188: /* expr: expr '>' expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_LESS,(yyvsp[0].tree),(yyvsp[-2].tree)); }
     break;
 
-  case 185: /* expr: expr OP_SLESS expr  */
+  case 189: /* expr: expr OP_SLESS expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_SLESS,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 186: /* expr: expr OP_SGREATEQUAL expr  */
+  case 190: /* expr: expr OP_SGREATEQUAL expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_SLESSEQUAL,(yyvsp[0].tree),(yyvsp[-2].tree)); }
     break;
 
-  case 187: /* expr: expr OP_SLESSEQUAL expr  */
+  case 191: /* expr: expr OP_SLESSEQUAL expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_SLESSEQUAL,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 188: /* expr: expr OP_SGREAT expr  */
+  case 192: /* expr: expr OP_SGREAT expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_SLESS,(yyvsp[0].tree),(yyvsp[-2].tree)); }
     break;
 
-  case 189: /* expr: '-' expr  */
+  case 193: /* expr: '-' expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_2COMP,(yyvsp[0].tree)); }
     break;
 
-  case 190: /* expr: '~' expr  */
+  case 194: /* expr: '~' expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_NEGATE,(yyvsp[0].tree)); }
     break;
 
-  case 191: /* expr: expr '^' expr  */
+  case 195: /* expr: expr '^' expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_XOR,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 192: /* expr: expr '&' expr  */
+  case 196: /* expr: expr '&' expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_AND,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 193: /* expr: expr '|' expr  */
+  case 197: /* expr: expr '|' expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_OR,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 194: /* expr: expr OP_LEFT expr  */
+  case 198: /* expr: expr OP_LEFT expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_LEFT,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 195: /* expr: expr OP_RIGHT expr  */
+  case 199: /* expr: expr OP_RIGHT expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_RIGHT,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 196: /* expr: expr OP_SRIGHT expr  */
+  case 200: /* expr: expr OP_SRIGHT expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_SRIGHT,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 197: /* expr: expr '*' expr  */
+  case 201: /* expr: expr '*' expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_MULT,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 198: /* expr: expr '/' expr  */
+  case 202: /* expr: expr '/' expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_DIV,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 199: /* expr: expr OP_SDIV expr  */
+  case 203: /* expr: expr OP_SDIV expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_SDIV,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 200: /* expr: expr '%' expr  */
+  case 204: /* expr: expr '%' expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_REM,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 201: /* expr: expr OP_SREM expr  */
+  case 205: /* expr: expr OP_SREM expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_SREM,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 202: /* expr: '!' expr  */
+  case 206: /* expr: '!' expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_BOOL_NEGATE,(yyvsp[0].tree)); }
     break;
 
-  case 203: /* expr: expr OP_BOOL_XOR expr  */
+  case 207: /* expr: expr OP_BOOL_XOR expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_BOOL_XOR,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 204: /* expr: expr OP_BOOL_AND expr  */
+  case 208: /* expr: expr OP_BOOL_AND expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_BOOL_AND,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 205: /* expr: expr OP_BOOL_OR expr  */
+  case 209: /* expr: expr OP_BOOL_OR expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_BOOL_OR,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 206: /* expr: expr OP_FEQUAL expr  */
+  case 210: /* expr: expr OP_FEQUAL expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_EQUAL,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 207: /* expr: expr OP_FNOTEQUAL expr  */
+  case 211: /* expr: expr OP_FNOTEQUAL expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_NOTEQUAL,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 208: /* expr: expr OP_FLESS expr  */
+  case 212: /* expr: expr OP_FLESS expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_LESS,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 209: /* expr: expr OP_FGREAT expr  */
+  case 213: /* expr: expr OP_FGREAT expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_LESS,(yyvsp[0].tree),(yyvsp[-2].tree)); }
     break;
 
-  case 210: /* expr: expr OP_FLESSEQUAL expr  */
+  case 214: /* expr: expr OP_FLESSEQUAL expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_LESSEQUAL,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 211: /* expr: expr OP_FGREATEQUAL expr  */
+  case 215: /* expr: expr OP_FGREATEQUAL expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_LESSEQUAL,(yyvsp[0].tree),(yyvsp[-2].tree)); }
     break;
 
-  case 212: /* expr: expr OP_FADD expr  */
+  case 216: /* expr: expr OP_FADD expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_ADD,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 213: /* expr: expr OP_FSUB expr  */
+  case 217: /* expr: expr OP_FSUB expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_SUB,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 214: /* expr: expr OP_FMULT expr  */
+  case 218: /* expr: expr OP_FMULT expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_MULT,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 215: /* expr: expr OP_FDIV expr  */
+  case 219: /* expr: expr OP_FDIV expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_DIV,(yyvsp[-2].tree),(yyvsp[0].tree)); }
     break;
 
-  case 216: /* expr: OP_FSUB expr  */
+  case 220: /* expr: OP_FSUB expr  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_NEG,(yyvsp[0].tree)); }
     break;
 
-  case 217: /* expr: OP_ABS '(' expr ')'  */
+  case 221: /* expr: OP_ABS '(' expr ')'  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_ABS,(yyvsp[-1].tree)); }
     break;
 
-  case 218: /* expr: OP_SQRT '(' expr ')'  */
+  case 222: /* expr: OP_SQRT '(' expr ')'  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_SQRT,(yyvsp[-1].tree)); }
     break;
 
-  case 219: /* expr: OP_SEXT '(' expr ')'  */
+  case 223: /* expr: OP_SEXT '(' expr ')'  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_SEXT,(yyvsp[-1].tree)); }
     break;
 
-  case 220: /* expr: OP_ZEXT '(' expr ')'  */
+  case 224: /* expr: OP_ZEXT '(' expr ')'  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_ZEXT,(yyvsp[-1].tree)); }
     break;
 
-  case 221: /* expr: OP_CARRY '(' expr ',' expr ')'  */
+  case 225: /* expr: OP_CARRY '(' expr ',' expr ')'  */
                                    { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_CARRY,(yyvsp[-3].tree),(yyvsp[-1].tree)); }
     break;
 
-  case 222: /* expr: OP_SCARRY '(' expr ',' expr ')'  */
+  case 226: /* expr: OP_SCARRY '(' expr ',' expr ')'  */
                                     { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_SCARRY,(yyvsp[-3].tree),(yyvsp[-1].tree)); }
     break;
 
-  case 223: /* expr: OP_SBORROW '(' expr ',' expr ')'  */
+  case 227: /* expr: OP_SBORROW '(' expr ',' expr ')'  */
                                      { (yyval.tree) = slgh->pcode.createOp(CPUI_INT_SBORROW,(yyvsp[-3].tree),(yyvsp[-1].tree)); }
     break;
 
-  case 224: /* expr: OP_FLOAT2FLOAT '(' expr ')'  */
+  case 228: /* expr: OP_FLOAT2FLOAT '(' expr ')'  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_FLOAT2FLOAT,(yyvsp[-1].tree)); }
     break;
 
-  case 225: /* expr: OP_INT2FLOAT '(' expr ')'  */
+  case 229: /* expr: OP_INT2FLOAT '(' expr ')'  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_INT2FLOAT,(yyvsp[-1].tree)); }
     break;
 
-  case 226: /* expr: OP_NAN '(' expr ')'  */
+  case 230: /* expr: OP_NAN '(' expr ')'  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_NAN,(yyvsp[-1].tree)); }
     break;
 
-  case 227: /* expr: OP_TRUNC '(' expr ')'  */
+  case 231: /* expr: OP_TRUNC '(' expr ')'  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_TRUNC,(yyvsp[-1].tree)); }
     break;
 
-  case 228: /* expr: OP_CEIL '(' expr ')'  */
+  case 232: /* expr: OP_CEIL '(' expr ')'  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_CEIL,(yyvsp[-1].tree)); }
     break;
 
-  case 229: /* expr: OP_FLOOR '(' expr ')'  */
+  case 233: /* expr: OP_FLOOR '(' expr ')'  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_FLOOR,(yyvsp[-1].tree)); }
     break;
 
-  case 230: /* expr: OP_ROUND '(' expr ')'  */
+  case 234: /* expr: OP_ROUND '(' expr ')'  */
                                 { (yyval.tree) = slgh->pcode.createOp(CPUI_FLOAT_ROUND,(yyvsp[-1].tree)); }
     break;
 
-  case 231: /* expr: OP_NEW '(' expr ')'  */
+  case 235: /* expr: OP_NEW '(' expr ')'  */
                             { (yyval.tree) = slgh->pcode.createOp(CPUI_NEW,(yyvsp[-1].tree)); }
     break;
 
-  case 232: /* expr: OP_NEW '(' expr ',' expr ')'  */
+  case 236: /* expr: OP_NEW '(' expr ',' expr ')'  */
                                  { (yyval.tree) = slgh->pcode.createOp(CPUI_NEW,(yyvsp[-3].tree),(yyvsp[-1].tree)); }
     break;
 
-  case 233: /* expr: OP_POPCOUNT '(' expr ')'  */
+  case 237: /* expr: OP_POPCOUNT '(' expr ')'  */
                              { (yyval.tree) = slgh->pcode.createOp(CPUI_POPCOUNT,(yyvsp[-1].tree)); }
     break;
 
-  case 234: /* expr: specificsymbol '(' integervarnode ')'  */
+  case 238: /* expr: specificsymbol '(' integervarnode ')'  */
                                           { (yyval.tree) = slgh->pcode.createOp(CPUI_SUBPIECE,new ExprTree((yyvsp[-3].specsym)->getVarnode()),new ExprTree((yyvsp[-1].varnode))); }
     break;
 
-  case 235: /* expr: specificsymbol ':' INTEGER  */
+  case 239: /* expr: specificsymbol ':' INTEGER  */
                                 { (yyval.tree) = slgh->pcode.createBitRange((yyvsp[-2].specsym),0,(uint4)(*(yyvsp[0].i) * 8)); delete (yyvsp[0].i); }
     break;
 
-  case 236: /* expr: specificsymbol '[' INTEGER ',' INTEGER ']'  */
+  case 240: /* expr: specificsymbol '[' INTEGER ',' INTEGER ']'  */
                                                { (yyval.tree) = slgh->pcode.createBitRange((yyvsp[-5].specsym),(uint4)*(yyvsp[-3].i),(uint4)*(yyvsp[-1].i)); delete (yyvsp[-3].i), delete (yyvsp[-1].i); }
     break;
 
-  case 237: /* expr: BITSYM  */
+  case 241: /* expr: BITSYM  */
                                 { (yyval.tree)=slgh->pcode.createBitRange((yyvsp[0].bitsym)->getParentSymbol(),(yyvsp[0].bitsym)->getBitOffset(),(yyvsp[0].bitsym)->numBits()); }
     break;
 
-  case 238: /* expr: USEROPSYM '(' paramlist ')'  */
+  case 242: /* expr: USEROPSYM '(' paramlist ')'  */
                                 { (yyval.tree) = slgh->pcode.createUserOp((yyvsp[-3].useropsym),(yyvsp[-1].param)); }
     break;
 
-  case 239: /* expr: OP_CPOOLREF '(' paramlist ')'  */
+  case 243: /* expr: OP_CPOOLREF '(' paramlist ')'  */
                                    { if ((*(yyvsp[-1].param)).size() < 2) { string errmsg = "Must at least two inputs to cpool"; yyerror(errmsg.c_str()); YYERROR; } (yyval.tree) = slgh->pcode.createVariadic(CPUI_CPOOLREF,(yyvsp[-1].param)); }
     break;
 
-  case 240: /* sizedstar: '*' '[' SPACESYM ']' ':' INTEGER  */
+  case 244: /* sizedstar: '*' '[' SPACESYM ']' ':' INTEGER  */
                                             { (yyval.starqual) = new StarQuality; (yyval.starqual)->size = *(yyvsp[0].i); delete (yyvsp[0].i); (yyval.starqual)->id=ConstTpl((yyvsp[-3].spacesym)->getSpace()); }
     break;
 
-  case 241: /* sizedstar: '*' '[' SPACESYM ']'  */
+  case 245: /* sizedstar: '*' '[' SPACESYM ']'  */
                                 { (yyval.starqual) = new StarQuality; (yyval.starqual)->size = 0; (yyval.starqual)->id=ConstTpl((yyvsp[-1].spacesym)->getSpace()); }
     break;
 
-  case 242: /* sizedstar: '*' ':' INTEGER  */
+  case 246: /* sizedstar: '*' ':' INTEGER  */
                                 { (yyval.starqual) = new StarQuality; (yyval.starqual)->size = *(yyvsp[0].i); delete (yyvsp[0].i); (yyval.starqual)->id=ConstTpl(slgh->getDefaultCodeSpace()); }
     break;
 
-  case 243: /* sizedstar: '*'  */
+  case 247: /* sizedstar: '*'  */
                                 { (yyval.starqual) = new StarQuality; (yyval.starqual)->size = 0; (yyval.starqual)->id=ConstTpl(slgh->getDefaultCodeSpace()); }
     break;
 
-  case 244: /* jumpdest: STARTSYM  */
+  case 248: /* jumpdest: STARTSYM  */
                                 { VarnodeTpl *sym = (yyvsp[0].startsym)->getVarnode(); (yyval.varnode) = new VarnodeTpl(ConstTpl(ConstTpl::j_curspace),sym->getOffset(),ConstTpl(ConstTpl::j_curspace_size)); delete sym; }
     break;
 
-  case 245: /* jumpdest: ENDSYM  */
+  case 249: /* jumpdest: ENDSYM  */
                                 { VarnodeTpl *sym = (yyvsp[0].endsym)->getVarnode(); (yyval.varnode) = new VarnodeTpl(ConstTpl(ConstTpl::j_curspace),sym->getOffset(),ConstTpl(ConstTpl::j_curspace_size)); delete sym; }
     break;
 
-  case 246: /* jumpdest: NEXT2SYM  */
+  case 250: /* jumpdest: NEXT2SYM  */
                                 { VarnodeTpl *sym = (yyvsp[0].next2sym)->getVarnode(); (yyval.varnode) = new VarnodeTpl(ConstTpl(ConstTpl::j_curspace),sym->getOffset(),ConstTpl(ConstTpl::j_curspace_size)); delete sym; }
     break;
 
-  case 247: /* jumpdest: INTEGER  */
+  case 251: /* jumpdest: INTEGER  */
                                 { (yyval.varnode) = new VarnodeTpl(ConstTpl(ConstTpl::j_curspace),ConstTpl(ConstTpl::real,*(yyvsp[0].i)),ConstTpl(ConstTpl::j_curspace_size)); delete (yyvsp[0].i); }
     break;
 
-  case 248: /* jumpdest: BADINTEGER  */
+  case 252: /* jumpdest: BADINTEGER  */
                                 { (yyval.varnode) = new VarnodeTpl(ConstTpl(ConstTpl::j_curspace),ConstTpl(ConstTpl::real,0),ConstTpl(ConstTpl::j_curspace_size)); yyerror("Parsed integer is too big (overflow)"); }
     break;
 
-  case 249: /* jumpdest: OPERANDSYM  */
+  case 253: /* jumpdest: OPERANDSYM  */
                                 { (yyval.varnode) = (yyvsp[0].operandsym)->getVarnode(); (yyvsp[0].operandsym)->setCodeAddress(); }
     break;
 
-  case 250: /* jumpdest: INTEGER '[' SPACESYM ']'  */
+  case 254: /* jumpdest: INTEGER '[' SPACESYM ']'  */
                                 { AddrSpace *spc = (yyvsp[-1].spacesym)->getSpace(); (yyval.varnode) = new VarnodeTpl(ConstTpl(spc),ConstTpl(ConstTpl::real,*(yyvsp[-3].i)),ConstTpl(ConstTpl::real,spc->getAddrSize())); delete (yyvsp[-3].i); }
     break;
 
-  case 251: /* jumpdest: label  */
+  case 255: /* jumpdest: label  */
                                 { (yyval.varnode) = new VarnodeTpl(ConstTpl(slgh->getConstantSpace()),ConstTpl(ConstTpl::j_relative,(yyvsp[0].labelsym)->getIndex()),ConstTpl(ConstTpl::real,sizeof(uintm))); (yyvsp[0].labelsym)->incrementRefCount(); }
     break;
 
-  case 252: /* jumpdest: STRING  */
+  case 256: /* jumpdest: STRING  */
                                 { string errmsg = "Unknown jump destination: "+*(yyvsp[0].str); delete (yyvsp[0].str); yyerror(errmsg.c_str()); YYERROR; }
     break;
 
-  case 253: /* varnode: specificsymbol  */
+  case 257: /* varnode: specificsymbol  */
                                 { (yyval.varnode) = (yyvsp[0].specsym)->getVarnode(); }
     break;
 
-  case 254: /* varnode: integervarnode  */
+  case 258: /* varnode: integervarnode  */
                                 { (yyval.varnode) = (yyvsp[0].varnode); }
     break;
 
-  case 255: /* varnode: STRING  */
+  case 259: /* varnode: STRING  */
                                 { string errmsg = "Unknown varnode parameter: "+*(yyvsp[0].str); delete (yyvsp[0].str); yyerror(errmsg.c_str()); YYERROR; }
     break;
 
-  case 256: /* varnode: SUBTABLESYM  */
+  case 260: /* varnode: SUBTABLESYM  */
                                 { string errmsg = "Subtable not attached to operand: "+(yyvsp[0].subtablesym)->getName(); yyerror(errmsg.c_str()); YYERROR; }
     break;
 
-  case 257: /* integervarnode: INTEGER  */
+  case 261: /* integervarnode: INTEGER  */
                                 { (yyval.varnode) = new VarnodeTpl(ConstTpl(slgh->getConstantSpace()),ConstTpl(ConstTpl::real,*(yyvsp[0].i)),ConstTpl(ConstTpl::real,0)); delete (yyvsp[0].i); }
     break;
 
-  case 258: /* integervarnode: BADINTEGER  */
+  case 262: /* integervarnode: BADINTEGER  */
                                 { (yyval.varnode) = new VarnodeTpl(ConstTpl(slgh->getConstantSpace()),ConstTpl(ConstTpl::real,0),ConstTpl(ConstTpl::real,0)); yyerror("Parsed integer is too big (overflow)"); }
     break;
 
-  case 259: /* integervarnode: INTEGER ':' INTEGER  */
+  case 263: /* integervarnode: INTEGER ':' INTEGER  */
                                 { (yyval.varnode) = new VarnodeTpl(ConstTpl(slgh->getConstantSpace()),ConstTpl(ConstTpl::real,*(yyvsp[-2].i)),ConstTpl(ConstTpl::real,*(yyvsp[0].i))); delete (yyvsp[-2].i); delete (yyvsp[0].i); }
     break;
 
-  case 260: /* integervarnode: '&' varnode  */
+  case 264: /* integervarnode: '&' varnode  */
                                 { (yyval.varnode) = slgh->pcode.addressOf((yyvsp[0].varnode),0); }
     break;
 
-  case 261: /* integervarnode: '&' ':' INTEGER varnode  */
+  case 265: /* integervarnode: '&' ':' INTEGER varnode  */
                                 { (yyval.varnode) = slgh->pcode.addressOf((yyvsp[0].varnode),*(yyvsp[-1].i)); delete (yyvsp[-1].i); }
     break;
 
-  case 262: /* lhsvarnode: specificsymbol  */
+  case 266: /* lhsvarnode: specificsymbol  */
                                 { (yyval.varnode) = (yyvsp[0].specsym)->getVarnode(); }
     break;
 
-  case 263: /* lhsvarnode: STRING  */
+  case 267: /* lhsvarnode: STRING  */
                                 { string errmsg = "Unknown assignment varnode: "+*(yyvsp[0].str); delete (yyvsp[0].str); yyerror(errmsg.c_str()); YYERROR; }
     break;
 
-  case 264: /* lhsvarnode: SUBTABLESYM  */
+  case 268: /* lhsvarnode: SUBTABLESYM  */
                                 { string errmsg = "Subtable not attached to operand: "+(yyvsp[0].subtablesym)->getName(); yyerror(errmsg.c_str()); YYERROR; }
     break;
 
-  case 265: /* label: '<' LABELSYM '>'  */
+  case 269: /* label: '<' LABELSYM '>'  */
                                 { (yyval.labelsym) = (yyvsp[-1].labelsym); }
     break;
 
-  case 266: /* label: '<' STRING '>'  */
+  case 270: /* label: '<' STRING '>'  */
                                 { (yyval.labelsym) = slgh->pcode.defineLabel( (yyvsp[-1].str) ); }
     break;
 
-  case 267: /* exportvarnode: specificsymbol  */
+  case 271: /* exportvarnode: specificsymbol  */
                                 { (yyval.varnode) = (yyvsp[0].specsym)->getVarnode(); }
     break;
 
-  case 268: /* exportvarnode: '&' varnode  */
+  case 272: /* exportvarnode: '&' varnode  */
                                 { (yyval.varnode) = slgh->pcode.addressOf((yyvsp[0].varnode),0); }
     break;
 
-  case 269: /* exportvarnode: '&' ':' INTEGER varnode  */
+  case 273: /* exportvarnode: '&' ':' INTEGER varnode  */
                                 { (yyval.varnode) = slgh->pcode.addressOf((yyvsp[0].varnode),*(yyvsp[-1].i)); delete (yyvsp[-1].i); }
     break;
 
-  case 270: /* exportvarnode: INTEGER ':' INTEGER  */
+  case 274: /* exportvarnode: INTEGER ':' INTEGER  */
                                 { (yyval.varnode) = new VarnodeTpl(ConstTpl(slgh->getConstantSpace()),ConstTpl(ConstTpl::real,*(yyvsp[-2].i)),ConstTpl(ConstTpl::real,*(yyvsp[0].i))); delete (yyvsp[-2].i); delete (yyvsp[0].i); }
     break;
 
-  case 271: /* exportvarnode: STRING  */
+  case 275: /* exportvarnode: STRING  */
                                 { string errmsg="Unknown export varnode: "+*(yyvsp[0].str); delete (yyvsp[0].str); yyerror(errmsg.c_str()); YYERROR; }
     break;
 
-  case 272: /* exportvarnode: SUBTABLESYM  */
+  case 276: /* exportvarnode: SUBTABLESYM  */
                                 { string errmsg = "Subtable not attached to operand: "+(yyvsp[0].subtablesym)->getName(); yyerror(errmsg.c_str()); YYERROR; }
     break;
 
-  case 273: /* familysymbol: VALUESYM  */
+  case 277: /* familysymbol: VALUESYM  */
                                 { (yyval.famsym) = (yyvsp[0].valuesym); }
     break;
 
-  case 274: /* familysymbol: VALUEMAPSYM  */
+  case 278: /* familysymbol: VALUEMAPSYM  */
                                 { (yyval.famsym) = (yyvsp[0].valuemapsym); }
     break;
 
-  case 275: /* familysymbol: CONTEXTSYM  */
+  case 279: /* familysymbol: CONTEXTSYM  */
                                 { (yyval.famsym) = (yyvsp[0].contextsym); }
     break;
 
-  case 276: /* familysymbol: NAMESYM  */
+  case 280: /* familysymbol: NAMESYM  */
                                 { (yyval.famsym) = (yyvsp[0].namesym); }
     break;
 
-  case 277: /* familysymbol: VARLISTSYM  */
+  case 281: /* familysymbol: VARLISTSYM  */
                                 { (yyval.famsym) = (yyvsp[0].varlistsym); }
     break;
 
-  case 278: /* specificsymbol: VARSYM  */
+  case 282: /* specificsymbol: VARSYM  */
                                 { (yyval.specsym) = (yyvsp[0].varsym); }
     break;
 
-  case 279: /* specificsymbol: SPECSYM  */
+  case 283: /* specificsymbol: SPECSYM  */
                                 { (yyval.specsym) = (yyvsp[0].specsym); }
     break;
 
-  case 280: /* specificsymbol: OPERANDSYM  */
+  case 284: /* specificsymbol: OPERANDSYM  */
                                 { (yyval.specsym) = (yyvsp[0].operandsym); }
     break;
 
-  case 281: /* specificsymbol: STARTSYM  */
+  case 285: /* specificsymbol: STARTSYM  */
                                 { (yyval.specsym) = (yyvsp[0].startsym); }
     break;
 
-  case 282: /* specificsymbol: ENDSYM  */
+  case 286: /* specificsymbol: ENDSYM  */
                                 { (yyval.specsym) = (yyvsp[0].endsym); }
     break;
 
-  case 283: /* specificsymbol: NEXT2SYM  */
+  case 287: /* specificsymbol: NEXT2SYM  */
                                 { (yyval.specsym) = (yyvsp[0].next2sym); }
     break;
 
-  case 284: /* charstring: CHAR  */
+  case 288: /* charstring: CHAR  */
                                 { (yyval.str) = new string; (*(yyval.str)) += (yyvsp[0].ch); }
     break;
 
-  case 285: /* charstring: charstring CHAR  */
+  case 289: /* charstring: charstring CHAR  */
                                 { (yyval.str) = (yyvsp[-1].str); (*(yyval.str)) += (yyvsp[0].ch); }
     break;
 
-  case 286: /* intblist: '[' intbpart ']'  */
+  case 290: /* intblist: '[' intbpart ']'  */
                                 { (yyval.biglist) = (yyvsp[-1].biglist); }
     break;
 
-  case 287: /* intblist: INTEGER  */
+  case 291: /* intblist: INTEGER  */
                                 { (yyval.biglist) = new vector<intb>; (yyval.biglist)->push_back(intb(*(yyvsp[0].i))); delete (yyvsp[0].i); }
     break;
 
-  case 288: /* intblist: '-' INTEGER  */
+  case 292: /* intblist: '-' INTEGER  */
                                 { (yyval.biglist) = new vector<intb>; (yyval.biglist)->push_back(-intb(*(yyvsp[0].i))); delete (yyvsp[0].i); }
     break;
 
-  case 289: /* intbpart: INTEGER  */
+  case 293: /* intbpart: INTEGER  */
                                 { (yyval.biglist) = new vector<intb>; (yyval.biglist)->push_back(intb(*(yyvsp[0].i))); delete (yyvsp[0].i); }
     break;
 
-  case 290: /* intbpart: '-' INTEGER  */
+  case 294: /* intbpart: '-' INTEGER  */
                                 { (yyval.biglist) = new vector<intb>; (yyval.biglist)->push_back(-intb(*(yyvsp[0].i))); delete (yyvsp[0].i); }
     break;
 
-  case 291: /* intbpart: STRING  */
+  case 295: /* intbpart: STRING  */
                                 { if (*(yyvsp[0].str)!="_") { string errmsg = "Expecting integer but saw: "+*(yyvsp[0].str); delete (yyvsp[0].str); yyerror(errmsg.c_str()); YYERROR; }
                                   (yyval.biglist) = new vector<intb>; (yyval.biglist)->push_back((intb)0xBADBEEF); delete (yyvsp[0].str); }
     break;
 
-  case 292: /* intbpart: intbpart INTEGER  */
+  case 296: /* intbpart: intbpart INTEGER  */
                                 { (yyval.biglist) = (yyvsp[-1].biglist); (yyval.biglist)->push_back(intb(*(yyvsp[0].i))); delete (yyvsp[0].i); }
     break;
 
-  case 293: /* intbpart: intbpart '-' INTEGER  */
+  case 297: /* intbpart: intbpart '-' INTEGER  */
                                 { (yyval.biglist) = (yyvsp[-2].biglist); (yyval.biglist)->push_back(-intb(*(yyvsp[0].i))); delete (yyvsp[0].i); }
     break;
 
-  case 294: /* intbpart: intbpart STRING  */
+  case 298: /* intbpart: intbpart STRING  */
                                 { if (*(yyvsp[0].str)!="_") { string errmsg = "Expecting integer but saw: "+*(yyvsp[0].str); delete (yyvsp[0].str); yyerror(errmsg.c_str()); YYERROR; }
                                   (yyval.biglist) = (yyvsp[-1].biglist); (yyval.biglist)->push_back((intb)0xBADBEEF); delete (yyvsp[0].str); }
     break;
 
-  case 295: /* stringlist: '[' stringpart ']'  */
+  case 299: /* stringlist: '[' stringpart ']'  */
                                 { (yyval.strlist) = (yyvsp[-1].strlist); }
     break;
 
-  case 296: /* stringlist: STRING  */
+  case 300: /* stringlist: STRING  */
                                 { (yyval.strlist) = new vector<string>; (yyval.strlist)->push_back(*(yyvsp[0].str)); delete (yyvsp[0].str); }
     break;
 
-  case 297: /* stringpart: STRING  */
+  case 301: /* stringpart: STRING  */
                                 { (yyval.strlist) = new vector<string>; (yyval.strlist)->push_back( *(yyvsp[0].str) ); delete (yyvsp[0].str); }
     break;
 
-  case 298: /* stringpart: stringpart STRING  */
+  case 302: /* stringpart: stringpart STRING  */
                                 { (yyval.strlist) = (yyvsp[-1].strlist); (yyval.strlist)->push_back(*(yyvsp[0].str)); delete (yyvsp[0].str); }
     break;
 
-  case 299: /* stringpart: stringpart anysymbol  */
+  case 303: /* stringpart: stringpart anysymbol  */
                                 { string errmsg = (yyvsp[0].anysym)->getName()+": redefined"; yyerror(errmsg.c_str()); YYERROR; }
     break;
 
-  case 300: /* anystringlist: '[' anystringpart ']'  */
+  case 304: /* anystringlist: '[' anystringpart ']'  */
                                      { (yyval.strlist) = (yyvsp[-1].strlist); }
     break;
 
-  case 301: /* anystringpart: STRING  */
+  case 305: /* anystringpart: STRING  */
                                 { (yyval.strlist) = new vector<string>; (yyval.strlist)->push_back( *(yyvsp[0].str) ); delete (yyvsp[0].str); }
     break;
 
-  case 302: /* anystringpart: anysymbol  */
+  case 306: /* anystringpart: anysymbol  */
                                 { (yyval.strlist) = new vector<string>; (yyval.strlist)->push_back( (yyvsp[0].anysym)->getName() ); }
     break;
 
-  case 303: /* anystringpart: anystringpart STRING  */
+  case 307: /* anystringpart: anystringpart STRING  */
                                 { (yyval.strlist) = (yyvsp[-1].strlist); (yyval.strlist)->push_back(*(yyvsp[0].str)); delete (yyvsp[0].str); }
     break;
 
-  case 304: /* anystringpart: anystringpart anysymbol  */
+  case 308: /* anystringpart: anystringpart anysymbol  */
                                 { (yyval.strlist) = (yyvsp[-1].strlist); (yyval.strlist)->push_back((yyvsp[0].anysym)->getName()); }
     break;
 
-  case 305: /* valuelist: '[' valuepart ']'  */
+  case 309: /* valuelist: '[' valuepart ']'  */
                                 { (yyval.symlist) = (yyvsp[-1].symlist); }
     break;
 
-  case 306: /* valuelist: VALUESYM  */
+  case 310: /* valuelist: VALUESYM  */
                                 { (yyval.symlist) = new vector<SleighSymbol *>; (yyval.symlist)->push_back((yyvsp[0].valuesym)); }
     break;
 
-  case 307: /* valuelist: CONTEXTSYM  */
+  case 311: /* valuelist: CONTEXTSYM  */
                                 { (yyval.symlist) = new vector<SleighSymbol *>; (yyval.symlist)->push_back((yyvsp[0].contextsym)); }
     break;
 
-  case 308: /* valuepart: VALUESYM  */
+  case 312: /* valuepart: VALUESYM  */
                                 { (yyval.symlist) = new vector<SleighSymbol *>; (yyval.symlist)->push_back( (yyvsp[0].valuesym) ); }
     break;
 
-  case 309: /* valuepart: CONTEXTSYM  */
+  case 313: /* valuepart: CONTEXTSYM  */
                                 { (yyval.symlist) = new vector<SleighSymbol *>; (yyval.symlist)->push_back((yyvsp[0].contextsym)); }
     break;
 
-  case 310: /* valuepart: valuepart VALUESYM  */
+  case 314: /* valuepart: valuepart VALUESYM  */
                                 { (yyval.symlist) = (yyvsp[-1].symlist); (yyval.symlist)->push_back((yyvsp[0].valuesym)); }
     break;
 
-  case 311: /* valuepart: valuepart CONTEXTSYM  */
+  case 315: /* valuepart: valuepart CONTEXTSYM  */
                                 { (yyval.symlist) = (yyvsp[-1].symlist); (yyval.symlist)->push_back((yyvsp[0].contextsym)); }
     break;
 
-  case 312: /* valuepart: valuepart STRING  */
+  case 316: /* valuepart: valuepart STRING  */
                                 { string errmsg = *(yyvsp[0].str)+": is not a value pattern"; delete (yyvsp[0].str); yyerror(errmsg.c_str()); YYERROR; }
     break;
 
-  case 313: /* varlist: '[' varpart ']'  */
+  case 317: /* varlist: '[' varpart ']'  */
                                 { (yyval.symlist) = (yyvsp[-1].symlist); }
     break;
 
-  case 314: /* varlist: VARSYM  */
+  case 318: /* varlist: VARSYM  */
                                 { (yyval.symlist) = new vector<SleighSymbol *>; (yyval.symlist)->push_back((yyvsp[0].varsym)); }
     break;
 
-  case 315: /* varpart: VARSYM  */
+  case 319: /* varpart: VARSYM  */
                                 { (yyval.symlist) = new vector<SleighSymbol *>; (yyval.symlist)->push_back((yyvsp[0].varsym)); }
     break;
 
-  case 316: /* varpart: STRING  */
+  case 320: /* varpart: STRING  */
                                 { if (*(yyvsp[0].str)!="_") { string errmsg = *(yyvsp[0].str)+": is not a varnode symbol"; delete (yyvsp[0].str); yyerror(errmsg.c_str()); YYERROR; }
 				  (yyval.symlist) = new vector<SleighSymbol *>; (yyval.symlist)->push_back((SleighSymbol *)0); delete (yyvsp[0].str); }
     break;
 
-  case 317: /* varpart: varpart VARSYM  */
+  case 321: /* varpart: varpart VARSYM  */
                                 { (yyval.symlist) = (yyvsp[-1].symlist); (yyval.symlist)->push_back((yyvsp[0].varsym)); }
     break;
 
-  case 318: /* varpart: varpart STRING  */
+  case 322: /* varpart: varpart STRING  */
                                 { if (*(yyvsp[0].str)!="_") { string errmsg = *(yyvsp[0].str)+": is not a varnode symbol"; delete (yyvsp[0].str); yyerror(errmsg.c_str()); YYERROR; }
                                   (yyval.symlist) = (yyvsp[-1].symlist); (yyval.symlist)->push_back((SleighSymbol *)0); delete (yyvsp[0].str); }
     break;
 
-  case 319: /* paramlist: %empty  */
+  case 323: /* paramlist: %empty  */
                                 { (yyval.param) = new vector<ExprTree *>; }
     break;
 
-  case 320: /* paramlist: expr  */
+  case 324: /* paramlist: expr  */
                                 { (yyval.param) = new vector<ExprTree *>; (yyval.param)->push_back((yyvsp[0].tree)); }
     break;
 
-  case 321: /* paramlist: paramlist ',' expr  */
+  case 325: /* paramlist: paramlist ',' expr  */
                                 { (yyval.param) = (yyvsp[-2].param); (yyval.param)->push_back((yyvsp[0].tree)); }
     break;
 
-  case 322: /* oplist: %empty  */
+  case 326: /* oplist: %empty  */
                                 { (yyval.strlist) = new vector<string>; }
     break;
 
-  case 323: /* oplist: STRING  */
+  case 327: /* oplist: STRING  */
                                 { (yyval.strlist) = new vector<string>; (yyval.strlist)->push_back(*(yyvsp[0].str)); delete (yyvsp[0].str); }
     break;
 
-  case 324: /* oplist: oplist ',' STRING  */
+  case 328: /* oplist: oplist ',' STRING  */
                                 { (yyval.strlist) = (yyvsp[-2].strlist); (yyval.strlist)->push_back(*(yyvsp[0].str)); delete (yyvsp[0].str); }
     break;
 
-  case 325: /* anysymbol: SPACESYM  */
+  case 329: /* anysymbol: SPACESYM  */
                                 { (yyval.anysym) = (yyvsp[0].spacesym); }
     break;
 
-  case 326: /* anysymbol: SECTIONSYM  */
+  case 330: /* anysymbol: SECTIONSYM  */
                                 { (yyval.anysym) = (yyvsp[0].sectionsym); }
     break;
 
-  case 327: /* anysymbol: TOKENSYM  */
+  case 331: /* anysymbol: TOKENSYM  */
                                 { (yyval.anysym) = (yyvsp[0].tokensym); }
     break;
 
-  case 328: /* anysymbol: USEROPSYM  */
+  case 332: /* anysymbol: USEROPSYM  */
                                 { (yyval.anysym) = (yyvsp[0].useropsym); }
     break;
 
-  case 329: /* anysymbol: MACROSYM  */
+  case 333: /* anysymbol: MACROSYM  */
                                 { (yyval.anysym) = (yyvsp[0].macrosym); }
     break;
 
-  case 330: /* anysymbol: SUBTABLESYM  */
+  case 334: /* anysymbol: SUBTABLESYM  */
                                 { (yyval.anysym) = (yyvsp[0].subtablesym); }
     break;
 
-  case 331: /* anysymbol: VALUESYM  */
+  case 335: /* anysymbol: VALUESYM  */
                                 { (yyval.anysym) = (yyvsp[0].valuesym); }
     break;
 
-  case 332: /* anysymbol: VALUEMAPSYM  */
+  case 336: /* anysymbol: VALUEMAPSYM  */
                                 { (yyval.anysym) = (yyvsp[0].valuemapsym); }
     break;
 
-  case 333: /* anysymbol: CONTEXTSYM  */
+  case 337: /* anysymbol: CONTEXTSYM  */
                                 { (yyval.anysym) = (yyvsp[0].contextsym); }
     break;
 
-  case 334: /* anysymbol: NAMESYM  */
+  case 338: /* anysymbol: NAMESYM  */
                                 { (yyval.anysym) = (yyvsp[0].namesym); }
     break;
 
-  case 335: /* anysymbol: VARSYM  */
+  case 339: /* anysymbol: VARSYM  */
                                 { (yyval.anysym) = (yyvsp[0].varsym); }
     break;
 
-  case 336: /* anysymbol: VARLISTSYM  */
+  case 340: /* anysymbol: VARLISTSYM  */
                                 { (yyval.anysym) = (yyvsp[0].varlistsym); }
     break;
 
-  case 337: /* anysymbol: OPERANDSYM  */
+  case 341: /* anysymbol: OPERANDSYM  */
                                 { (yyval.anysym) = (yyvsp[0].operandsym); }
     break;
 
-  case 338: /* anysymbol: STARTSYM  */
+  case 342: /* anysymbol: STARTSYM  */
                                 { (yyval.anysym) = (yyvsp[0].startsym); }
     break;
 
-  case 339: /* anysymbol: ENDSYM  */
+  case 343: /* anysymbol: ENDSYM  */
                                 { (yyval.anysym) = (yyvsp[0].endsym); }
     break;
 
-  case 340: /* anysymbol: NEXT2SYM  */
+  case 344: /* anysymbol: NEXT2SYM  */
                                 { (yyval.anysym) = (yyvsp[0].next2sym); }
     break;
 
-  case 341: /* anysymbol: BITSYM  */
+  case 345: /* anysymbol: BITSYM  */
                                 { (yyval.anysym) = (yyvsp[0].bitsym); }
     break;
 
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.hh
index c6d2f7cf9..633bb0266 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.hh
@@ -123,49 +123,51 @@ extern int yydebug;
     NOFLOW_KEY = 324,              /* NOFLOW_KEY  */
     HEX_KEY = 325,                 /* HEX_KEY  */
     DEC_KEY = 326,                 /* DEC_KEY  */
-    BIG_KEY = 327,                 /* BIG_KEY  */
-    LITTLE_KEY = 328,              /* LITTLE_KEY  */
-    SIZE_KEY = 329,                /* SIZE_KEY  */
-    WORDSIZE_KEY = 330,            /* WORDSIZE_KEY  */
-    OFFSET_KEY = 331,              /* OFFSET_KEY  */
-    NAMES_KEY = 332,               /* NAMES_KEY  */
-    VALUES_KEY = 333,              /* VALUES_KEY  */
-    VARIABLES_KEY = 334,           /* VARIABLES_KEY  */
-    PCODEOP_KEY = 335,             /* PCODEOP_KEY  */
-    IS_KEY = 336,                  /* IS_KEY  */
-    LOCAL_KEY = 337,               /* LOCAL_KEY  */
-    DELAYSLOT_KEY = 338,           /* DELAYSLOT_KEY  */
-    CROSSBUILD_KEY = 339,          /* CROSSBUILD_KEY  */
-    EXPORT_KEY = 340,              /* EXPORT_KEY  */
-    BUILD_KEY = 341,               /* BUILD_KEY  */
-    CONTEXT_KEY = 342,             /* CONTEXT_KEY  */
-    ELLIPSIS_KEY = 343,            /* ELLIPSIS_KEY  */
-    GLOBALSET_KEY = 344,           /* GLOBALSET_KEY  */
-    BITRANGE_KEY = 345,            /* BITRANGE_KEY  */
-    CHAR = 346,                    /* CHAR  */
-    INTEGER = 347,                 /* INTEGER  */
-    INTB = 348,                    /* INTB  */
-    STRING = 349,                  /* STRING  */
-    SYMBOLSTRING = 350,            /* SYMBOLSTRING  */
-    SPACESYM = 351,                /* SPACESYM  */
-    SECTIONSYM = 352,              /* SECTIONSYM  */
-    TOKENSYM = 353,                /* TOKENSYM  */
-    USEROPSYM = 354,               /* USEROPSYM  */
-    VALUESYM = 355,                /* VALUESYM  */
-    VALUEMAPSYM = 356,             /* VALUEMAPSYM  */
-    CONTEXTSYM = 357,              /* CONTEXTSYM  */
-    NAMESYM = 358,                 /* NAMESYM  */
-    VARSYM = 359,                  /* VARSYM  */
-    BITSYM = 360,                  /* BITSYM  */
-    SPECSYM = 361,                 /* SPECSYM  */
-    VARLISTSYM = 362,              /* VARLISTSYM  */
-    OPERANDSYM = 363,              /* OPERANDSYM  */
-    STARTSYM = 364,                /* STARTSYM  */
-    ENDSYM = 365,                  /* ENDSYM  */
-    NEXT2SYM = 366,                /* NEXT2SYM  */
-    MACROSYM = 367,                /* MACROSYM  */
-    LABELSYM = 368,                /* LABELSYM  */
-    SUBTABLESYM = 369              /* SUBTABLESYM  */
+    OCT_KEY = 327,                 /* OCT_KEY  */
+    BIN_KEY = 328,                 /* BIN_KEY  */
+    BIG_KEY = 329,                 /* BIG_KEY  */
+    LITTLE_KEY = 330,              /* LITTLE_KEY  */
+    SIZE_KEY = 331,                /* SIZE_KEY  */
+    WORDSIZE_KEY = 332,            /* WORDSIZE_KEY  */
+    OFFSET_KEY = 333,              /* OFFSET_KEY  */
+    NAMES_KEY = 334,               /* NAMES_KEY  */
+    VALUES_KEY = 335,              /* VALUES_KEY  */
+    VARIABLES_KEY = 336,           /* VARIABLES_KEY  */
+    PCODEOP_KEY = 337,             /* PCODEOP_KEY  */
+    IS_KEY = 338,                  /* IS_KEY  */
+    LOCAL_KEY = 339,               /* LOCAL_KEY  */
+    DELAYSLOT_KEY = 340,           /* DELAYSLOT_KEY  */
+    CROSSBUILD_KEY = 341,          /* CROSSBUILD_KEY  */
+    EXPORT_KEY = 342,              /* EXPORT_KEY  */
+    BUILD_KEY = 343,               /* BUILD_KEY  */
+    CONTEXT_KEY = 344,             /* CONTEXT_KEY  */
+    ELLIPSIS_KEY = 345,            /* ELLIPSIS_KEY  */
+    GLOBALSET_KEY = 346,           /* GLOBALSET_KEY  */
+    BITRANGE_KEY = 347,            /* BITRANGE_KEY  */
+    CHAR = 348,                    /* CHAR  */
+    INTEGER = 349,                 /* INTEGER  */
+    INTB = 350,                    /* INTB  */
+    STRING = 351,                  /* STRING  */
+    SYMBOLSTRING = 352,            /* SYMBOLSTRING  */
+    SPACESYM = 353,                /* SPACESYM  */
+    SECTIONSYM = 354,              /* SECTIONSYM  */
+    TOKENSYM = 355,                /* TOKENSYM  */
+    USEROPSYM = 356,               /* USEROPSYM  */
+    VALUESYM = 357,                /* VALUESYM  */
+    VALUEMAPSYM = 358,             /* VALUEMAPSYM  */
+    CONTEXTSYM = 359,              /* CONTEXTSYM  */
+    NAMESYM = 360,                 /* NAMESYM  */
+    VARSYM = 361,                  /* VARSYM  */
+    BITSYM = 362,                  /* BITSYM  */
+    SPECSYM = 363,                 /* SPECSYM  */
+    VARLISTSYM = 364,              /* VARLISTSYM  */
+    OPERANDSYM = 365,              /* OPERANDSYM  */
+    STARTSYM = 366,                /* STARTSYM  */
+    ENDSYM = 367,                  /* ENDSYM  */
+    NEXT2SYM = 368,                /* NEXT2SYM  */
+    MACROSYM = 369,                /* MACROSYM  */
+    LABELSYM = 370,                /* LABELSYM  */
+    SUBTABLESYM = 371              /* SUBTABLESYM  */
   };
   typedef enum yytokentype yytoken_kind_t;
 #endif
@@ -243,49 +245,51 @@ extern int yydebug;
 #define NOFLOW_KEY 324
 #define HEX_KEY 325
 #define DEC_KEY 326
-#define BIG_KEY 327
-#define LITTLE_KEY 328
-#define SIZE_KEY 329
-#define WORDSIZE_KEY 330
-#define OFFSET_KEY 331
-#define NAMES_KEY 332
-#define VALUES_KEY 333
-#define VARIABLES_KEY 334
-#define PCODEOP_KEY 335
-#define IS_KEY 336
-#define LOCAL_KEY 337
-#define DELAYSLOT_KEY 338
-#define CROSSBUILD_KEY 339
-#define EXPORT_KEY 340
-#define BUILD_KEY 341
-#define CONTEXT_KEY 342
-#define ELLIPSIS_KEY 343
-#define GLOBALSET_KEY 344
-#define BITRANGE_KEY 345
-#define CHAR 346
-#define INTEGER 347
-#define INTB 348
-#define STRING 349
-#define SYMBOLSTRING 350
-#define SPACESYM 351
-#define SECTIONSYM 352
-#define TOKENSYM 353
-#define USEROPSYM 354
-#define VALUESYM 355
-#define VALUEMAPSYM 356
-#define CONTEXTSYM 357
-#define NAMESYM 358
-#define VARSYM 359
-#define BITSYM 360
-#define SPECSYM 361
-#define VARLISTSYM 362
-#define OPERANDSYM 363
-#define STARTSYM 364
-#define ENDSYM 365
-#define NEXT2SYM 366
-#define MACROSYM 367
-#define LABELSYM 368
-#define SUBTABLESYM 369
+#define OCT_KEY 327
+#define BIN_KEY 328
+#define BIG_KEY 329
+#define LITTLE_KEY 330
+#define SIZE_KEY 331
+#define WORDSIZE_KEY 332
+#define OFFSET_KEY 333
+#define NAMES_KEY 334
+#define VALUES_KEY 335
+#define VARIABLES_KEY 336
+#define PCODEOP_KEY 337
+#define IS_KEY 338
+#define LOCAL_KEY 339
+#define DELAYSLOT_KEY 340
+#define CROSSBUILD_KEY 341
+#define EXPORT_KEY 342
+#define BUILD_KEY 343
+#define CONTEXT_KEY 344
+#define ELLIPSIS_KEY 345
+#define GLOBALSET_KEY 346
+#define BITRANGE_KEY 347
+#define CHAR 348
+#define INTEGER 349
+#define INTB 350
+#define STRING 351
+#define SYMBOLSTRING 352
+#define SPACESYM 353
+#define SECTIONSYM 354
+#define TOKENSYM 355
+#define USEROPSYM 356
+#define VALUESYM 357
+#define VALUEMAPSYM 358
+#define CONTEXTSYM 359
+#define NAMESYM 360
+#define VARSYM 361
+#define BITSYM 362
+#define SPECSYM 363
+#define VARLISTSYM 364
+#define OPERANDSYM 365
+#define STARTSYM 366
+#define ENDSYM 367
+#define NEXT2SYM 368
+#define MACROSYM 369
+#define LABELSYM 370
+#define SUBTABLESYM 371
 
 /* Value type.  */
 #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.y b/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.y
index b3fedb7b6..aae36de32 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.y
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghparse.y
@@ -99,7 +99,7 @@
 %token BADINTEGER GOTO_KEY CALL_KEY RETURN_KEY IF_KEY
 %token DEFINE_KEY ATTACH_KEY MACRO_KEY SPACE_KEY TYPE_KEY RAM_KEY DEFAULT_KEY
 %token REGISTER_KEY ENDIAN_KEY WITH_KEY ALIGN_KEY OP_UNIMPL
-%token TOKEN_KEY SIGNED_KEY NOFLOW_KEY HEX_KEY DEC_KEY BIG_KEY LITTLE_KEY
+%token TOKEN_KEY SIGNED_KEY NOFLOW_KEY HEX_KEY DEC_KEY OCT_KEY BIN_KEY BIG_KEY LITTLE_KEY
 %token SIZE_KEY WORDSIZE_KEY OFFSET_KEY NAMES_KEY VALUES_KEY VARIABLES_KEY PCODEOP_KEY IS_KEY LOCAL_KEY
 %token DELAYSLOT_KEY CROSSBUILD_KEY EXPORT_KEY BUILD_KEY CONTEXT_KEY ELLIPSIS_KEY GLOBALSET_KEY BITRANGE_KEY
 
@@ -198,15 +198,19 @@ contextprop: DEFINE_KEY CONTEXT_KEY VARSYM { $$ = $3; }
 fielddef: STRING '=' '(' INTEGER ',' INTEGER ')' { $$ = new FieldQuality($1,$4,$6); }
   | anysymbol '=' '(' INTEGER ',' INTEGER ')' { delete $4; delete $6; string errmsg = $1->getName()+": redefined as field"; yyerror(errmsg.c_str()); YYERROR; }
   | fielddef SIGNED_KEY			{ $$ = $1; $$->signext = true; }
-  | fielddef HEX_KEY			{ $$ = $1; $$->hex = true; }
-  | fielddef DEC_KEY			{ $$ = $1; $$->hex = false; }
+  | fielddef HEX_KEY			{ $$ = $1; $$->base = 16; }
+  | fielddef DEC_KEY			{ $$ = $1; $$->base = 10; }
+  | fielddef OCT_KEY			{ $$ = $1; $$->base = 8; }
+  | fielddef BIN_KEY			{ $$ = $1; $$->base = 2; }
   ;
 contextfielddef: STRING '=' '(' INTEGER ',' INTEGER ')' { $$ = new FieldQuality($1,$4,$6); }
   | anysymbol '=' '(' INTEGER ',' INTEGER ')' { delete $4; delete $6; string errmsg = $1->getName()+": redefined as field"; yyerror(errmsg.c_str()); YYERROR; }
   | contextfielddef SIGNED_KEY			{ $$ = $1; $$->signext = true; }
   | contextfielddef NOFLOW_KEY			{ $$ = $1; $$->flow = false; }
-  | contextfielddef HEX_KEY			{ $$ = $1; $$->hex = true; }
-  | contextfielddef DEC_KEY			{ $$ = $1; $$->hex = false; }
+  | contextfielddef HEX_KEY			{ $$ = $1; $$->base = 16; }
+  | contextfielddef DEC_KEY			{ $$ = $1; $$->base = 10; }
+  | contextfielddef OCT_KEY			{ $$ = $1; $$->base = 8; }
+  | contextfielddef BIN_KEY			{ $$ = $1; $$->base = 2; }
   ;
 spacedef: spaceprop ';'			{ slgh->newSpace($1); }
   ;
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghpatexpress.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/slghpatexpress.cc
index 3b7534f09..f5237e16f 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghpatexpress.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghpatexpress.cc
@@ -556,7 +556,7 @@ static intb getContextBytes(ParserWalker &walker,int4 bytestart,int4 byteend)
   return res;
 }
 
-TokenField::TokenField(Token *tk,bool s,int4 bstart,int4 bend)
+TokenField::TokenField(Token *tk,bool s,int4 bstart,int4 bend,uint4 tbase)
 
 {
   tok = tk;
@@ -573,6 +573,7 @@ TokenField::TokenField(Token *tk,bool s,int4 bstart,int4 bend)
     byteend = bitend/8;
   }
   shift = bitstart % 8;
+  base = tbase;
 }
 
 intb TokenField::getValue(ParserWalker &walker) const
@@ -613,7 +614,8 @@ void TokenField::saveXml(ostream &s) const
   s << " bitend=\"" << bitend << "\"";
   s << " bytestart=\"" << bytestart << "\"";
   s << " byteend=\"" << byteend << "\"";
-  s << " shift=\"" << shift << "\"/>\n";
+  s << " shift=\"" << shift << "\"";
+  s << " base=\"" << base << "\"/>\n";
 }
 
 void TokenField::restoreXml(const Element *el,Translate *trans)
@@ -647,9 +649,14 @@ void TokenField::restoreXml(const Element *el,Translate *trans)
     s.unsetf(ios::dec | ios::hex | ios::oct);
     s >> shift;
   }
+  {
+    istringstream s(el->getAttributeValue("base"));
+    s.unsetf(ios::dec | ios::hex | ios::oct);
+    s >> base;
+  }
 }
 
-ContextField::ContextField(bool s,int4 sbit,int4 ebit)
+ContextField::ContextField(bool s,int4 sbit,int4 ebit,uint4 fbase)
 
 {
   signbit = s;
@@ -658,6 +665,7 @@ ContextField::ContextField(bool s,int4 sbit,int4 ebit)
   startbyte = startbit/8;
   endbyte = endbit/8;
   shift = 7 - (endbit%8);
+  base = fbase;
 }
 
 intb ContextField::getValue(ParserWalker &walker) const
@@ -691,7 +699,8 @@ void ContextField::saveXml(ostream &s) const
   s << " endbit=\"" << endbit << "\"";
   s << " startbyte=\"" << startbyte << "\"";
   s << " endbyte=\"" << endbyte << "\"";
-  s << " shift=\"" << shift << "\"/>\n";
+  s << " shift=\"" << shift << "\"";
+  s << " base=\"" << base << "\"/>\n";
 }
 
 void ContextField::restoreXml(const Element *el,Translate *trans)
@@ -723,6 +732,11 @@ void ContextField::restoreXml(const Element *el,Translate *trans)
     s.unsetf(ios::dec | ios::hex | ios::oct);
     s >> shift;
   }
+  {
+    istringstream s(el->getAttributeValue("base"));
+    s.unsetf(ios::dec | ios::hex | ios::oct);
+    s >> base;
+  }
 }
 
 void ConstantValue::saveXml(ostream &s) const
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghpatexpress.hh b/Ghidra/Features/Decompiler/src/decompile/cpp/slghpatexpress.hh
index 8c748c2ce..cc4ff2886 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghpatexpress.hh
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghpatexpress.hh
@@ -93,9 +93,10 @@ class TokenField : public PatternValue {
   int4 bitstart,bitend;		// Bits within the token, 0 bit is LEAST significant
   int4 bytestart,byteend;	// Bytes to read to get value
   int4 shift;			// Amount to shift to align value  (bitstart % 8)
+  uint4 base;			// The display base
 public:
   TokenField(void) {}		// For use with restoreXml
-  TokenField(Token *tk,bool s,int4 bstart,int4 bend);
+  TokenField(Token *tk,bool s,int4 bstart,int4 bend,uint4 tbase);
   virtual intb getValue(ParserWalker &walker) const;
   virtual TokenPattern genMinPattern(const vector<TokenPattern> &ops) const { return TokenPattern(tok); }
   virtual TokenPattern genPattern(intb val) const;
@@ -110,12 +111,14 @@ class ContextField : public PatternValue {
   int4 startbyte,endbyte;
   int4 shift;
   bool signbit;
+  uint4 base;
 public:
   ContextField(void) {}		// For use with restoreXml
-  ContextField(bool s,int4 sbit,int4 ebit);
+  ContextField(bool s,int4 sbit,int4 ebit,uint4 fbase);
   int4 getStartBit(void) const { return startbit; }
   int4 getEndBit(void) const { return endbit; }
   bool getSignBit(void) const { return signbit; }
+  uint4 getBase(void) const { return base; }
   virtual intb getValue(ParserWalker &walker) const;
   virtual TokenPattern genMinPattern(const vector<TokenPattern> &ops) const { return TokenPattern(); }
   virtual TokenPattern genPattern(intb val) const;
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.cc
index 78865a73b..816e9b7d8 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.cc
@@ -367,8 +367,8 @@ static void yynoreturn yy_fatal_error ( const char* msg  );
 		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
 	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
 	(yy_c_buf_p) = yy_cp;
-#define YY_NUM_RULES 164
-#define YY_END_OF_BUFFER 165
+#define YY_NUM_RULES 166
+#define YY_END_OF_BUFFER 167
 /* This struct is not used in this scanner,
    but its presence is necessary. */
 struct yy_trans_info
@@ -376,66 +376,66 @@ struct yy_trans_info
 	flex_int32_t yy_verify;
 	flex_int32_t yy_nxt;
 	};
-static const flex_int16_t yy_accept[527] =
+static const flex_int16_t yy_accept[530] =
     {   0,
         0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-        0,    0,    0,    0,  165,   14,    7,    8,    6,   14,
-        3,   13,    4,   13,   13,   13,   13,    5,    1,   58,
-       56,   57,   58,   50,   58,   25,   51,   52,   52,   26,
-       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
-       51,   51,   51,   51,   51,   23,   22,   20,   21,   22,
-       17,   19,   18,   15,   68,   66,   67,   61,   68,   61,
-       64,   62,   64,   59,   96,   94,   95,   96,   89,   96,
-       85,   88,   90,   91,   91,   88,   88,   90,   83,   84,
-       87,   90,   90,   71,   86,   69,  161,  159,  160,  153,
-
-      154,  161,  153,  153,  155,  156,  156,  153,  153,  153,
-      153,  155,  155,  155,  155,  155,  155,  155,  155,  155,
-      155,  155,  155,  155,  155,  155,  153,   99,   97,  164,
-      164,  163,  162,    7,    6,    0,   13,   13,   13,   13,
-       13,    1,    1,   56,    0,   55,   50,    0,   51,    0,
-        0,   52,   51,   51,   51,   51,   51,   51,   51,   51,
-       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
-       51,   23,   23,   20,    0,   19,   15,   15,   66,    0,
-       65,    0,   64,   63,   59,   59,   94,   76,   89,    0,
-        0,    0,    0,   90,   90,    0,    0,   91,   75,   77,
-
-       78,   74,   90,   90,   69,   69,  159,  106,  154,    0,
-      101,  155,    0,    0,  156,  104,  107,  105,  108,  103,
-      102,  155,  155,  155,  155,  155,  155,  155,  155,  155,
-        0,  118,  116,  117,  119,  122,    0,  123,  155,  155,
-      144,  155,  155,  155,  155,  155,  155,  155,  110,  109,
-      112,  113,  155,  155,  155,  155,  155,  155,  100,   97,
-       97,    0,  163,  162,  162,    0,   13,   13,   13,   13,
-        0,   54,   53,   51,   41,   51,   51,   38,   51,   51,
-       37,   51,   51,   51,   51,   51,   51,   51,   51,   51,
-       51,   51,   51,   51,   51,   51,    0,    0,    0,    0,
-
-       80,    0,   82,   93,   92,   90,   90,    0,  158,  157,
-      133,  155,  155,  155,  155,  155,  155,  155,  155,  155,
-      121,  124,  120,  125,  155,  155,  155,  155,  132,  155,
-      155,  155,  155,  114,  115,  111,  155,  155,  155,  155,
-      155,  155,    2,    0,   13,   13,   13,   12,   24,    0,
-       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
-       51,   51,   51,   43,   51,   51,   28,   51,   51,   51,
-       16,    0,   60,    0,   70,    0,   79,   81,   90,   90,
-       98,    0,  155,  155,  146,  155,  135,  155,  155,  155,
-      155,  155,  155,  145,  155,  155,  155,  155,  155,  155,
-
-      155,  155,  129,  134,  155,  126,   13,   13,    9,   51,
-       51,   51,   51,   51,   51,   46,   51,   51,   51,   51,
-       51,   51,   27,   32,   51,   51,   51,   90,   90,  155,
-      151,  127,  141,  155,  155,  155,  155,  136,  155,  152,
-      155,  155,  155,  137,  155,  155,  140,   11,   10,   51,
-       51,   51,   51,   39,   42,   36,   45,   51,   51,   51,
-       35,   47,   51,   51,   90,   72,  128,  155,  155,  150,
-      155,  155,  155,  155,  147,  155,  130,   51,   51,   33,
-       30,   49,   51,   51,   51,   51,   90,  155,  155,  155,
-      155,  155,  155,  131,   51,   34,   51,   51,   51,   44,
-
-       90,  155,  155,  155,  155,  155,  143,   40,   29,   51,
-       48,   73,  155,  148,  155,  138,  142,   51,  149,  155,
-       51,  139,   51,   51,   31,    0
+        0,    0,    0,    0,  167,   14,    7,    8,    6,   14,
+        3,   13,    4,   13,   13,   13,   13,    5,    1,   60,
+       58,   59,   60,   52,   60,   25,   53,   54,   54,   26,
+       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
+       53,   53,   53,   53,   53,   23,   22,   20,   21,   22,
+       17,   19,   18,   15,   70,   68,   69,   63,   70,   63,
+       66,   64,   66,   61,   98,   96,   97,   98,   91,   98,
+       87,   90,   92,   93,   93,   90,   90,   92,   85,   86,
+       89,   92,   92,   73,   88,   71,  163,  161,  162,  155,
+
+      156,  163,  155,  155,  157,  158,  158,  155,  155,  155,
+      155,  157,  157,  157,  157,  157,  157,  157,  157,  157,
+      157,  157,  157,  157,  157,  157,  155,  101,   99,  166,
+      166,  165,  164,    7,    6,    0,   13,   13,   13,   13,
+       13,    1,    1,   58,    0,   57,   52,    0,   53,    0,
+        0,   54,   53,   53,   53,   53,   53,   53,   53,   53,
+       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
+       53,   53,   23,   23,   20,    0,   19,   15,   15,   68,
+        0,   67,    0,   66,   65,   61,   61,   96,   78,   91,
+        0,    0,    0,    0,   92,   92,    0,    0,   93,   77,
+
+       79,   80,   76,   92,   92,   71,   71,  161,  108,  156,
+        0,  103,  157,    0,    0,  158,  106,  109,  107,  110,
+      105,  104,  157,  157,  157,  157,  157,  157,  157,  157,
+      157,    0,  120,  118,  119,  121,  124,    0,  125,  157,
+      157,  146,  157,  157,  157,  157,  157,  157,  157,  112,
+      111,  114,  115,  157,  157,  157,  157,  157,  157,  102,
+       99,   99,    0,  165,  164,  164,    0,   13,   13,   13,
+       13,    0,   56,   55,   53,   43,   40,   53,   53,   38,
+       53,   53,   37,   53,   53,   53,   39,   53,   53,   53,
+       53,   53,   53,   53,   53,   53,   53,   53,   53,    0,
+
+        0,    0,    0,   82,    0,   84,   95,   94,   92,   92,
+        0,  160,  159,  135,  157,  157,  157,  157,  157,  157,
+      157,  157,  157,  123,  126,  122,  127,  157,  157,  157,
+      157,  134,  157,  157,  157,  157,  116,  117,  113,  157,
+      157,  157,  157,  157,  157,    2,    0,   13,   13,   13,
+       12,   24,    0,   53,   53,   53,   53,   53,   53,   53,
+       53,   53,   53,   53,   53,   53,   45,   53,   53,   28,
+       53,   53,   53,   16,    0,   62,    0,   72,    0,   81,
+       83,   92,   92,  100,    0,  157,  157,  148,  157,  137,
+      157,  157,  157,  157,  157,  157,  147,  157,  157,  157,
+
+      157,  157,  157,  157,  157,  131,  136,  157,  128,   13,
+       13,    9,   53,   53,   53,   53,   53,   53,   48,   53,
+       53,   53,   53,   53,   53,   27,   32,   53,   53,   53,
+       92,   92,  157,  153,  129,  143,  157,  157,  157,  157,
+      138,  157,  154,  157,  157,  157,  139,  157,  157,  142,
+       11,   10,   53,   53,   53,   53,   41,   44,   36,   47,
+       53,   53,   53,   35,   49,   53,   53,   92,   74,  130,
+      157,  157,  152,  157,  157,  157,  157,  149,  157,  132,
+       53,   53,   33,   30,   51,   53,   53,   53,   53,   92,
+      157,  157,  157,  157,  157,  157,  133,   53,   34,   53,
+
+       53,   53,   46,   92,  157,  157,  157,  157,  157,  145,
+       42,   29,   53,   50,   75,  157,  150,  157,  140,  144,
+       53,  151,  157,   53,  141,   53,   53,   31,    0
     } ;
 
 static const YY_CHAR yy_ec[256] =
@@ -481,139 +481,139 @@ static const YY_CHAR yy_meta[67] =
         5,    5,    3,    3,    3,    3
     } ;
 
-static const flex_int16_t yy_base[564] =
+static const flex_int16_t yy_base[567] =
     {   0,
-        0,  931,   66,  930,  132,  929,  198,  928,  264,  927,
-      330,  926,    0,  394,  955,  962,  396,  962,    0,  942,
-      962,    0,  962,  897,  911,  914,  905,  962,  946,  962,
-      397,  962,  942,    0,  935,  962,    0,  365,  384,  962,
-      898,  900,  893,  902,  892,  900,  895,  365,  897,  899,
-      371,  365,  358,  900,  885,  932,  962,  409,  962,  922,
-      962,    0,  962,  930,  962,  416,  962,  962,  926,  919,
-        0,  962,  875,  926,  962,  419,  962,  901,    0,  402,
-      962,  962,  909,  377,  406,  404,  405,    0,  962,  962,
-      962,  878,  875,  962,  962,  921,  962,  432,  962,  896,
-
-        0,  910,  962,  911,    0,  384,  420,  419,  893,  420,
-      884,  880,  398,  413,  876,  856,  454,  864,  410,  863,
-      420,  862,  415,  465,  858,  870,  846,  962,  906,  962,
-      905,  962,  904,  468,    0,    0,    0,  850,  863,  865,
-      847,  899,  962,  473,  895,  894,    0,    0,    0,  443,
-        0,  465,  854,  395,  848,  437,  857,  836,  839,  845,
-      851,  850,  840,  841,  846,  435,  851,  840,  834,  435,
-      831,  881,  962,  488,    0,    0,  880,  962,  492,  876,
-      875,    0,    0,    0,  877,  962,  496,  962,    0,    0,
-      829,  824,  826,  858,    0,  487,    0,  489,  962,  962,
-
-      962,  962,  824,  829,  870,  962,  497,  962,    0,    0,
-      962,    0,  493,    0,  499,  962,  962,  962,  962,  962,
-      962,  817,  817,  825,  469,  824,  817,  816,  818,  813,
-      837,  962,  962,  962,  962,  836,  835,  834,  809,  803,
-        0,  802,  818,  806,  796,  802,  797,  795,  962,  962,
-      824,  488,  799,  812,  788,  793,  789,  785,  962,  841,
-      962,  840,  962,  839,  962,  828,  803,  794,  784,  793,
-      823,  504,    0,  792,    0,  780,  777,    0,  795,  786,
-        0,  774,  788,  780,  772,  786,  789,  779,  773,  781,
-      782,  779,  778,  761,  772,  776,  802,  801,  800,  772,
-
-      962,  757,    0,  506,    0,  772,  760,  795,  508,    0,
-        0,  753,  758,  757,  750,  755,  751,  746,  763,  748,
-      962,  962,  962,  962,  493,  747,  775,  759,    0,  744,
-      755,  736,  742,  962,  962,  962,  737,  736,  733,  732,
-      737,  730,  962,  772,  745,  733,  731,    0,  962,  768,
-      730,  742,  737,  720,  739,  727,  719,  722,  731,  730,
-      715,  714,  727,    0,  726,  716,    0,  724,  727,  708,
-      962,  749,  962,  748,  962,  747,  962,  962,  722,  706,
-      962,  744,  705,  715,    0,  693,    0,  705,  697,  690,
-      696,  693,  694,    0,  705,  698,  707,  693,  689,  702,
-
-      687,  686,    0,    0,  700,    0,  694,  696,    0,  687,
-      685,  674,  685,  682,  690,    0,  671,  673,  677,  675,
-      670,  685,    0,    0,  669,  685,  677,  673,  672,  660,
-        0,    0,    0,  680,  662,  660,  693,    0,  666,    0,
-      667,  655,  661,    0,  659,  648,    0,    0,    0,  667,
-      664,  650,  649,    0,    0,    0,    0,  652,  666,  661,
-        0,    0,  653,  638,  644,    0,    0,  641,  649,    0,
-      654,  644,  653,  643,    0,  633,    0,  641,  649,    0,
-        0,    0,  650,  634,  646,  645,  644,  639,  632,  634,
-      644,  641,  623,    0,  568,    0,  569,  540,  503,    0,
-
-      487,  494,  485,  489,  483,  482,    0,    0,    0,  482,
-        0,    0,  496,    0,  498,    0,    0,  482,    0,  477,
-      495,    0,  492,  464,    0,  962,  544,  550,  556,  558,
-      564,  568,  574,  576,  582,  584,  590,  594,  596,  602,
-      608,  610,  616,  622,  624,  630,  636,  642,  644,  646,
-      489,  648,  650,  652,  452,  654,  429,  657,  660,  663,
-      666,  669,  672
+        0,  934,   66,  933,  132,  932,  198,  931,  264,  930,
+      330,  929,    0,  394,  958,  965,  396,  965,    0,  945,
+      965,    0,  965,  900,  914,  917,  908,  965,  949,  965,
+      397,  965,  945,    0,  938,  965,    0,  365,  384,  965,
+      901,  903,  896,  905,  895,  903,  898,  365,  369,  903,
+      372,  365,  361,  904,  889,  936,  965,  416,  965,  926,
+      965,    0,  965,  934,  965,  417,  965,  965,  930,  923,
+        0,  965,  879,  930,  965,  424,  965,  905,    0,  402,
+      965,  965,  913,  377,  409,  407,  408,    0,  965,  965,
+      965,  882,  879,  965,  965,  925,  965,  436,  965,  900,
+
+        0,  914,  965,  915,    0,  385,  421,  420,  897,  421,
+      888,  884,  399,  414,  880,  860,  455,  868,  415,  867,
+      417,  866,  420,  458,  862,  874,  850,  965,  910,  965,
+      909,  965,  908,  471,    0,    0,    0,  854,  867,  869,
+      851,  903,  965,  474,  899,  898,    0,    0,    0,  443,
+        0,  467,  858,  442,  852,  452,  861,  840,  843,  849,
+      855,  840,  853,  843,  844,  849,  450,  854,  843,  837,
+      447,  834,  884,  965,  498,    0,    0,  883,  965,  502,
+      879,  878,    0,    0,    0,  880,  965,  503,  965,    0,
+        0,  832,  827,  829,  861,    0,  459,    0,  493,  965,
+
+      965,  965,  965,  827,  832,  873,  965,  506,  965,    0,
+        0,  965,    0,  497,    0,  499,  965,  965,  965,  965,
+      965,  965,  820,  820,  828,  475,  827,  820,  819,  821,
+      816,  840,  965,  965,  965,  965,  839,  838,  837,  812,
+      806,    0,  805,  821,  809,  799,  805,  800,  798,  965,
+      965,  827,  497,  802,  815,  791,  796,  792,  788,  965,
+      844,  965,  843,  965,  842,  965,  831,  806,  797,  787,
+      796,  826,  506,    0,  795,    0,    0,  783,  780,    0,
+      798,  789,    0,  777,  791,  783,    0,  775,  789,  792,
+      782,  776,  784,  785,  782,  781,  764,  775,  779,  805,
+
+      804,  803,  775,  965,  760,    0,  510,    0,  775,  763,
+      798,  512,    0,    0,  756,  761,  760,  753,  758,  754,
+      749,  766,  751,  965,  965,  965,  965,  491,  750,  778,
+      762,    0,  747,  758,  739,  745,  965,  965,  965,  740,
+      739,  736,  735,  740,  733,  965,  775,  748,  736,  734,
+        0,  965,  771,  733,  745,  740,  723,  742,  730,  722,
+      725,  734,  733,  718,  717,  730,    0,  729,  719,    0,
+      727,  730,  711,  965,  752,  965,  751,  965,  750,  965,
+      965,  725,  709,  965,  747,  708,  718,    0,  696,    0,
+      708,  700,  693,  699,  696,  697,    0,  708,  701,  710,
+
+      696,  692,  705,  690,  689,    0,    0,  703,    0,  697,
+      699,    0,  690,  688,  677,  688,  685,  693,    0,  674,
+      676,  680,  678,  673,  688,    0,    0,  672,  688,  680,
+      676,  675,  663,    0,    0,    0,  683,  665,  663,  696,
+        0,  669,    0,  670,  658,  664,    0,  662,  651,    0,
+        0,    0,  670,  667,  653,  652,    0,    0,    0,    0,
+      655,  669,  664,    0,    0,  656,  641,  647,    0,    0,
+      644,  652,    0,  657,  647,  656,  646,    0,  636,    0,
+      644,  652,    0,    0,    0,  653,  637,  649,  648,  647,
+      642,  635,  637,  647,  644,  626,    0,  625,    0,  639,
+
+      643,  623,    0,  621,  574,  552,  523,  500,  485,    0,
+        0,    0,  485,    0,    0,  499,    0,  501,    0,    0,
+      485,    0,  480,  498,    0,  495,  468,    0,  965,  542,
+      548,  554,  556,  562,  566,  572,  574,  580,  582,  588,
+      592,  594,  600,  606,  608,  614,  620,  622,  628,  634,
+      640,  642,  644,  453,  646,  648,  650,  446,  652,  421,
+      655,  658,  661,  664,  667,  670
     } ;
 
-static const flex_int16_t yy_def[564] =
+static const flex_int16_t yy_def[567] =
     {   0,
-      526,    1,  526,    3,  526,    5,  526,    7,  526,    9,
-      526,   11,  527,  528,  526,  526,  526,  526,  529,  526,
-      526,  530,  526,  530,  530,  530,  530,  526,  531,  526,
-      526,  526,  532,  533,  526,  526,  534,  526,  526,  526,
-      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
-      534,  534,  534,  534,  534,  535,  526,  526,  526,  526,
-      526,  536,  526,  537,  526,  526,  526,  526,  538,  526,
-      539,  526,  539,  540,  526,  526,  526,  526,  541,  526,
-      526,  526,  542,  526,  526,  526,  526,  542,  526,  526,
-      526,  542,  542,  526,  526,  543,  526,  526,  526,  526,
-
-      544,  526,  526,  526,  545,  526,  526,  526,  526,  526,
-      526,  545,  545,  545,  545,  545,  545,  545,  545,  545,
-      545,  545,  545,  545,  545,  545,  526,  526,  546,  526,
-      547,  526,  548,  526,  529,  549,  530,  530,  530,  530,
-      530,  531,  526,  526,  532,  526,  533,  550,  534,  526,
-      551,  526,  534,  534,  534,  534,  534,  534,  534,  534,
-      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
-      534,  535,  526,  526,  552,  536,  537,  526,  526,  538,
-      526,  553,  539,  539,  540,  526,  526,  526,  541,  554,
-      526,  526,  526,  542,  542,  526,  555,  526,  526,  526,
-
-      526,  526,  542,  542,  543,  526,  526,  526,  544,  556,
-      526,  545,  526,  557,  526,  526,  526,  526,  526,  526,
-      526,  545,  545,  545,  545,  545,  545,  545,  545,  545,
-      526,  526,  526,  526,  526,  526,  526,  526,  545,  545,
-      545,  545,  545,  545,  545,  545,  545,  545,  526,  526,
-      526,  526,  545,  545,  545,  545,  545,  545,  526,  546,
-      526,  547,  526,  548,  526,  558,  530,  530,  530,  530,
-      559,  526,  551,  534,  534,  534,  534,  534,  534,  534,
-      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
-      534,  534,  534,  534,  534,  534,  560,  561,  562,  526,
-
-      526,  526,  542,  526,  555,  542,  542,  563,  526,  557,
-      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
-      526,  526,  526,  526,  545,  545,  545,  545,  545,  545,
-      545,  545,  545,  526,  526,  526,  545,  545,  545,  545,
-      545,  545,  526,  558,  530,  530,  530,  530,  526,  559,
-      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
-      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
-      526,  560,  526,  561,  526,  562,  526,  526,  542,  542,
-      526,  563,  545,  545,  545,  545,  545,  545,  545,  545,
-      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
-
-      545,  545,  545,  545,  545,  545,  530,  530,  530,  534,
-      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
-      534,  534,  534,  534,  534,  534,  534,  542,  542,  545,
-      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
-      545,  545,  545,  545,  545,  545,  545,  530,  530,  534,
-      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
-      534,  534,  534,  534,  542,  542,  545,  545,  545,  545,
-      545,  545,  545,  545,  545,  545,  545,  534,  534,  534,
-      534,  534,  534,  534,  534,  534,  542,  545,  545,  545,
-      545,  545,  545,  545,  534,  534,  534,  534,  534,  534,
-
-      542,  545,  545,  545,  545,  545,  545,  534,  534,  534,
-      534,  542,  545,  545,  545,  545,  545,  534,  545,  545,
-      534,  545,  534,  534,  534,    0,  526,  526,  526,  526,
-      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
-      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
-      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
-      526,  526,  526
+      529,    1,  529,    3,  529,    5,  529,    7,  529,    9,
+      529,   11,  530,  531,  529,  529,  529,  529,  532,  529,
+      529,  533,  529,  533,  533,  533,  533,  529,  534,  529,
+      529,  529,  535,  536,  529,  529,  537,  529,  529,  529,
+      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
+      537,  537,  537,  537,  537,  538,  529,  529,  529,  529,
+      529,  539,  529,  540,  529,  529,  529,  529,  541,  529,
+      542,  529,  542,  543,  529,  529,  529,  529,  544,  529,
+      529,  529,  545,  529,  529,  529,  529,  545,  529,  529,
+      529,  545,  545,  529,  529,  546,  529,  529,  529,  529,
+
+      547,  529,  529,  529,  548,  529,  529,  529,  529,  529,
+      529,  548,  548,  548,  548,  548,  548,  548,  548,  548,
+      548,  548,  548,  548,  548,  548,  529,  529,  549,  529,
+      550,  529,  551,  529,  532,  552,  533,  533,  533,  533,
+      533,  534,  529,  529,  535,  529,  536,  553,  537,  529,
+      554,  529,  537,  537,  537,  537,  537,  537,  537,  537,
+      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
+      537,  537,  538,  529,  529,  555,  539,  540,  529,  529,
+      541,  529,  556,  542,  542,  543,  529,  529,  529,  544,
+      557,  529,  529,  529,  545,  545,  529,  558,  529,  529,
+
+      529,  529,  529,  545,  545,  546,  529,  529,  529,  547,
+      559,  529,  548,  529,  560,  529,  529,  529,  529,  529,
+      529,  529,  548,  548,  548,  548,  548,  548,  548,  548,
+      548,  529,  529,  529,  529,  529,  529,  529,  529,  548,
+      548,  548,  548,  548,  548,  548,  548,  548,  548,  529,
+      529,  529,  529,  548,  548,  548,  548,  548,  548,  529,
+      549,  529,  550,  529,  551,  529,  561,  533,  533,  533,
+      533,  562,  529,  554,  537,  537,  537,  537,  537,  537,
+      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
+      537,  537,  537,  537,  537,  537,  537,  537,  537,  563,
+
+      564,  565,  529,  529,  529,  545,  529,  558,  545,  545,
+      566,  529,  560,  548,  548,  548,  548,  548,  548,  548,
+      548,  548,  548,  529,  529,  529,  529,  548,  548,  548,
+      548,  548,  548,  548,  548,  548,  529,  529,  529,  548,
+      548,  548,  548,  548,  548,  529,  561,  533,  533,  533,
+      533,  529,  562,  537,  537,  537,  537,  537,  537,  537,
+      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
+      537,  537,  537,  529,  563,  529,  564,  529,  565,  529,
+      529,  545,  545,  529,  566,  548,  548,  548,  548,  548,
+      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
+
+      548,  548,  548,  548,  548,  548,  548,  548,  548,  533,
+      533,  533,  537,  537,  537,  537,  537,  537,  537,  537,
+      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
+      545,  545,  548,  548,  548,  548,  548,  548,  548,  548,
+      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
+      533,  533,  537,  537,  537,  537,  537,  537,  537,  537,
+      537,  537,  537,  537,  537,  537,  537,  545,  545,  548,
+      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
+      537,  537,  537,  537,  537,  537,  537,  537,  537,  545,
+      548,  548,  548,  548,  548,  548,  548,  537,  537,  537,
+
+      537,  537,  537,  545,  548,  548,  548,  548,  548,  548,
+      537,  537,  537,  537,  545,  548,  548,  548,  548,  548,
+      537,  548,  548,  537,  548,  537,  537,  537,    0,  529,
+      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
+      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
+      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
+      529,  529,  529,  529,  529,  529
     } ;
 
-static const flex_int16_t yy_nxt[1029] =
+static const flex_int16_t yy_nxt[1032] =
     {   0,
        16,   17,   18,   17,   16,   16,   19,   20,   16,   16,
        16,   21,   21,   16,   16,   21,   21,   22,   16,   16,
@@ -659,78 +659,79 @@ static const flex_int16_t yy_nxt[1029] =
       105,  122,  105,  123,  124,  125,  105,  105,  105,  105,
       105,  126,   97,  127,  128,  103,  132,  134,  144,  134,
 
-      144,  160,  150,  152,  152,  152,  152,  164,  168,  166,
-      174,  165,  174,  190,  196,  161,  167,  179,  169,  179,
-      187,  213,  187,  133,  151,  198,  198,  198,  198,  199,
-      200,  201,  202,  207,  310,  207,  197,  275,  191,  215,
-      215,  215,  215,  214,  216,  217,  219,  220,  223,  225,
-      276,  241,  192,  226,  224,  247,  244,  305,  231,  242,
-      245,  193,  272,  272,  227,  248,  228,  232,  233,  134,
-      234,  134,  235,  249,  144,  278,  144,  289,  279,  236,
-      237,  238,  294,  250,  152,  152,  152,  152,  295,  174,
-      251,  174,  252,  179,  273,  179,  290,  187,  207,  187,
-
-      207,  239,  253,  254,  525,  255,  304,  304,  198,  198,
-      198,  198,  309,  309,  335,  336,  314,  256,  215,  215,
-      215,  215,  315,  272,  272,  304,  304,  309,  309,  392,
-      524,  523,  522,  521,  520,  519,  518,  517,  516,  515,
-      514,  513,  512,  393,  130,  130,  130,  130,  130,  130,
-      131,  131,  131,  131,  131,  131,  135,  511,  135,  135,
-      135,  135,  137,  137,  142,  142,  142,  142,  142,  142,
-      145,  145,  145,  145,  147,  510,  147,  147,  147,  147,
-      149,  149,  172,  172,  172,  172,  172,  172,  176,  176,
-      177,  177,  177,  177,  177,  177,  180,  180,  180,  180,
-
-      183,  183,  185,  185,  185,  185,  185,  185,  189,  509,
-      189,  189,  189,  189,  195,  195,  205,  205,  205,  205,
-      205,  205,  209,  508,  209,  209,  209,  209,  212,  212,
-      260,  260,  260,  260,  260,  260,  262,  262,  262,  262,
-      262,  262,  264,  264,  264,  264,  264,  264,  266,  266,
-      271,  271,  297,  297,  298,  298,  299,  299,  308,  308,
-      344,  344,  344,  350,  350,  350,  372,  372,  372,  374,
-      374,  374,  376,  376,  376,  382,  382,  382,  507,  506,
-      505,  504,  503,  502,  501,  500,  499,  498,  497,  496,
-      495,  494,  493,  492,  491,  490,  489,  488,  487,  486,
-
-      485,  484,  483,  482,  481,  480,  479,  478,  477,  476,
-      475,  474,  473,  472,  471,  470,  469,  468,  467,  466,
-      465,  464,  463,  462,  461,  460,  459,  458,  457,  456,
-      455,  454,  453,  452,  451,  450,  449,  448,  447,  446,
-      445,  444,  443,  442,  441,  440,  439,  438,  437,  436,
-      435,  434,  433,  432,  431,  430,  381,  429,  428,  375,
-      373,  371,  427,  426,  425,  424,  423,  422,  421,  420,
-      419,  418,  417,  416,  415,  414,  413,  412,  411,  410,
-      349,  409,  408,  407,  343,  406,  405,  404,  403,  402,
-      401,  400,  399,  398,  397,  396,  395,  394,  391,  390,
-
-      389,  388,  387,  386,  385,  384,  383,  381,  380,  379,
-      378,  377,  375,  373,  371,  370,  369,  368,  367,  366,
-      365,  364,  363,  362,  361,  360,  359,  358,  357,  356,
-      355,  354,  353,  352,  351,  349,  348,  347,  346,  345,
-      343,  265,  263,  261,  342,  341,  340,  339,  338,  337,
-      334,  333,  332,  331,  330,  329,  328,  327,  326,  325,
-      324,  323,  322,  321,  320,  319,  318,  317,  316,  313,
-      312,  311,  206,  307,  306,  303,  302,  301,  300,  186,
-      180,  181,  178,  173,  296,  293,  292,  291,  288,  287,
-      286,  285,  284,  283,  282,  281,  280,  277,  274,  145,
-
-      146,  143,  270,  269,  268,  267,  265,  263,  261,  259,
-      258,  257,  246,  243,  240,  230,  229,  222,  221,  218,
-      211,  210,  208,  206,  204,  203,  194,  188,  186,  184,
-      182,  181,  178,  175,  173,  171,  170,  163,  162,  159,
-      158,  157,  156,  155,  154,  153,  148,  146,  143,  141,
-      140,  139,  138,  136,  526,  129,   96,   74,   64,   56,
-       29,   15,  526,  526,  526,  526,  526,  526,  526,  526,
-      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
-      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
-      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
-
-      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
-      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
-      526,  526,  526,  526,  526,  526,  526,  526
+      144,  160,  150,  152,  152,  152,  152,  162,  165,  167,
+      163,  169,  166,  191,  197,  161,  168,  175,  180,  175,
+      180,  170,  214,  133,  151,  188,  313,  188,  199,  199,
+      199,  199,  200,  201,  202,  203,  198,  208,  192,  208,
+      216,  216,  216,  216,  215,  217,  218,  220,  221,  224,
+      226,  308,  193,  245,  227,  225,  242,  246,  274,  232,
+      248,  194,  273,  273,  243,  228,  250,  229,  233,  234,
+      249,  235,  134,  236,  134,  144,  251,  144,  307,  307,
+      237,  238,  239,  252,  276,  253,  152,  152,  152,  152,
+      280,  277,  292,  281,  297,  254,  255,  278,  256,  175,
+
+      298,  175,  240,  180,  188,  180,  188,  208,  528,  208,
+      257,  293,  199,  199,  199,  199,  312,  312,  216,  216,
+      216,  216,  317,  338,  339,  273,  273,  395,  318,  307,
+      307,  312,  312,  527,  526,  525,  524,  523,  522,  521,
+      520,  396,  130,  130,  130,  130,  130,  130,  131,  131,
+      131,  131,  131,  131,  135,  519,  135,  135,  135,  135,
+      137,  137,  142,  142,  142,  142,  142,  142,  145,  145,
+      145,  145,  147,  518,  147,  147,  147,  147,  149,  149,
+      173,  173,  173,  173,  173,  173,  177,  177,  178,  178,
+      178,  178,  178,  178,  181,  181,  181,  181,  184,  184,
+
+      186,  186,  186,  186,  186,  186,  190,  517,  190,  190,
+      190,  190,  196,  196,  206,  206,  206,  206,  206,  206,
+      210,  516,  210,  210,  210,  210,  213,  213,  261,  261,
+      261,  261,  261,  261,  263,  263,  263,  263,  263,  263,
+      265,  265,  265,  265,  265,  265,  267,  267,  272,  272,
+      300,  300,  301,  301,  302,  302,  311,  311,  347,  347,
+      347,  353,  353,  353,  375,  375,  375,  377,  377,  377,
+      379,  379,  379,  385,  385,  385,  515,  514,  513,  512,
+      511,  510,  509,  508,  507,  506,  505,  504,  503,  502,
+      501,  500,  499,  498,  497,  496,  495,  494,  493,  492,
+
+      491,  490,  489,  488,  487,  486,  485,  484,  483,  482,
+      481,  480,  479,  478,  477,  476,  475,  474,  473,  472,
+      471,  470,  469,  468,  467,  466,  465,  464,  463,  462,
+      461,  460,  459,  458,  457,  456,  455,  454,  453,  452,
+      451,  450,  449,  448,  447,  446,  445,  444,  443,  442,
+      441,  440,  439,  438,  437,  436,  435,  434,  433,  384,
+      432,  431,  378,  376,  374,  430,  429,  428,  427,  426,
+      425,  424,  423,  422,  421,  420,  419,  418,  417,  416,
+      415,  414,  413,  352,  412,  411,  410,  346,  409,  408,
+      407,  406,  405,  404,  403,  402,  401,  400,  399,  398,
+
+      397,  394,  393,  392,  391,  390,  389,  388,  387,  386,
+      384,  383,  382,  381,  380,  378,  376,  374,  373,  372,
+      371,  370,  369,  368,  367,  366,  365,  364,  363,  362,
+      361,  360,  359,  358,  357,  356,  355,  354,  352,  351,
+      350,  349,  348,  346,  266,  264,  262,  345,  344,  343,
+      342,  341,  340,  337,  336,  335,  334,  333,  332,  331,
+      330,  329,  328,  327,  326,  325,  324,  323,  322,  321,
+      320,  319,  316,  315,  314,  207,  310,  309,  306,  305,
+      304,  303,  187,  181,  182,  179,  174,  299,  296,  295,
+      294,  291,  290,  289,  288,  287,  286,  285,  284,  283,
+
+      282,  279,  275,  145,  146,  143,  271,  270,  269,  268,
+      266,  264,  262,  260,  259,  258,  247,  244,  241,  231,
+      230,  223,  222,  219,  212,  211,  209,  207,  205,  204,
+      195,  189,  187,  185,  183,  182,  179,  176,  174,  172,
+      171,  164,  159,  158,  157,  156,  155,  154,  153,  148,
+      146,  143,  141,  140,  139,  138,  136,  529,  129,   96,
+       74,   64,   56,   29,   15,  529,  529,  529,  529,  529,
+      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
+      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
+      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
+
+      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
+      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
+      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
+      529
     } ;
 
-static const flex_int16_t yy_chk[1029] =
+static const flex_int16_t yy_chk[1032] =
     {   0,
         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
@@ -776,89 +777,90 @@ static const flex_int16_t yy_chk[1029] =
        11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
        11,   11,   11,   11,   11,   11,   14,   17,   31,   17,
 
-       31,   48,   38,   39,   39,   39,   39,   51,   53,   52,
-       58,   51,   58,   80,   84,   48,   52,   66,   53,   66,
-       76,  106,   76,   14,   38,   85,   85,   85,   85,   86,
-       86,   87,   87,   98,  557,   98,   84,  154,   80,  107,
-      107,  107,  107,  106,  108,  108,  110,  110,  113,  114,
-      154,  119,   80,  114,  113,  123,  121,  555,  117,  119,
-      121,   80,  150,  150,  114,  123,  114,  117,  117,  134,
-      117,  134,  117,  124,  144,  156,  144,  166,  156,  117,
-      117,  117,  170,  124,  152,  152,  152,  152,  170,  174,
-      124,  174,  124,  179,  551,  179,  166,  187,  207,  187,
-
-      207,  117,  124,  124,  524,  124,  196,  196,  198,  198,
-      198,  198,  213,  213,  252,  252,  225,  124,  215,  215,
-      215,  215,  225,  272,  272,  304,  304,  309,  309,  325,
-      523,  521,  520,  518,  515,  513,  510,  506,  505,  504,
-      503,  502,  501,  325,  527,  527,  527,  527,  527,  527,
-      528,  528,  528,  528,  528,  528,  529,  499,  529,  529,
-      529,  529,  530,  530,  531,  531,  531,  531,  531,  531,
-      532,  532,  532,  532,  533,  498,  533,  533,  533,  533,
-      534,  534,  535,  535,  535,  535,  535,  535,  536,  536,
-      537,  537,  537,  537,  537,  537,  538,  538,  538,  538,
-
-      539,  539,  540,  540,  540,  540,  540,  540,  541,  497,
-      541,  541,  541,  541,  542,  542,  543,  543,  543,  543,
-      543,  543,  544,  495,  544,  544,  544,  544,  545,  545,
-      546,  546,  546,  546,  546,  546,  547,  547,  547,  547,
-      547,  547,  548,  548,  548,  548,  548,  548,  549,  549,
-      550,  550,  552,  552,  553,  553,  554,  554,  556,  556,
-      558,  558,  558,  559,  559,  559,  560,  560,  560,  561,
-      561,  561,  562,  562,  562,  563,  563,  563,  493,  492,
-      491,  490,  489,  488,  487,  486,  485,  484,  483,  479,
-      478,  476,  474,  473,  472,  471,  469,  468,  465,  464,
-
-      463,  460,  459,  458,  453,  452,  451,  450,  446,  445,
-      443,  442,  441,  439,  437,  436,  435,  434,  430,  429,
-      428,  427,  426,  425,  422,  421,  420,  419,  418,  417,
-      415,  414,  413,  412,  411,  410,  408,  407,  405,  402,
-      401,  400,  399,  398,  397,  396,  395,  393,  392,  391,
-      390,  389,  388,  386,  384,  383,  382,  380,  379,  376,
-      374,  372,  370,  369,  368,  366,  365,  363,  362,  361,
-      360,  359,  358,  357,  356,  355,  354,  353,  352,  351,
-      350,  347,  346,  345,  344,  342,  341,  340,  339,  338,
-      337,  333,  332,  331,  330,  328,  327,  326,  320,  319,
-
-      318,  317,  316,  315,  314,  313,  312,  308,  307,  306,
-      302,  300,  299,  298,  297,  296,  295,  294,  293,  292,
-      291,  290,  289,  288,  287,  286,  285,  284,  283,  282,
-      280,  279,  277,  276,  274,  271,  270,  269,  268,  267,
-      266,  264,  262,  260,  258,  257,  256,  255,  254,  253,
-      251,  248,  247,  246,  245,  244,  243,  242,  240,  239,
-      238,  237,  236,  231,  230,  229,  228,  227,  226,  224,
-      223,  222,  205,  204,  203,  194,  193,  192,  191,  185,
-      181,  180,  177,  172,  171,  169,  168,  167,  165,  164,
-      163,  162,  161,  160,  159,  158,  157,  155,  153,  146,
-
-      145,  142,  141,  140,  139,  138,  133,  131,  129,  127,
-      126,  125,  122,  120,  118,  116,  115,  112,  111,  109,
-      104,  102,  100,   96,   93,   92,   83,   78,   74,   73,
-       70,   69,   64,   60,   56,   55,   54,   50,   49,   47,
-       46,   45,   44,   43,   42,   41,   35,   33,   29,   27,
-       26,   25,   24,   20,   15,   12,   10,    8,    6,    4,
-        2,  526,  526,  526,  526,  526,  526,  526,  526,  526,
-      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
-      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
-      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
-
-      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
-      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
-      526,  526,  526,  526,  526,  526,  526,  526
+       31,   48,   38,   39,   39,   39,   39,   49,   51,   52,
+       49,   53,   51,   80,   84,   48,   52,   58,   66,   58,
+       66,   53,  106,   14,   38,   76,  560,   76,   85,   85,
+       85,   85,   86,   86,   87,   87,   84,   98,   80,   98,
+      107,  107,  107,  107,  106,  108,  108,  110,  110,  113,
+      114,  558,   80,  121,  114,  113,  119,  121,  554,  117,
+      123,   80,  150,  150,  119,  114,  124,  114,  117,  117,
+      123,  117,  134,  117,  134,  144,  124,  144,  197,  197,
+      117,  117,  117,  124,  154,  124,  152,  152,  152,  152,
+      156,  154,  167,  156,  171,  124,  124,  154,  124,  175,
+
+      171,  175,  117,  180,  188,  180,  188,  208,  527,  208,
+      124,  167,  199,  199,  199,  199,  214,  214,  216,  216,
+      216,  216,  226,  253,  253,  273,  273,  328,  226,  307,
+      307,  312,  312,  526,  524,  523,  521,  518,  516,  513,
+      509,  328,  530,  530,  530,  530,  530,  530,  531,  531,
+      531,  531,  531,  531,  532,  508,  532,  532,  532,  532,
+      533,  533,  534,  534,  534,  534,  534,  534,  535,  535,
+      535,  535,  536,  507,  536,  536,  536,  536,  537,  537,
+      538,  538,  538,  538,  538,  538,  539,  539,  540,  540,
+      540,  540,  540,  540,  541,  541,  541,  541,  542,  542,
+
+      543,  543,  543,  543,  543,  543,  544,  506,  544,  544,
+      544,  544,  545,  545,  546,  546,  546,  546,  546,  546,
+      547,  505,  547,  547,  547,  547,  548,  548,  549,  549,
+      549,  549,  549,  549,  550,  550,  550,  550,  550,  550,
+      551,  551,  551,  551,  551,  551,  552,  552,  553,  553,
+      555,  555,  556,  556,  557,  557,  559,  559,  561,  561,
+      561,  562,  562,  562,  563,  563,  563,  564,  564,  564,
+      565,  565,  565,  566,  566,  566,  504,  502,  501,  500,
+      498,  496,  495,  494,  493,  492,  491,  490,  489,  488,
+      487,  486,  482,  481,  479,  477,  476,  475,  474,  472,
+
+      471,  468,  467,  466,  463,  462,  461,  456,  455,  454,
+      453,  449,  448,  446,  445,  444,  442,  440,  439,  438,
+      437,  433,  432,  431,  430,  429,  428,  425,  424,  423,
+      422,  421,  420,  418,  417,  416,  415,  414,  413,  411,
+      410,  408,  405,  404,  403,  402,  401,  400,  399,  398,
+      396,  395,  394,  393,  392,  391,  389,  387,  386,  385,
+      383,  382,  379,  377,  375,  373,  372,  371,  369,  368,
+      366,  365,  364,  363,  362,  361,  360,  359,  358,  357,
+      356,  355,  354,  353,  350,  349,  348,  347,  345,  344,
+      343,  342,  341,  340,  336,  335,  334,  333,  331,  330,
+
+      329,  323,  322,  321,  320,  319,  318,  317,  316,  315,
+      311,  310,  309,  305,  303,  302,  301,  300,  299,  298,
+      297,  296,  295,  294,  293,  292,  291,  290,  289,  288,
+      286,  285,  284,  282,  281,  279,  278,  275,  272,  271,
+      270,  269,  268,  267,  265,  263,  261,  259,  258,  257,
+      256,  255,  254,  252,  249,  248,  247,  246,  245,  244,
+      243,  241,  240,  239,  238,  237,  232,  231,  230,  229,
+      228,  227,  225,  224,  223,  206,  205,  204,  195,  194,
+      193,  192,  186,  182,  181,  178,  173,  172,  170,  169,
+      168,  166,  165,  164,  163,  162,  161,  160,  159,  158,
+
+      157,  155,  153,  146,  145,  142,  141,  140,  139,  138,
+      133,  131,  129,  127,  126,  125,  122,  120,  118,  116,
+      115,  112,  111,  109,  104,  102,  100,   96,   93,   92,
+       83,   78,   74,   73,   70,   69,   64,   60,   56,   55,
+       54,   50,   47,   46,   45,   44,   43,   42,   41,   35,
+       33,   29,   27,   26,   25,   24,   20,   15,   12,   10,
+        8,    6,    4,    2,  529,  529,  529,  529,  529,  529,
+      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
+      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
+      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
+
+      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
+      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
+      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
+      529
     } ;
 
 /* Table of booleans, true if rule could match eol. */
-static const flex_int32_t yy_rule_can_match_eol[165] =
+static const flex_int32_t yy_rule_can_match_eol[167] =
     {   0,
 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
     0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
+    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,
-    0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-    1, 0, 1, 1, 0,     };
+    0, 0, 1, 0, 1, 1, 0,     };
 
 static yy_state_type yy_last_accepting_state;
 static char *yy_last_accepting_cpos;
@@ -1613,13 +1615,13 @@ yy_match:
 			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
 				{
 				yy_current_state = (int) yy_def[yy_current_state];
-				if ( yy_current_state >= 527 )
+				if ( yy_current_state >= 530 )
 					yy_c = yy_meta[yy_c];
 				}
 			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
 			++yy_cp;
 			}
-		while ( yy_base[yy_current_state] != 962 );
+		while ( yy_base[yy_current_state] != 965 );
 
 yy_find_action:
 		yy_act = yy_accept[yy_current_state];
@@ -1812,63 +1814,63 @@ YY_RULE_SETUP
 	YY_BREAK
 case 39:
 YY_RULE_SETUP
-{ return ENDIAN_KEY; }
+{ return OCT_KEY; }
 	YY_BREAK
 case 40:
 YY_RULE_SETUP
-{ return ALIGN_KEY; }
+{ return BIN_KEY; }
 	YY_BREAK
 case 41:
 YY_RULE_SETUP
-{ return BIG_KEY; }
+{ return ENDIAN_KEY; }
 	YY_BREAK
 case 42:
 YY_RULE_SETUP
-{ return LITTLE_KEY; }
+{ return ALIGN_KEY; }
 	YY_BREAK
 case 43:
 YY_RULE_SETUP
-{ return SIZE_KEY; }
+{ return BIG_KEY; }
 	YY_BREAK
 case 44:
 YY_RULE_SETUP
-{ return WORDSIZE_KEY; }
+{ return LITTLE_KEY; }
 	YY_BREAK
 case 45:
 YY_RULE_SETUP
-{ return OFFSET_KEY; }
+{ return SIZE_KEY; }
 	YY_BREAK
 case 46:
 YY_RULE_SETUP
-{ return NAMES_KEY; }
+{ return WORDSIZE_KEY; }
 	YY_BREAK
 case 47:
 YY_RULE_SETUP
-{ return VALUES_KEY; }
+{ return OFFSET_KEY; }
 	YY_BREAK
 case 48:
 YY_RULE_SETUP
-{ return VARIABLES_KEY; }
+{ return NAMES_KEY; }
 	YY_BREAK
 case 49:
 YY_RULE_SETUP
-{ return PCODEOP_KEY; }
+{ return VALUES_KEY; }
 	YY_BREAK
 case 50:
 YY_RULE_SETUP
-
+{ return VARIABLES_KEY; }
 	YY_BREAK
 case 51:
 YY_RULE_SETUP
-{  return find_symbol();  }
+{ return PCODEOP_KEY; }
 	YY_BREAK
 case 52:
 YY_RULE_SETUP
-{ return scan_number(yytext,&yylval,false); }
+
 	YY_BREAK
 case 53:
 YY_RULE_SETUP
-{ return scan_number(yytext,&yylval,false); }
+{  return find_symbol();  }
 	YY_BREAK
 case 54:
 YY_RULE_SETUP
@@ -1876,159 +1878,159 @@ YY_RULE_SETUP
 	YY_BREAK
 case 55:
 YY_RULE_SETUP
-{ yylval.str = new string(yytext+1,strlen(yytext)-2); return STRING; }
+{ return scan_number(yytext,&yylval,false); }
 	YY_BREAK
 case 56:
 YY_RULE_SETUP
-
+{ return scan_number(yytext,&yylval,false); }
 	YY_BREAK
 case 57:
-/* rule 57 can match eol */
 YY_RULE_SETUP
-{ slgh->nextLine(); }
+{ yylval.str = new string(yytext+1,strlen(yytext)-2); return STRING; }
 	YY_BREAK
 case 58:
 YY_RULE_SETUP
-{ return yytext[0]; }
+
 	YY_BREAK
 case 59:
 /* rule 59 can match eol */
 YY_RULE_SETUP
-{ slgh->nextLine(); BEGIN( preprocess(print,preproc) ); }
+{ slgh->nextLine(); }
 	YY_BREAK
 case 60:
 YY_RULE_SETUP
-{ preproc_macroexpand(); }
+{ return yytext[0]; }
 	YY_BREAK
 case 61:
+/* rule 61 can match eol */
 YY_RULE_SETUP
-{ yylval.ch = yytext[0]; return CHAR; }
+{ slgh->nextLine(); BEGIN( preprocess(print,preproc) ); }
 	YY_BREAK
 case 62:
 YY_RULE_SETUP
-{ yylval.ch = '^'; return '^'; }
+{ preproc_macroexpand(); }
 	YY_BREAK
 case 63:
 YY_RULE_SETUP
-{ BEGIN(pattern); actionon=0; return IS_KEY; }
+{ yylval.ch = yytext[0]; return CHAR; }
 	YY_BREAK
 case 64:
 YY_RULE_SETUP
-{  yylval.str = new string(yytext); return SYMBOLSTRING;  }
+{ yylval.ch = '^'; return '^'; }
 	YY_BREAK
 case 65:
 YY_RULE_SETUP
-{ yylval.str = new string(yytext+1,strlen(yytext)-2); return STRING; }
+{ BEGIN(pattern); actionon=0; return IS_KEY; }
 	YY_BREAK
 case 66:
 YY_RULE_SETUP
-{ yylval.ch = ' '; return ' '; }
+{  yylval.str = new string(yytext); return SYMBOLSTRING;  }
 	YY_BREAK
 case 67:
-/* rule 67 can match eol */
 YY_RULE_SETUP
-{ slgh->nextLine(); return ' '; }
+{ yylval.str = new string(yytext+1,strlen(yytext)-2); return STRING; }
 	YY_BREAK
 case 68:
 YY_RULE_SETUP
-{ return yytext[0]; }
+{ yylval.ch = ' '; return ' '; }
 	YY_BREAK
 case 69:
 /* rule 69 can match eol */
 YY_RULE_SETUP
-{ slgh->nextLine(); BEGIN( preprocess(pattern,preproc) ); }
+{ slgh->nextLine(); return ' '; }
 	YY_BREAK
 case 70:
 YY_RULE_SETUP
-{ preproc_macroexpand(); }
+{ return yytext[0]; }
 	YY_BREAK
 case 71:
+/* rule 71 can match eol */
 YY_RULE_SETUP
-{ BEGIN((withsection==1) ? INITIAL:sem); withsection=0; yylval.ch = yytext[0]; return yytext[0]; }
+{ slgh->nextLine(); BEGIN( preprocess(pattern,preproc) ); }
 	YY_BREAK
 case 72:
 YY_RULE_SETUP
-{ BEGIN(INITIAL); return OP_UNIMPL; }
+{ preproc_macroexpand(); }
 	YY_BREAK
 case 73:
 YY_RULE_SETUP
-{ return GLOBALSET_KEY; }
+{ BEGIN((withsection==1) ? INITIAL:sem); withsection=0; yylval.ch = yytext[0]; return yytext[0]; }
 	YY_BREAK
 case 74:
 YY_RULE_SETUP
-{ return OP_RIGHT; }
+{ BEGIN(INITIAL); return OP_UNIMPL; }
 	YY_BREAK
 case 75:
 YY_RULE_SETUP
-{ return OP_LEFT; }
+{ return GLOBALSET_KEY; }
 	YY_BREAK
 case 76:
 YY_RULE_SETUP
-{ return OP_NOTEQUAL; }
+{ return OP_RIGHT; }
 	YY_BREAK
 case 77:
 YY_RULE_SETUP
-{ return OP_LESSEQUAL; }
+{ return OP_LEFT; }
 	YY_BREAK
 case 78:
 YY_RULE_SETUP
-{ return OP_GREATEQUAL; }
+{ return OP_NOTEQUAL; }
 	YY_BREAK
 case 79:
 YY_RULE_SETUP
-{ return OP_AND; }
+{ return OP_LESSEQUAL; }
 	YY_BREAK
 case 80:
 YY_RULE_SETUP
-{ return OP_OR; }
+{ return OP_GREATEQUAL; }
 	YY_BREAK
 case 81:
 YY_RULE_SETUP
-{ return OP_XOR; }
+{ return OP_AND; }
 	YY_BREAK
 case 82:
 YY_RULE_SETUP
-{ return ELLIPSIS_KEY; }
+{ return OP_OR; }
 	YY_BREAK
 case 83:
 YY_RULE_SETUP
-{ actionon = 1; yylval.ch = yytext[0]; return yytext[0]; }
+{ return OP_XOR; }
 	YY_BREAK
 case 84:
 YY_RULE_SETUP
-{ actionon = 0; yylval.ch = yytext[0]; return yytext[0]; }
+{ return ELLIPSIS_KEY; }
 	YY_BREAK
 case 85:
 YY_RULE_SETUP
-{ yylval.ch = yytext[0];  return (actionon==0) ? yytext[0] : OP_AND; }
+{ actionon = 1; yylval.ch = yytext[0]; return yytext[0]; }
 	YY_BREAK
 case 86:
 YY_RULE_SETUP
-{ yylval.ch = yytext[0];  return (actionon==0) ? yytext[0] : OP_OR; }
+{ actionon = 0; yylval.ch = yytext[0]; return yytext[0]; }
 	YY_BREAK
 case 87:
 YY_RULE_SETUP
-{ return OP_XOR; }
+{ yylval.ch = yytext[0];  return (actionon==0) ? yytext[0] : OP_AND; }
 	YY_BREAK
 case 88:
 YY_RULE_SETUP
-{ yylval.ch = yytext[0]; return yytext[0]; }
+{ yylval.ch = yytext[0];  return (actionon==0) ? yytext[0] : OP_OR; }
 	YY_BREAK
 case 89:
 YY_RULE_SETUP
-
+{ return OP_XOR; }
 	YY_BREAK
 case 90:
 YY_RULE_SETUP
-{ return find_symbol();   }
+{ yylval.ch = yytext[0]; return yytext[0]; }
 	YY_BREAK
 case 91:
 YY_RULE_SETUP
-{ return scan_number(yytext,&yylval,true); }
+
 	YY_BREAK
 case 92:
 YY_RULE_SETUP
-{ return scan_number(yytext,&yylval,true); }
+{ return find_symbol();   }
 	YY_BREAK
 case 93:
 YY_RULE_SETUP
@@ -2036,261 +2038,261 @@ YY_RULE_SETUP
 	YY_BREAK
 case 94:
 YY_RULE_SETUP
-
+{ return scan_number(yytext,&yylval,true); }
 	YY_BREAK
 case 95:
-/* rule 95 can match eol */
 YY_RULE_SETUP
-{ slgh->nextLine(); }
+{ return scan_number(yytext,&yylval,true); }
 	YY_BREAK
 case 96:
 YY_RULE_SETUP
-{ return yytext[0]; }
+
 	YY_BREAK
 case 97:
 /* rule 97 can match eol */
 YY_RULE_SETUP
-{ slgh->nextLine(); BEGIN( preprocess(sem,preproc) ); }
+{ slgh->nextLine(); }
 	YY_BREAK
 case 98:
 YY_RULE_SETUP
-{ preproc_macroexpand(); }
+{ return yytext[0]; }
 	YY_BREAK
 case 99:
+/* rule 99 can match eol */
 YY_RULE_SETUP
-{ BEGIN(INITIAL); yylval.ch = yytext[0]; return yytext[0]; }
+{ slgh->nextLine(); BEGIN( preprocess(sem,preproc) ); }
 	YY_BREAK
 case 100:
 YY_RULE_SETUP
-{ return OP_BOOL_OR; }
+{ preproc_macroexpand(); }
 	YY_BREAK
 case 101:
 YY_RULE_SETUP
-{ return OP_BOOL_AND; }
+{ BEGIN(INITIAL); yylval.ch = yytext[0]; return yytext[0]; }
 	YY_BREAK
 case 102:
 YY_RULE_SETUP
-{ return OP_BOOL_XOR; }
+{ return OP_BOOL_OR; }
 	YY_BREAK
 case 103:
 YY_RULE_SETUP
-{ return OP_RIGHT; }
+{ return OP_BOOL_AND; }
 	YY_BREAK
 case 104:
 YY_RULE_SETUP
-{ return OP_LEFT; }
+{ return OP_BOOL_XOR; }
 	YY_BREAK
 case 105:
 YY_RULE_SETUP
-{ return OP_EQUAL; }
+{ return OP_RIGHT; }
 	YY_BREAK
 case 106:
 YY_RULE_SETUP
-{ return OP_NOTEQUAL; }
+{ return OP_LEFT; }
 	YY_BREAK
 case 107:
 YY_RULE_SETUP
-{ return OP_LESSEQUAL; }
+{ return OP_EQUAL; }
 	YY_BREAK
 case 108:
 YY_RULE_SETUP
-{ return OP_GREATEQUAL; }
+{ return OP_NOTEQUAL; }
 	YY_BREAK
 case 109:
 YY_RULE_SETUP
-{ return OP_SDIV; }
+{ return OP_LESSEQUAL; }
 	YY_BREAK
 case 110:
 YY_RULE_SETUP
-{ return OP_SREM; }
+{ return OP_GREATEQUAL; }
 	YY_BREAK
 case 111:
 YY_RULE_SETUP
-{ return OP_SRIGHT; }
+{ return OP_SDIV; }
 	YY_BREAK
 case 112:
 YY_RULE_SETUP
-{ return OP_SLESS; }
+{ return OP_SREM; }
 	YY_BREAK
 case 113:
 YY_RULE_SETUP
-{ return OP_SGREAT; }
+{ return OP_SRIGHT; }
 	YY_BREAK
 case 114:
 YY_RULE_SETUP
-{ return OP_SLESSEQUAL; }
+{ return OP_SLESS; }
 	YY_BREAK
 case 115:
 YY_RULE_SETUP
-{ return OP_SGREATEQUAL; }
+{ return OP_SGREAT; }
 	YY_BREAK
 case 116:
 YY_RULE_SETUP
-{ return OP_FADD; }
+{ return OP_SLESSEQUAL; }
 	YY_BREAK
 case 117:
 YY_RULE_SETUP
-{ return OP_FSUB; }
+{ return OP_SGREATEQUAL; }
 	YY_BREAK
 case 118:
 YY_RULE_SETUP
-{ return OP_FMULT; }
+{ return OP_FADD; }
 	YY_BREAK
 case 119:
 YY_RULE_SETUP
-{ return OP_FDIV; }
+{ return OP_FSUB; }
 	YY_BREAK
 case 120:
 YY_RULE_SETUP
-{ return OP_FEQUAL; }
+{ return OP_FMULT; }
 	YY_BREAK
 case 121:
 YY_RULE_SETUP
-{ return OP_FNOTEQUAL; }
+{ return OP_FDIV; }
 	YY_BREAK
 case 122:
 YY_RULE_SETUP
-{ return OP_FLESS; }
+{ return OP_FEQUAL; }
 	YY_BREAK
 case 123:
 YY_RULE_SETUP
-{ return OP_FGREAT; }
+{ return OP_FNOTEQUAL; }
 	YY_BREAK
 case 124:
 YY_RULE_SETUP
-{ return OP_FLESSEQUAL; }
+{ return OP_FLESS; }
 	YY_BREAK
 case 125:
 YY_RULE_SETUP
-{ return OP_FGREATEQUAL; }
+{ return OP_FGREAT; }
 	YY_BREAK
 case 126:
 YY_RULE_SETUP
-{ return OP_ZEXT; }
+{ return OP_FLESSEQUAL; }
 	YY_BREAK
 case 127:
 YY_RULE_SETUP
-{ return OP_CARRY; }
+{ return OP_FGREATEQUAL; }
 	YY_BREAK
 case 128:
 YY_RULE_SETUP
-{ return OP_BORROW; }
+{ return OP_ZEXT; }
 	YY_BREAK
 case 129:
 YY_RULE_SETUP
-{ return OP_SEXT; }
+{ return OP_CARRY; }
 	YY_BREAK
 case 130:
 YY_RULE_SETUP
-{ return OP_SCARRY; }
+{ return OP_BORROW; }
 	YY_BREAK
 case 131:
 YY_RULE_SETUP
-{ return OP_SBORROW; }
+{ return OP_SEXT; }
 	YY_BREAK
 case 132:
 YY_RULE_SETUP
-{ return OP_NAN; }
+{ return OP_SCARRY; }
 	YY_BREAK
 case 133:
 YY_RULE_SETUP
-{ return OP_ABS; }
+{ return OP_SBORROW; }
 	YY_BREAK
 case 134:
 YY_RULE_SETUP
-{ return OP_SQRT; }
+{ return OP_NAN; }
 	YY_BREAK
 case 135:
 YY_RULE_SETUP
-{ return OP_CEIL; }
+{ return OP_ABS; }
 	YY_BREAK
 case 136:
 YY_RULE_SETUP
-{ return OP_FLOOR; }
+{ return OP_SQRT; }
 	YY_BREAK
 case 137:
 YY_RULE_SETUP
-{ return OP_ROUND; }
+{ return OP_CEIL; }
 	YY_BREAK
 case 138:
 YY_RULE_SETUP
-{ return OP_INT2FLOAT; }
+{ return OP_FLOOR; }
 	YY_BREAK
 case 139:
 YY_RULE_SETUP
-{ return OP_FLOAT2FLOAT; }
+{ return OP_ROUND; }
 	YY_BREAK
 case 140:
 YY_RULE_SETUP
-{ return OP_TRUNC; }
+{ return OP_INT2FLOAT; }
 	YY_BREAK
 case 141:
 YY_RULE_SETUP
-{ return OP_CPOOLREF; }
+{ return OP_FLOAT2FLOAT; }
 	YY_BREAK
 case 142:
 YY_RULE_SETUP
-{ return OP_NEW; }
+{ return OP_TRUNC; }
 	YY_BREAK
 case 143:
 YY_RULE_SETUP
-{ return OP_POPCOUNT; }
+{ return OP_CPOOLREF; }
 	YY_BREAK
 case 144:
 YY_RULE_SETUP
-{ return IF_KEY; }
+{ return OP_NEW; }
 	YY_BREAK
 case 145:
 YY_RULE_SETUP
-{ return GOTO_KEY; }
+{ return OP_POPCOUNT; }
 	YY_BREAK
 case 146:
 YY_RULE_SETUP
-{ return CALL_KEY; }
+{ return IF_KEY; }
 	YY_BREAK
 case 147:
 YY_RULE_SETUP
-{ return RETURN_KEY; }
+{ return GOTO_KEY; }
 	YY_BREAK
 case 148:
 YY_RULE_SETUP
-{ return DELAYSLOT_KEY; }
+{ return CALL_KEY; }
 	YY_BREAK
 case 149:
 YY_RULE_SETUP
-{ return CROSSBUILD_KEY; }
+{ return RETURN_KEY; }
 	YY_BREAK
 case 150:
 YY_RULE_SETUP
-{ return EXPORT_KEY; }
+{ return DELAYSLOT_KEY; }
 	YY_BREAK
 case 151:
 YY_RULE_SETUP
-{ return BUILD_KEY; }
+{ return CROSSBUILD_KEY; }
 	YY_BREAK
 case 152:
 YY_RULE_SETUP
-{ return LOCAL_KEY; }
+{ return EXPORT_KEY; }
 	YY_BREAK
 case 153:
 YY_RULE_SETUP
-{ yylval.ch = yytext[0]; return yytext[0]; }
+{ return BUILD_KEY; }
 	YY_BREAK
 case 154:
 YY_RULE_SETUP
-
+{ return LOCAL_KEY; }
 	YY_BREAK
 case 155:
 YY_RULE_SETUP
-{ return find_symbol();   }
+{ yylval.ch = yytext[0]; return yytext[0]; }
 	YY_BREAK
 case 156:
 YY_RULE_SETUP
-{ return scan_number(yytext,&yylval,false); }
+
 	YY_BREAK
 case 157:
 YY_RULE_SETUP
-{ return scan_number(yytext,&yylval,false); }
+{ return find_symbol();   }
 	YY_BREAK
 case 158:
 YY_RULE_SETUP
@@ -2298,24 +2300,32 @@ YY_RULE_SETUP
 	YY_BREAK
 case 159:
 YY_RULE_SETUP
-
+{ return scan_number(yytext,&yylval,false); }
 	YY_BREAK
 case 160:
-/* rule 160 can match eol */
 YY_RULE_SETUP
-{ slgh->nextLine(); }
+{ return scan_number(yytext,&yylval,false); }
 	YY_BREAK
 case 161:
 YY_RULE_SETUP
-{ return yytext[0]; }
+
 	YY_BREAK
 case 162:
 /* rule 162 can match eol */
 YY_RULE_SETUP
-{ slgh->nextLine(); BEGIN( preprocess(preproc,preproc) ); }
+{ slgh->nextLine(); }
 	YY_BREAK
 case 163:
-/* rule 163 can match eol */
+YY_RULE_SETUP
+{ return yytext[0]; }
+	YY_BREAK
+case 164:
+/* rule 164 can match eol */
+YY_RULE_SETUP
+{ slgh->nextLine(); BEGIN( preprocess(preproc,preproc) ); }
+	YY_BREAK
+case 165:
+/* rule 165 can match eol */
 YY_RULE_SETUP
 { slgh->nextLine(); }
 	YY_BREAK
@@ -2337,7 +2347,7 @@ case YY_STATE_EOF(preproc):
           slgh->parseFileFinished();
         }
 	YY_BREAK
-case 164:
+case 166:
 YY_RULE_SETUP
 ECHO;
 	YY_BREAK
@@ -2636,7 +2646,7 @@ static int yy_get_next_buffer (void)
 		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
 			{
 			yy_current_state = (int) yy_def[yy_current_state];
-			if ( yy_current_state >= 527 )
+			if ( yy_current_state >= 530 )
 				yy_c = yy_meta[yy_c];
 			}
 		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
@@ -2664,11 +2674,11 @@ static int yy_get_next_buffer (void)
 	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
 		{
 		yy_current_state = (int) yy_def[yy_current_state];
-		if ( yy_current_state >= 527 )
+		if ( yy_current_state >= 530 )
 			yy_c = yy_meta[yy_c];
 		}
 	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
-	yy_is_jam = (yy_current_state == 526);
+	yy_is_jam = (yy_current_state == 529);
 
 		return yy_is_jam ? 0 : yy_current_state;
 }
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.l b/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.l
index 2df137019..459394f1d 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.l
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/slghscan.l
@@ -532,6 +532,8 @@ with   { BEGIN(pattern); withsection = 1; slgh->calcContextLayout(); return WITH
 <defblock>noflow    { return NOFLOW_KEY; }
 <defblock>hex       { return HEX_KEY; }
 <defblock>dec       { return DEC_KEY; }
+<defblock>oct       { return OCT_KEY; }
+<defblock>bin       { return BIN_KEY; }
 <defblock>endian    { return ENDIAN_KEY; }
 <defblock>alignment { return ALIGN_KEY; }
 <defblock>big       { return BIG_KEY; }
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/BaseLexer.g b/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/BaseLexer.g
index aaec24606..15ce0128d 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/BaseLexer.g
+++ b/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/BaseLexer.g
@@ -14,6 +14,7 @@ tokens {
 	OP_ARGUMENTS;
 	OP_ASSIGN;
 	OP_BIG;
+	OP_BIN;
 	OP_BIN_CONSTANT;
 	OP_BITRANGE;
 	OP_BITRANGE2;
@@ -83,13 +84,14 @@ tokens {
 	OP_NAMES;
 	OP_NEGATE;
 	OP_NIL;
-    OP_NOFLOW;
-    OP_NOP;
-    OP_NOT;
+	OP_NOFLOW;
+	OP_NOP;
+	OP_NOT;
 	OP_NOTEQUAL;
 	OP_NOT_DEFAULT;
 	OP_NO_CONTEXT_BLOCK;
 	OP_NO_FIELD_MOD;
+	OP_OCT;
 	OP_OR;
 	OP_PARENTHESIZED;
 	OP_PCODE;
@@ -104,8 +106,8 @@ tokens {
 	OP_SEQUENCE;
 	OP_SGREAT;
 	OP_SGREATEQUAL;
-    OP_SIGNED;
-    OP_SIZING_SIZE;
+	OP_SIGNED;
+	OP_SIZING_SIZE;
 	OP_SIZE;
 	OP_SLESS;
 	OP_SLESSEQUAL;
@@ -157,6 +159,7 @@ RES_WITH		:	'with';
 KEY_ALIGNMENT	:	'alignment';
 KEY_ATTACH		:	'attach';
 KEY_BIG			:	'big';
+KEY_BIN			:	'bin';
 KEY_BITRANGE	:	'bitrange';
 KEY_BUILD		:	'build';
 KEY_CALL		:	'call';
@@ -175,6 +178,7 @@ KEY_MACRO		:	'macro';
 KEY_NAMES		:	'names';
 KEY_NOFLOW		:	'noflow';
 KEY_OFFSET		:	'offset';
+KEY_OCT			:	'oct';
 KEY_PCODEOP		:	'pcodeop';
 KEY_RETURN		:	'return';
 KEY_SIGNED		:	'signed';
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/SleighCompiler.g b/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/SleighCompiler.g
index 8935b88f2..f815601a4 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/SleighCompiler.g
+++ b/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/SleighCompiler.g
@@ -235,8 +235,10 @@ fieldmods
 fieldmod
     :   OP_SIGNED { if ($fielddef::fieldQuality != null) $fielddef::fieldQuality.signext = true; }
     |   OP_NOFLOW { if ($fielddef::fieldQuality != null) $fielddef::fieldQuality.flow = false; }
-    |   OP_HEX { if ($fielddef::fieldQuality != null) $fielddef::fieldQuality.hex = true; }
-    |   OP_DEC { if ($fielddef::fieldQuality != null) $fielddef::fieldQuality.hex = false; }
+    |   OP_HEX { if ($fielddef::fieldQuality != null) $fielddef::fieldQuality.base = 16; }
+    |   OP_DEC { if ($fielddef::fieldQuality != null) $fielddef::fieldQuality.base = 10; }
+    |   OP_OCT { if ($fielddef::fieldQuality != null) $fielddef::fieldQuality.base = 8; }
+    |   OP_BIN { if ($fielddef::fieldQuality != null) $fielddef::fieldQuality.base = 2; }
     ;
 
 specific_identifier[String purpose] returns [Tree value]
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/SleighEcho.g b/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/SleighEcho.g
index fcb42e4c1..cd44ac6de 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/SleighEcho.g
+++ b/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/SleighEcho.g
@@ -82,6 +82,8 @@ fieldmod returns [String value]
     |   OP_NOFLOW { $value = "noflow"; }
     |   OP_HEX { $value = "hex"; }
     |   OP_DEC { $value = "dec"; }
+    |   OP_OCT { $value = "oct"; }
+    |   OP_BIN { $value = "bin"; }
     ;
 
 contextdef
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/SleighParser.g b/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/SleighParser.g
index 6beda0844..e2fc25d47 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/SleighParser.g
+++ b/Ghidra/Framework/SoftwareModeling/src/main/antlr/ghidra/sleigh/grammar/SleighParser.g
@@ -94,6 +94,8 @@ fieldmod
     :   lc=KEY_SIGNED -> OP_SIGNED[$lc]
     |   lc=KEY_HEX -> OP_HEX[$lc]
     |   lc=KEY_DEC -> OP_DEC[$lc]
+    |   lc=KEY_OCT -> OP_OCT[$lc]
+    |   lc=KEY_BIN -> OP_BIN[$lc]
     ;
 
 contextfielddefs[Token lc]
@@ -114,6 +116,8 @@ contextfieldmod
     |   lc=KEY_NOFLOW -> OP_NOFLOW[$lc]
     |   lc=KEY_HEX -> OP_HEX[$lc]
     |   lc=KEY_DEC -> OP_DEC[$lc]
+    |   lc=KEY_OCT -> OP_OCT[$lc]
+    |   lc=KEY_BIN -> OP_BIN[$lc]
     ;
 
 contextdef
@@ -549,32 +553,34 @@ identifier
 key_as_id
 	:	lc=KEY_ALIGNMENT	-> ^(OP_IDENTIFIER[$lc, "KEY_ALIGNMENT"] KEY_ALIGNMENT)
 	|	lc=KEY_ATTACH		-> ^(OP_IDENTIFIER[$lc, "KEY_ATTACH"] KEY_ATTACH)
-	|	lc=KEY_BIG			-> ^(OP_IDENTIFIER[$lc, "KEY_BIG"] KEY_BIG)
+	|	lc=KEY_BIG		-> ^(OP_IDENTIFIER[$lc, "KEY_BIG"] KEY_BIG)
+	|	lc=KEY_BIN		-> ^(OP_IDENTIFIER[$lc, "KEY_BIN"] KEY_BIN)
 	|	lc=KEY_BITRANGE		-> ^(OP_IDENTIFIER[$lc, "KEY_BITRANGE"] KEY_BITRANGE)
 	|	lc=KEY_BUILD		-> ^(OP_IDENTIFIER[$lc, "KEY_BUILD"] KEY_BUILD)
-	|	lc=KEY_CALL			-> ^(OP_IDENTIFIER[$lc, "KEY_CALL"] KEY_CALL)	// appeared in printpiece
+	|	lc=KEY_CALL		-> ^(OP_IDENTIFIER[$lc, "KEY_CALL"] KEY_CALL)	// appeared in printpiece
 	|	lc=KEY_CONTEXT		-> ^(OP_IDENTIFIER[$lc, "KEY_CONTEXT"] KEY_CONTEXT)
 	|	lc=KEY_CROSSBUILD	-> ^(OP_IDENTIFIER[$lc, "KEY_CROSSBUILD"] KEY_CROSSBUILD)
-	|	lc=KEY_DEC			-> ^(OP_IDENTIFIER[$lc, "KEY_DEC"] KEY_DEC)	// appeared in printpiece
+	|	lc=KEY_DEC		-> ^(OP_IDENTIFIER[$lc, "KEY_DEC"] KEY_DEC)	// appeared in printpiece
 	|	lc=KEY_DEFAULT		-> ^(OP_IDENTIFIER[$lc, "KEY_DEFAULT"] KEY_DEFAULT)
 	|	lc=KEY_DEFINE		-> ^(OP_IDENTIFIER[$lc, "KEY_DEFINE"] KEY_DEFINE)
 	|	lc=KEY_ENDIAN		-> ^(OP_IDENTIFIER[$lc, "KEY_ENDIAN"] KEY_ENDIAN)
 	|	lc=KEY_EXPORT		-> ^(OP_IDENTIFIER[$lc, "KEY_EXPORT"] KEY_EXPORT)
-	|	lc=KEY_GOTO			-> ^(OP_IDENTIFIER[$lc, "KEY_GOTO"] KEY_GOTO)
-	|	lc=KEY_HEX			-> ^(OP_IDENTIFIER[$lc, "KEY_HEX"] KEY_HEX)
+	|	lc=KEY_GOTO		-> ^(OP_IDENTIFIER[$lc, "KEY_GOTO"] KEY_GOTO)
+	|	lc=KEY_HEX		-> ^(OP_IDENTIFIER[$lc, "KEY_HEX"] KEY_HEX)
 	|	lc=KEY_LITTLE		-> ^(OP_IDENTIFIER[$lc, "KEY_LITTLE"] KEY_LITTLE)
 	|	lc=KEY_LOCAL		-> ^(OP_IDENTIFIER[$lc, "KEY_LOCAL"] KEY_LOCAL)
 	|	lc=KEY_MACRO		-> ^(OP_IDENTIFIER[$lc, "KEY_MACRO"] KEY_MACRO)
 	|	lc=KEY_NAMES		-> ^(OP_IDENTIFIER[$lc, "KEY_NAMES"] KEY_NAMES)
 	|	lc=KEY_NOFLOW		-> ^(OP_IDENTIFIER[$lc, "KEY_NOFLOW"] KEY_NOFLOW)
+	|	lc=KEY_OCT		-> ^(OP_IDENTIFIER[$lc, "KEY_OCT"] KEY_OCT)
 	|	lc=KEY_OFFSET		-> ^(OP_IDENTIFIER[$lc, "KEY_OFFSET"] KEY_OFFSET)
 	|	lc=KEY_PCODEOP		-> ^(OP_IDENTIFIER[$lc, "KEY_PCODEOP"] KEY_PCODEOP)
 	|	lc=KEY_RETURN		-> ^(OP_IDENTIFIER[$lc, "KEY_RETURN"] KEY_RETURN)
 	|	lc=KEY_SIGNED		-> ^(OP_IDENTIFIER[$lc, "KEY_SIGNED"] KEY_SIGNED)
-	|	lc=KEY_SIZE			-> ^(OP_IDENTIFIER[$lc, "KEY_SIZE"] KEY_SIZE)
+	|	lc=KEY_SIZE		-> ^(OP_IDENTIFIER[$lc, "KEY_SIZE"] KEY_SIZE)
 	|	lc=KEY_SPACE		-> ^(OP_IDENTIFIER[$lc, "KEY_SPACE"] KEY_SPACE)
 	|	lc=KEY_TOKEN		-> ^(OP_IDENTIFIER[$lc, "KEY_TOKEN"] KEY_TOKEN)
-	|	lc=KEY_TYPE			-> ^(OP_IDENTIFIER[$lc, "KEY_TYPE"] KEY_TYPE)
+	|	lc=KEY_TYPE		-> ^(OP_IDENTIFIER[$lc, "KEY_TYPE"] KEY_TYPE)
 	|	lc=KEY_UNIMPL		-> ^(OP_IDENTIFIER[$lc, "KEY_UNIMPL"] KEY_UNIMPL)
 	|	lc=KEY_VALUES		-> ^(OP_IDENTIFIER[$lc, "KEY_VALUES"] KEY_VALUES)
 	|	lc=KEY_VARIABLES	-> ^(OP_IDENTIFIER[$lc, "KEY_VARIABLES"] KEY_VARIABLES)
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/expression/TokenField.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/expression/TokenField.java
index ecd259e13..043a68460 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/expression/TokenField.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/expression/TokenField.java
@@ -39,6 +39,7 @@ public class TokenField extends PatternValue {
 	private int bitstart, bitend;	// Bits within token, 0 bit is LEAST sig
 	private int bytestart, byteend;	// Bytes to read to get value
 	private int shift;				// Amount to shift to align value
+	private int base;               // The base to use to display the token value.
 
 	@Override
 	public int hashCode() {
@@ -51,6 +52,8 @@ public class TokenField extends PatternValue {
 		result += Boolean.hashCode(signbit);
 		result *= 31;
 		result += Boolean.hashCode(bigendian);
+		result *= 31;
+		result += base;
 		return result;
 	}
 
@@ -72,6 +75,9 @@ public class TokenField extends PatternValue {
 		if (this.bigendian != that.bigendian) {
 			return false;
 		}
+		if (this.base != that.base) {
+			return false;
+		}
 		return true;
 	}
 
@@ -125,6 +131,10 @@ public class TokenField extends PatternValue {
 		return byteend;
 	}
 
+	public int getBase() {
+		return base;
+	}
+
 	/* (non-Javadoc)
 	 * @see ghidra.app.plugin.processors.sleigh.PatternExpression#restoreXml(org.jdom.Element)
 	 */
@@ -138,6 +148,7 @@ public class TokenField extends PatternValue {
 		bytestart = SpecXmlUtils.decodeInt(el.getAttribute("bytestart"));
 		byteend = SpecXmlUtils.decodeInt(el.getAttribute("byteend"));
 		shift = SpecXmlUtils.decodeInt(el.getAttribute("shift"));
+		base = SpecXmlUtils.decodeInt(el.getAttribute("base"));
 		parser.end(el);
 	}
 
@@ -242,6 +253,7 @@ public class TokenField extends PatternValue {
 		}
 		sb.append(", bytes " + bytestart + "-" + byteend);
 		sb.append(", shift=" + shift);
+		sb.append(", base=" + base);
 		sb.append("]");
 		return sb.toString();
 	}
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/symbol/OperandSymbol.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/symbol/OperandSymbol.java
index f7074b3a2..2db9287d0 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/symbol/OperandSymbol.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/processors/sleigh/symbol/OperandSymbol.java
@@ -26,6 +26,7 @@ import ghidra.app.plugin.processors.sleigh.ParserWalker;
 import ghidra.app.plugin.processors.sleigh.SleighLanguage;
 import ghidra.app.plugin.processors.sleigh.expression.OperandValue;
 import ghidra.app.plugin.processors.sleigh.expression.PatternExpression;
+import ghidra.app.plugin.processors.sleigh.expression.TokenField;
 import ghidra.program.model.mem.MemoryAccessException;
 import ghidra.util.xml.SpecXmlUtils;
 import ghidra.xml.XmlElement;
@@ -115,10 +116,14 @@ public class OperandSymbol extends SpecificSymbol {
 		}
 		else {		// Must be expression resulting in a constant
 			long val = defexp.getValue(walker);
-			if (val >= 0)
-				res = "0x" + Long.toHexString(val);
-			else
-				res = "-0x" + Long.toHexString(-val);
+			if (defexp instanceof TokenField && ((TokenField) defexp).getBase() == 10) {
+				res = String.valueOf(val);
+			} else {
+				if (val >= 0)
+					res = "0x" + Long.toHexString(val);
+				else
+					res = "-0x" + Long.toHexString(-val);
+			}
 		}
 		walker.popOperand();
 		return res;
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/sleighbase/SleighBase.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/sleighbase/SleighBase.java
index 89ce3cbcc..f442d2fb9 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/sleighbase/SleighBase.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/sleighbase/SleighBase.java
@@ -38,7 +38,7 @@ public abstract class SleighBase extends Translate implements NamedSymbolProvide
 	 * Note: The values of {@link #SLA_FORMAT_VERSION} and {@link #MAX_UNIQUE_SIZE} 
 	 * must match the corresponding values defined by sleighbase.cc
 	 */
-	public static final int SLA_FORMAT_VERSION = 3;
+	public static final int SLA_FORMAT_VERSION = 4;
 
 	public static final long MAX_UNIQUE_SIZE = 128;  //Maximum size of a varnode in the unique space.  
 													//Should match value in sleighbase.cc
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/FieldQuality.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/FieldQuality.java
index 17a81ed18..8ceafdfa1 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/FieldQuality.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/FieldQuality.java
@@ -24,7 +24,7 @@ public class FieldQuality {
     public int low, high;
     public boolean signext;
     public boolean flow;
-    public boolean hex;
+    public int base;
 
     public FieldQuality(String nm, Location location, long l, long h) {
         name = nm;
@@ -33,10 +33,10 @@ public class FieldQuality {
         high = (int) h;
         signext = false;
         flow = true;
-        hex = true;
+        base = 16;
     }
     @Override
     public String toString() {
-        return "fq:{" + name + "," + low + "," + high + "," + signext + "," + hex + "}";
+        return "fq:{" + name + "," + low + "," + high + "," + signext + "," + base + "}";
     }
 }
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/SleighCompile.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/SleighCompile.java
index 4a8e710b3..0803acc54 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/SleighCompile.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slgh_compile/SleighCompile.java
@@ -933,7 +933,7 @@ public class SleighCompile extends SleighBase {
 			reportError(location, "Field '" + qual.name + "' high must be less than token size");
 		}
 		TokenField field =
-			new TokenField(location, sym.getToken(), qual.signext, qual.low, qual.high);
+			new TokenField(location, sym.getToken(), qual.signext, qual.low, qual.high, qual.base);
 		addSymbol(new ValueSymbol(location, qual.name, field));
 	}
 
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghpatexpress/TokenField.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghpatexpress/TokenField.java
index ac3f1ab79..ef93d334a 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghpatexpress/TokenField.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/pcodeCPort/slghpatexpress/TokenField.java
@@ -34,6 +34,7 @@ public class TokenField extends PatternValue {
 	private int bitstart, bitend; // Bits within the token, 0 bit is LEAST signifigant
 	private int bytestart, byteend; // Bytes to read to get value
 	private int shift; // Amount to shift to align value (bitstart % 8)
+	private int base; // Display base
 
 	public TokenField(Location location) {
 		super(location);
@@ -57,13 +58,14 @@ public class TokenField extends PatternValue {
 		return res;
 	}
 
-	public TokenField(Location location, Token tk, boolean s, int bstart, int bend) {
+	public TokenField(Location location, Token tk, boolean s, int bstart, int bend, int tbase) {
 		super(location);
 		tok = tk;
 		bigendian = tok.isBigEndian();
 		signbit = s;
 		bitstart = bstart;
 		bitend = bend;
+		base = tbase;
 		if (tk.isBigEndian()) {
 			byteend = (tk.getSize() * 8 - bitstart - 1) / 8;
 			bytestart = (tk.getSize() * 8 - bitend - 1) / 8;
@@ -107,6 +109,8 @@ public class TokenField extends PatternValue {
 		s.append(" byteend=\"").print(byteend);
 		s.append("\"");
 		s.append(" shift=\"").print(shift);
+		s.append("\"");
+		s.append(" base=\"").print(base);
 		s.append("\"/>\n");
 	}
 
@@ -120,6 +124,7 @@ public class TokenField extends PatternValue {
 		bytestart = XmlUtils.decodeUnknownInt(el.getAttributeValue("bytestart"));
 		byteend = XmlUtils.decodeUnknownInt(el.getAttributeValue("byteend"));
 		shift = XmlUtils.decodeUnknownInt(el.getAttributeValue("shift"));
+		base = XmlUtils.decodeUnknownInt(el.getAttributeValue("base"));
 	}
 
 }
diff --git a/GhidraDocs/languages/html/sleigh_tokens.html b/GhidraDocs/languages/html/sleigh_tokens.html
index 1ba4902e6..3c5b2023f 100644
--- a/GhidraDocs/languages/html/sleigh_tokens.html
+++ b/GhidraDocs/languages/html/sleigh_tokens.html
@@ -79,6 +79,8 @@ keywords:
 signed
 hex
 dec
+bin
+oct
 </pre></div>
 <p>
 These attributes are defined in the next section. There can be any
@@ -104,11 +106,14 @@ The attributes of the field affect the resulting specific symbol in
 obvious ways. The <span class="bold"><strong>signed</strong></span> attribute
 determines whether the integer encoding should be treated as just an
 unsigned encoding or if a twos-complement encoding should be used to
-obtain a signed integer. The <span class="bold"><strong>hex</strong></span>
-or <span class="bold"><strong>dec</strong></span> attributes describe whether
-the integer should be displayed with a hexadecimal or decimal
-representation. The default is hexadecimal. [Currently
-the <span class="bold"><strong>dec</strong></span> attribute is not supported]
+obtain a signed integer. The <span class="bold"><strong>hex</strong></span>,
+<span class="bold"><strong>dec</strong></span>,
+<span class="bold"><strong>oct</strong></span> or
+<span class="bold"><strong>bin</strong></span> attributes describe which numeric
+base should be used to display the integer (respectively hexadecimal, decimal,
+octal or binary). The default is hexadecimal. [Currently
+the <span class="bold"><strong>oct</strong></span> and
+<span class="bold"><strong>bin</strong></span> attributes are not supported]
 </p>
 </div>
 <div class="sect2">
-- 
2.39.0

