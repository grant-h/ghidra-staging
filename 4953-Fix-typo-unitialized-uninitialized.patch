From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Matt Borgerson <contact@mborgerson.com>
Date: Thu, 2 Feb 2023 15:39:30 -0700
Subject: [PATCH] 4953: Fix typo: unitialized -> uninitialized

---
 .../guest/DBTraceGuestPlatformMappedMemory.java    |  2 +-
 .../program/AbstractDBTraceProgramViewMemory.java  |  2 +-
 .../help/topics/MemoryMapPlugin/Memory_Map.htm     |  2 +-
 .../core/disassembler/DisassemblerPlugin.java      | 10 +++++-----
 .../app/plugin/core/memory/AddBlockDialog.java     | 10 +++++-----
 .../app/plugin/core/memory/AddBlockModel.java      |  6 +++---
 .../app/plugin/core/memory/MemoryMapModel.java     |  6 +++---
 .../app/util/bin/format/coff/AoutHeaderMIPS.java   |  2 +-
 .../app/plugin/core/memory/AddBlockModelTest.java  |  4 ++--
 .../plugin/core/memory/MemoryMapProvider1Test.java |  4 ++--
 .../java/ghidra/app/util/MemoryBlockUtilTest.java  |  2 +-
 .../app/plugin/core/checksums/MyTestMemory.java    |  2 +-
 .../Features/Decompiler/src/decompile/cpp/fspec.cc |  2 +-
 .../ghidra/program/database/mem/MemoryBlockDB.java |  2 +-
 .../ghidra/program/database/mem/MemoryMapDB.java   | 12 ++++++------
 .../program/database/mem/MemoryMapDBAdapter.java   |  2 +-
 .../program/database/mem/MemoryMapDBAdapterV0.java |  2 +-
 .../program/database/mem/MemoryMapDBAdapterV2.java |  2 +-
 .../program/database/mem/MemoryMapDBAdapterV3.java | 10 +++++-----
 .../database/mem/UninitializedSubMemoryBlock.java  |  2 +-
 .../main/java/ghidra/program/model/mem/Memory.java |  4 ++--
 .../pcode/memstate/UniqueMemoryBankTest.java       |  6 +++---
 .../program/database/mem/MemBlockDBTest.java       | 14 +++++++-------
 23 files changed, 55 insertions(+), 55 deletions(-)

diff --git a/Ghidra/Debug/Framework-TraceModeling/src/main/java/ghidra/trace/database/guest/DBTraceGuestPlatformMappedMemory.java b/Ghidra/Debug/Framework-TraceModeling/src/main/java/ghidra/trace/database/guest/DBTraceGuestPlatformMappedMemory.java
index 642fdc3c4..a72ff23af 100644
--- a/Ghidra/Debug/Framework-TraceModeling/src/main/java/ghidra/trace/database/guest/DBTraceGuestPlatformMappedMemory.java
+++ b/Ghidra/Debug/Framework-TraceModeling/src/main/java/ghidra/trace/database/guest/DBTraceGuestPlatformMappedMemory.java
@@ -332,7 +332,7 @@ public class DBTraceGuestPlatformMappedMemory implements Memory {
 	}
 
 	@Override
-	public MemoryBlock convertToInitialized(MemoryBlock unitializedBlock, byte initialValue)
+	public MemoryBlock convertToInitialized(MemoryBlock uninitializedBlock, byte initialValue)
 			throws LockException, MemoryBlockException, NotFoundException {
 		throw new UnsupportedOperationException();
 	}
diff --git a/Ghidra/Debug/Framework-TraceModeling/src/main/java/ghidra/trace/database/program/AbstractDBTraceProgramViewMemory.java b/Ghidra/Debug/Framework-TraceModeling/src/main/java/ghidra/trace/database/program/AbstractDBTraceProgramViewMemory.java
index f1237c1fb..b1d569e5c 100644
--- a/Ghidra/Debug/Framework-TraceModeling/src/main/java/ghidra/trace/database/program/AbstractDBTraceProgramViewMemory.java
+++ b/Ghidra/Debug/Framework-TraceModeling/src/main/java/ghidra/trace/database/program/AbstractDBTraceProgramViewMemory.java
@@ -257,7 +257,7 @@ public abstract class AbstractDBTraceProgramViewMemory
 	}
 
 	@Override
-	public MemoryBlock convertToInitialized(MemoryBlock unitializedBlock, byte initialValue)
+	public MemoryBlock convertToInitialized(MemoryBlock uninitializedBlock, byte initialValue)
 			throws LockException, MemoryBlockException, NotFoundException {
 		throw new UnsupportedOperationException();
 	}
diff --git a/Ghidra/Features/Base/src/main/help/help/topics/MemoryMapPlugin/Memory_Map.htm b/Ghidra/Features/Base/src/main/help/help/topics/MemoryMapPlugin/Memory_Map.htm
index 76f53a365..c3ef64e59 100644
--- a/Ghidra/Features/Base/src/main/help/help/topics/MemoryMapPlugin/Memory_Map.htm
+++ b/Ghidra/Features/Base/src/main/help/help/topics/MemoryMapPlugin/Memory_Map.htm
@@ -247,7 +247,7 @@
             <UL>
 				<LI><B>Initialized</B> - Specify a value and a new block will be created
 					using that value for every byte in the block. </LI>
-				<LI><B>Uninitialized</B> - An unitialized block will be created.</LI>
+				<LI><B>Uninitialized</B> - An uninitialized block will be created.</LI>
 				<LI><B>File Bytes</B> - Select from a list of imported files and enter
 				a starting offset for that file.  Those bytes will be the initial value for the block.</LI>
 				<P><I><IMG src="help/shared/note.png" border="0"> You can use the "Add To Program"
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/disassembler/DisassemblerPlugin.java b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/disassembler/DisassemblerPlugin.java
index 68d51719d..bfca604ce 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/disassembler/DisassemblerPlugin.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/disassembler/DisassemblerPlugin.java
@@ -263,7 +263,7 @@ public class DisassemblerPlugin extends Plugin {
 				cmd = new DisassembleCommand(addr, restrictedSet, true);
 			}
 			catch (MemoryAccessException e) {
-				tool.setStatusInfo("Can't disassemble unitialized memory!", true);
+				tool.setStatusInfo("Can't disassemble uninitialized memory!", true);
 			}
 		}
 		if (cmd != null) {
@@ -333,7 +333,7 @@ public class DisassemblerPlugin extends Plugin {
 				cmd = new ArmDisassembleCommand(addr, null, thumbMode);
 			}
 			catch (MemoryAccessException e) {
-				tool.setStatusInfo("Can't disassemble unitialized memory!", true);
+				tool.setStatusInfo("Can't disassemble uninitialized memory!", true);
 			}
 		}
 		if (cmd != null) {
@@ -357,7 +357,7 @@ public class DisassemblerPlugin extends Plugin {
 				cmd = new Hcs12DisassembleCommand(addr, null, xgMode);
 			}
 			catch (MemoryAccessException e) {
-				tool.setStatusInfo("Can't disassemble unitialized memory!", true);
+				tool.setStatusInfo("Can't disassemble uninitialized memory!", true);
 			}
 		}
 		if (cmd != null) {
@@ -381,7 +381,7 @@ public class DisassemblerPlugin extends Plugin {
 				cmd = new MipsDisassembleCommand(addr, null, mips16);
 			}
 			catch (MemoryAccessException e) {
-				tool.setStatusInfo("Can't disassemble unitialized memory!", true);
+				tool.setStatusInfo("Can't disassemble uninitialized memory!", true);
 			}
 		}
 		if (cmd != null) {
@@ -405,7 +405,7 @@ public class DisassemblerPlugin extends Plugin {
 				cmd = new PowerPCDisassembleCommand(addr, null, vle);
 			}
 			catch (MemoryAccessException e) {
-				tool.setStatusInfo("Can't disassemble unitialized memory!", true);
+				tool.setStatusInfo("Can't disassemble uninitialized memory!", true);
 			}
 		}
 		if (cmd != null) {
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/memory/AddBlockDialog.java b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/memory/AddBlockDialog.java
index 7b8164362..5c728642e 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/memory/AddBlockDialog.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/memory/AddBlockDialog.java
@@ -79,7 +79,7 @@ class AddBlockDialog extends DialogComponentProvider implements ChangeListener {
 
 	private final static String MAPPED = "Mapped";
 	private final static String UNMAPPED = "Unmapped";
-	private static final String UNITIALIZED = "UNITIALIZED";
+	private static final String UNINITIALIZED = "UNINITIALIZED";
 	private static final String INITIALIZED = "INITIALIZED";
 	private static final String FILE_BYTES = "FILE_BYTES";
 	private JPanel inializedTypePanel;
@@ -246,7 +246,7 @@ class AddBlockDialog extends DialogComponentProvider implements ChangeListener {
 		initializedTypeCardLayout = new CardLayout();
 
 		inializedTypePanel = new JPanel(initializedTypeCardLayout);
-		inializedTypePanel.add(new JPanel(), UNITIALIZED);
+		inializedTypePanel.add(new JPanel(), UNINITIALIZED);
 		inializedTypePanel.add(buildInitalValuePanel(), INITIALIZED);
 		inializedTypePanel.add(buildFileBytesPanel(), FILE_BYTES);
 		return inializedTypePanel;
@@ -312,7 +312,7 @@ class AddBlockDialog extends DialogComponentProvider implements ChangeListener {
 		commentField.setText("");
 		initialValueField.setValue(Long.valueOf(0));
 		model.setBlockType(MemoryBlockType.DEFAULT);
-		model.setInitializedType(AddBlockModel.InitializedType.UNITIALIZED);
+		model.setInitializedType(AddBlockModel.InitializedType.UNINITIALIZED);
 		model.setInitialValue(0);
 
 		readCB.setSelected(model.isRead());
@@ -353,8 +353,8 @@ class AddBlockDialog extends DialogComponentProvider implements ChangeListener {
 			initializedTypeCardLayout.show(inializedTypePanel, INITIALIZED);
 		}
 		else if (uninitializedRB.isSelected()) {
-			model.setInitializedType(InitializedType.UNITIALIZED);
-			initializedTypeCardLayout.show(inializedTypePanel, UNITIALIZED);
+			model.setInitializedType(InitializedType.UNINITIALIZED);
+			initializedTypeCardLayout.show(inializedTypePanel, UNINITIALIZED);
 		}
 		else if (initializedFromFileBytesRB.isSelected()) {
 			model.setInitializedType(InitializedType.INITIALIZED_FROM_FILE_BYTES);
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/memory/AddBlockModel.java b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/memory/AddBlockModel.java
index 5380330cf..469e8f137 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/memory/AddBlockModel.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/memory/AddBlockModel.java
@@ -61,7 +61,7 @@ class AddBlockModel {
 	private long fileBytesOffset = -1;
 
 	enum InitializedType {
-		UNITIALIZED, INITIALIZED_FROM_VALUE, INITIALIZED_FROM_FILE_BYTES;
+		UNINITIALIZED, INITIALIZED_FROM_VALUE, INITIALIZED_FROM_FILE_BYTES;
 	}
 
 	AddBlockModel(PluginTool tool, Program program) {
@@ -127,7 +127,7 @@ class AddBlockModel {
 		isOverlay = false;
 		schemeDestByteCount = blockType == MemoryBlockType.BIT_MAPPED ? 8 : 1;
 		schemeSrcByteCount = 1;
-		initializedType = InitializedType.UNITIALIZED;
+		initializedType = InitializedType.UNINITIALIZED;
 		validateInfo();
 		listener.stateChanged(null);
 	}
@@ -275,7 +275,7 @@ class AddBlockModel {
 			case INITIALIZED_FROM_VALUE:
 				return new AddInitializedMemoryBlockCmd(blockName, comment, source, startAddr,
 					length, isRead, isWrite, isExecute, isVolatile, (byte) initialValue, isOverlay);
-			case UNITIALIZED:
+			case UNINITIALIZED:
 				return new AddUninitializedMemoryBlockCmd(blockName, comment, source, startAddr,
 					length, isRead, isWrite, isExecute, isVolatile, isOverlay);
 			default:
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/memory/MemoryMapModel.java b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/memory/MemoryMapModel.java
index ab2449b83..5a5576c61 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/memory/MemoryMapModel.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/memory/MemoryMapModel.java
@@ -358,7 +358,7 @@ class MemoryMapModel extends AbstractSortedTableModel<MemoryBlock> {
 						initializeBlock(block);
 					}
 					else {
-						revertBlockToUnitialized(block);
+						revertBlockToUninitialized(block);
 					}
 					return;
 
@@ -392,9 +392,9 @@ class MemoryMapModel extends AbstractSortedTableModel<MemoryBlock> {
 		}
 	}
 
-	private void revertBlockToUnitialized(MemoryBlock block) {
+	private void revertBlockToUninitialized(MemoryBlock block) {
 		int result = OptionDialog.showYesNoDialog(provider.getComponent(),
-			"Confirm Setting Block To Unitialized",
+			"Confirm Setting Block To Uninitialized",
 			"Are you sure you want to remove the bytes from this block? \n\n" +
 				"This will result in removing all functions, instructions, data,\n" +
 				"and outgoing references from the block!");
diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/AoutHeaderMIPS.java b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/AoutHeaderMIPS.java
index fbe79b9f4..0b6f22921 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/AoutHeaderMIPS.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/coff/AoutHeaderMIPS.java
@@ -37,7 +37,7 @@ public class AoutHeaderMIPS extends AoutHeader {
 		gp_value    = reader.readNextInt();
 	}
 
-	public int getUnitializedDataStart() {
+	public int getUninitializedDataStart() {
 		return bss_start;
 	}
 
diff --git a/Ghidra/Features/Base/src/test.slow/java/ghidra/app/plugin/core/memory/AddBlockModelTest.java b/Ghidra/Features/Base/src/test.slow/java/ghidra/app/plugin/core/memory/AddBlockModelTest.java
index 8f03e90d5..7fb77e71c 100644
--- a/Ghidra/Features/Base/src/test.slow/java/ghidra/app/plugin/core/memory/AddBlockModelTest.java
+++ b/Ghidra/Features/Base/src/test.slow/java/ghidra/app/plugin/core/memory/AddBlockModelTest.java
@@ -236,7 +236,7 @@ public class AddBlockModelTest extends AbstractGhidraHeadedIntegrationTest
 		model.setStartAddress(getAddr(0x100));
 		model.setLength(100);
 		model.setBlockType(MemoryBlockType.BIT_MAPPED);
-		assertEquals(InitializedType.UNITIALIZED, model.getInitializedType());
+		assertEquals(InitializedType.UNINITIALIZED, model.getInitializedType());
 		model.setBaseAddress(getAddr(0x2000));
 
 		assertTrue(model.execute());
@@ -251,7 +251,7 @@ public class AddBlockModelTest extends AbstractGhidraHeadedIntegrationTest
 		model.setStartAddress(getAddr(0x100));
 		model.setLength(100);
 		model.setBlockType(MemoryBlockType.BYTE_MAPPED);
-		assertEquals(InitializedType.UNITIALIZED, model.getInitializedType());
+		assertEquals(InitializedType.UNINITIALIZED, model.getInitializedType());
 		model.setBaseAddress(getAddr(0x2000));
 
 		assertTrue(model.execute());
diff --git a/Ghidra/Features/Base/src/test.slow/java/ghidra/app/plugin/core/memory/MemoryMapProvider1Test.java b/Ghidra/Features/Base/src/test.slow/java/ghidra/app/plugin/core/memory/MemoryMapProvider1Test.java
index 5834b119c..746581e68 100644
--- a/Ghidra/Features/Base/src/test.slow/java/ghidra/app/plugin/core/memory/MemoryMapProvider1Test.java
+++ b/Ghidra/Features/Base/src/test.slow/java/ghidra/app/plugin/core/memory/MemoryMapProvider1Test.java
@@ -478,7 +478,7 @@ public class MemoryMapProvider1Test extends AbstractGhidraHeadedIntegrationTest
 	@Test
 	public void testSortBlockType() throws Exception {
 
-		// add a bit overlay block, live block, and an unitialized block
+		// add a bit overlay block, live block, and an uninitialized block
 		tx(program, () -> {
 			memory.createBitMappedBlock(".Bit", getAddr(0), getAddr(0x01001000), 0x100, false);
 			memory.createUninitializedBlock(".Uninit", getAddr(0x3000), 0x200, false);
@@ -504,7 +504,7 @@ public class MemoryMapProvider1Test extends AbstractGhidraHeadedIntegrationTest
 
 	@Test
 	public void testSortBlockTypeDescending() throws Exception {
-		// add a bit overlay block, live block, and an unitialized block
+		// add a bit overlay block, live block, and an uninitialized block
 		tx(program, () -> {
 			memory.createBitMappedBlock(".Bit", getAddr(0), getAddr(0x01001000), 0x100, false);
 			memory.createUninitializedBlock(".Uninit", getAddr(0x3000), 0x200, false);
diff --git a/Ghidra/Features/Base/src/test.slow/java/ghidra/app/util/MemoryBlockUtilTest.java b/Ghidra/Features/Base/src/test.slow/java/ghidra/app/util/MemoryBlockUtilTest.java
index 2d60d4d15..91f439a6b 100644
--- a/Ghidra/Features/Base/src/test.slow/java/ghidra/app/util/MemoryBlockUtilTest.java
+++ b/Ghidra/Features/Base/src/test.slow/java/ghidra/app/util/MemoryBlockUtilTest.java
@@ -94,7 +94,7 @@ public class MemoryBlockUtilTest extends AbstractGhidraHeadedIntegrationTest {
 	}
 
 	@Test
-	public void testGetByteOnUnitializedBlock() {
+	public void testGetByteOnUninitializedBlock() {
 		MemoryBlock block = MemoryBlockUtils.createUninitializedBlock(prog, false, "a",
 			space.getAddress(3000), 1000, "Acomment", "Asource", true, true, true, log);
 		try {
diff --git a/Ghidra/Features/Base/src/test/java/ghidra/app/plugin/core/checksums/MyTestMemory.java b/Ghidra/Features/Base/src/test/java/ghidra/app/plugin/core/checksums/MyTestMemory.java
index 65190b264..b5901c34f 100644
--- a/Ghidra/Features/Base/src/test/java/ghidra/app/plugin/core/checksums/MyTestMemory.java
+++ b/Ghidra/Features/Base/src/test/java/ghidra/app/plugin/core/checksums/MyTestMemory.java
@@ -179,7 +179,7 @@ public class MyTestMemory extends AddressSet implements Memory {
 	}
 
 	@Override
-	public MemoryBlock convertToInitialized(MemoryBlock unitializedBlock, byte initialValue)
+	public MemoryBlock convertToInitialized(MemoryBlock uninitializedBlock, byte initialValue)
 			throws MemoryBlockException, NotFoundException {
 		throw new UnsupportedOperationException();
 	}
diff --git a/Ghidra/Features/Decompiler/src/decompile/cpp/fspec.cc b/Ghidra/Features/Decompiler/src/decompile/cpp/fspec.cc
index 6d0a4d5b0..32d794fda 100644
--- a/Ghidra/Features/Decompiler/src/decompile/cpp/fspec.cc
+++ b/Ghidra/Features/Decompiler/src/decompile/cpp/fspec.cc
@@ -2943,7 +2943,7 @@ ProtoStoreSymbol::~ProtoStoreSymbol(void)
 
 /// Retrieve the specified ProtoParameter object, making sure it is a ParameterSymbol.
 /// If it doesn't exist, or if the object in the specific slot is not a ParameterSymbol,
-/// allocate an (unitialized) parameter.
+/// allocate an (uninitialized) parameter.
 /// \param i is the specified input slot
 /// \return the corresponding parameter
 ParameterSymbol *ProtoStoreSymbol::getSymbolBacked(int4 i)
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/mem/MemoryBlockDB.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/mem/MemoryBlockDB.java
index cdde05103..36ca69815 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/mem/MemoryBlockDB.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/mem/MemoryBlockDB.java
@@ -701,7 +701,7 @@ public class MemoryBlockDB implements MemoryBlock {
 		}
 		subBlocks.clear();
 		DBRecord subRecord = adapter.createSubBlockRecord(id, 0, length,
-			MemoryMapDBAdapter.SUB_TYPE_UNITIALIZED, 0, 0);
+			MemoryMapDBAdapter.SUB_TYPE_UNINITIALIZED, 0, 0);
 		subBlocks.add(new UninitializedSubMemoryBlock(adapter, subRecord));
 
 	}
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/mem/MemoryMapDB.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/mem/MemoryMapDB.java
index a5bcba23b..c163297c6 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/mem/MemoryMapDB.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/mem/MemoryMapDB.java
@@ -1074,24 +1074,24 @@ public class MemoryMapDB implements Memory, ManagerDB, LiveMemoryListener {
 	}
 
 	@Override
-	public MemoryBlock convertToInitialized(MemoryBlock unitializedBlock, byte initialValue)
+	public MemoryBlock convertToInitialized(MemoryBlock uninitializedBlock, byte initialValue)
 			throws MemoryBlockException, NotFoundException, LockException {
 		lock.acquire();
 		try {
-			checkBlock(unitializedBlock);
+			checkBlock(uninitializedBlock);
 			program.checkExclusiveAccess();
-			if (unitializedBlock.isInitialized()) {
+			if (uninitializedBlock.isInitialized()) {
 				throw new IllegalArgumentException(
 					"Only an Uninitialized Block may be converted to an Initialized Block");
 			}
-			if (unitializedBlock.getType() != MemoryBlockType.DEFAULT) {
+			if (uninitializedBlock.getType() != MemoryBlockType.DEFAULT) {
 				throw new IllegalArgumentException("Block is of a type that cannot be initialized");
 			}
-			long size = unitializedBlock.getSize();
+			long size = uninitializedBlock.getSize();
 			if (size > MAX_BLOCK_SIZE) {
 				throw new MemoryBlockException("Block too large to initialize");
 			}
-			MemoryBlockDB memBlock = (MemoryBlockDB) unitializedBlock;
+			MemoryBlockDB memBlock = (MemoryBlockDB) uninitializedBlock;
 			try {
 				memBlock.initializeBlock(initialValue);
 				initializeBlocks();
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/mem/MemoryMapDBAdapter.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/mem/MemoryMapDBAdapter.java
index c9ade852f..adaeabc23 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/mem/MemoryMapDBAdapter.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/mem/MemoryMapDBAdapter.java
@@ -72,7 +72,7 @@ abstract class MemoryMapDBAdapter {
 	static final byte SUB_TYPE_BIT_MAPPED = MemoryMapDBAdapterV3.V3_SUB_TYPE_BIT_MAPPED;
 	static final byte SUB_TYPE_BYTE_MAPPED = MemoryMapDBAdapterV3.V3_SUB_TYPE_BYTE_MAPPED;
 	static final byte SUB_TYPE_BUFFER = MemoryMapDBAdapterV3.V3_SUB_TYPE_BUFFER;
-	static final byte SUB_TYPE_UNITIALIZED = MemoryMapDBAdapterV3.V3_SUB_TYPE_UNITIALIZED;
+	static final byte SUB_TYPE_UNINITIALIZED = MemoryMapDBAdapterV3.V3_SUB_TYPE_UNINITIALIZED;
 	static final byte SUB_TYPE_FILE_BYTES = MemoryMapDBAdapterV3.V3_SUB_TYPE_FILE_BYTES;
 
 	static MemoryMapDBAdapter getAdapter(DBHandle handle, int openMode, MemoryMapDB memMap,
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/mem/MemoryMapDBAdapterV0.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/mem/MemoryMapDBAdapterV0.java
index e79b4085a..a34a7133f 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/mem/MemoryMapDBAdapterV0.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/mem/MemoryMapDBAdapterV0.java
@@ -167,7 +167,7 @@ class MemoryMapDBAdapterV0 extends MemoryMapDBAdapter {
 				record.setIntValue(SUB_INT_DATA1_COL, bufID);
 				return new BufferSubMemoryBlock(this, record);
 			case UNINITIALIZED:
-				record.setByteValue(SUB_TYPE_COL, SUB_TYPE_UNITIALIZED);
+				record.setByteValue(SUB_TYPE_COL, SUB_TYPE_UNINITIALIZED);
 				return new UninitializedSubMemoryBlock(this, record);
 			default:
 				throw new IOException("Unknown memory block type: " + type);
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/mem/MemoryMapDBAdapterV2.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/mem/MemoryMapDBAdapterV2.java
index 2c9425fc0..00ce73cda 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/mem/MemoryMapDBAdapterV2.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/mem/MemoryMapDBAdapterV2.java
@@ -136,7 +136,7 @@ class MemoryMapDBAdapterV2 extends MemoryMapDBAdapter {
 				record.setIntValue(SUB_INT_DATA1_COL, bufID);
 				return new BufferSubMemoryBlock(this, record);
 			case UNINITIALIZED:
-				record.setByteValue(SUB_TYPE_COL, SUB_TYPE_UNITIALIZED);
+				record.setByteValue(SUB_TYPE_COL, SUB_TYPE_UNINITIALIZED);
 				return new UninitializedSubMemoryBlock(this, record);
 			default:
 				throw new IOException("Unknown memory block type: " + type);
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/mem/MemoryMapDBAdapterV3.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/mem/MemoryMapDBAdapterV3.java
index e72aa5934..7cacfc57d 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/mem/MemoryMapDBAdapterV3.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/mem/MemoryMapDBAdapterV3.java
@@ -54,7 +54,7 @@ public class MemoryMapDBAdapterV3 extends MemoryMapDBAdapter {
 	static final byte V3_SUB_TYPE_BIT_MAPPED = 0;
 	static final byte V3_SUB_TYPE_BYTE_MAPPED = 1;
 	static final byte V3_SUB_TYPE_BUFFER = 2;
-	static final byte V3_SUB_TYPE_UNITIALIZED = 3;
+	static final byte V3_SUB_TYPE_UNINITIALIZED = 3;
 	static final byte V3_SUB_TYPE_FILE_BYTES = 4;
 
 	static Schema V3_BLOCK_SCHEMA = new Schema(V3_VERSION, "Key",
@@ -215,7 +215,7 @@ public class MemoryMapDBAdapterV3 extends MemoryMapDBAdapter {
 		if (initializeBytes) {
 			return createInitializedBlock(name, startAddr, null, length, permissions);
 		}
-		return createUnitializedBlock(name, startAddr, length, permissions);
+		return createUninitializedBlock(name, startAddr, length, permissions);
 	}
 
 	@Override
@@ -238,7 +238,7 @@ public class MemoryMapDBAdapterV3 extends MemoryMapDBAdapter {
 		return newBlock;
 	}
 
-	MemoryBlockDB createUnitializedBlock(String name, Address startAddress, long length,
+	MemoryBlockDB createUninitializedBlock(String name, Address startAddress, long length,
 			int permissions) throws IOException, AddressOverflowException {
 		updateAddressMapForAllAddresses(startAddress, length);
 
@@ -246,7 +246,7 @@ public class MemoryMapDBAdapterV3 extends MemoryMapDBAdapter {
 		DBRecord blockRecord = createMemoryBlockRecord(name, startAddress, length, permissions);
 		long key = blockRecord.getKey();
 
-		DBRecord subRecord = createSubBlockRecord(key, 0, length, V3_SUB_TYPE_UNITIALIZED, 0, 0);
+		DBRecord subRecord = createSubBlockRecord(key, 0, length, V3_SUB_TYPE_UNINITIALIZED, 0, 0);
 		subBlocks.add(new UninitializedSubMemoryBlock(this, subRecord));
 
 		memBlockTable.putRecord(blockRecord);
@@ -420,7 +420,7 @@ public class MemoryMapDBAdapterV3 extends MemoryMapDBAdapter {
 				return new ByteMappedSubMemoryBlock(this, record);
 			case V3_SUB_TYPE_BUFFER:
 				return new BufferSubMemoryBlock(this, record);
-			case V3_SUB_TYPE_UNITIALIZED:
+			case V3_SUB_TYPE_UNINITIALIZED:
 				return new UninitializedSubMemoryBlock(this, record);
 			case V3_SUB_TYPE_FILE_BYTES:
 				return new FileBytesSubMemoryBlock(this, record);
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/mem/UninitializedSubMemoryBlock.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/mem/UninitializedSubMemoryBlock.java
index 7bdedf13e..1b89c52c2 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/mem/UninitializedSubMemoryBlock.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/database/mem/UninitializedSubMemoryBlock.java
@@ -79,7 +79,7 @@ class UninitializedSubMemoryBlock extends SubMemoryBlock {
 		adapter.updateSubBlockRecord(record);
 
 		DBRecord newSubRecord = adapter.createSubBlockRecord(-1, 0, newLength,
-			MemoryMapDBAdapter.SUB_TYPE_UNITIALIZED, 0, 0);
+			MemoryMapDBAdapter.SUB_TYPE_UNINITIALIZED, 0, 0);
 
 		return new UninitializedSubMemoryBlock(adapter, newSubRecord);
 	}
diff --git a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/mem/Memory.java b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/mem/Memory.java
index d532d627d..3780ef5fa 100644
--- a/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/mem/Memory.java
+++ b/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/mem/Memory.java
@@ -392,14 +392,14 @@ public interface Memory extends AddressSetView {
 	/**
 	 * Convert an existing uninitialized block with an
 	 * initialized block.
-	 * @param unitializedBlock unitialized block to convert
+	 * @param uninitializedBlock uninitialized block to convert
 	 * @param initialValue initial value for the bytes
 	 * @throws LockException if exclusive lock not in place (see haveLock())
 	 * @throws MemoryBlockException if there is no block in memory
 	 * at the same address as block or if the block lengths are not
 	 * the same.
 	 */
-	public MemoryBlock convertToInitialized(MemoryBlock unitializedBlock, byte initialValue)
+	public MemoryBlock convertToInitialized(MemoryBlock uninitializedBlock, byte initialValue)
 			throws LockException, MemoryBlockException, NotFoundException;
 
 	public MemoryBlock convertToUninitialized(MemoryBlock itializedBlock)
diff --git a/Ghidra/Framework/SoftwareModeling/src/test/java/ghidra/pcode/memstate/UniqueMemoryBankTest.java b/Ghidra/Framework/SoftwareModeling/src/test/java/ghidra/pcode/memstate/UniqueMemoryBankTest.java
index c1ad058c9..0c6ea5c1f 100644
--- a/Ghidra/Framework/SoftwareModeling/src/test/java/ghidra/pcode/memstate/UniqueMemoryBankTest.java
+++ b/Ghidra/Framework/SoftwareModeling/src/test/java/ghidra/pcode/memstate/UniqueMemoryBankTest.java
@@ -75,7 +75,7 @@ public class UniqueMemoryBankTest extends AbstractGenericTest {
 	}
 
 	@Test(expected = LowlevelError.class)
-	public void testGetUnitializedByte() {
+	public void testGetUninitializedByte() {
 		WordInfo info = new WordInfo();
 		info.setByte((byte) 0, 0);
 		info.setByte((byte) 1, 1);
@@ -219,13 +219,13 @@ public class UniqueMemoryBankTest extends AbstractGenericTest {
 	}
 
 	@Test(expected = LowlevelError.class)
-	public void testUnitializedReadStop() {
+	public void testUninitializedReadStop() {
 		byte[] dest = new byte[16];
 		uniqueBank.getChunk(0x1000, 0x10, dest, false);
 	}
 
 	@Test
-	public void testUnitializedReadContinue() {
+	public void testUninitializedReadContinue() {
 		byte[] dest = new byte[16];
 		int bytesRead = uniqueBank.getChunk(0x1000, 0x10, dest, true);
 		assertEquals(0, bytesRead);
diff --git a/Ghidra/Framework/SoftwareModeling/src/test/java/ghidra/program/database/mem/MemBlockDBTest.java b/Ghidra/Framework/SoftwareModeling/src/test/java/ghidra/program/database/mem/MemBlockDBTest.java
index 89f4f920b..f67667713 100644
--- a/Ghidra/Framework/SoftwareModeling/src/test/java/ghidra/program/database/mem/MemBlockDBTest.java
+++ b/Ghidra/Framework/SoftwareModeling/src/test/java/ghidra/program/database/mem/MemBlockDBTest.java
@@ -123,7 +123,7 @@ public class MemBlockDBTest extends AbstractGenericTest {
 		assertEquals(addr(9), info.getMaxAddress());
 		try {
 			block.getByte(addr(0));
-			fail("expected exception trying to read bytes on unitialized block");
+			fail("expected exception trying to read bytes on uninitialized block");
 		}
 		catch (MemoryAccessException e) {
 			// expected
@@ -131,7 +131,7 @@ public class MemBlockDBTest extends AbstractGenericTest {
 	}
 
 	@Test
-	public void testCreateUnitializedOverlayBlock() throws Exception {
+	public void testCreateUninitializedOverlayBlock() throws Exception {
 		MemoryBlock block = mem.createUninitializedBlock("test", addr(0), 10, true);
 
 		assertEquals(10, block.getSize());
@@ -148,7 +148,7 @@ public class MemBlockDBTest extends AbstractGenericTest {
 		assertEquals(10, info.getLength());
 		try {
 			block.getByte(block.getStart());
-			fail("expected exception trying to read bytes on unitialized block");
+			fail("expected exception trying to read bytes on uninitialized block");
 		}
 		catch (MemoryAccessException e) {
 			// expected
@@ -206,7 +206,7 @@ public class MemBlockDBTest extends AbstractGenericTest {
 		}
 		try {
 			mem.getByte(block.getStart().add(10));
-			fail("expected exception trying to read bytes on mapped unitialized block");
+			fail("expected exception trying to read bytes on mapped uninitialized block");
 		}
 		catch (MemoryAccessException e) {
 			// expected 
@@ -243,7 +243,7 @@ public class MemBlockDBTest extends AbstractGenericTest {
 		}
 		try {
 			mem.getByte(block.getStart().add(8));
-			fail("expected exception trying to read bytes on mapped unitialized block");
+			fail("expected exception trying to read bytes on mapped uninitialized block");
 		}
 		catch (MemoryAccessException e) {
 			// expected 
@@ -533,7 +533,7 @@ public class MemBlockDBTest extends AbstractGenericTest {
 	}
 
 	@Test
-	public void testSplitAndJoinUnitializedBlock() throws Exception {
+	public void testSplitAndJoinUninitializedBlock() throws Exception {
 		MemoryBlock block = mem.createUninitializedBlock("test", addr(0), 40, false);
 		mem.split(block, addr(10));
 		MemoryBlock[] blocks = mem.getBlocks();
@@ -977,7 +977,7 @@ public class MemBlockDBTest extends AbstractGenericTest {
 	}
 
 	@Test
-	public void testAddressSourceInfoForUnitialized() throws Exception {
+	public void testAddressSourceInfoForUninitialized() throws Exception {
 		mem.createUninitializedBlock("test", addr(0), 10, false);
 
 		AddressSourceInfo info = mem.getAddressSourceInfo(addr(0));
-- 
2.39.1

