From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Johannes Obermayr <johannesobermayr@gmx.de>
Date: Sat, 3 Jun 2023 12:49:09 +0200
Subject: [PATCH] 5413: Enable build of decomp_dbg and sleigh_dbg

Building decomp_dbg and sleigh_dbg can now easily enabled via 'gradle -Pdebug' switch.

Fixes: #5296
---
 .../Features/Decompiler/buildNatives.gradle   | 377 ++++++++++--------
 1 file changed, 214 insertions(+), 163 deletions(-)

diff --git a/Ghidra/Features/Decompiler/buildNatives.gradle b/Ghidra/Features/Decompiler/buildNatives.gradle
index ce4424ece..0fc6103c4 100644
--- a/Ghidra/Features/Decompiler/buildNatives.gradle
+++ b/Ghidra/Features/Decompiler/buildNatives.gradle
@@ -22,21 +22,127 @@ if (findProject(':Generic') == null) {
 	apply from: "../../../GPL/nativeBuildProperties.gradle"
 }
 
+def common_files = [
+	"address.cc",
+	"float.cc",
+	"globalcontext.cc",
+	"marshal.cc",
+	"opcodes.cc",
+	"pcoderaw.cc",
+	"space.cc",
+	"translate.cc",
+	"xml.cc"
+]
+
+def decompiler_files = [
+	"action.cc",
+	"architecture.cc",
+	"block.cc",
+	"blockaction.cc",
+	"capability.cc",
+	"cast.cc",
+	"comment.cc",
+	"comment_ghidra.cc",
+	"condexe.cc",
+	"coreaction.cc",
+	"cover.cc",
+	"cpool.cc",
+	"cpool_ghidra.cc",
+	"crc32.cc",
+	"database.cc",
+	"database_ghidra.cc",
+	"double.cc",
+	"dynamic.cc",
+	"emulate.cc",
+	"emulateutil.cc",
+	"flow.cc",
+	"fspec.cc",
+	"funcdata.cc",
+	"funcdata_block.cc",
+	"funcdata_op.cc",
+	"funcdata_varnode.cc",
+	"ghidra_arch.cc",
+	"ghidra_context.cc",
+	"ghidra_process.cc",
+	"ghidra_translate.cc",
+	"globalcontext.cc",
+	"graph.cc",
+	"heritage.cc",
+	"inject_ghidra.cc",
+	"jumptable.cc",
+	"loadimage.cc",
+	"loadimage_ghidra.cc",
+	"memstate.cc",
+	"merge.cc",
+	"op.cc",
+	"opbehavior.cc",
+	"options.cc",
+	"override.cc",
+	"paramid.cc",
+	"pcodeinject.cc",
+	"prefersplit.cc",
+	"prettyprint.cc",
+	"printc.cc",
+	"printjava.cc",
+	"printlanguage.cc",
+	"rangeutil.cc",
+	"ruleaction.cc",
+	"string_ghidra.cc",
+	"stringmanage.cc",
+	"subflow.cc",
+	"transform.cc",
+	"type.cc",
+	"typegrp_ghidra.cc",
+	"typeop.cc",
+	"unionresolve.cc",
+	"userop.cc",
+	"variable.cc",
+	"varmap.cc",
+	"varnode.cc"
+]
+
+def sleigh_files = [
+	"context.cc",
+	"filemanage.cc",
+	"pcodecompile.cc",
+	"pcodeparse.cc",
+	"semantics.cc",
+	"sleigh.cc",
+	"sleighbase.cc",
+	"slgh_compile.cc",
+	"slghparse.cc",
+	"slghpatexpress.cc",
+	"slghpattern.cc",
+	"slghscan.cc",
+	"slghsymbol.cc"
+]
+
+def debug_files = [
+	"callgraph.cc",
+	"grammar.cc",
+	"ifacedecomp.cc",
+	"ifaceterm.cc",
+	"interface.cc",
+	"testfunction.cc"
+]
+
 /**
  * Define the "native build model" for building the decompiler executables.
  */
-model {
 
+model {
 	// Define the source files that are compiled and linked to become the decompiler.
 	// The decompiler source is a bit weird in that all the cpp and headers all live in
 	// the same directory with other files that are not used by the decompiler.
 	// That is why we have to list every cpp file that makes up the decomplier.
+	// NOTE: The bison/flex generated files are assumed to be up-to-date.
+	//       The task `generateParsers` should be executed if needed.
+	// builtBy lexSleigh
+
 	components {
 
 		decompile(NativeExecutableSpec) {
-
 			baseName "decompile"
-
 			// these tell gradle for which platforms to build a decompiler executable.
 			targetPlatform "win_x86_64"
 			targetPlatform "linux_x86_64"
@@ -45,98 +151,21 @@ model {
 			targetPlatform "mac_arm_64"
 			sources {
 				cpp {
-					// NOTE: The bison/flex generated files are assumed to be up-to-date.
-					//       The task `generateParsers` should be executed if needed.
-					// builtBy yaccDecompiler
-		            source {
-		                srcDir "src/decompile/cpp"
-		                
-		         	 	include "marshal.cc"
-		                include "space.cc"
-		                include "float.cc"
-		                include "address.cc"
-		                include "pcoderaw.cc"
-		                include "translate.cc"
-		                include "opcodes.cc"
-		                include "globalcontext.cc"
-		                include "capability.cc"
-		                include "architecture.cc"
-		                include "options.cc"
-		                include "graph.cc"
-		                include "cover.cc"
-		                include "block.cc"
-		                include "cast.cc"
-		                include "typeop.cc"
-		                include "database.cc"
-		                include "cpool.cc"
-		                include "comment.cc"
-						include "stringmanage.cc"
-		                include "fspec.cc"
-		                include "action.cc"
-		                include "loadimage.cc"
-		                include "varnode.cc"
-		                include "op.cc"
-		                include "type.cc"
-		                include "variable.cc"
-		                include "varmap.cc"
-		                include "jumptable.cc"
-		                include "emulate.cc"
-		                include "emulateutil.cc"
-		                include "flow.cc"
-		                include "userop.cc"
-		                include "funcdata.cc"
-		                include "funcdata_block.cc"
-		                include "funcdata_varnode.cc"
-		                include "unionresolve.cc"
-		                include "funcdata_op.cc"
-		                include "pcodeinject.cc"
-		                include "heritage.cc"
-		                include "prefersplit.cc"
-		                include "rangeutil.cc"
-		                include "ruleaction.cc"
-		                include "subflow.cc"
-		                include "transform.cc"
-		                include "blockaction.cc"
-		                include "merge.cc"
-		                include "double.cc"
-		                include "coreaction.cc"
-		                include "condexe.cc"
-		                include "override.cc"
-		                include "dynamic.cc"
-		                include "crc32.cc"
-		                include "prettyprint.cc"
-		                include "printlanguage.cc"
-		                include "printc.cc"
-		                include "printjava.cc"
-		                include "memstate.cc"
-		                include "opbehavior.cc"
-		                include "paramid.cc"
-		                include "ghidra_arch.cc"
-		                include "inject_ghidra.cc"
-		                include "ghidra_translate.cc"
-		                include "loadimage_ghidra.cc"
-		                include "typegrp_ghidra.cc"
-		                include "database_ghidra.cc"
-		                include "ghidra_context.cc"
-		                include "cpool_ghidra.cc"
-		                include "ghidra_process.cc"
-		                include "comment_ghidra.cc"
-						include "string_ghidra.cc"
-		         //       include "callgraph.cc"			// uncomment for debug
-		         //       include "ifacedecomp.cc"			// uncomment for debug
-		         //       include "ifaceterm.cc"			// uncomment for debug
-		         //       include "interface.cc"			// uncomment for debug
-
-		         		// generated source files
-
-		         	 	include "xml.cc"
-		         // 	  include "grammar.cc"				// used by diagnostic console mode
-		            }
+					source {
+						srcDir "src/decompile/cpp"
+						include common_files
+						include decompiler_files
+					}
 					exportedHeaders {
 						srcDir "src/decompile/cpp"
 					}
-				} // end cpp
-			} // end sources
+				}
+			}
+			binaries.all { b ->
+				if (b.toolChain in Gcc || b.toolChain in Clang) {
+					b.cppCompiler.args "-O2"
+				}
+			}
 		} // end decompile
 
 		sleigh(NativeExecutableSpec) {
@@ -147,91 +176,113 @@ model {
 			targetPlatform "mac_arm_64"
 			sources {
 				cpp {
-					// NOTE: The bison/flex generated files are assumed to be up-to-date.
-					//       The task `generateParsers` should be executed if needed.
-					// builtBy lexSleigh
 					source {
 						srcDir "src/decompile/cpp"
-						
-		         	 	include "marshal.cc"
-						include "space.cc"
-						include "float.cc"
-						include "address.cc"
-						include "pcoderaw.cc"
-						include "translate.cc"
-						include "opcodes.cc"
-						include "globalcontext.cc"
-						include "sleigh.cc"
-						include "pcodecompile.cc"
-						include "sleighbase.cc"
-						include "slghsymbol.cc"
-						include "slghpatexpress.cc"
-						include "slghpattern.cc"
-						include "semantics.cc"
-						include "context.cc"
-						include "filemanage.cc"
-						include "slgh_compile.cc"
-
-						// generated source files
-
-						include "xml.cc"
-						include "pcodeparse.cc"
-						include "slghparse.cc"
-						include "slghscan.cc"
+						include common_files
+						include sleigh_files
 					}
 					exportedHeaders {
 						srcDir "src/decompile/cpp"
 					}
-				} // end cpp
-			} // end sources (sleigh)
+				}
+			}
+			binaries.all { b ->
+				if (b.toolChain in Gcc || b.toolChain in Clang) {
+					b.cppCompiler.args "-O2"
+				}
+			}
 		} // end sleigh
 
-	}  // end components
+		if (project.hasProperty('debug')) {
+			decomp_dbg(NativeExecutableSpec) {
+				baseName "decomp_dbg"
+				targetPlatform "win_x86_64"
+				targetPlatform "linux_x86_64"
+				targetPlatform "linux_arm_64"
+				targetPlatform "mac_x86_64"
+				targetPlatform "mac_arm_64"
+				sources {
+					cpp {
+						source {
+							srcDir "src/decompile/cpp"
+							include common_files
+							include decompiler_files
+							include debug_files
+						}
+						exportedHeaders {
+							srcDir "src/decompile/cpp"
+						}
+					}
+				}
+				binaries.all { b ->
+					if (b.toolChain in Gcc || b.toolChain in Clang) {
+						b.cppCompiler.args "-g"
+					}
+					else if (b.toolChain in VisualCpp) {
+						b.cppCompiler.args "/Zi"
+						b.cppCompiler.args "/FS"
+						b.linker.args "/DEBUG"
+					}
+				}
+			} // end decomp_dbg
 
-	binaries {
-		all{ b ->
-			if (b.toolChain in Gcc) {
-				b.cppCompiler.args "-std=c++11"
-				b.cppCompiler.args "-Wall"
-				b.cppCompiler.args "-O2"			// for DEBUG, comment this line out
-				// b.cppCompiler.args "-g"			// for DEBUG, uncomment	this line
-				b.cppCompiler.args "-Wno-sign-compare"
-				if (b.targetPlatform.operatingSystem.linux) {
-//					b.linker.args "-static"
-					b.cppCompiler.define "LINUX"
-					b.cppCompiler.define "_LINUX"
+			sleigh_dbg(NativeExecutableSpec) {
+				targetPlatform "win_x86_64"
+				targetPlatform "linux_x86_64"
+				targetPlatform "linux_arm_64"
+				targetPlatform "mac_x86_64"
+				targetPlatform "mac_arm_64"
+				sources {
+					cpp {
+						source {
+							srcDir "src/decompile/cpp"
+							include common_files
+							include sleigh_files
+						}
+						exportedHeaders {
+							srcDir "src/decompile/cpp"
+						}
+					}
 				}
-			}
-		 	else if (b.toolChain in VisualCpp) {
-				b.cppCompiler.args "/EHsc"
-				b.cppCompiler.define "_SECURE_SCL=0"
-				b.cppCompiler.define "_HAS_ITERATOR_DEBUGGING=0"
-				b.cppCompiler.define "_HAS_STD_BYTE=0"  // msvc has a byte typedef that conflicts with c++17 std::byte
-				// b.cppCompiler.args "/Zi"		// for DEBUG, uncomment this line
-				// b.cppCompiler.args "/FS"		// for DEBUG, uncomment this line
-				// b.linker.args "/DEBUG"		// for DEBUG, uncomment this line
-				if (b.targetPlatform.operatingSystem.windows) {
-					b.cppCompiler.define "WINDOWS"
-					b.cppCompiler.define "_WINDOWS"
-					b.cppCompiler.define "WIN32"
-					b.cppCompiler.define "_WIN32"
-					if (b.targetPlatform.name == "win_x86_64") {
-						b.cppCompiler.define "WIN64"
-						b.cppCompiler.define "_WIN64"
+				binaries.all { b ->
+					if (b.toolChain in Gcc || b.toolChain in Clang) {
+						b.cppCompiler.args "-g"
+					}
+					else if (b.toolChain in VisualCpp) {
+						b.cppCompiler.args "/Zi"
+						b.cppCompiler.args "/FS"
+						b.linker.args "/DEBUG"
 					}
 				}
+			} // end sleigh_dbg
+		} // end debug
+	} // end components
+
+	binaries { all { b ->
+		if (b.toolChain in Gcc || b.toolChain in Clang) {
+			b.cppCompiler.args "-std=c++11"
+			b.cppCompiler.args "-Wall"
+			b.cppCompiler.args "-Wno-sign-compare"
+			if (b.targetPlatform.operatingSystem.linux) {
+				b.cppCompiler.define "LINUX"
+				b.cppCompiler.define "_LINUX"
 			}
-			else if (b.toolChain in Clang) {
-				b.cppCompiler.args "-std=c++11"
-				b.cppCompiler.args "-Wall"
-				b.cppCompiler.args "-O2"			// for DEBUG, comment this line out
-				// b.cppCompiler.args "-g"			// for DEBUG, uncomment	this line
-				b.cppCompiler.args "-Wno-sign-compare"
-				b.cppCompiler.args "-w"
-				if (b.targetPlatform.operatingSystem.linux) {
-//					b.linker.args "-static"
+		}
+		else if (b.toolChain in VisualCpp) {
+			b.cppCompiler.args "/EHsc"
+			b.cppCompiler.define "_SECURE_SCL=0"
+			b.cppCompiler.define "_HAS_ITERATOR_DEBUGGING=0"
+			b.cppCompiler.define "_HAS_STD_BYTE=0"  // msvc has a byte typedef that conflicts with c++17 std::byte
+			if (b.targetPlatform.operatingSystem.windows) {
+				b.cppCompiler.define "WINDOWS"
+				b.cppCompiler.define "_WINDOWS"
+				b.cppCompiler.define "WIN32"
+				b.cppCompiler.define "_WIN32"
+				if (b.targetPlatform.name == "win_x86_64") {
+					b.cppCompiler.define "WIN64"
+					b.cppCompiler.define "_WIN64"
 				}
 			}
 		}
-	}
+	} } // end binaries { all
 } // end model
-- 
2.41.0

