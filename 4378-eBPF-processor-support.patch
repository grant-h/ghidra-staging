From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nalen98 <52778977+Nalen98@users.noreply.github.com>
Date: Fri, 24 Jun 2022 18:04:07 +0300
Subject: [PATCH] 4378: eBPF processor support

LDDW instructions with negative values

https://github.com/Nalen98/eBPF-for-Ghidra/pull/12

Fix ugly tabs

Signed-off-by: Nalen <nalenaskeyx@gmail.com>
---
 Ghidra/Processors/eBPF/Module.manifest        |    0
 Ghidra/Processors/eBPF/build.gradle           |   26 +
 Ghidra/Processors/eBPF/certification.manifest |    9 +
 .../Processors/eBPF/data/languages/eBPF.cspec |   63 +
 .../Processors/eBPF/data/languages/eBPF.dwarf |   16 +
 .../Processors/eBPF/data/languages/eBPF.ldefs |   15 +
 .../eBPF/data/languages/eBPF.opinion          |    5 +
 .../Processors/eBPF/data/languages/eBPF.pspec |   73 +
 .../Processors/eBPF/data/languages/eBPF.sinc  |  277 ++
 .../Processors/eBPF/data/languages/eBPF.sla   | 4145 +++++++++++++++++
 .../eBPF/data/languages/eBPF.slaspec          |    3 +
 .../plugin/core/analysis/eBPFAnalyzer.java    | 1169 +++++
 .../format/elf/extend/eBPF_ElfExtension.java  |   47 +
 .../ElfeBPFRelocationFixupHandler.java        |   47 +
 .../relocation/eBPF_ElfRelocationHandler.java |  110 +
 15 files changed, 6005 insertions(+)
 create mode 100644 Ghidra/Processors/eBPF/Module.manifest
 create mode 100644 Ghidra/Processors/eBPF/build.gradle
 create mode 100644 Ghidra/Processors/eBPF/certification.manifest
 create mode 100644 Ghidra/Processors/eBPF/data/languages/eBPF.cspec
 create mode 100644 Ghidra/Processors/eBPF/data/languages/eBPF.dwarf
 create mode 100644 Ghidra/Processors/eBPF/data/languages/eBPF.ldefs
 create mode 100644 Ghidra/Processors/eBPF/data/languages/eBPF.opinion
 create mode 100644 Ghidra/Processors/eBPF/data/languages/eBPF.pspec
 create mode 100644 Ghidra/Processors/eBPF/data/languages/eBPF.sinc
 create mode 100644 Ghidra/Processors/eBPF/data/languages/eBPF.sla
 create mode 100644 Ghidra/Processors/eBPF/data/languages/eBPF.slaspec
 create mode 100644 Ghidra/Processors/eBPF/src/main/java/ghidra/app/plugin/core/analysis/eBPFAnalyzer.java
 create mode 100644 Ghidra/Processors/eBPF/src/main/java/ghidra/app/util/bin/format/elf/extend/eBPF_ElfExtension.java
 create mode 100644 Ghidra/Processors/eBPF/src/main/java/ghidra/app/util/bin/format/elf/relocation/ElfeBPFRelocationFixupHandler.java
 create mode 100644 Ghidra/Processors/eBPF/src/main/java/ghidra/app/util/bin/format/elf/relocation/eBPF_ElfRelocationHandler.java

diff --git a/Ghidra/Processors/eBPF/Module.manifest b/Ghidra/Processors/eBPF/Module.manifest
new file mode 100644
index 000000000..e69de29bb
diff --git a/Ghidra/Processors/eBPF/build.gradle b/Ghidra/Processors/eBPF/build.gradle
new file mode 100644
index 000000000..4fd6f5034
--- /dev/null
+++ b/Ghidra/Processors/eBPF/build.gradle
@@ -0,0 +1,26 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+apply from: "$rootProject.projectDir/gradle/distributableGhidraModule.gradle"
+apply from: "$rootProject.projectDir/gradle/javaProject.gradle"
+apply from: "$rootProject.projectDir/gradle/processorProject.gradle"
+apply from: "$rootProject.projectDir/gradle/jacocoProject.gradle"
+apply from: "$rootProject.projectDir/gradle/javaTestProject.gradle"
+apply plugin: 'eclipse'
+eclipse.project.name = 'Processors eBPF'
+
+dependencies {
+	api project(':Base')
+}
diff --git a/Ghidra/Processors/eBPF/certification.manifest b/Ghidra/Processors/eBPF/certification.manifest
new file mode 100644
index 000000000..d4c4a0218
--- /dev/null
+++ b/Ghidra/Processors/eBPF/certification.manifest
@@ -0,0 +1,9 @@
+##VERSION: 2.0
+Module.manifest||GHIDRA||||END|
+data/languages/eBPF.cspec||GHIDRA||||END|
+data/languages/eBPF.dwarf||GHIDRA||||END|
+data/languages/eBPF.ldefs||GHIDRA||||END|
+data/languages/eBPF.opinion||GHIDRA||||END|
+data/languages/eBPF.pspec||GHIDRA||||END|
+data/languages/eBPF.sinc||GHIDRA||||END|
+data/languages/eBPF.slaspec||GHIDRA||||END|
diff --git a/Ghidra/Processors/eBPF/data/languages/eBPF.cspec b/Ghidra/Processors/eBPF/data/languages/eBPF.cspec
new file mode 100644
index 000000000..ffb346876
--- /dev/null
+++ b/Ghidra/Processors/eBPF/data/languages/eBPF.cspec
@@ -0,0 +1,63 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<compiler_spec>
+  <data_organization>
+     <absolute_max_alignment value="0" />
+     <machine_alignment value="2" />
+     <default_alignment value="1" />
+     <default_pointer_alignment value="8" />
+     <pointer_size value="8" />
+     <wchar_size value="2" />
+     <short_size value="2" />
+     <integer_size value="4" />
+     <long_size value="4" />
+     <long_long_size value="8" />
+     <float_size value="4" />
+     <double_size value="8" />
+     <long_double_size value="8" />
+     <size_alignment_map>
+          <entry size="1" alignment="1" />
+          <entry size="2" alignment="2" />
+          <entry size="4" alignment="4" />
+          <entry size="8" alignment="8" />
+     </size_alignment_map>
+  </data_organization>
+   <global>
+	  <range space="ram"/>
+	  <range space="syscall"/>
+   </global>
+  <stackpointer register="R10" space="ram"/>
+   <default_proto>
+    <prototype name="__fastcall" extrapop="0" stackshift="0">
+      <input>
+        <pentry minsize="1" maxsize="8">
+          <register name="R1"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="R2"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="R3"/>
+        </pentry>
+         <pentry minsize="1" maxsize="8">
+          <register name="R4"/>
+        </pentry>
+         <pentry minsize="1" maxsize="8">
+          <register name="R5"/>
+        </pentry>
+      </input>
+      <output killedbycall="true">
+        <pentry minsize="1" maxsize="8">
+          <register name="R0"/>
+        </pentry>
+       </output>
+      <unaffected>
+        <varnode space="ram" offset="8" size="8"/>
+        <register name="R6"/>
+	    <register name="R7"/>
+        <register name="R8"/>
+        <register name="R9"/>
+		<register name="R10"/>
+      </unaffected>
+    </prototype>
+  </default_proto>
+ </compiler_spec>
diff --git a/Ghidra/Processors/eBPF/data/languages/eBPF.dwarf b/Ghidra/Processors/eBPF/data/languages/eBPF.dwarf
new file mode 100644
index 000000000..93997279f
--- /dev/null
+++ b/Ghidra/Processors/eBPF/data/languages/eBPF.dwarf
@@ -0,0 +1,16 @@
+<dwarf>
+    <register_mappings>
+        <register_mapping dwarf="0" ghidra="R0"/>
+        <register_mapping dwarf="1" ghidra="R1"/>
+        <register_mapping dwarf="2" ghidra="R2"/>
+        <register_mapping dwarf="3" ghidra="R3"/>
+        <register_mapping dwarf="4" ghidra="R4"/>
+        <register_mapping dwarf="5" ghidra="R5"/>
+        <register_mapping dwarf="6" ghidra="R6"/>
+        <register_mapping dwarf="7" ghidra="R7"/>
+        <register_mapping dwarf="8" ghidra="R8"/>
+        <register_mapping dwarf="9" ghidra="R9"/>
+        <register_mapping dwarf="10" ghidra="R10" stackpointer="true"/>
+    </register_mappings>
+    <call_frame_cfa value="8"/>
+</dwarf>
diff --git a/Ghidra/Processors/eBPF/data/languages/eBPF.ldefs b/Ghidra/Processors/eBPF/data/languages/eBPF.ldefs
new file mode 100644
index 000000000..cfce8de76
--- /dev/null
+++ b/Ghidra/Processors/eBPF/data/languages/eBPF.ldefs
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<language_definitions>
+   <language processor="eBPF"
+            endian="little"
+            size="64"
+            variant="default"
+            version="1.0"
+            slafile="eBPF.sla"
+            processorspec="eBPF.pspec"
+            id="eBPF:LE:64:default">
+    <description>eBPF processor 64-bit little-endian</description>
+    <compiler name="default" spec="eBPF.cspec" id="default"/>
+	<external_name tool="DWARF.register.mapping.file" name="eBPF.dwarf"/>
+  </language>
+</language_definitions>
diff --git a/Ghidra/Processors/eBPF/data/languages/eBPF.opinion b/Ghidra/Processors/eBPF/data/languages/eBPF.opinion
new file mode 100644
index 000000000..488389372
--- /dev/null
+++ b/Ghidra/Processors/eBPF/data/languages/eBPF.opinion
@@ -0,0 +1,5 @@
+<opinions>
+    <constraint loader="Executable and Linking Format (ELF)" compilerSpecID="default">
+        <constraint primary="247" processor="eBPF" endian="little" size="64" />
+    </constraint>
+</opinions>
diff --git a/Ghidra/Processors/eBPF/data/languages/eBPF.pspec b/Ghidra/Processors/eBPF/data/languages/eBPF.pspec
new file mode 100644
index 000000000..d856e0b7b
--- /dev/null
+++ b/Ghidra/Processors/eBPF/data/languages/eBPF.pspec
@@ -0,0 +1,73 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<processor_spec>
+    <programcounter register="PC"/>
+    <default_symbols>
+            <symbol name="bpf_unspec" address="syscall:0x0"/>
+            <symbol name="bpf_map_lookup_elem" address="syscall:0x1"/>
+            <symbol name="bpf_map_update_elem" address="syscall:0x2"/>
+            <symbol name="bpf_map_delete_elem" address="syscall:0x3"/>
+            <symbol name="bpf_probe_read" address="syscall:0x4"/>
+            <symbol name="bpf_ktime_get_ns" address="syscall:0x5"/>
+            <symbol name="bpf_trace_printk" address="syscall:0x6"/>
+            <symbol name="bpf_get_prandom_u32" address="syscall:0x7"/>
+            <symbol name="bpf_get_smp_processor_id" address="syscall:0x8"/>
+            <symbol name="bpf_skb_store_bytes" address="syscall:0x9"/>
+            <symbol name="bpf_l3_csum_replace" address="syscall:0xa"/>
+            <symbol name="bpf_l4_csum_replace" address="syscall:0xb"/>
+            <symbol name="bpf_tail_call" address="syscall:0xc"/>
+            <symbol name="bpf_clone_redirect" address="syscall:0xd"/>
+            <symbol name="bpf_get_current_pid_tgid" address="syscall:0xe"/>
+            <symbol name="bpf_get_current_uid_gid" address="syscall:0xf"/>
+            <symbol name="bpf_get_current_comm" address="syscall:0x10"/>
+            <symbol name="bpf_get_cgroup_classid" address="syscall:0x11"/>
+            <symbol name="bpf_skb_vlan_push" address="syscall:0x12"/>
+            <symbol name="bpf_skb_vlan_pop" address="syscall:0x13"/>
+            <symbol name="bpf_skb_get_tunnel_key" address="syscall:0x14"/>
+            <symbol name="bpf_skb_set_tunnel_key" address="syscall:0x15"/>
+            <symbol name="bpf_perf_event_read" address="syscall:0x16"/>
+            <symbol name="bpf_redirect" address="syscall:0x17"/>
+            <symbol name="bpf_get_route_realm" address="syscall:0x18"/>
+            <symbol name="bpf_perf_event_output" address="syscall:0x19"/>
+            <symbol name="bpf_skb_load_bytes" address="syscall:0x1a"/>
+            <symbol name="bpf_get_stackid" address="syscall:0x1b"/>
+            <symbol name="bpf_csum_diff" address="syscall:0x1c"/>
+            <symbol name="bpf_skb_get_tunnel_opt" address="syscall:0x1d"/>
+            <symbol name="bpf_skb_set_tunnel_opt" address="syscall:0x1e"/>
+            <symbol name="bpf_skb_change_proto" address="syscall:0x1f"/>
+            <symbol name="bpf_skb_change_type" address="syscall:0x20"/>
+            <symbol name="bpf_skb_under_cgroup" address="syscall:0x21"/>
+            <symbol name="bpf_get_hash_recalc" address="syscall:0x22"/>
+            <symbol name="bpf_get_current_task" address="syscall:0x23"/>
+            <symbol name="bpf_probe_write_user" address="syscall:0x24"/>
+            <symbol name="bpf_current_task_under_cgroup" address="syscall:0x25"/>
+            <symbol name="bpf_skb_change_tail" address="syscall:0x26"/>
+            <symbol name="bpf_skb_pull_data" address="syscall:0x27"/>
+            <symbol name="bpf_csum_update" address="syscall:0x28"/>
+            <symbol name="bpf_set_hash_invalid" address="syscall:0x29"/>
+            <symbol name="bpf_get_numa_node_id" address="syscall:0x2a"/>
+            <symbol name="bpf_skb_change_head" address="syscall:0x2b"/>
+            <symbol name="bpf_xdp_adjust_head" address="syscall:0x2c"/>
+            <symbol name="bpf_probe_read_str" address="syscall:0x2d"/>
+            <symbol name="bpf_get_socket_cookie" address="syscall:0x2e"/>
+            <symbol name="bpf_get_socket_cookie" address="syscall:0x2f"/>
+            <symbol name="bpf_get_socket_cookie" address="syscall:0x30"/>
+            <symbol name="bpf_get_socket_uid" address="syscall:0x31"/>
+            <symbol name="bpf_set_hash" address="syscall:0x32"/>
+            <symbol name="bpf_setsockopt" address="syscall:0x33"/>
+            <symbol name="bpf_skb_adjust_room" address="syscall:0x34"/>
+            <symbol name="bpf_redirect_map" address="syscall:0x35"/>
+            <symbol name="bpf_sk_redirect_map" address="syscall:0x36"/>
+            <symbol name="bpf_sock_map_update" address="syscall:0x37"/>
+            <symbol name="bpf_xdp_adjust_meta" address="syscall:0x38"/>
+            <symbol name="bpf_perf_event_read_value" address="syscall:0x39"/>
+            <symbol name="bpf_perf_prog_read_value" address="syscall:0x3a"/>
+            <symbol name="bpf_getsockopt" address="syscall:0x3b"/>
+            <symbol name="bpf_override_return" address="syscall:0x3c"/>
+            <symbol name="bpf_sock_ops_cb_flags_set" address="syscall:0x3d"/>
+            <symbol name="bpf_msg_redirect_map" address="syscall:0x3e"/>
+            <symbol name="bpf_msg_apply_bytes" address="syscall:0x3f"/>
+    </default_symbols>
+    <default_memory_blocks>
+        <memory_block name="eBPFHelper_functions" start_address="syscall:0" length="0x400" initialized="true"/>
+    </default_memory_blocks>
+</processor_spec>
diff --git a/Ghidra/Processors/eBPF/data/languages/eBPF.sinc b/Ghidra/Processors/eBPF/data/languages/eBPF.sinc
new file mode 100644
index 000000000..f1b570159
--- /dev/null
+++ b/Ghidra/Processors/eBPF/data/languages/eBPF.sinc
@@ -0,0 +1,277 @@
+###############################################################################
+# eBPF Processor Specification for Ghidra
+###############################################################################
+
+#eBPF is a RISC register machine with a total of 11 64-bit registers, a program counter and a 512 byte fixed-size stack.
+#9 registers are general purpouse read-write, one is a read-only stack pointer and the program counter is implicit,
+#i.e. we can only jump to a certain offset from it. The eBPF registers are always 64-bit wide.
+
+define space ram type=ram_space size=8 default;
+define space register type=register_space size=4;
+define space syscall type=ram_space size=4;
+
+define register offset=0 size=8 [ R0  R1  R2  R3  R4  R5  R6  R7  R8  R9  R10  PC ];
+
+# Instruction encoding: Insop:8, dst_reg:4, src_reg:4, off:16, imm:32 - from lsb to msb
+define token instr(64)
+    imm=(32, 63) signed
+    off=(16, 31) signed
+    src=(12, 15)
+    dst=(8, 11)
+    op_alu_jmp_opcode=(4, 7)
+    op_alu_jmp_source=(3, 3)
+    op_ld_st_mode=(5, 7)
+    op_ld_st_size=(3, 4)
+    op_insn_class=(0, 2)
+;
+
+#We'll need this token to operate with LDDW instruction, which has 64 bit imm value
+define token immtoken(64)
+    imm2=(32, 63)
+;
+
+#To operate with registers
+attach variables [ src dst ] [  R0  R1  R2  R3  R4  R5  R6  R7  R8  R9  R10  _  _  _  _  _  ];
+
+#Arithmetic instructions
+###############################################################################
+
+:MOV dst, src  is src & dst & op_alu_jmp_opcode=0xb & op_alu_jmp_source=1 & op_insn_class=0x7 { dst=src; }
+:MOV dst, imm  is imm & dst & op_alu_jmp_opcode=0xb & op_alu_jmp_source=0 & op_insn_class=0x7 { dst=imm; }
+
+:ADD dst, src  is src & dst & op_alu_jmp_opcode=0x0 & op_alu_jmp_source=1 & op_insn_class=0x7 { dst=dst + src; }
+:ADD dst, imm  is imm & dst & op_alu_jmp_opcode=0x0 & op_alu_jmp_source=0 & op_insn_class=0x7 { dst=dst + imm; }
+
+:SUB dst, src  is src & dst & op_alu_jmp_opcode=0x1 & op_alu_jmp_source=1 & op_insn_class=0x7 { dst=dst - src; }
+:SUB dst, imm  is imm & dst & op_alu_jmp_opcode=0x1 & op_alu_jmp_source=0 & op_insn_class=0x7 { dst=dst - imm; }
+
+:MUL dst, src  is src & dst & op_alu_jmp_opcode=0x2 & op_alu_jmp_source=1 & op_insn_class=0x7 {  dst=dst * src; }
+:MUL dst, imm  is imm & dst & op_alu_jmp_opcode=0x2 & op_alu_jmp_source=0 & op_insn_class=0x7 {  dst=dst * imm; }
+
+:DIV dst, src  is src & dst & op_alu_jmp_opcode=0x3 & op_alu_jmp_source=1 & op_insn_class=0x7 { dst=dst / src; }
+:DIV dst, imm  is imm & dst & op_alu_jmp_opcode=0x3 & op_alu_jmp_source=0 & op_insn_class=0x7 { dst=dst / imm; }
+
+:OR dst, src  is src & dst & op_alu_jmp_opcode=0x4 & op_alu_jmp_source=1 & op_insn_class=0x7 { dst=dst | src; }
+:OR dst, imm  is imm & dst & op_alu_jmp_opcode=0x4 & op_alu_jmp_source=0 & op_insn_class=0x7 { dst=dst | imm; }
+
+:AND dst, src  is src & dst & op_alu_jmp_opcode=0x5 & op_alu_jmp_source=1 & op_insn_class=0x7 { dst=dst & src; }
+:AND dst, imm  is imm & dst & op_alu_jmp_opcode=0x5 & op_alu_jmp_source=0 & op_insn_class=0x7 { dst=dst & imm; }
+
+:LSH dst, src  is src & dst & op_alu_jmp_opcode=0x6 & op_alu_jmp_source=1 & op_insn_class=0x7 { dst=dst << src; }
+:LSH dst, imm  is imm & dst & op_alu_jmp_opcode=0x6 & op_alu_jmp_source=0 & op_insn_class=0x7 { dst=dst << imm; }
+
+:RSH dst, src  is src & dst & op_alu_jmp_opcode=0x7 & op_alu_jmp_source=1 & op_insn_class=0x7 { dst=dst >> src; }
+:RSH dst, imm  is imm & dst & op_alu_jmp_opcode=0x7 & op_alu_jmp_source=0 & op_insn_class=0x7 { dst=dst >> imm; }
+
+:NEG dst  is dst & op_alu_jmp_opcode=0x8 & op_alu_jmp_source=0 & op_insn_class=0x7 { dst=-dst; }
+
+:MOD dst, src  is src & dst & op_alu_jmp_opcode=0x9 & op_alu_jmp_source=1 & op_insn_class=0x7 { dst=dst % src; }
+:MOD dst, imm  is imm & dst & op_alu_jmp_opcode=0x9 & op_alu_jmp_source=0 & op_insn_class=0x7 { dst=dst % imm; }
+
+:XOR dst, src  is src & dst & op_alu_jmp_opcode=0xa & op_alu_jmp_source=1 & op_insn_class=0x7 { dst=dst ^ src; }
+:XOR dst, imm  is imm & dst & op_alu_jmp_opcode=0xa & op_alu_jmp_source=0 & op_insn_class=0x7 { dst=dst ^ imm; }
+
+:ARSH dst, src  is src & dst & op_alu_jmp_opcode=0xc & op_alu_jmp_source=1 & op_insn_class=0x7 { dst=dst s>> src; }
+:ARSH dst, imm  is imm & dst & op_alu_jmp_opcode=0xc & op_alu_jmp_source=0 & op_insn_class=0x7 { dst=dst s>> imm; }
+
+#Bytewasp instructions
+###############################################################################
+
+:LE16 dst  is imm=0x10 & dst & op_alu_jmp_opcode=0xd & op_alu_jmp_source=0 & op_insn_class=0x4 { dst=((dst) >> 8) | ((dst) << 8); }
+:LE32 dst  is imm=0x20 & dst & op_alu_jmp_opcode=0xd & op_alu_jmp_source=0 & op_insn_class=0x4 { dst=((dst) >> 24) | (((dst) & 0x00FF0000) >> 8)  | (((dst) & 0x0000FF00) << 8) | ((dst) << 24); }
+:LE64 dst  is imm=0x40 & dst & op_alu_jmp_opcode=0xd & op_alu_jmp_source=0 & op_insn_class=0x4 {
+    dst=( (dst << 56) & 0xff00000000000000 ) |
+    ( (dst << 40) & 0x00ff000000000000 ) |
+    ( (dst << 24) & 0x0000ff0000000000 ) |
+    ( (dst <<  8) & 0x000000ff00000000 ) |
+    ( (dst >>  8) & 0x00000000ff000000 ) |
+    ( (dst >> 24) & 0x0000000000ff0000 ) |
+    ( (dst >> 40) & 0x000000000000ff00 ) |
+    ( (dst >> 56) & 0x00000000000000ff );
+}
+
+:BE16 dst  is imm=0x10 & dst & op_alu_jmp_opcode=0xd & op_alu_jmp_source=1 & op_insn_class=0x4 { dst=((dst) >> 8) | ((dst) << 8); }
+:BE32 dst  is imm=0x20 & dst & op_alu_jmp_opcode=0xd & op_alu_jmp_source=1 & op_insn_class=0x4 { dst=((dst) >> 24) | (((dst) & 0x00FF0000) >> 8)  | (((dst) & 0x0000FF00) << 8) | ((dst) << 24); }
+:BE64 dst  is imm=0x40 & dst & op_alu_jmp_opcode=0xd & op_alu_jmp_source=1 & op_insn_class=0x4 {
+    dst=( (dst << 56) & 0xff00000000000000 ) |
+    ( (dst << 40) & 0x00ff000000000000 ) |
+    ( (dst << 24) & 0x0000ff0000000000 ) |
+    ( (dst <<  8) & 0x000000ff00000000 ) |
+    ( (dst >>  8) & 0x00000000ff000000 ) |
+    ( (dst >> 24) & 0x0000000000ff0000 ) |
+    ( (dst >> 40) & 0x000000000000ff00 ) |
+    ( (dst >> 56) & 0x00000000000000ff );
+}
+
+#Memory instructions- Load and Store
+###############################################################################
+
+#LDDW is the only 16-byte eBPF instruction which consists of two consecutive 8-byte blocks ('struct bpf_insn')
+#and interpreted as single instruction which loads 64-bit imm value into dst. Encoding of LDDW:
+#LSR                                                                                                MSR
+#           opcode      src     dst     offset      Low 8-byte imm      zero-block      High 8-byte imm
+#bits          8         4       4        16               32               32                 32
+# So, imm64 consists of concatination of high 8-byte imm and low 8-byte imm.
+
+:LDDW dst, concat  is imm & dst &  op_ld_st_mode=0x0 & op_ld_st_size=0x3 & op_insn_class=0x0; imm2 [ concat= (imm2 << 32) | ((imm) & 0xFFFFFFFF); ] { dst = concat; }
+
+#BPF_LD_MAP_FD(DST, MAP_FD) -> second LDDW = pseudo LDDW insn used to refer to process-local map_fd
+#For each instruction which needs relocation, it inject corresponding file descriptor to imm field.
+#As a part of protocol, src_reg is set to BPF_PSEUDO_MAP_FD (which defined as 1) to notify kernel this is a map loading instruction.
+
+:LDDW dst, imm  is imm & src=1 & dst & op_ld_st_mode=0x0 & op_ld_st_size=0x3 & op_insn_class=0x0; imm2 { dst = *:8 imm:8; }
+
+:LDABSW dst, imm  is imm & dst & op_ld_st_mode=0x1 & op_ld_st_size=0x0 & op_insn_class=0x0 { dst=*:4 imm:8; }
+
+:LDABSH dst, imm  is imm & dst & op_ld_st_mode=0x1 & op_ld_st_size=0x1 & op_insn_class=0x0 { dst=*:2 imm:8; }
+
+:LDABSB dst, imm  is imm & dst &  op_ld_st_mode=0x1 & op_ld_st_size=0x2 & op_insn_class=0x0 { dst=*:1 imm:8; }
+
+:LDABSDW dst, imm  is imm & dst & op_ld_st_mode=0x1 & op_ld_st_size=0x3 & op_insn_class=0x0 { dst=*:8 imm:8; }
+
+:LDINDW src, dst, imm  is imm & src & dst & op_ld_st_mode=0x2 & op_ld_st_size=0x0 & op_insn_class=0x0  { dst=*:4 (src + imm); }
+
+:LDINDH src, dst, imm  is imm & src & dst & op_ld_st_mode=0x2 & op_ld_st_size=0x1 & op_insn_class=0x0 { dst=*:2 (src + imm); }
+
+:LDINDB src, dst, imm  is imm & src & dst & op_ld_st_mode=0x2 & op_ld_st_size=0x2 & op_insn_class=0x0 { dst=*:1 (src + imm); }
+
+:LDINDDW src, dst, imm  is imm & src & dst & op_ld_st_mode=0x2 & op_ld_st_size=0x3 & op_insn_class=0x0 { dst=*:8 (src + imm); }
+
+:LDXW dst, [src + off]  is off & src & dst & op_ld_st_mode=0x3 & op_ld_st_size=0x0 & op_insn_class=0x1 { dst=*:4 (src + off); }
+
+:LDXH dst, [src + off]  is off & src & dst & op_ld_st_mode=0x3 & op_ld_st_size=0x1 & op_insn_class=0x1 { dst=*:2 (src + off); }
+
+:LDXB dst, [src + off]  is off & src & dst & op_ld_st_mode=0x3 & op_ld_st_size=0x2 & op_insn_class=0x1 { dst=*:1 (src + off); }
+
+:LDXDW dst, [src + off]  is off & src & dst & op_ld_st_mode=0x3 & op_ld_st_size=0x3 & op_insn_class=0x1 { dst=*:8 (src + off); }
+
+:STW [dst + off], imm  is imm & off & dst & op_ld_st_mode=0x3 & op_ld_st_size=0x0 & op_insn_class=0x2 { *:4 (dst + off)=imm:4; }
+
+:STH [dst + off], imm  is imm & off & dst & op_ld_st_mode=0x3 & op_ld_st_size=0x1 & op_insn_class=0x2 { *:2 (dst + off)=imm:2; }
+
+:STB [dst + off], imm  is imm & off & dst & op_ld_st_mode=0x3 & op_ld_st_size=0x2 & op_insn_class=0x2 { *:1 (dst + off)=imm:1; }
+
+:STDW [dst + off], imm  is imm & off & dst & op_ld_st_mode=0x3 & op_ld_st_size=0x3 & op_insn_class=0x2 { *:8 (dst + off)=imm:8; }
+
+:STXW [dst + off], src  is off & src & dst & op_ld_st_mode=0x3 & op_ld_st_size=0x0 & op_insn_class=0x3 { *:4 (dst + off)=src:4; }
+
+:STXH [dst + off], src  is off & src & dst & op_ld_st_mode=0x3 & op_ld_st_size=0x1 & op_insn_class=0x3 { *:2 (dst + off)=src:2; }
+
+:STXB [dst + off], src  is off & src & dst & op_ld_st_mode=0x3 & op_ld_st_size=0x2 & op_insn_class=0x3 { *:1 (dst + off)=src:1; }
+
+:STXDW [dst + off], src  is off & src & dst & op_ld_st_mode=0x3 & op_ld_st_size=0x3 & op_insn_class=0x3 { *:8 (dst + off)=src:8; }
+
+:XADDStSrc dst, src  is src & dst & op_ld_st_mode=0x6 & op_ld_st_size=0x3 & op_insn_class=0x3 { *:8 dst=*:8 dst + src; }
+
+#Branch instructions
+###############################################################################
+
+joff: reloc  is off [ reloc = inst_next + off * 8; ] { export *:8 reloc; }
+
+:JA joff  is joff & op_alu_jmp_opcode=0x0 & op_alu_jmp_source=0 & op_insn_class=0x5 {
+    goto joff;
+}
+
+:JEQ dst, imm, joff  is imm & joff & dst & op_alu_jmp_opcode=0x1 & op_alu_jmp_source=0 & op_insn_class=0x5 {
+    if (dst==imm) goto joff;
+}
+
+:JEQ dst, src, joff  is joff & src & dst & op_alu_jmp_opcode=0x1 & op_alu_jmp_source=1 & op_insn_class=0x5 {
+    if (dst==src) goto joff;
+}
+
+:JGT dst, imm, joff  is imm & joff & dst & op_alu_jmp_opcode=0x2 & op_alu_jmp_source=0 & op_insn_class=0x5 {
+    if (dst>imm) goto joff;
+}
+
+:JGT dst, src, joff  is joff & src & dst & op_alu_jmp_opcode=0x2 & op_alu_jmp_source=1 & op_insn_class=0x5 {
+    if (dst>src) goto joff;
+}
+
+:JGE dst, imm, joff  is imm & joff & dst & op_alu_jmp_opcode=0x3 & op_alu_jmp_source=0 & op_insn_class=0x5 {
+    if (dst>=imm) goto joff;
+}
+
+:JGE dst, src, joff  is joff & src & dst & op_alu_jmp_opcode=0x3 & op_alu_jmp_source=1 & op_insn_class=0x5 {
+    if (dst>=src) goto joff;
+}
+
+:JLT dst, imm, joff  is imm & joff & dst & op_alu_jmp_opcode=0xa & op_alu_jmp_source=0 & op_insn_class=0x5 {
+    if (dst<imm) goto joff;
+}
+
+:JLT dst, src, joff  is joff & src & dst & op_alu_jmp_opcode=0xa & op_alu_jmp_source=1 & op_insn_class=0x5 {
+    if (dst<src) goto joff;
+}
+
+:JLE dst, imm, joff  is imm & joff & dst & op_alu_jmp_opcode=0xb & op_alu_jmp_source=0 & op_insn_class=0x5 {
+    if (dst<=imm) goto joff;
+}
+
+:JLE dst, src, joff  is joff & src & dst & op_alu_jmp_opcode=0xb & op_alu_jmp_source=1 & op_insn_class=0x5 {
+    if (dst<=src) goto joff;
+}
+
+:JNE dst, imm, joff  is imm & joff & dst & op_alu_jmp_opcode=0x5 & op_alu_jmp_source=0 & op_insn_class=0x5 {
+    if (dst!=imm) goto joff;
+}
+
+:JNE dst, src, joff  is joff & src & dst & op_alu_jmp_opcode=0x5 & op_alu_jmp_source=1 & op_insn_class=0x5 {
+    if (dst!=src) goto joff;
+}
+
+:JSGT dst, imm, joff  is imm & joff & dst & op_alu_jmp_opcode=0x6 & op_alu_jmp_source=0 & op_insn_class=0x5 {
+    if (dst s>imm) goto joff;
+}
+
+:JSGT dst, src, joff  is joff & src & dst & op_alu_jmp_opcode=0x6 & op_alu_jmp_source=1 & op_insn_class=0x5 {
+    if (dst s>src) goto joff;
+}
+
+:JSGE dst, imm, joff  is imm & joff & dst & op_alu_jmp_opcode=0x7 & op_alu_jmp_source=0 & op_insn_class=0x5 {
+    if (dst s>=imm) goto joff;
+}
+
+:JSGE dst, src, joff  is joff & src & dst & op_alu_jmp_opcode=0x7 & op_alu_jmp_source=1 & op_insn_class=0x5 {
+    if (dst s>=src) goto joff;
+}
+
+:JSLT dst, imm, joff  is imm & joff & dst & op_alu_jmp_opcode=0xc & op_alu_jmp_source=0 & op_insn_class=0x5 {
+    if (dst s<imm) goto joff;
+}
+
+:JSLT dst, src, joff  is joff & src & dst & op_alu_jmp_opcode=0xc & op_alu_jmp_source=1 & op_insn_class=0x5 {
+    if (dst s<src) goto joff;
+}
+
+:JSLE dst, imm, joff  is imm & joff & dst & op_alu_jmp_opcode=0xd & op_alu_jmp_source=0 & op_insn_class=0x5 {
+    if (dst s<=imm) goto joff;
+}
+
+:JSLE dst, src, joff  is joff & src & dst & op_alu_jmp_opcode=0xd & op_alu_jmp_source=1 & op_insn_class=0x5 {
+    if (dst s<=src) goto joff;
+}
+
+:JSET dst, imm, joff  is imm & joff & dst & op_alu_jmp_opcode=0x4 & op_alu_jmp_source=0 & op_insn_class=0x5 {
+    dst=dst & imm;
+    if (dst:1) goto joff;
+}
+
+:JSET dst, src, joff  is joff & src & dst & op_alu_jmp_opcode=0x4 & op_alu_jmp_source=1 & op_insn_class=0x5 {
+    dst=dst & src;
+    if (dst:1) goto joff;
+}
+
+SysCall:  imm is imm { export *[syscall]:1 imm; }
+
+:CALL SysCall  is imm & src=0 & op_alu_jmp_opcode=0x8 & op_alu_jmp_source=0 & op_insn_class=0x5 & SysCall {
+    call SysCall;
+}
+
+disp32: reloc is imm [ reloc = inst_next + imm; ] { export *:4 reloc; }
+
+:CALL disp32 is imm & src=1 & op_alu_jmp_opcode=0x8 & op_alu_jmp_source=0 & op_insn_class=0x5 & disp32 {
+    call disp32;
+}
+
+:EXIT is op_alu_jmp_opcode=0x9 & op_alu_jmp_source=0 & op_insn_class=0x5 { return [*:8 R10]; }
diff --git a/Ghidra/Processors/eBPF/data/languages/eBPF.sla b/Ghidra/Processors/eBPF/data/languages/eBPF.sla
new file mode 100644
index 000000000..5789804e1
--- /dev/null
+++ b/Ghidra/Processors/eBPF/data/languages/eBPF.sla
@@ -0,0 +1,4145 @@
+<sleigh version="4" bigendian="false" align="1" uniqbase="0x4b00">
+<sourcefiles>
+<sourcefile name="eBPF.sinc" index="0"/>
+</sourcefiles>
+<spaces defaultspace="ram">
+<space_other name="OTHER" index="1" bigendian="false" delay="0" size="8" physical="false"/>
+<space_unique name="unique" index="2" bigendian="false" delay="0" size="4" physical="true"/>
+<space name="ram" index="3" bigendian="false" delay="1" size="8" physical="true"/>
+<space name="register" index="4" bigendian="false" delay="0" size="4" physical="true"/>
+<space name="syscall" index="5" bigendian="false" delay="1" size="4" physical="true"/>
+</spaces>
+<symbol_table scopesize="83" symbolsize="226">
+<scope id="0x0" parent="0x0"/>
+<scope id="0x1" parent="0x0"/>
+<scope id="0x2" parent="0x0"/>
+<scope id="0x3" parent="0x0"/>
+<scope id="0x4" parent="0x0"/>
+<scope id="0x5" parent="0x0"/>
+<scope id="0x6" parent="0x0"/>
+<scope id="0x7" parent="0x0"/>
+<scope id="0x8" parent="0x0"/>
+<scope id="0x9" parent="0x0"/>
+<scope id="0xa" parent="0x0"/>
+<scope id="0xb" parent="0x0"/>
+<scope id="0xc" parent="0x0"/>
+<scope id="0xd" parent="0x0"/>
+<scope id="0xe" parent="0x0"/>
+<scope id="0xf" parent="0x0"/>
+<scope id="0x10" parent="0x0"/>
+<scope id="0x11" parent="0x0"/>
+<scope id="0x12" parent="0x0"/>
+<scope id="0x13" parent="0x0"/>
+<scope id="0x14" parent="0x0"/>
+<scope id="0x15" parent="0x0"/>
+<scope id="0x16" parent="0x0"/>
+<scope id="0x17" parent="0x0"/>
+<scope id="0x18" parent="0x0"/>
+<scope id="0x19" parent="0x0"/>
+<scope id="0x1a" parent="0x0"/>
+<scope id="0x1b" parent="0x0"/>
+<scope id="0x1c" parent="0x0"/>
+<scope id="0x1d" parent="0x0"/>
+<scope id="0x1e" parent="0x0"/>
+<scope id="0x1f" parent="0x0"/>
+<scope id="0x20" parent="0x0"/>
+<scope id="0x21" parent="0x0"/>
+<scope id="0x22" parent="0x0"/>
+<scope id="0x23" parent="0x0"/>
+<scope id="0x24" parent="0x0"/>
+<scope id="0x25" parent="0x0"/>
+<scope id="0x26" parent="0x0"/>
+<scope id="0x27" parent="0x0"/>
+<scope id="0x28" parent="0x0"/>
+<scope id="0x29" parent="0x0"/>
+<scope id="0x2a" parent="0x0"/>
+<scope id="0x2b" parent="0x0"/>
+<scope id="0x2c" parent="0x0"/>
+<scope id="0x2d" parent="0x0"/>
+<scope id="0x2e" parent="0x0"/>
+<scope id="0x2f" parent="0x0"/>
+<scope id="0x30" parent="0x0"/>
+<scope id="0x31" parent="0x0"/>
+<scope id="0x32" parent="0x0"/>
+<scope id="0x33" parent="0x0"/>
+<scope id="0x34" parent="0x0"/>
+<scope id="0x35" parent="0x0"/>
+<scope id="0x36" parent="0x0"/>
+<scope id="0x37" parent="0x0"/>
+<scope id="0x38" parent="0x0"/>
+<scope id="0x39" parent="0x0"/>
+<scope id="0x3a" parent="0x0"/>
+<scope id="0x3b" parent="0x0"/>
+<scope id="0x3c" parent="0x0"/>
+<scope id="0x3d" parent="0x0"/>
+<scope id="0x3e" parent="0x0"/>
+<scope id="0x3f" parent="0x0"/>
+<scope id="0x40" parent="0x0"/>
+<scope id="0x41" parent="0x0"/>
+<scope id="0x42" parent="0x0"/>
+<scope id="0x43" parent="0x0"/>
+<scope id="0x44" parent="0x0"/>
+<scope id="0x45" parent="0x0"/>
+<scope id="0x46" parent="0x0"/>
+<scope id="0x47" parent="0x0"/>
+<scope id="0x48" parent="0x0"/>
+<scope id="0x49" parent="0x0"/>
+<scope id="0x4a" parent="0x0"/>
+<scope id="0x4b" parent="0x0"/>
+<scope id="0x4c" parent="0x0"/>
+<scope id="0x4d" parent="0x0"/>
+<scope id="0x4e" parent="0x0"/>
+<scope id="0x4f" parent="0x0"/>
+<scope id="0x50" parent="0x0"/>
+<scope id="0x51" parent="0x0"/>
+<scope id="0x52" parent="0x0"/>
+<subtable_sym_head name="instruction" id="0x0" scope="0x0"/>
+<start_sym_head name="inst_start" id="0x1" scope="0x0"/>
+<start_sym_head name="operand_offset" id="0x2" scope="0x0"/>
+<end_sym_head name="inst_next" id="0x3" scope="0x0"/>
+<next2_sym_head name="inst_next2" id="0x4" scope="0x0"/>
+<varnode_sym_head name="R0" id="0x5" scope="0x0"/>
+<varnode_sym_head name="R1" id="0x6" scope="0x0"/>
+<varnode_sym_head name="R2" id="0x7" scope="0x0"/>
+<varnode_sym_head name="R3" id="0x8" scope="0x0"/>
+<varnode_sym_head name="R4" id="0x9" scope="0x0"/>
+<varnode_sym_head name="R5" id="0xa" scope="0x0"/>
+<varnode_sym_head name="R6" id="0xb" scope="0x0"/>
+<varnode_sym_head name="R7" id="0xc" scope="0x0"/>
+<varnode_sym_head name="R8" id="0xd" scope="0x0"/>
+<varnode_sym_head name="R9" id="0xe" scope="0x0"/>
+<varnode_sym_head name="R10" id="0xf" scope="0x0"/>
+<varnode_sym_head name="PC" id="0x10" scope="0x0"/>
+<value_sym_head name="imm" id="0x11" scope="0x0"/>
+<value_sym_head name="off" id="0x12" scope="0x0"/>
+<varlist_sym_head name="src" id="0x13" scope="0x0"/>
+<varlist_sym_head name="dst" id="0x14" scope="0x0"/>
+<value_sym_head name="op_alu_jmp_opcode" id="0x15" scope="0x0"/>
+<value_sym_head name="op_alu_jmp_source" id="0x16" scope="0x0"/>
+<value_sym_head name="op_ld_st_mode" id="0x17" scope="0x0"/>
+<value_sym_head name="op_ld_st_size" id="0x18" scope="0x0"/>
+<value_sym_head name="op_insn_class" id="0x19" scope="0x0"/>
+<value_sym_head name="imm2" id="0x1a" scope="0x0"/>
+<operand_sym_head name="dst" id="0x1b" scope="0x1"/>
+<operand_sym_head name="src" id="0x1c" scope="0x1"/>
+<operand_sym_head name="dst" id="0x1d" scope="0x2"/>
+<operand_sym_head name="imm" id="0x1e" scope="0x2"/>
+<operand_sym_head name="dst" id="0x1f" scope="0x3"/>
+<operand_sym_head name="src" id="0x20" scope="0x3"/>
+<operand_sym_head name="dst" id="0x21" scope="0x4"/>
+<operand_sym_head name="imm" id="0x22" scope="0x4"/>
+<operand_sym_head name="dst" id="0x23" scope="0x5"/>
+<operand_sym_head name="src" id="0x24" scope="0x5"/>
+<operand_sym_head name="dst" id="0x25" scope="0x6"/>
+<operand_sym_head name="imm" id="0x26" scope="0x6"/>
+<operand_sym_head name="dst" id="0x27" scope="0x7"/>
+<operand_sym_head name="src" id="0x28" scope="0x7"/>
+<operand_sym_head name="dst" id="0x29" scope="0x8"/>
+<operand_sym_head name="imm" id="0x2a" scope="0x8"/>
+<operand_sym_head name="dst" id="0x2b" scope="0x9"/>
+<operand_sym_head name="src" id="0x2c" scope="0x9"/>
+<operand_sym_head name="dst" id="0x2d" scope="0xa"/>
+<operand_sym_head name="imm" id="0x2e" scope="0xa"/>
+<operand_sym_head name="dst" id="0x2f" scope="0xb"/>
+<operand_sym_head name="src" id="0x30" scope="0xb"/>
+<operand_sym_head name="dst" id="0x31" scope="0xc"/>
+<operand_sym_head name="imm" id="0x32" scope="0xc"/>
+<operand_sym_head name="dst" id="0x33" scope="0xd"/>
+<operand_sym_head name="src" id="0x34" scope="0xd"/>
+<operand_sym_head name="dst" id="0x35" scope="0xe"/>
+<operand_sym_head name="imm" id="0x36" scope="0xe"/>
+<operand_sym_head name="dst" id="0x37" scope="0xf"/>
+<operand_sym_head name="src" id="0x38" scope="0xf"/>
+<operand_sym_head name="dst" id="0x39" scope="0x10"/>
+<operand_sym_head name="imm" id="0x3a" scope="0x10"/>
+<operand_sym_head name="dst" id="0x3b" scope="0x11"/>
+<operand_sym_head name="src" id="0x3c" scope="0x11"/>
+<operand_sym_head name="dst" id="0x3d" scope="0x12"/>
+<operand_sym_head name="imm" id="0x3e" scope="0x12"/>
+<operand_sym_head name="dst" id="0x3f" scope="0x13"/>
+<operand_sym_head name="dst" id="0x40" scope="0x14"/>
+<operand_sym_head name="src" id="0x41" scope="0x14"/>
+<operand_sym_head name="dst" id="0x42" scope="0x15"/>
+<operand_sym_head name="imm" id="0x43" scope="0x15"/>
+<operand_sym_head name="dst" id="0x44" scope="0x16"/>
+<operand_sym_head name="src" id="0x45" scope="0x16"/>
+<operand_sym_head name="dst" id="0x46" scope="0x17"/>
+<operand_sym_head name="imm" id="0x47" scope="0x17"/>
+<operand_sym_head name="dst" id="0x48" scope="0x18"/>
+<operand_sym_head name="src" id="0x49" scope="0x18"/>
+<operand_sym_head name="dst" id="0x4a" scope="0x19"/>
+<operand_sym_head name="imm" id="0x4b" scope="0x19"/>
+<operand_sym_head name="dst" id="0x4c" scope="0x1a"/>
+<operand_sym_head name="dst" id="0x4d" scope="0x1b"/>
+<operand_sym_head name="dst" id="0x4e" scope="0x1c"/>
+<operand_sym_head name="dst" id="0x4f" scope="0x1d"/>
+<operand_sym_head name="dst" id="0x50" scope="0x1e"/>
+<operand_sym_head name="dst" id="0x51" scope="0x1f"/>
+<operand_sym_head name="dst" id="0x52" scope="0x20"/>
+<operand_sym_head name="concat" id="0x53" scope="0x20"/>
+<operand_sym_head name="imm" id="0x54" scope="0x20"/>
+<operand_sym_head name="imm2" id="0x55" scope="0x20"/>
+<operand_sym_head name="dst" id="0x56" scope="0x21"/>
+<operand_sym_head name="imm" id="0x57" scope="0x21"/>
+<operand_sym_head name="imm2" id="0x58" scope="0x21"/>
+<operand_sym_head name="dst" id="0x59" scope="0x22"/>
+<operand_sym_head name="imm" id="0x5a" scope="0x22"/>
+<operand_sym_head name="dst" id="0x5b" scope="0x23"/>
+<operand_sym_head name="imm" id="0x5c" scope="0x23"/>
+<operand_sym_head name="dst" id="0x5d" scope="0x24"/>
+<operand_sym_head name="imm" id="0x5e" scope="0x24"/>
+<operand_sym_head name="dst" id="0x5f" scope="0x25"/>
+<operand_sym_head name="imm" id="0x60" scope="0x25"/>
+<operand_sym_head name="src" id="0x61" scope="0x26"/>
+<operand_sym_head name="dst" id="0x62" scope="0x26"/>
+<operand_sym_head name="imm" id="0x63" scope="0x26"/>
+<operand_sym_head name="src" id="0x64" scope="0x27"/>
+<operand_sym_head name="dst" id="0x65" scope="0x27"/>
+<operand_sym_head name="imm" id="0x66" scope="0x27"/>
+<operand_sym_head name="src" id="0x67" scope="0x28"/>
+<operand_sym_head name="dst" id="0x68" scope="0x28"/>
+<operand_sym_head name="imm" id="0x69" scope="0x28"/>
+<operand_sym_head name="src" id="0x6a" scope="0x29"/>
+<operand_sym_head name="dst" id="0x6b" scope="0x29"/>
+<operand_sym_head name="imm" id="0x6c" scope="0x29"/>
+<operand_sym_head name="dst" id="0x6d" scope="0x2a"/>
+<operand_sym_head name="src" id="0x6e" scope="0x2a"/>
+<operand_sym_head name="off" id="0x6f" scope="0x2a"/>
+<operand_sym_head name="dst" id="0x70" scope="0x2b"/>
+<operand_sym_head name="src" id="0x71" scope="0x2b"/>
+<operand_sym_head name="off" id="0x72" scope="0x2b"/>
+<operand_sym_head name="dst" id="0x73" scope="0x2c"/>
+<operand_sym_head name="src" id="0x74" scope="0x2c"/>
+<operand_sym_head name="off" id="0x75" scope="0x2c"/>
+<operand_sym_head name="dst" id="0x76" scope="0x2d"/>
+<operand_sym_head name="src" id="0x77" scope="0x2d"/>
+<operand_sym_head name="off" id="0x78" scope="0x2d"/>
+<operand_sym_head name="dst" id="0x79" scope="0x2e"/>
+<operand_sym_head name="off" id="0x7a" scope="0x2e"/>
+<operand_sym_head name="imm" id="0x7b" scope="0x2e"/>
+<operand_sym_head name="dst" id="0x7c" scope="0x2f"/>
+<operand_sym_head name="off" id="0x7d" scope="0x2f"/>
+<operand_sym_head name="imm" id="0x7e" scope="0x2f"/>
+<operand_sym_head name="dst" id="0x7f" scope="0x30"/>
+<operand_sym_head name="off" id="0x80" scope="0x30"/>
+<operand_sym_head name="imm" id="0x81" scope="0x30"/>
+<operand_sym_head name="dst" id="0x82" scope="0x31"/>
+<operand_sym_head name="off" id="0x83" scope="0x31"/>
+<operand_sym_head name="imm" id="0x84" scope="0x31"/>
+<operand_sym_head name="dst" id="0x85" scope="0x32"/>
+<operand_sym_head name="off" id="0x86" scope="0x32"/>
+<operand_sym_head name="src" id="0x87" scope="0x32"/>
+<operand_sym_head name="dst" id="0x88" scope="0x33"/>
+<operand_sym_head name="off" id="0x89" scope="0x33"/>
+<operand_sym_head name="src" id="0x8a" scope="0x33"/>
+<operand_sym_head name="dst" id="0x8b" scope="0x34"/>
+<operand_sym_head name="off" id="0x8c" scope="0x34"/>
+<operand_sym_head name="src" id="0x8d" scope="0x34"/>
+<operand_sym_head name="dst" id="0x8e" scope="0x35"/>
+<operand_sym_head name="off" id="0x8f" scope="0x35"/>
+<operand_sym_head name="src" id="0x90" scope="0x35"/>
+<operand_sym_head name="dst" id="0x91" scope="0x36"/>
+<operand_sym_head name="src" id="0x92" scope="0x36"/>
+<subtable_sym_head name="joff" id="0x93" scope="0x0"/>
+<operand_sym_head name="reloc" id="0x94" scope="0x37"/>
+<operand_sym_head name="off" id="0x95" scope="0x37"/>
+<operand_sym_head name="joff" id="0x96" scope="0x38"/>
+<operand_sym_head name="dst" id="0x97" scope="0x39"/>
+<operand_sym_head name="imm" id="0x98" scope="0x39"/>
+<operand_sym_head name="joff" id="0x99" scope="0x39"/>
+<operand_sym_head name="dst" id="0x9a" scope="0x3a"/>
+<operand_sym_head name="src" id="0x9b" scope="0x3a"/>
+<operand_sym_head name="joff" id="0x9c" scope="0x3a"/>
+<operand_sym_head name="dst" id="0x9d" scope="0x3b"/>
+<operand_sym_head name="imm" id="0x9e" scope="0x3b"/>
+<operand_sym_head name="joff" id="0x9f" scope="0x3b"/>
+<operand_sym_head name="dst" id="0xa0" scope="0x3c"/>
+<operand_sym_head name="src" id="0xa1" scope="0x3c"/>
+<operand_sym_head name="joff" id="0xa2" scope="0x3c"/>
+<operand_sym_head name="dst" id="0xa3" scope="0x3d"/>
+<operand_sym_head name="imm" id="0xa4" scope="0x3d"/>
+<operand_sym_head name="joff" id="0xa5" scope="0x3d"/>
+<operand_sym_head name="dst" id="0xa6" scope="0x3e"/>
+<operand_sym_head name="src" id="0xa7" scope="0x3e"/>
+<operand_sym_head name="joff" id="0xa8" scope="0x3e"/>
+<operand_sym_head name="dst" id="0xa9" scope="0x3f"/>
+<operand_sym_head name="imm" id="0xaa" scope="0x3f"/>
+<operand_sym_head name="joff" id="0xab" scope="0x3f"/>
+<operand_sym_head name="dst" id="0xac" scope="0x40"/>
+<operand_sym_head name="src" id="0xad" scope="0x40"/>
+<operand_sym_head name="joff" id="0xae" scope="0x40"/>
+<operand_sym_head name="dst" id="0xaf" scope="0x41"/>
+<operand_sym_head name="imm" id="0xb0" scope="0x41"/>
+<operand_sym_head name="joff" id="0xb1" scope="0x41"/>
+<operand_sym_head name="dst" id="0xb2" scope="0x42"/>
+<operand_sym_head name="src" id="0xb3" scope="0x42"/>
+<operand_sym_head name="joff" id="0xb4" scope="0x42"/>
+<operand_sym_head name="dst" id="0xb5" scope="0x43"/>
+<operand_sym_head name="imm" id="0xb6" scope="0x43"/>
+<operand_sym_head name="joff" id="0xb7" scope="0x43"/>
+<operand_sym_head name="dst" id="0xb8" scope="0x44"/>
+<operand_sym_head name="src" id="0xb9" scope="0x44"/>
+<operand_sym_head name="joff" id="0xba" scope="0x44"/>
+<operand_sym_head name="dst" id="0xbb" scope="0x45"/>
+<operand_sym_head name="imm" id="0xbc" scope="0x45"/>
+<operand_sym_head name="joff" id="0xbd" scope="0x45"/>
+<operand_sym_head name="dst" id="0xbe" scope="0x46"/>
+<operand_sym_head name="src" id="0xbf" scope="0x46"/>
+<operand_sym_head name="joff" id="0xc0" scope="0x46"/>
+<operand_sym_head name="dst" id="0xc1" scope="0x47"/>
+<operand_sym_head name="imm" id="0xc2" scope="0x47"/>
+<operand_sym_head name="joff" id="0xc3" scope="0x47"/>
+<operand_sym_head name="dst" id="0xc4" scope="0x48"/>
+<operand_sym_head name="src" id="0xc5" scope="0x48"/>
+<operand_sym_head name="joff" id="0xc6" scope="0x48"/>
+<operand_sym_head name="dst" id="0xc7" scope="0x49"/>
+<operand_sym_head name="imm" id="0xc8" scope="0x49"/>
+<operand_sym_head name="joff" id="0xc9" scope="0x49"/>
+<operand_sym_head name="dst" id="0xca" scope="0x4a"/>
+<operand_sym_head name="src" id="0xcb" scope="0x4a"/>
+<operand_sym_head name="joff" id="0xcc" scope="0x4a"/>
+<operand_sym_head name="dst" id="0xcd" scope="0x4b"/>
+<operand_sym_head name="imm" id="0xce" scope="0x4b"/>
+<operand_sym_head name="joff" id="0xcf" scope="0x4b"/>
+<operand_sym_head name="dst" id="0xd0" scope="0x4c"/>
+<operand_sym_head name="src" id="0xd1" scope="0x4c"/>
+<operand_sym_head name="joff" id="0xd2" scope="0x4c"/>
+<operand_sym_head name="dst" id="0xd3" scope="0x4d"/>
+<operand_sym_head name="imm" id="0xd4" scope="0x4d"/>
+<operand_sym_head name="joff" id="0xd5" scope="0x4d"/>
+<operand_sym_head name="dst" id="0xd6" scope="0x4e"/>
+<operand_sym_head name="src" id="0xd7" scope="0x4e"/>
+<operand_sym_head name="joff" id="0xd8" scope="0x4e"/>
+<subtable_sym_head name="SysCall" id="0xd9" scope="0x0"/>
+<operand_sym_head name="imm" id="0xda" scope="0x4f"/>
+<operand_sym_head name="SysCall" id="0xdb" scope="0x50"/>
+<operand_sym_head name="imm" id="0xdc" scope="0x50"/>
+<subtable_sym_head name="disp32" id="0xdd" scope="0x0"/>
+<operand_sym_head name="reloc" id="0xde" scope="0x51"/>
+<operand_sym_head name="imm" id="0xdf" scope="0x51"/>
+<operand_sym_head name="disp32" id="0xe0" scope="0x52"/>
+<operand_sym_head name="imm" id="0xe1" scope="0x52"/>
+<subtable_sym name="instruction" id="0x0" scope="0x0" numct="80">
+<constructor parent="0x0" first="1" length="8" line="0:39">
+<oper id="0x1c"/>
+<oper id="0x1b"/>
+<print piece="MOV"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="COPY"><varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:40">
+<oper id="0x1e"/>
+<oper id="0x1d"/>
+<print piece="MOV"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="COPY"><varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:42">
+<oper id="0x20"/>
+<oper id="0x1f"/>
+<print piece="ADD"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_ADD"><varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:43">
+<oper id="0x22"/>
+<oper id="0x21"/>
+<print piece="ADD"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_ADD"><varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:45">
+<oper id="0x24"/>
+<oper id="0x23"/>
+<print piece="SUB"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_SUB"><varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:46">
+<oper id="0x26"/>
+<oper id="0x25"/>
+<print piece="SUB"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_SUB"><varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:48">
+<oper id="0x28"/>
+<oper id="0x27"/>
+<print piece="MUL"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_MULT"><varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:49">
+<oper id="0x2a"/>
+<oper id="0x29"/>
+<print piece="MUL"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_MULT"><varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:51">
+<oper id="0x2c"/>
+<oper id="0x2b"/>
+<print piece="DIV"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_DIV"><varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:52">
+<oper id="0x2e"/>
+<oper id="0x2d"/>
+<print piece="DIV"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_DIV"><varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:54">
+<oper id="0x30"/>
+<oper id="0x2f"/>
+<print piece="OR"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_OR"><varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:55">
+<oper id="0x32"/>
+<oper id="0x31"/>
+<print piece="OR"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_OR"><varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:57">
+<oper id="0x34"/>
+<oper id="0x33"/>
+<print piece="AND"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_AND"><varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:58">
+<oper id="0x36"/>
+<oper id="0x35"/>
+<print piece="AND"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_AND"><varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:60">
+<oper id="0x38"/>
+<oper id="0x37"/>
+<print piece="LSH"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_LEFT"><varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:61">
+<oper id="0x3a"/>
+<oper id="0x39"/>
+<print piece="LSH"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_LEFT"><varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:63">
+<oper id="0x3c"/>
+<oper id="0x3b"/>
+<print piece="RSH"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_RIGHT"><varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:64">
+<oper id="0x3e"/>
+<oper id="0x3d"/>
+<print piece="RSH"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_RIGHT"><varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:66">
+<oper id="0x3f"/>
+<print piece="NEG"/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_2COMP"><varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:68">
+<oper id="0x41"/>
+<oper id="0x40"/>
+<print piece="MOD"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_REM"><varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:69">
+<oper id="0x43"/>
+<oper id="0x42"/>
+<print piece="MOD"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_REM"><varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:71">
+<oper id="0x45"/>
+<oper id="0x44"/>
+<print piece="XOR"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_XOR"><varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:72">
+<oper id="0x47"/>
+<oper id="0x46"/>
+<print piece="XOR"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_XOR"><varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:74">
+<oper id="0x49"/>
+<oper id="0x48"/>
+<print piece="ARSH"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_SRIGHT"><varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:75">
+<oper id="0x4b"/>
+<oper id="0x4a"/>
+<print piece="ARSH"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_SRIGHT"><varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:80">
+<oper id="0x4c"/>
+<print piece="LE16"/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_RIGHT"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0xb80"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x8"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_LEFT"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0xc00"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x8"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_OR"><varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0xb80"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0xc00"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:81">
+<oper id="0x4d"/>
+<print piece="LE32"/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_RIGHT"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0xd00"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x18"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_AND"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0xd80"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0xff0000"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_RIGHT"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0xe00"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0xd80"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x8"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_OR"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0xe80"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0xd00"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0xe00"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_AND"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0xf00"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0xff00"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_LEFT"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0xf80"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0xf00"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x8"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_OR"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1000"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0xe80"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0xf80"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_LEFT"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1080"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x18"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_OR"><varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1000"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1080"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:82">
+<oper id="0x4e"/>
+<print piece="LE64"/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_LEFT"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1180"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x38"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_AND"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1200"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1180"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0xff00000000000000"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_LEFT"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1280"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x28"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_AND"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1300"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1280"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0xff000000000000"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_OR"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1380"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1200"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1300"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_LEFT"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1400"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x18"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_AND"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1480"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1400"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0xff0000000000"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_OR"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1500"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1380"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1480"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_LEFT"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1580"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x8"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_AND"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1600"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1580"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0xff00000000"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_OR"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1680"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1500"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1600"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_RIGHT"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1700"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x8"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_AND"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1780"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1700"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0xff000000"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_OR"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1800"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1680"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1780"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_RIGHT"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1880"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x18"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_AND"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1900"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1880"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0xff0000"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_OR"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1980"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1800"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1900"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_RIGHT"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1a00"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x28"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_AND"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1a80"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1a00"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0xff00"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_OR"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1b00"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1980"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1a80"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_RIGHT"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1b80"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x38"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_AND"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1c00"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1b80"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0xff"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_OR"><varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1b00"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1c00"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:93">
+<oper id="0x4f"/>
+<print piece="BE16"/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_RIGHT"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1d00"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x8"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_LEFT"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1d80"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x8"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_OR"><varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1d00"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1d80"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:94">
+<oper id="0x50"/>
+<print piece="BE32"/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_RIGHT"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1e80"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x18"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_AND"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1f00"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0xff0000"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_RIGHT"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1f80"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1f00"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x8"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_OR"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2000"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1e80"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x1f80"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_AND"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2080"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0xff00"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_LEFT"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2100"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2080"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x8"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_OR"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2180"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2000"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2100"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_LEFT"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2200"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x18"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_OR"><varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2180"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2200"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:95">
+<oper id="0x51"/>
+<print piece="BE64"/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_LEFT"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2300"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x38"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_AND"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2380"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2300"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0xff00000000000000"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_LEFT"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2400"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x28"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_AND"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2480"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2400"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0xff000000000000"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_OR"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2500"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2380"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2480"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_LEFT"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2580"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x18"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_AND"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2600"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2580"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0xff0000000000"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_OR"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2680"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2500"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2600"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_LEFT"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2700"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x8"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_AND"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2780"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2700"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0xff00000000"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_OR"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2800"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2680"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2780"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_RIGHT"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2880"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x8"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_AND"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2900"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2880"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0xff000000"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_OR"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2980"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2800"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2900"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_RIGHT"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2a00"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x18"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_AND"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2a80"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2a00"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0xff0000"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_OR"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2b00"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2980"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2a80"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_RIGHT"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2b80"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x28"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_AND"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2c00"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2b80"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0xff00"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_OR"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2c80"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2b00"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2c00"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_RIGHT"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2d00"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x38"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_AND"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2d80"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2d00"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0xff"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_OR"><varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2c80"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x2d80"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="16" line="0:116">
+<oper id="0x54"/>
+<oper id="0x52"/>
+<oper id="0x55"/>
+<oper id="0x53"/>
+<print piece="LDDW"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="3"/>
+<construct_tpl>
+<null/><op_tpl code="COPY"><varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="3" s="space"/><const_tpl type="handle" val="3" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="16" line="0:122">
+<oper id="0x57"/>
+<oper id="0x56"/>
+<oper id="0x58"/>
+<print piece="LDDW"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="LOAD"><varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="spaceid" name="ram"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:124">
+<oper id="0x5a"/>
+<oper id="0x59"/>
+<print piece="LDABSW"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="LOAD"><varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="spaceid" name="ram"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:126">
+<oper id="0x5c"/>
+<oper id="0x5b"/>
+<print piece="LDABSH"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="LOAD"><varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="spaceid" name="ram"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:128">
+<oper id="0x5e"/>
+<oper id="0x5d"/>
+<print piece="LDABSB"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="LOAD"><varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="spaceid" name="ram"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:130">
+<oper id="0x60"/>
+<oper id="0x5f"/>
+<print piece="LDABSDW"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="LOAD"><varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="spaceid" name="ram"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:132">
+<oper id="0x63"/>
+<oper id="0x61"/>
+<oper id="0x62"/>
+<print piece="LDINDW"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="2"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_ADD"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3100"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="LOAD"><varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="spaceid" name="ram"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3100"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:134">
+<oper id="0x66"/>
+<oper id="0x64"/>
+<oper id="0x65"/>
+<print piece="LDINDH"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="2"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_ADD"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3200"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="LOAD"><varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="spaceid" name="ram"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3200"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:136">
+<oper id="0x69"/>
+<oper id="0x67"/>
+<oper id="0x68"/>
+<print piece="LDINDB"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="2"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_ADD"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3300"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="LOAD"><varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="spaceid" name="ram"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3300"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:138">
+<oper id="0x6c"/>
+<oper id="0x6a"/>
+<oper id="0x6b"/>
+<print piece="LDINDDW"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="2"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_ADD"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3400"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="LOAD"><varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="spaceid" name="ram"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3400"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:140">
+<oper id="0x6f"/>
+<oper id="0x6e"/>
+<oper id="0x6d"/>
+<print piece="LDXW"/>
+<print piece=" "/>
+<opprint id="2"/>
+<print piece=","/>
+<print piece=" "/>
+<print piece="["/>
+<opprint id="1"/>
+<print piece=" "/>
+<print piece="+"/>
+<print piece=" "/>
+<opprint id="0"/>
+<print piece="]"/>
+<construct_tpl>
+<null/><op_tpl code="INT_ADD"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3500"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="LOAD"><varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="spaceid" name="ram"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3500"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:142">
+<oper id="0x72"/>
+<oper id="0x71"/>
+<oper id="0x70"/>
+<print piece="LDXH"/>
+<print piece=" "/>
+<opprint id="2"/>
+<print piece=","/>
+<print piece=" "/>
+<print piece="["/>
+<opprint id="1"/>
+<print piece=" "/>
+<print piece="+"/>
+<print piece=" "/>
+<opprint id="0"/>
+<print piece="]"/>
+<construct_tpl>
+<null/><op_tpl code="INT_ADD"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3600"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="LOAD"><varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="spaceid" name="ram"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3600"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:144">
+<oper id="0x75"/>
+<oper id="0x74"/>
+<oper id="0x73"/>
+<print piece="LDXB"/>
+<print piece=" "/>
+<opprint id="2"/>
+<print piece=","/>
+<print piece=" "/>
+<print piece="["/>
+<opprint id="1"/>
+<print piece=" "/>
+<print piece="+"/>
+<print piece=" "/>
+<opprint id="0"/>
+<print piece="]"/>
+<construct_tpl>
+<null/><op_tpl code="INT_ADD"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3700"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="LOAD"><varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="spaceid" name="ram"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3700"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:146">
+<oper id="0x78"/>
+<oper id="0x77"/>
+<oper id="0x76"/>
+<print piece="LDXDW"/>
+<print piece=" "/>
+<opprint id="2"/>
+<print piece=","/>
+<print piece=" "/>
+<print piece="["/>
+<opprint id="1"/>
+<print piece=" "/>
+<print piece="+"/>
+<print piece=" "/>
+<opprint id="0"/>
+<print piece="]"/>
+<construct_tpl>
+<null/><op_tpl code="INT_ADD"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3800"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="LOAD"><varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="spaceid" name="ram"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3800"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:148">
+<oper id="0x7b"/>
+<oper id="0x7a"/>
+<oper id="0x79"/>
+<print piece="STW"/>
+<print piece=" "/>
+<print piece="["/>
+<opprint id="2"/>
+<print piece=" "/>
+<print piece="+"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece="],"/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_ADD"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3900"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="STORE"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="spaceid" name="ram"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3900"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:150">
+<oper id="0x7e"/>
+<oper id="0x7d"/>
+<oper id="0x7c"/>
+<print piece="STH"/>
+<print piece=" "/>
+<print piece="["/>
+<opprint id="2"/>
+<print piece=" "/>
+<print piece="+"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece="],"/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_ADD"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3980"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="STORE"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="spaceid" name="ram"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3980"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="real" val="0x2"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:152">
+<oper id="0x81"/>
+<oper id="0x80"/>
+<oper id="0x7f"/>
+<print piece="STB"/>
+<print piece=" "/>
+<print piece="["/>
+<opprint id="2"/>
+<print piece=" "/>
+<print piece="+"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece="],"/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_ADD"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3a00"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="STORE"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="spaceid" name="ram"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3a00"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:154">
+<oper id="0x84"/>
+<oper id="0x83"/>
+<oper id="0x82"/>
+<print piece="STDW"/>
+<print piece=" "/>
+<print piece="["/>
+<opprint id="2"/>
+<print piece=" "/>
+<print piece="+"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece="],"/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="INT_ADD"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3a80"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="STORE"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="spaceid" name="ram"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3a80"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:156">
+<oper id="0x86"/>
+<oper id="0x87"/>
+<oper id="0x85"/>
+<print piece="STXW"/>
+<print piece=" "/>
+<print piece="["/>
+<opprint id="2"/>
+<print piece=" "/>
+<print piece="+"/>
+<print piece=" "/>
+<opprint id="0"/>
+<print piece="],"/>
+<print piece=" "/>
+<opprint id="1"/>
+<construct_tpl>
+<null/><op_tpl code="INT_ADD"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3b00"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="STORE"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="spaceid" name="ram"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3b00"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset_plus" plus="0x0"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:158">
+<oper id="0x89"/>
+<oper id="0x8a"/>
+<oper id="0x88"/>
+<print piece="STXH"/>
+<print piece=" "/>
+<print piece="["/>
+<opprint id="2"/>
+<print piece=" "/>
+<print piece="+"/>
+<print piece=" "/>
+<opprint id="0"/>
+<print piece="],"/>
+<print piece=" "/>
+<opprint id="1"/>
+<construct_tpl>
+<null/><op_tpl code="INT_ADD"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3b80"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="STORE"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="spaceid" name="ram"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3b80"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset_plus" plus="0x0"/><const_tpl type="real" val="0x2"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:160">
+<oper id="0x8c"/>
+<oper id="0x8d"/>
+<oper id="0x8b"/>
+<print piece="STXB"/>
+<print piece=" "/>
+<print piece="["/>
+<opprint id="2"/>
+<print piece=" "/>
+<print piece="+"/>
+<print piece=" "/>
+<opprint id="0"/>
+<print piece="],"/>
+<print piece=" "/>
+<opprint id="1"/>
+<construct_tpl>
+<null/><op_tpl code="INT_ADD"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3c00"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="STORE"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="spaceid" name="ram"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3c00"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset_plus" plus="0x0"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:162">
+<oper id="0x8f"/>
+<oper id="0x90"/>
+<oper id="0x8e"/>
+<print piece="STXDW"/>
+<print piece=" "/>
+<print piece="["/>
+<opprint id="2"/>
+<print piece=" "/>
+<print piece="+"/>
+<print piece=" "/>
+<opprint id="0"/>
+<print piece="],"/>
+<print piece=" "/>
+<opprint id="1"/>
+<construct_tpl>
+<null/><op_tpl code="INT_ADD"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3c80"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="STORE"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="spaceid" name="ram"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3c80"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset_plus" plus="0x0"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:164">
+<oper id="0x92"/>
+<oper id="0x91"/>
+<print piece="XADDStSrc"/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="LOAD"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3d00"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="spaceid" name="ram"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_ADD"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3d80"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3d00"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="STORE"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="spaceid" name="ram"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3d80"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:171">
+<oper id="0x96"/>
+<print piece="JA"/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="BUILD"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x0"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="BRANCH"><null/>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:175">
+<oper id="0x98"/>
+<oper id="0x99"/>
+<oper id="0x97"/>
+<print piece="JEQ"/>
+<print piece=" "/>
+<opprint id="2"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="1"/>
+<construct_tpl>
+<null/><op_tpl code="BUILD"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x1"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_EQUAL"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3e80"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="CBRANCH"><null/>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3e80"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:179">
+<oper id="0x9c"/>
+<oper id="0x9b"/>
+<oper id="0x9a"/>
+<print piece="JEQ"/>
+<print piece=" "/>
+<opprint id="2"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="BUILD"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x0"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_EQUAL"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3f00"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="CBRANCH"><null/>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3f00"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:183">
+<oper id="0x9e"/>
+<oper id="0x9f"/>
+<oper id="0x9d"/>
+<print piece="JGT"/>
+<print piece=" "/>
+<opprint id="2"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="1"/>
+<construct_tpl>
+<null/><op_tpl code="BUILD"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x1"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_LESS"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3f80"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="CBRANCH"><null/>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3f80"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:187">
+<oper id="0xa2"/>
+<oper id="0xa1"/>
+<oper id="0xa0"/>
+<print piece="JGT"/>
+<print piece=" "/>
+<opprint id="2"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="BUILD"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x0"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_LESS"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4000"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="CBRANCH"><null/>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4000"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:191">
+<oper id="0xa4"/>
+<oper id="0xa5"/>
+<oper id="0xa3"/>
+<print piece="JGE"/>
+<print piece=" "/>
+<opprint id="2"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="1"/>
+<construct_tpl>
+<null/><op_tpl code="BUILD"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x1"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_LESSEQUAL"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4080"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="CBRANCH"><null/>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4080"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:195">
+<oper id="0xa8"/>
+<oper id="0xa7"/>
+<oper id="0xa6"/>
+<print piece="JGE"/>
+<print piece=" "/>
+<opprint id="2"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="BUILD"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x0"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_LESSEQUAL"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4100"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="CBRANCH"><null/>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4100"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:199">
+<oper id="0xaa"/>
+<oper id="0xab"/>
+<oper id="0xa9"/>
+<print piece="JLT"/>
+<print piece=" "/>
+<opprint id="2"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="1"/>
+<construct_tpl>
+<null/><op_tpl code="BUILD"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x1"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_LESS"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4180"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="CBRANCH"><null/>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4180"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:203">
+<oper id="0xae"/>
+<oper id="0xad"/>
+<oper id="0xac"/>
+<print piece="JLT"/>
+<print piece=" "/>
+<opprint id="2"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="BUILD"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x0"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_LESS"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4200"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="CBRANCH"><null/>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4200"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:207">
+<oper id="0xb0"/>
+<oper id="0xb1"/>
+<oper id="0xaf"/>
+<print piece="JLE"/>
+<print piece=" "/>
+<opprint id="2"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="1"/>
+<construct_tpl>
+<null/><op_tpl code="BUILD"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x1"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_LESSEQUAL"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4280"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="CBRANCH"><null/>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4280"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:211">
+<oper id="0xb4"/>
+<oper id="0xb3"/>
+<oper id="0xb2"/>
+<print piece="JLE"/>
+<print piece=" "/>
+<opprint id="2"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="BUILD"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x0"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_LESSEQUAL"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4300"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="CBRANCH"><null/>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4300"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:215">
+<oper id="0xb6"/>
+<oper id="0xb7"/>
+<oper id="0xb5"/>
+<print piece="JNE"/>
+<print piece=" "/>
+<opprint id="2"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="1"/>
+<construct_tpl>
+<null/><op_tpl code="BUILD"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x1"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_NOTEQUAL"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4380"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="CBRANCH"><null/>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4380"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:219">
+<oper id="0xba"/>
+<oper id="0xb9"/>
+<oper id="0xb8"/>
+<print piece="JNE"/>
+<print piece=" "/>
+<opprint id="2"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="BUILD"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x0"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_NOTEQUAL"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4400"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="CBRANCH"><null/>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4400"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:223">
+<oper id="0xbc"/>
+<oper id="0xbd"/>
+<oper id="0xbb"/>
+<print piece="JSGT"/>
+<print piece=" "/>
+<opprint id="2"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="1"/>
+<construct_tpl>
+<null/><op_tpl code="BUILD"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x1"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_SLESS"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4480"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="CBRANCH"><null/>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4480"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:227">
+<oper id="0xc0"/>
+<oper id="0xbf"/>
+<oper id="0xbe"/>
+<print piece="JSGT"/>
+<print piece=" "/>
+<opprint id="2"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="BUILD"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x0"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_SLESS"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4500"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="CBRANCH"><null/>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4500"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:231">
+<oper id="0xc2"/>
+<oper id="0xc3"/>
+<oper id="0xc1"/>
+<print piece="JSGE"/>
+<print piece=" "/>
+<opprint id="2"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="1"/>
+<construct_tpl>
+<null/><op_tpl code="BUILD"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x1"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_SLESSEQUAL"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4580"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="CBRANCH"><null/>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4580"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:235">
+<oper id="0xc6"/>
+<oper id="0xc5"/>
+<oper id="0xc4"/>
+<print piece="JSGE"/>
+<print piece=" "/>
+<opprint id="2"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="BUILD"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x0"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_SLESSEQUAL"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4600"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="CBRANCH"><null/>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4600"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:239">
+<oper id="0xc8"/>
+<oper id="0xc9"/>
+<oper id="0xc7"/>
+<print piece="JSLT"/>
+<print piece=" "/>
+<opprint id="2"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="1"/>
+<construct_tpl>
+<null/><op_tpl code="BUILD"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x1"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_SLESS"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4680"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="CBRANCH"><null/>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4680"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:243">
+<oper id="0xcc"/>
+<oper id="0xcb"/>
+<oper id="0xca"/>
+<print piece="JSLT"/>
+<print piece=" "/>
+<opprint id="2"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="BUILD"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x0"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_SLESS"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4700"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="CBRANCH"><null/>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4700"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:247">
+<oper id="0xce"/>
+<oper id="0xcf"/>
+<oper id="0xcd"/>
+<print piece="JSLE"/>
+<print piece=" "/>
+<opprint id="2"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="1"/>
+<construct_tpl>
+<null/><op_tpl code="BUILD"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x1"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_SLESSEQUAL"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4780"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="CBRANCH"><null/>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4780"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:251">
+<oper id="0xd2"/>
+<oper id="0xd1"/>
+<oper id="0xd0"/>
+<print piece="JSLE"/>
+<print piece=" "/>
+<opprint id="2"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="BUILD"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x0"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_SLESSEQUAL"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4800"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="CBRANCH"><null/>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4800"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:255">
+<oper id="0xd4"/>
+<oper id="0xd5"/>
+<oper id="0xd3"/>
+<print piece="JSET"/>
+<print piece=" "/>
+<opprint id="2"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="1"/>
+<construct_tpl>
+<null/><op_tpl code="BUILD"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x1"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_AND"><varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="CBRANCH"><null/>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset_plus" plus="0x0"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:260">
+<oper id="0xd8"/>
+<oper id="0xd7"/>
+<oper id="0xd6"/>
+<print piece="JSET"/>
+<print piece=" "/>
+<opprint id="2"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="1"/>
+<print piece=","/>
+<print piece=" "/>
+<opprint id="0"/>
+<construct_tpl>
+<null/><op_tpl code="BUILD"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x0"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="INT_AND"><varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset"/><const_tpl type="handle" val="2" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="CBRANCH"><null/>
+<varnode_tpl><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="handle" val="0" s="size"/></varnode_tpl>
+<varnode_tpl><const_tpl type="handle" val="2" s="space"/><const_tpl type="handle" val="2" s="offset_plus" plus="0x0"/><const_tpl type="real" val="0x1"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:267">
+<oper id="0xdc"/>
+<oper id="0xdb"/>
+<print piece="CALL"/>
+<print piece=" "/>
+<opprint id="1"/>
+<construct_tpl>
+<null/><op_tpl code="BUILD"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x1"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="CALL"><null/>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:273">
+<oper id="0xe1"/>
+<oper id="0xe0"/>
+<print piece="CALL"/>
+<print piece=" "/>
+<opprint id="1"/>
+<construct_tpl>
+<null/><op_tpl code="BUILD"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="real" val="0x1"/><const_tpl type="real" val="0x4"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="CALL"><null/>
+<varnode_tpl><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="handle" val="1" s="size"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<constructor parent="0x0" first="1" length="8" line="0:277">
+<print piece="EXIT"/>
+<construct_tpl>
+<null/><op_tpl code="LOAD"><varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4a80"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="const"/><const_tpl type="spaceid" name="ram"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+<varnode_tpl><const_tpl type="spaceid" name="register"/><const_tpl type="real" val="0x50"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+</op_tpl>
+<op_tpl code="RETURN"><null/>
+<varnode_tpl><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4a80"/><const_tpl type="real" val="0x8"/></varnode_tpl>
+</op_tpl>
+</construct_tpl>
+</constructor>
+<decision number="80" context="false" start="0" size="8">
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="54">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x5000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="3">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x7000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="2">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0xf000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="55">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x15000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="5">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x17000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="2" context="false" start="0" size="0">
+<pair id="32">
+<instruct_pat>
+<pat_block offset="0" nonzero="2">
+  <mask_word mask="0xfff00000" val="0x18100000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+<pair id="31">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x18000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="56">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x1d000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="4">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x1f000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="33">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x20000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="57">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x25000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="7">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x27000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="34">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x28000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="58">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x2d000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="6">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x2f000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="35">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x30000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="59">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x35000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="9">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x37000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="36">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x38000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="60">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x3d000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="8">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x3f000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="37">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x40000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="75">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x45000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="11">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x47000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="38">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x48000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="76">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x4d000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="10">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x4f000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="39">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x50000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="65">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x55000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="13">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x57000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="40">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x58000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="66">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x5d000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="12">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x5f000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="41">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x61000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="45">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x62000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="49">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x63000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="67">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x65000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="15">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x67000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="42">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x69000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="46">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x6a000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="50">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x6b000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="68">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x6d000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="14">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x6f000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="43">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x71000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="47">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x72000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="51">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x73000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="69">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x75000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="17">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x77000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="44">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x79000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="48">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x7a000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="52">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x7b000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="70">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x7d000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="16">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x7f000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="2" context="false" start="11" size="1">
+<decision number="1" context="false" start="0" size="0">
+<pair id="77">
+<instruct_pat>
+<pat_block offset="0" nonzero="2">
+  <mask_word mask="0xfff00000" val="0x85000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="78">
+<instruct_pat>
+<pat_block offset="0" nonzero="2">
+  <mask_word mask="0xfff00000" val="0x85100000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="18">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x87000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="79">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x95000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="20">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x97000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="19">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0x9f000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="61">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0xa5000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="22">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0xa7000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="62">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0xad000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="21">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0xaf000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="63">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0xb5000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="1">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0xb7000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="64">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0xbd000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="0">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0xbf000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="71">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0xc5000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="24">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0xc7000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="72">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0xcd000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="23">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0xcf000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="3" context="false" start="33" size="2">
+<decision number="1" context="false" start="0" size="0">
+<pair id="25">
+<instruct_pat>
+<pat_block offset="0" nonzero="8">
+  <mask_word mask="0xff000000" val="0xd4000000"/>
+  <mask_word mask="0xffffffff" val="0x10000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="26">
+<instruct_pat>
+<pat_block offset="0" nonzero="8">
+  <mask_word mask="0xff000000" val="0xd4000000"/>
+  <mask_word mask="0xffffffff" val="0x20000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="27">
+<instruct_pat>
+<pat_block offset="0" nonzero="8">
+  <mask_word mask="0xff000000" val="0xd4000000"/>
+  <mask_word mask="0xffffffff" val="0x40000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="73">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0xd5000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="53">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0xdb000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="3" context="false" start="33" size="2">
+<decision number="1" context="false" start="0" size="0">
+<pair id="28">
+<instruct_pat>
+<pat_block offset="0" nonzero="8">
+  <mask_word mask="0xff000000" val="0xdc000000"/>
+  <mask_word mask="0xffffffff" val="0x10000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="29">
+<instruct_pat>
+<pat_block offset="0" nonzero="8">
+  <mask_word mask="0xff000000" val="0xdc000000"/>
+  <mask_word mask="0xffffffff" val="0x20000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="30">
+<instruct_pat>
+<pat_block offset="0" nonzero="8">
+  <mask_word mask="0xff000000" val="0xdc000000"/>
+  <mask_word mask="0xffffffff" val="0x40000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+</decision>
+<decision number="1" context="false" start="0" size="0">
+<pair id="74">
+<instruct_pat>
+<pat_block offset="0" nonzero="1">
+  <mask_word mask="0xff000000" val="0xdd000000"/>
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+<decision number="0" context="false" start="0" size="0">
+</decision>
+</decision>
+</subtable_sym>
+<start_sym name="inst_start" id="0x1" scope="0x0"/>
+<start_sym name="operand_offset" id="0x2" scope="0x0"/>
+<end_sym name="inst_next" id="0x3" scope="0x0"/>
+<next2_sym name="inst_next2" id="0x4" scope="0x0"/>
+<varnode_sym name="R0" id="0x5" scope="0x0" space="register" offset="0x0" size="8">
+</varnode_sym>
+<varnode_sym name="R1" id="0x6" scope="0x0" space="register" offset="0x8" size="8">
+</varnode_sym>
+<varnode_sym name="R2" id="0x7" scope="0x0" space="register" offset="0x10" size="8">
+</varnode_sym>
+<varnode_sym name="R3" id="0x8" scope="0x0" space="register" offset="0x18" size="8">
+</varnode_sym>
+<varnode_sym name="R4" id="0x9" scope="0x0" space="register" offset="0x20" size="8">
+</varnode_sym>
+<varnode_sym name="R5" id="0xa" scope="0x0" space="register" offset="0x28" size="8">
+</varnode_sym>
+<varnode_sym name="R6" id="0xb" scope="0x0" space="register" offset="0x30" size="8">
+</varnode_sym>
+<varnode_sym name="R7" id="0xc" scope="0x0" space="register" offset="0x38" size="8">
+</varnode_sym>
+<varnode_sym name="R8" id="0xd" scope="0x0" space="register" offset="0x40" size="8">
+</varnode_sym>
+<varnode_sym name="R9" id="0xe" scope="0x0" space="register" offset="0x48" size="8">
+</varnode_sym>
+<varnode_sym name="R10" id="0xf" scope="0x0" space="register" offset="0x50" size="8">
+</varnode_sym>
+<varnode_sym name="PC" id="0x10" scope="0x0" space="register" offset="0x58" size="8">
+</varnode_sym>
+<value_sym name="imm" id="0x11" scope="0x0">
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</value_sym>
+<value_sym name="off" id="0x12" scope="0x0">
+<tokenfield bigendian="false" signbit="true" bitstart="16" bitend="31" bytestart="2" byteend="3" shift="0" base="16"/>
+</value_sym>
+<varlist_sym name="src" id="0x13" scope="0x0">
+<tokenfield bigendian="false" signbit="false" bitstart="12" bitend="15" bytestart="1" byteend="1" shift="4" base="16"/>
+<var id="0x5"/>
+<var id="0x6"/>
+<var id="0x7"/>
+<var id="0x8"/>
+<var id="0x9"/>
+<var id="0xa"/>
+<var id="0xb"/>
+<var id="0xc"/>
+<var id="0xd"/>
+<var id="0xe"/>
+<var id="0xf"/>
+<null/>
+<null/>
+<null/>
+<null/>
+<null/>
+</varlist_sym>
+<varlist_sym name="dst" id="0x14" scope="0x0">
+<tokenfield bigendian="false" signbit="false" bitstart="8" bitend="11" bytestart="1" byteend="1" shift="0" base="16"/>
+<var id="0x5"/>
+<var id="0x6"/>
+<var id="0x7"/>
+<var id="0x8"/>
+<var id="0x9"/>
+<var id="0xa"/>
+<var id="0xb"/>
+<var id="0xc"/>
+<var id="0xd"/>
+<var id="0xe"/>
+<var id="0xf"/>
+<null/>
+<null/>
+<null/>
+<null/>
+<null/>
+</varlist_sym>
+<value_sym name="op_alu_jmp_opcode" id="0x15" scope="0x0">
+<tokenfield bigendian="false" signbit="false" bitstart="4" bitend="7" bytestart="0" byteend="0" shift="4" base="16"/>
+</value_sym>
+<value_sym name="op_alu_jmp_source" id="0x16" scope="0x0">
+<tokenfield bigendian="false" signbit="false" bitstart="3" bitend="3" bytestart="0" byteend="0" shift="3" base="16"/>
+</value_sym>
+<value_sym name="op_ld_st_mode" id="0x17" scope="0x0">
+<tokenfield bigendian="false" signbit="false" bitstart="5" bitend="7" bytestart="0" byteend="0" shift="5" base="16"/>
+</value_sym>
+<value_sym name="op_ld_st_size" id="0x18" scope="0x0">
+<tokenfield bigendian="false" signbit="false" bitstart="3" bitend="4" bytestart="0" byteend="0" shift="3" base="16"/>
+</value_sym>
+<value_sym name="op_insn_class" id="0x19" scope="0x0">
+<tokenfield bigendian="false" signbit="false" bitstart="0" bitend="2" bytestart="0" byteend="0" shift="0" base="16"/>
+</value_sym>
+<value_sym name="imm2" id="0x1a" scope="0x0">
+<tokenfield bigendian="false" signbit="false" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</value_sym>
+<operand_sym name="dst" id="0x1b" scope="0x1" subsym="0x14" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x0"/>
+</operand_sym>
+<operand_sym name="src" id="0x1c" scope="0x1" subsym="0x13" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x0"/>
+</operand_sym>
+<operand_sym name="dst" id="0x1d" scope="0x2" subsym="0x14" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x1"/>
+</operand_sym>
+<operand_sym name="imm" id="0x1e" scope="0x2" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x1"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="dst" id="0x1f" scope="0x3" subsym="0x14" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x2"/>
+</operand_sym>
+<operand_sym name="src" id="0x20" scope="0x3" subsym="0x13" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x2"/>
+</operand_sym>
+<operand_sym name="dst" id="0x21" scope="0x4" subsym="0x14" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x3"/>
+</operand_sym>
+<operand_sym name="imm" id="0x22" scope="0x4" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x3"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="dst" id="0x23" scope="0x5" subsym="0x14" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x4"/>
+</operand_sym>
+<operand_sym name="src" id="0x24" scope="0x5" subsym="0x13" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x4"/>
+</operand_sym>
+<operand_sym name="dst" id="0x25" scope="0x6" subsym="0x14" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x5"/>
+</operand_sym>
+<operand_sym name="imm" id="0x26" scope="0x6" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x5"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="dst" id="0x27" scope="0x7" subsym="0x14" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x6"/>
+</operand_sym>
+<operand_sym name="src" id="0x28" scope="0x7" subsym="0x13" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x6"/>
+</operand_sym>
+<operand_sym name="dst" id="0x29" scope="0x8" subsym="0x14" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x7"/>
+</operand_sym>
+<operand_sym name="imm" id="0x2a" scope="0x8" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x7"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="dst" id="0x2b" scope="0x9" subsym="0x14" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x8"/>
+</operand_sym>
+<operand_sym name="src" id="0x2c" scope="0x9" subsym="0x13" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x8"/>
+</operand_sym>
+<operand_sym name="dst" id="0x2d" scope="0xa" subsym="0x14" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x9"/>
+</operand_sym>
+<operand_sym name="imm" id="0x2e" scope="0xa" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x9"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="dst" id="0x2f" scope="0xb" subsym="0x14" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0xa"/>
+</operand_sym>
+<operand_sym name="src" id="0x30" scope="0xb" subsym="0x13" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0xa"/>
+</operand_sym>
+<operand_sym name="dst" id="0x31" scope="0xc" subsym="0x14" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0xb"/>
+</operand_sym>
+<operand_sym name="imm" id="0x32" scope="0xc" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0xb"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="dst" id="0x33" scope="0xd" subsym="0x14" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0xc"/>
+</operand_sym>
+<operand_sym name="src" id="0x34" scope="0xd" subsym="0x13" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0xc"/>
+</operand_sym>
+<operand_sym name="dst" id="0x35" scope="0xe" subsym="0x14" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0xd"/>
+</operand_sym>
+<operand_sym name="imm" id="0x36" scope="0xe" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0xd"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="dst" id="0x37" scope="0xf" subsym="0x14" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0xe"/>
+</operand_sym>
+<operand_sym name="src" id="0x38" scope="0xf" subsym="0x13" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0xe"/>
+</operand_sym>
+<operand_sym name="dst" id="0x39" scope="0x10" subsym="0x14" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0xf"/>
+</operand_sym>
+<operand_sym name="imm" id="0x3a" scope="0x10" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0xf"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="dst" id="0x3b" scope="0x11" subsym="0x14" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x10"/>
+</operand_sym>
+<operand_sym name="src" id="0x3c" scope="0x11" subsym="0x13" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x10"/>
+</operand_sym>
+<operand_sym name="dst" id="0x3d" scope="0x12" subsym="0x14" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x11"/>
+</operand_sym>
+<operand_sym name="imm" id="0x3e" scope="0x12" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x11"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="dst" id="0x3f" scope="0x13" subsym="0x14" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x12"/>
+</operand_sym>
+<operand_sym name="dst" id="0x40" scope="0x14" subsym="0x14" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x13"/>
+</operand_sym>
+<operand_sym name="src" id="0x41" scope="0x14" subsym="0x13" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x13"/>
+</operand_sym>
+<operand_sym name="dst" id="0x42" scope="0x15" subsym="0x14" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x14"/>
+</operand_sym>
+<operand_sym name="imm" id="0x43" scope="0x15" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x14"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="dst" id="0x44" scope="0x16" subsym="0x14" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x15"/>
+</operand_sym>
+<operand_sym name="src" id="0x45" scope="0x16" subsym="0x13" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x15"/>
+</operand_sym>
+<operand_sym name="dst" id="0x46" scope="0x17" subsym="0x14" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x16"/>
+</operand_sym>
+<operand_sym name="imm" id="0x47" scope="0x17" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x16"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="dst" id="0x48" scope="0x18" subsym="0x14" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x17"/>
+</operand_sym>
+<operand_sym name="src" id="0x49" scope="0x18" subsym="0x13" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x17"/>
+</operand_sym>
+<operand_sym name="dst" id="0x4a" scope="0x19" subsym="0x14" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x18"/>
+</operand_sym>
+<operand_sym name="imm" id="0x4b" scope="0x19" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x18"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="dst" id="0x4c" scope="0x1a" subsym="0x14" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x19"/>
+</operand_sym>
+<operand_sym name="dst" id="0x4d" scope="0x1b" subsym="0x14" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x1a"/>
+</operand_sym>
+<operand_sym name="dst" id="0x4e" scope="0x1c" subsym="0x14" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x1b"/>
+</operand_sym>
+<operand_sym name="dst" id="0x4f" scope="0x1d" subsym="0x14" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x1c"/>
+</operand_sym>
+<operand_sym name="dst" id="0x50" scope="0x1e" subsym="0x14" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x1d"/>
+</operand_sym>
+<operand_sym name="dst" id="0x51" scope="0x1f" subsym="0x14" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x1e"/>
+</operand_sym>
+<operand_sym name="dst" id="0x52" scope="0x20" subsym="0x14" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x1f"/>
+</operand_sym>
+<operand_sym name="concat" id="0x53" scope="0x20" off="0" base="-1" minlen="0" index="3">
+<operand_exp index="3" table="0x0" ct="0x1f"/>
+<or_exp>
+<lshift_exp>
+<operand_exp index="2" table="0x0" ct="0x1f"/>
+<intb val="32"/>
+</lshift_exp>
+<and_exp>
+<operand_exp index="0" table="0x0" ct="0x1f"/>
+<intb val="4294967295"/>
+</and_exp>
+</or_exp>
+</operand_sym>
+<operand_sym name="imm" id="0x54" scope="0x20" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x1f"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="imm2" id="0x55" scope="0x20" off="8" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x1f"/>
+<tokenfield bigendian="false" signbit="false" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="dst" id="0x56" scope="0x21" subsym="0x14" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x20"/>
+</operand_sym>
+<operand_sym name="imm" id="0x57" scope="0x21" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x20"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="imm2" id="0x58" scope="0x21" off="8" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x20"/>
+<tokenfield bigendian="false" signbit="false" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="dst" id="0x59" scope="0x22" subsym="0x14" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x21"/>
+</operand_sym>
+<operand_sym name="imm" id="0x5a" scope="0x22" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x21"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="dst" id="0x5b" scope="0x23" subsym="0x14" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x22"/>
+</operand_sym>
+<operand_sym name="imm" id="0x5c" scope="0x23" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x22"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="dst" id="0x5d" scope="0x24" subsym="0x14" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x23"/>
+</operand_sym>
+<operand_sym name="imm" id="0x5e" scope="0x24" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x23"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="dst" id="0x5f" scope="0x25" subsym="0x14" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x24"/>
+</operand_sym>
+<operand_sym name="imm" id="0x60" scope="0x25" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x24"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="src" id="0x61" scope="0x26" subsym="0x13" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x25"/>
+</operand_sym>
+<operand_sym name="dst" id="0x62" scope="0x26" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x25"/>
+</operand_sym>
+<operand_sym name="imm" id="0x63" scope="0x26" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x25"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="src" id="0x64" scope="0x27" subsym="0x13" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x26"/>
+</operand_sym>
+<operand_sym name="dst" id="0x65" scope="0x27" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x26"/>
+</operand_sym>
+<operand_sym name="imm" id="0x66" scope="0x27" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x26"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="src" id="0x67" scope="0x28" subsym="0x13" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x27"/>
+</operand_sym>
+<operand_sym name="dst" id="0x68" scope="0x28" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x27"/>
+</operand_sym>
+<operand_sym name="imm" id="0x69" scope="0x28" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x27"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="src" id="0x6a" scope="0x29" subsym="0x13" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x28"/>
+</operand_sym>
+<operand_sym name="dst" id="0x6b" scope="0x29" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x28"/>
+</operand_sym>
+<operand_sym name="imm" id="0x6c" scope="0x29" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x28"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="dst" id="0x6d" scope="0x2a" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x29"/>
+</operand_sym>
+<operand_sym name="src" id="0x6e" scope="0x2a" subsym="0x13" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x29"/>
+</operand_sym>
+<operand_sym name="off" id="0x6f" scope="0x2a" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x29"/>
+<tokenfield bigendian="false" signbit="true" bitstart="16" bitend="31" bytestart="2" byteend="3" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="dst" id="0x70" scope="0x2b" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x2a"/>
+</operand_sym>
+<operand_sym name="src" id="0x71" scope="0x2b" subsym="0x13" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x2a"/>
+</operand_sym>
+<operand_sym name="off" id="0x72" scope="0x2b" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x2a"/>
+<tokenfield bigendian="false" signbit="true" bitstart="16" bitend="31" bytestart="2" byteend="3" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="dst" id="0x73" scope="0x2c" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x2b"/>
+</operand_sym>
+<operand_sym name="src" id="0x74" scope="0x2c" subsym="0x13" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x2b"/>
+</operand_sym>
+<operand_sym name="off" id="0x75" scope="0x2c" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x2b"/>
+<tokenfield bigendian="false" signbit="true" bitstart="16" bitend="31" bytestart="2" byteend="3" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="dst" id="0x76" scope="0x2d" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x2c"/>
+</operand_sym>
+<operand_sym name="src" id="0x77" scope="0x2d" subsym="0x13" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x2c"/>
+</operand_sym>
+<operand_sym name="off" id="0x78" scope="0x2d" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x2c"/>
+<tokenfield bigendian="false" signbit="true" bitstart="16" bitend="31" bytestart="2" byteend="3" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="dst" id="0x79" scope="0x2e" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x2d"/>
+</operand_sym>
+<operand_sym name="off" id="0x7a" scope="0x2e" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x2d"/>
+<tokenfield bigendian="false" signbit="true" bitstart="16" bitend="31" bytestart="2" byteend="3" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="imm" id="0x7b" scope="0x2e" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x2d"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="dst" id="0x7c" scope="0x2f" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x2e"/>
+</operand_sym>
+<operand_sym name="off" id="0x7d" scope="0x2f" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x2e"/>
+<tokenfield bigendian="false" signbit="true" bitstart="16" bitend="31" bytestart="2" byteend="3" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="imm" id="0x7e" scope="0x2f" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x2e"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="dst" id="0x7f" scope="0x30" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x2f"/>
+</operand_sym>
+<operand_sym name="off" id="0x80" scope="0x30" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x2f"/>
+<tokenfield bigendian="false" signbit="true" bitstart="16" bitend="31" bytestart="2" byteend="3" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="imm" id="0x81" scope="0x30" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x2f"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="dst" id="0x82" scope="0x31" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x30"/>
+</operand_sym>
+<operand_sym name="off" id="0x83" scope="0x31" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x30"/>
+<tokenfield bigendian="false" signbit="true" bitstart="16" bitend="31" bytestart="2" byteend="3" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="imm" id="0x84" scope="0x31" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x30"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="dst" id="0x85" scope="0x32" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x31"/>
+</operand_sym>
+<operand_sym name="off" id="0x86" scope="0x32" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x31"/>
+<tokenfield bigendian="false" signbit="true" bitstart="16" bitend="31" bytestart="2" byteend="3" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="src" id="0x87" scope="0x32" subsym="0x13" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x31"/>
+</operand_sym>
+<operand_sym name="dst" id="0x88" scope="0x33" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x32"/>
+</operand_sym>
+<operand_sym name="off" id="0x89" scope="0x33" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x32"/>
+<tokenfield bigendian="false" signbit="true" bitstart="16" bitend="31" bytestart="2" byteend="3" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="src" id="0x8a" scope="0x33" subsym="0x13" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x32"/>
+</operand_sym>
+<operand_sym name="dst" id="0x8b" scope="0x34" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x33"/>
+</operand_sym>
+<operand_sym name="off" id="0x8c" scope="0x34" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x33"/>
+<tokenfield bigendian="false" signbit="true" bitstart="16" bitend="31" bytestart="2" byteend="3" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="src" id="0x8d" scope="0x34" subsym="0x13" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x33"/>
+</operand_sym>
+<operand_sym name="dst" id="0x8e" scope="0x35" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x34"/>
+</operand_sym>
+<operand_sym name="off" id="0x8f" scope="0x35" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x34"/>
+<tokenfield bigendian="false" signbit="true" bitstart="16" bitend="31" bytestart="2" byteend="3" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="src" id="0x90" scope="0x35" subsym="0x13" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x34"/>
+</operand_sym>
+<operand_sym name="dst" id="0x91" scope="0x36" subsym="0x14" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x35"/>
+</operand_sym>
+<operand_sym name="src" id="0x92" scope="0x36" subsym="0x13" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x35"/>
+</operand_sym>
+<subtable_sym name="joff" id="0x93" scope="0x0" numct="1">
+<constructor parent="0x93" first="1" length="8" line="0:169">
+<oper id="0x95"/>
+<oper id="0x94"/>
+<opprint id="1"/>
+<construct_tpl>
+<handle_tpl><const_tpl type="spaceid" name="ram"/><const_tpl type="real" val="0x8"/><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="real" val="0x0"/><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x3e00"/></handle_tpl>
+</construct_tpl>
+</constructor>
+<decision number="1" context="false" start="0" size="0">
+<pair id="0">
+<instruct_pat>
+<pat_block offset="0" nonzero="0">
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+</subtable_sym>
+<operand_sym name="reloc" id="0x94" scope="0x37" off="0" base="-1" minlen="0" index="1">
+<operand_exp index="1" table="0x93" ct="0x0"/>
+<plus_exp>
+<end_exp/><mult_exp>
+<operand_exp index="0" table="0x93" ct="0x0"/>
+<intb val="8"/>
+</mult_exp>
+</plus_exp>
+</operand_sym>
+<operand_sym name="off" id="0x95" scope="0x37" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x93" ct="0x0"/>
+<tokenfield bigendian="false" signbit="true" bitstart="16" bitend="31" bytestart="2" byteend="3" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="joff" id="0x96" scope="0x38" subsym="0x93" off="0" base="-1" minlen="8" code="true" index="0">
+<operand_exp index="0" table="0x0" ct="0x36"/>
+</operand_sym>
+<operand_sym name="dst" id="0x97" scope="0x39" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x37"/>
+</operand_sym>
+<operand_sym name="imm" id="0x98" scope="0x39" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x37"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="joff" id="0x99" scope="0x39" subsym="0x93" off="0" base="-1" minlen="8" code="true" index="1">
+<operand_exp index="1" table="0x0" ct="0x37"/>
+</operand_sym>
+<operand_sym name="dst" id="0x9a" scope="0x3a" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x38"/>
+</operand_sym>
+<operand_sym name="src" id="0x9b" scope="0x3a" subsym="0x13" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x38"/>
+</operand_sym>
+<operand_sym name="joff" id="0x9c" scope="0x3a" subsym="0x93" off="0" base="-1" minlen="8" code="true" index="0">
+<operand_exp index="0" table="0x0" ct="0x38"/>
+</operand_sym>
+<operand_sym name="dst" id="0x9d" scope="0x3b" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x39"/>
+</operand_sym>
+<operand_sym name="imm" id="0x9e" scope="0x3b" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x39"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="joff" id="0x9f" scope="0x3b" subsym="0x93" off="0" base="-1" minlen="8" code="true" index="1">
+<operand_exp index="1" table="0x0" ct="0x39"/>
+</operand_sym>
+<operand_sym name="dst" id="0xa0" scope="0x3c" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x3a"/>
+</operand_sym>
+<operand_sym name="src" id="0xa1" scope="0x3c" subsym="0x13" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x3a"/>
+</operand_sym>
+<operand_sym name="joff" id="0xa2" scope="0x3c" subsym="0x93" off="0" base="-1" minlen="8" code="true" index="0">
+<operand_exp index="0" table="0x0" ct="0x3a"/>
+</operand_sym>
+<operand_sym name="dst" id="0xa3" scope="0x3d" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x3b"/>
+</operand_sym>
+<operand_sym name="imm" id="0xa4" scope="0x3d" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x3b"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="joff" id="0xa5" scope="0x3d" subsym="0x93" off="0" base="-1" minlen="8" code="true" index="1">
+<operand_exp index="1" table="0x0" ct="0x3b"/>
+</operand_sym>
+<operand_sym name="dst" id="0xa6" scope="0x3e" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x3c"/>
+</operand_sym>
+<operand_sym name="src" id="0xa7" scope="0x3e" subsym="0x13" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x3c"/>
+</operand_sym>
+<operand_sym name="joff" id="0xa8" scope="0x3e" subsym="0x93" off="0" base="-1" minlen="8" code="true" index="0">
+<operand_exp index="0" table="0x0" ct="0x3c"/>
+</operand_sym>
+<operand_sym name="dst" id="0xa9" scope="0x3f" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x3d"/>
+</operand_sym>
+<operand_sym name="imm" id="0xaa" scope="0x3f" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x3d"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="joff" id="0xab" scope="0x3f" subsym="0x93" off="0" base="-1" minlen="8" code="true" index="1">
+<operand_exp index="1" table="0x0" ct="0x3d"/>
+</operand_sym>
+<operand_sym name="dst" id="0xac" scope="0x40" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x3e"/>
+</operand_sym>
+<operand_sym name="src" id="0xad" scope="0x40" subsym="0x13" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x3e"/>
+</operand_sym>
+<operand_sym name="joff" id="0xae" scope="0x40" subsym="0x93" off="0" base="-1" minlen="8" code="true" index="0">
+<operand_exp index="0" table="0x0" ct="0x3e"/>
+</operand_sym>
+<operand_sym name="dst" id="0xaf" scope="0x41" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x3f"/>
+</operand_sym>
+<operand_sym name="imm" id="0xb0" scope="0x41" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x3f"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="joff" id="0xb1" scope="0x41" subsym="0x93" off="0" base="-1" minlen="8" code="true" index="1">
+<operand_exp index="1" table="0x0" ct="0x3f"/>
+</operand_sym>
+<operand_sym name="dst" id="0xb2" scope="0x42" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x40"/>
+</operand_sym>
+<operand_sym name="src" id="0xb3" scope="0x42" subsym="0x13" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x40"/>
+</operand_sym>
+<operand_sym name="joff" id="0xb4" scope="0x42" subsym="0x93" off="0" base="-1" minlen="8" code="true" index="0">
+<operand_exp index="0" table="0x0" ct="0x40"/>
+</operand_sym>
+<operand_sym name="dst" id="0xb5" scope="0x43" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x41"/>
+</operand_sym>
+<operand_sym name="imm" id="0xb6" scope="0x43" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x41"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="joff" id="0xb7" scope="0x43" subsym="0x93" off="0" base="-1" minlen="8" code="true" index="1">
+<operand_exp index="1" table="0x0" ct="0x41"/>
+</operand_sym>
+<operand_sym name="dst" id="0xb8" scope="0x44" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x42"/>
+</operand_sym>
+<operand_sym name="src" id="0xb9" scope="0x44" subsym="0x13" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x42"/>
+</operand_sym>
+<operand_sym name="joff" id="0xba" scope="0x44" subsym="0x93" off="0" base="-1" minlen="8" code="true" index="0">
+<operand_exp index="0" table="0x0" ct="0x42"/>
+</operand_sym>
+<operand_sym name="dst" id="0xbb" scope="0x45" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x43"/>
+</operand_sym>
+<operand_sym name="imm" id="0xbc" scope="0x45" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x43"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="joff" id="0xbd" scope="0x45" subsym="0x93" off="0" base="-1" minlen="8" code="true" index="1">
+<operand_exp index="1" table="0x0" ct="0x43"/>
+</operand_sym>
+<operand_sym name="dst" id="0xbe" scope="0x46" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x44"/>
+</operand_sym>
+<operand_sym name="src" id="0xbf" scope="0x46" subsym="0x13" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x44"/>
+</operand_sym>
+<operand_sym name="joff" id="0xc0" scope="0x46" subsym="0x93" off="0" base="-1" minlen="8" code="true" index="0">
+<operand_exp index="0" table="0x0" ct="0x44"/>
+</operand_sym>
+<operand_sym name="dst" id="0xc1" scope="0x47" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x45"/>
+</operand_sym>
+<operand_sym name="imm" id="0xc2" scope="0x47" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x45"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="joff" id="0xc3" scope="0x47" subsym="0x93" off="0" base="-1" minlen="8" code="true" index="1">
+<operand_exp index="1" table="0x0" ct="0x45"/>
+</operand_sym>
+<operand_sym name="dst" id="0xc4" scope="0x48" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x46"/>
+</operand_sym>
+<operand_sym name="src" id="0xc5" scope="0x48" subsym="0x13" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x46"/>
+</operand_sym>
+<operand_sym name="joff" id="0xc6" scope="0x48" subsym="0x93" off="0" base="-1" minlen="8" code="true" index="0">
+<operand_exp index="0" table="0x0" ct="0x46"/>
+</operand_sym>
+<operand_sym name="dst" id="0xc7" scope="0x49" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x47"/>
+</operand_sym>
+<operand_sym name="imm" id="0xc8" scope="0x49" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x47"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="joff" id="0xc9" scope="0x49" subsym="0x93" off="0" base="-1" minlen="8" code="true" index="1">
+<operand_exp index="1" table="0x0" ct="0x47"/>
+</operand_sym>
+<operand_sym name="dst" id="0xca" scope="0x4a" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x48"/>
+</operand_sym>
+<operand_sym name="src" id="0xcb" scope="0x4a" subsym="0x13" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x48"/>
+</operand_sym>
+<operand_sym name="joff" id="0xcc" scope="0x4a" subsym="0x93" off="0" base="-1" minlen="8" code="true" index="0">
+<operand_exp index="0" table="0x0" ct="0x48"/>
+</operand_sym>
+<operand_sym name="dst" id="0xcd" scope="0x4b" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x49"/>
+</operand_sym>
+<operand_sym name="imm" id="0xce" scope="0x4b" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x49"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="joff" id="0xcf" scope="0x4b" subsym="0x93" off="0" base="-1" minlen="8" code="true" index="1">
+<operand_exp index="1" table="0x0" ct="0x49"/>
+</operand_sym>
+<operand_sym name="dst" id="0xd0" scope="0x4c" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x4a"/>
+</operand_sym>
+<operand_sym name="src" id="0xd1" scope="0x4c" subsym="0x13" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x4a"/>
+</operand_sym>
+<operand_sym name="joff" id="0xd2" scope="0x4c" subsym="0x93" off="0" base="-1" minlen="8" code="true" index="0">
+<operand_exp index="0" table="0x0" ct="0x4a"/>
+</operand_sym>
+<operand_sym name="dst" id="0xd3" scope="0x4d" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x4b"/>
+</operand_sym>
+<operand_sym name="imm" id="0xd4" scope="0x4d" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x4b"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="joff" id="0xd5" scope="0x4d" subsym="0x93" off="0" base="-1" minlen="8" code="true" index="1">
+<operand_exp index="1" table="0x0" ct="0x4b"/>
+</operand_sym>
+<operand_sym name="dst" id="0xd6" scope="0x4e" subsym="0x14" off="0" base="-1" minlen="8" index="2">
+<operand_exp index="2" table="0x0" ct="0x4c"/>
+</operand_sym>
+<operand_sym name="src" id="0xd7" scope="0x4e" subsym="0x13" off="0" base="-1" minlen="8" index="1">
+<operand_exp index="1" table="0x0" ct="0x4c"/>
+</operand_sym>
+<operand_sym name="joff" id="0xd8" scope="0x4e" subsym="0x93" off="0" base="-1" minlen="8" code="true" index="0">
+<operand_exp index="0" table="0x0" ct="0x4c"/>
+</operand_sym>
+<subtable_sym name="SysCall" id="0xd9" scope="0x0" numct="1">
+<constructor parent="0xd9" first="1" length="8" line="0:265">
+<oper id="0xda"/>
+<opprint id="0"/>
+<construct_tpl>
+<handle_tpl><const_tpl type="spaceid" name="syscall"/><const_tpl type="real" val="0x1"/><const_tpl type="handle" val="0" s="space"/><const_tpl type="handle" val="0" s="offset"/><const_tpl type="real" val="0x0"/><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4980"/></handle_tpl>
+</construct_tpl>
+</constructor>
+<decision number="1" context="false" start="0" size="0">
+<pair id="0">
+<instruct_pat>
+<pat_block offset="0" nonzero="0">
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+</subtable_sym>
+<operand_sym name="imm" id="0xda" scope="0x4f" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0xd9" ct="0x0"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="SysCall" id="0xdb" scope="0x50" subsym="0xd9" off="0" base="-1" minlen="8" code="true" index="1">
+<operand_exp index="1" table="0x0" ct="0x4d"/>
+</operand_sym>
+<operand_sym name="imm" id="0xdc" scope="0x50" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x4d"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<subtable_sym name="disp32" id="0xdd" scope="0x0" numct="1">
+<constructor parent="0xdd" first="1" length="8" line="0:271">
+<oper id="0xdf"/>
+<oper id="0xde"/>
+<opprint id="1"/>
+<construct_tpl>
+<handle_tpl><const_tpl type="spaceid" name="ram"/><const_tpl type="real" val="0x4"/><const_tpl type="handle" val="1" s="space"/><const_tpl type="handle" val="1" s="offset"/><const_tpl type="real" val="0x0"/><const_tpl type="spaceid" name="unique"/><const_tpl type="real" val="0x4a00"/></handle_tpl>
+</construct_tpl>
+</constructor>
+<decision number="1" context="false" start="0" size="0">
+<pair id="0">
+<instruct_pat>
+<pat_block offset="0" nonzero="0">
+</pat_block>
+</instruct_pat>
+</pair>
+</decision>
+</subtable_sym>
+<operand_sym name="reloc" id="0xde" scope="0x51" off="0" base="-1" minlen="0" index="1">
+<operand_exp index="1" table="0xdd" ct="0x0"/>
+<plus_exp>
+<end_exp/><operand_exp index="0" table="0xdd" ct="0x0"/>
+</plus_exp>
+</operand_sym>
+<operand_sym name="imm" id="0xdf" scope="0x51" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0xdd" ct="0x0"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+<operand_sym name="disp32" id="0xe0" scope="0x52" subsym="0xdd" off="0" base="-1" minlen="8" code="true" index="1">
+<operand_exp index="1" table="0x0" ct="0x4e"/>
+</operand_sym>
+<operand_sym name="imm" id="0xe1" scope="0x52" off="0" base="-1" minlen="8" index="0">
+<operand_exp index="0" table="0x0" ct="0x4e"/>
+<tokenfield bigendian="false" signbit="true" bitstart="32" bitend="63" bytestart="4" byteend="7" shift="0" base="16"/>
+</operand_sym>
+</symbol_table>
+</sleigh>
diff --git a/Ghidra/Processors/eBPF/data/languages/eBPF.slaspec b/Ghidra/Processors/eBPF/data/languages/eBPF.slaspec
new file mode 100644
index 000000000..213778df8
--- /dev/null
+++ b/Ghidra/Processors/eBPF/data/languages/eBPF.slaspec
@@ -0,0 +1,3 @@
+define endian=little;
+
+@include "eBPF.sinc"
\ No newline at end of file
diff --git a/Ghidra/Processors/eBPF/src/main/java/ghidra/app/plugin/core/analysis/eBPFAnalyzer.java b/Ghidra/Processors/eBPF/src/main/java/ghidra/app/plugin/core/analysis/eBPFAnalyzer.java
new file mode 100644
index 000000000..a9b8c6a3e
--- /dev/null
+++ b/Ghidra/Processors/eBPF/src/main/java/ghidra/app/plugin/core/analysis/eBPFAnalyzer.java
@@ -0,0 +1,1169 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package ghidra.app.plugin.core.analysis;
+
+import ghidra.app.cmd.function.SetFunctionNameCmd;
+import ghidra.app.cmd.function.SetFunctionVarArgsCommand;
+import ghidra.app.cmd.function.SetReturnDataTypeCmd;
+import ghidra.app.plugin.core.analysis.ConstantPropagationAnalyzer;
+import ghidra.app.plugin.core.analysis.ConstantPropagationContextEvaluator;
+import ghidra.util.exception.CancelledException;
+import ghidra.util.task.TaskMonitor;
+import ghidra.program.model.address.*;
+import ghidra.program.model.data.CharDataType;
+import ghidra.program.model.data.DataType;
+import ghidra.program.model.lang.Processor;
+import ghidra.program.model.listing.Program;
+import ghidra.program.model.symbol.SourceType;
+import ghidra.program.model.symbol.SymbolIterator;
+import ghidra.program.model.symbol.SymbolTable;
+import ghidra.program.util.*;
+import ghidra.program.model.data.IntegerDataType;
+import ghidra.program.model.data.PointerDataType;
+import ghidra.program.model.data.SignedQWordDataType;
+import ghidra.program.model.data.StructureDataType;
+import ghidra.program.model.data.UnsignedCharDataType;
+import ghidra.program.model.data.UnsignedIntegerDataType;
+import ghidra.program.model.data.UnsignedLongDataType;
+import ghidra.program.model.data.UnsignedShortDataType;
+import ghidra.program.model.data.VoidDataType;
+import ghidra.program.model.listing.BookmarkManager;
+import ghidra.program.model.listing.CodeUnit;
+import ghidra.program.model.listing.Function;
+import ghidra.app.cmd.function.AddMemoryParameterCommand;
+
+public class eBPFAnalyzer extends ConstantPropagationAnalyzer {
+    private final static String PROCESSOR_NAME = "eBPF";
+
+    public eBPFAnalyzer() {
+        super(PROCESSOR_NAME);
+    }
+
+    @Override
+    public boolean canAnalyze(Program program) {
+        return program.getLanguage().getProcessor().equals(
+            Processor.findOrPossiblyCreateProcessor(PROCESSOR_NAME));
+    }
+
+    @Override
+    public AddressSet flowConstants(final Program program, Address flowStart, AddressSetView flowSet, final SymbolicPropogator symEval, final TaskMonitor monitor)
+    throws CancelledException {
+        ContextEvaluator eval = new ConstantPropagationContextEvaluator(trustWriteMemOption);
+        AddressSet resultSet = symEval.flowConstants(flowStart, flowSet, eval, true, monitor);
+
+        BookmarkManager bmmanager = program.getBookmarkManager();
+        bmmanager.removeBookmarks("Error", "Bad Instruction", monitor);
+
+        SymbolTable table = program.getSymbolTable();
+        boolean includeDynamicSymbols = true;
+        SymbolIterator symbols = table.getAllSymbols(includeDynamicSymbols);
+
+        for (ghidra.program.model.symbol.Symbol s: symbols) {
+            if (s.getName().contains("syscall")) {
+                Function func = program.getFunctionManager().getFunctionAt(s.getAddress());
+
+                //Definitions for datatypes
+                DataType dstruct = null;
+                DataType dvoid = new VoidDataType();
+                DataType dint = new IntegerDataType();
+                DataType dchar = new CharDataType();
+                DataType duint = new UnsignedIntegerDataType();
+                DataType dulong = new UnsignedLongDataType();
+                DataType dushort = new UnsignedShortDataType();
+                DataType dslong = new SignedQWordDataType();
+                DataType duchar = new UnsignedCharDataType();
+                DataType dvp = new PointerDataType(dvoid, 0);
+                DataType dcp = new PointerDataType(dchar, 0);
+                DataType dsp; //DataType for struct-pointer
+                //Command-vars
+                SetFunctionNameCmd cmdName;
+                SetReturnDataTypeCmd cmdRet;
+                AddMemoryParameterCommand cmdArg1;
+                AddMemoryParameterCommand cmdArg2;
+                AddMemoryParameterCommand cmdArg3;
+                AddMemoryParameterCommand cmdArg4;
+                AddMemoryParameterCommand cmdArg5;
+                SetFunctionVarArgsCommand cmdVar = new SetFunctionVarArgsCommand(func, true);
+
+                String location = s.getName().substring(14); //Getting address of helper
+                int helper_id = Integer.parseInt(location, 16);
+                switch (helper_id) {
+                    case(0x0):
+                        //void bpf_unspec()
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_unspec", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dvoid, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x1):
+                        //void *bpf_map_lookup_elem(struct bpf_map *map, const void *key)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_map_lookup_elem", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dvp, SourceType.ANALYSIS);
+                        dstruct = new StructureDataType("struct bpf_map", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "map", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "key", dvp, 1, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x2):
+                        //int bpf_map_update_elem(struct bpf_map *map, const void *key, const void *value, u64 flags)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_map_update_elem", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+                        dstruct = new StructureDataType("struct bpf_map", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "map", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "key", dvp, 1, SourceType.ANALYSIS);
+                        cmdArg3 = new AddMemoryParameterCommand(func, s.getAddress(), "value", dvp, 2, SourceType.ANALYSIS);
+                        cmdArg4 = new AddMemoryParameterCommand(func, s.getAddress(), "flags", dulong, 3, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        cmdArg3.applyTo(program);
+                        cmdArg4.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x3):
+                        //int bpf_map_delete_elem(struct bpf_map *map, const void *key)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_map_delete_elem", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+                        dstruct = new StructureDataType("struct bpf_map", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "map", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "key", dvp, 1, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x4):
+                        //int bpf_probe_read(void *dst, u32 size, const void *src)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_probe_read", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "dst", dvp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "size", duint, 1, SourceType.ANALYSIS);
+                        cmdArg3 = new AddMemoryParameterCommand(func, s.getAddress(), "src", dvp, 2, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        cmdArg3.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x5):
+                        //u64 bpf_ktime_get_ns(void)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_ktime_get_ns", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dulong, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x6):
+                        //int bpf_trace_printk(const char *fmt, u32 fmt_size, ...)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_trace_printk", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "fmt", dcp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "fmt_size", duint, 1, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x7):
+                        //u32 bpf_get_prandom_u32(void)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_get_prandom_u32", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), duint, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x8):
+                        //u32 bpf_get_smp_processor_id(void)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_get_smp_processor_id", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), duint, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x9):
+                        //int bpf_skb_store_bytes(struct sk_buff *skb, u32 offset, const void *from, u32 len, u64 flags)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_skb_store_bytes", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdVar.applyTo(program);
+                        //If we'll set all arguments for this func (as always), it will give rise nasty errors such "Removing unreachable block at (address)"
+                        //int bpf_skb_store_bytes(struct sk_buff *skb, u32 offset, const void *from, u32 len, u64 flags)
+                        program.flushEvents();
+                        break;
+                    case (0xa):
+                        //int bpf_l3_csum_replace(struct sk_buff *skb, u32 offset, u64 from, u64 to, u64 size)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_l3_csum_replace", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+
+                        dstruct = new StructureDataType("struct sk_buff", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "skb", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "offset", duint, 1, SourceType.ANALYSIS);
+                        cmdArg3 = new AddMemoryParameterCommand(func, s.getAddress(), "from", dulong, 2, SourceType.ANALYSIS);
+                        cmdArg4 = new AddMemoryParameterCommand(func, s.getAddress(), "to", dulong, 3, SourceType.ANALYSIS);
+                        cmdArg5 = new AddMemoryParameterCommand(func, s.getAddress(), "size", dulong, 4, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        cmdArg3.applyTo(program);
+                        cmdArg4.applyTo(program);
+                        cmdArg5.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0xb):
+                        //int bpf_l4_csum_replace(struct sk_buff *skb, u32 offset, u64 from, u64 to, u64 flags)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_l4_csum_replace", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+
+                        dstruct = new StructureDataType("struct sk_buff", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "skb", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "offset", duint, 1, SourceType.ANALYSIS);
+                        cmdArg3 = new AddMemoryParameterCommand(func, s.getAddress(), "from", dulong, 2, SourceType.ANALYSIS);
+                        cmdArg4 = new AddMemoryParameterCommand(func, s.getAddress(), "to", dulong, 3, SourceType.ANALYSIS);
+                        cmdArg5 = new AddMemoryParameterCommand(func, s.getAddress(), "flags", dulong, 4, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        cmdArg3.applyTo(program);
+                        cmdArg4.applyTo(program);
+                        cmdArg5.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0xc):
+                        //int bpf_tail_call(void *ctx, struct bpf_map *prog_array_map, u32 index)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_tail_call", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+
+                        dstruct = new StructureDataType("struct bpf_map", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "ctx", dvp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "prog_array_map", dsp, 1, SourceType.ANALYSIS);
+                        cmdArg3 = new AddMemoryParameterCommand(func, s.getAddress(), "index", duint, 2, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        cmdArg3.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0xd):
+                        //int bpf_clone_redirect(struct sk_buff *skb, u32 ifindex, u64 flags)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_clone_redirect", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+
+                        dstruct = new StructureDataType("struct sk_buff", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "skb", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "ifindex", duint, 1, SourceType.ANALYSIS);
+                        cmdArg3 = new AddMemoryParameterCommand(func, s.getAddress(), "flags", dulong, 2, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        cmdArg3.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0xe):
+                        //u64 bpf_get_current_pid_tgid(void)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_get_current_pid_tgid", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dulong, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0xf):
+                        //u64 bpf_get_current_uid_gid(void)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_get_current_uid_gid", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dulong, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x10):
+                        //int bpf_get_current_comm(char *buf, u32 size_of_buf)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_get_current_comm", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "buf", dcp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "size_of_buf", duint, 1, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x11):
+                        //u32 bpf_get_cgroup_classid(struct sk_buff *skb)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_get_cgroup_classid", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), duint, SourceType.ANALYSIS);
+
+                        dstruct = new StructureDataType("struct sk_buff", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "skb", dsp, 0, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x12):
+                        //int bpf_skb_vlan_push(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
+                        //In ghidra Api conditions we must equate__be16 with unsigned short type.
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_skb_vlan_push", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+
+                        dstruct = new StructureDataType("struct sk_buff", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "skb", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "vlan_proto", dushort, 1, SourceType.ANALYSIS);
+                        cmdArg3 = new AddMemoryParameterCommand(func, s.getAddress(), "vlan_tci", dushort, 2, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        cmdArg3.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x13):
+                        //int bpf_skb_vlan_pop(struct sk_buff *skb)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_skb_vlan_pop", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+
+                        dstruct = new StructureDataType("struct sk_buff", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "skb", dsp, 0, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x14):
+                        //int bpf_skb_get_tunnel_key(struct sk_buff *skb, struct bpf_tunnel_key *key, u32 size, u64 flags)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_skb_get_tunnel_key", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+
+                        dstruct = new StructureDataType("struct sk_buff", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+                        DataType dstruct2 = new StructureDataType("struct bpf_tunnel_key", 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "skb", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "key", new PointerDataType(dstruct2, 0), 1, SourceType.ANALYSIS);
+                        cmdArg3 = new AddMemoryParameterCommand(func, s.getAddress(), "size", duint, 2, SourceType.ANALYSIS);
+                        cmdArg4 = new AddMemoryParameterCommand(func, s.getAddress(), "flags", dulong, 3, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        cmdArg3.applyTo(program);
+                        cmdArg4.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x15):
+                        //int bpf_skb_set_tunnel_key(struct sk_buff *skb, struct bpf_tunnel_key *key, u32 size, u64 flags)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_skb_set_tunnel_key", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+
+                        dstruct = new StructureDataType("struct sk_buff", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+                        dstruct2 = new StructureDataType("struct bpf_tunnel_key", 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "skb", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "key", new PointerDataType(dstruct2, 0), 1, SourceType.ANALYSIS);
+                        cmdArg3 = new AddMemoryParameterCommand(func, s.getAddress(), "size", duint, 2, SourceType.ANALYSIS);
+                        cmdArg4 = new AddMemoryParameterCommand(func, s.getAddress(), "flags", dulong, 3, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        cmdArg3.applyTo(program);
+                        cmdArg4.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x16):
+                        //u64 bpf_perf_event_read(struct bpf_map *map, u64 flags)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_perf_event_read", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dulong, SourceType.ANALYSIS);
+
+                        dstruct = new StructureDataType("struct bpf_map", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "map", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "flags", dulong, 1, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x17):
+                        //int bpf_redirect(u32 ifindex, u64 flags)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_redirect", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "ifindex", duint, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "flags", dulong, 1, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x18):
+                        //u32 bpf_get_route_realm(struct sk_buff *skb)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_get_route_realm", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), duint, SourceType.ANALYSIS);
+
+                        dstruct = new StructureDataType("struct sk_buff", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "skb", dsp, 0, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x19):
+                        //int bpf_perf_event_output(struct pt_reg *ctx, struct bpf_map *map, u64 flags, void *data, u64 size)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_perf_event_output", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+
+                        dstruct = new StructureDataType("struct pt_reg", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+                        dstruct2 = new StructureDataType("struct bpf_map", 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "ctx", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "map", new PointerDataType(dstruct2, 0), 1, SourceType.ANALYSIS);
+                        cmdArg3 = new AddMemoryParameterCommand(func, s.getAddress(), "flags", dulong, 2, SourceType.ANALYSIS);
+                        cmdArg4 = new AddMemoryParameterCommand(func, s.getAddress(), "data", dvp, 3, SourceType.ANALYSIS);
+                        cmdArg5 = new AddMemoryParameterCommand(func, s.getAddress(), "size", dulong, 4, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        cmdArg3.applyTo(program);
+                        cmdArg4.applyTo(program);
+                        cmdArg5.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x1a):
+                        //int bpf_skb_load_bytes(const struct sk_buff *skb, u32 offset, void *to, u32 len)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_skb_load_bytes", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+
+                        dstruct = new StructureDataType("struct sk_buff", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+                        dstruct2 = new StructureDataType("struct bpf_map", 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "skb", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "offset", duint, 1, SourceType.ANALYSIS);
+                        cmdArg3 = new AddMemoryParameterCommand(func, s.getAddress(), "to", dvp, 2, SourceType.ANALYSIS);
+                        cmdArg4 = new AddMemoryParameterCommand(func, s.getAddress(), "len", duint, 3, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        cmdArg3.applyTo(program);
+                        cmdArg4.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x1b):
+                        //int bpf_get_stackid(struct pt_reg *ctx, struct bpf_map *map, u64 flags)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_get_stackid", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+
+                        dstruct = new StructureDataType("struct pt_reg", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+                        dstruct2 = new StructureDataType("struct bpf_map", 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "ctx", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "map", new PointerDataType(dstruct2, 0), 1, SourceType.ANALYSIS);
+                        cmdArg3 = new AddMemoryParameterCommand(func, s.getAddress(), "flags", dulong, 2, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        cmdArg3.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x1c):
+                        //s64 bpf_csum_diff(__be32 *from, u32 from_size, __be32 *to, u32 to_size, __wsum seed)
+                        //In ghidra Api conditions we must equate __be32 and __wsum with u32 (knowing typedef).
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_csum_diff", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dslong, SourceType.ANALYSIS);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "from", new PointerDataType(duint, 0), 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "from_size", duint, 1, SourceType.ANALYSIS);
+                        cmdArg3 = new AddMemoryParameterCommand(func, s.getAddress(), "to", new PointerDataType(duint, 0), 2, SourceType.ANALYSIS);
+                        cmdArg4 = new AddMemoryParameterCommand(func, s.getAddress(), "to_size", duint, 3, SourceType.ANALYSIS);
+                        cmdArg5 = new AddMemoryParameterCommand(func, s.getAddress(), "seed", duint, 4, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        cmdArg3.applyTo(program);
+                        cmdArg4.applyTo(program);
+                        cmdArg5.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x1d):
+                        //int bpf_skb_get_tunnel_opt(struct sk_buff *skb, u8 *opt, u32 size)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_skb_get_tunnel_opt", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+
+                        dstruct = new StructureDataType("struct sk_buff", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "skb", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "opt", new PointerDataType(duchar, 0), 1, SourceType.ANALYSIS);
+                        cmdArg3 = new AddMemoryParameterCommand(func, s.getAddress(), "size", duint, 2, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        cmdArg3.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x1e):
+                        //int bpf_skb_set_tunnel_opt(struct sk_buff *skb, u8 *opt, u32 size)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_skb_set_tunnel_opt", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+
+                        dstruct = new StructureDataType("struct sk_buff", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "skb", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "opt", new PointerDataType(duchar, 0), 1, SourceType.ANALYSIS);
+                        cmdArg3 = new AddMemoryParameterCommand(func, s.getAddress(), "size", duint, 2, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        cmdArg3.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x1f):
+                        //int bpf_skb_change_proto(struct sk_buff *skb, __be16 proto, u64 flags)
+                        //__be16 equals u16 for big-endian
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_skb_change_proto", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+
+                        dstruct = new StructureDataType("struct sk_buff", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "skb", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "proto", dushort, 1, SourceType.ANALYSIS);
+                        cmdArg3 = new AddMemoryParameterCommand(func, s.getAddress(), "flags", dulong, 2, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        cmdArg3.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x20):
+                        //int bpf_skb_change_type(struct sk_buff *skb, u32 type)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_skb_change_type", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+
+                        dstruct = new StructureDataType("struct sk_buff", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "skb", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "type", duint, 1, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x21):
+                        //int bpf_skb_under_cgroup(struct sk_buff *skb, struct bpf_map *map, u32 index)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_skb_under_cgroup", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+
+                        dstruct = new StructureDataType("struct sk_buff", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+                        dstruct2 = new StructureDataType("struct bpf_map", 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "skb", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "map", new PointerDataType(dstruct2, 0), 1, SourceType.ANALYSIS);
+                        cmdArg3 = new AddMemoryParameterCommand(func, s.getAddress(), "index", duint, 2, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        cmdArg3.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x22):
+                        //u32 bpf_get_hash_recalc(struct sk_buff *skb)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_get_hash_recalc", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), duint, SourceType.ANALYSIS);
+                        dstruct = new StructureDataType("struct sk_buff", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "skb", dsp, 0, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x23):
+                        //u64 bpf_get_current_task(void)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_get_current_task", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dulong, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x24):
+                        //int bpf_probe_write_user(void *dst, const void *src, u32 len)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_probe_write_user", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "dst", dvp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "src", dvp, 1, SourceType.ANALYSIS);
+                        cmdArg3 = new AddMemoryParameterCommand(func, s.getAddress(), "len", duint, 2, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        cmdArg3.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x25):
+                        //int bpf_current_task_under_cgroup(struct bpf_map *map, u32 index)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_current_task_under_cgroup", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+
+                        dstruct = new StructureDataType("struct bpf_map", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "map", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "index", duint, 1, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x26):
+                        //int bpf_skb_change_tail(struct sk_buff *skb, u32 len, u64 flags)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_skb_change_tail", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+
+                        dstruct = new StructureDataType("struct sk_buff", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "skb", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "len", duint, 1, SourceType.ANALYSIS);
+                        cmdArg3 = new AddMemoryParameterCommand(func, s.getAddress(), "flags", dulong, 2, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        cmdArg3.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x27):
+                        //int bpf_skb_pull_data(struct sk_buff *skb, u32 len)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_skb_pull_data", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+
+                        dstruct = new StructureDataType("struct sk_buff", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "skb", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "len", duint, 1, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x28):
+                        //s64 bpf_csum_update(struct sk_buff *skb, __wsum csum)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_csum_update", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dslong, SourceType.ANALYSIS);
+
+                        dstruct = new StructureDataType("struct sk_buff", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "skb", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "csum", duint, 1, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x29):
+                        //void bpf_set_hash_invalid(struct sk_buff *skb)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_set_hash_invalid", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dvoid, SourceType.ANALYSIS);
+
+                        dstruct = new StructureDataType("struct sk_buff", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "skb", dsp, 0, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x2a):
+                        //int bpf_get_numa_node_id(void)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_get_numa_node_id", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x2b):
+                        //int bpf_skb_change_head(struct sk_buff *skb, u32 len, u64 flags)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_skb_change_head", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+
+                        dstruct = new StructureDataType("struct sk_buff", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "skb", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "len", duint, 1, SourceType.ANALYSIS);
+                        cmdArg3 = new AddMemoryParameterCommand(func, s.getAddress(), "flags", dulong, 2, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        cmdArg3.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x2c):
+                        //int bpf_xdp_adjust_head(struct xdp_buff *xdp_md, int delta)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_xdp_adjust_head", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+
+                        dstruct = new StructureDataType("struct xdp_buff", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "xdp_md", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "delta", dint, 1, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x2d):
+                        //int bpf_probe_read_str(void *dst, u32 size, const void *unsafe_ptr)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_probe_read_str", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+
+                        dstruct = new StructureDataType("struct xdp_buff", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "dst", dvp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "size", duint, 1, SourceType.ANALYSIS);
+                        cmdArg3 = new AddMemoryParameterCommand(func, s.getAddress(), "unsafe_ptr", dvp, 2, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        cmdArg3.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x2e):
+                        //u64 bpf_get_socket_cookie(struct sk_buff *skb)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_get_socket_cookie", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dulong, SourceType.ANALYSIS);
+                        dstruct = new StructureDataType("struct sk_buff", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "skb", dsp, 0, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x2f):
+                        //u64 bpf_get_socket_cookie(struct bpf_sock_addr *ctx)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_get_socket_cookie", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dulong, SourceType.ANALYSIS);
+                        dstruct = new StructureDataType("struct bpf_sock_addr", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "ctx", dsp, 0, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x30):
+                        //u64 bpf_get_socket_cookie(struct bpf_sock_ops *ctx)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_get_socket_cookie", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dulong, SourceType.ANALYSIS);
+                        dstruct = new StructureDataType("struct bpf_sock_ops", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "ctx", dsp, 0, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x31):
+                        //u32 bpf_get_socket_uid(struct sk_buff *skb)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_get_socket_uid", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), duint, SourceType.ANALYSIS);
+                        dstruct = new StructureDataType("struct sk_buff", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "skb", dsp, 0, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x32):
+                        //int bpf_set_hash(struct sk_buff *skb, u32 hash)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_set_hash", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+                        dstruct = new StructureDataType("struct sk_buff", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "skb", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "hash", duint, 1, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x33):
+                        //int bpf_setsockopt(void *bpf_socket, int level, int optname, void *optval, int optlen)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_setsockopt", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdVar.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x34):
+                        //int bpf_skb_adjust_room(struct sk_buff *skb, s32 len_diff, u32 mode, u64 flags)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_skb_adjust_room", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+                        dstruct = new StructureDataType("struct sk_buff", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "skb", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "len_diff", dint, 1, SourceType.ANALYSIS);
+                        cmdArg3 = new AddMemoryParameterCommand(func, s.getAddress(), "mode", duint, 2, SourceType.ANALYSIS);
+                        cmdArg4 = new AddMemoryParameterCommand(func, s.getAddress(), "flags", dulong, 3, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        cmdArg3.applyTo(program);
+                        cmdArg4.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x35):
+                        //int bpf_redirect_map(struct bpf_map *map, u32 key, u64 flags)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_redirect_map", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+                        dstruct = new StructureDataType("struct bpf_map", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "map", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "key", duint, 1, SourceType.ANALYSIS);
+                        cmdArg3 = new AddMemoryParameterCommand(func, s.getAddress(), "flags", dulong, 2, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        cmdArg3.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x36):
+                        //int bpf_sk_redirect_map(struct sk_buff *skb, struct bpf_map *map, u32 key, u64 flags)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_sk_redirect_map", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+                        dstruct = new StructureDataType("struct sk_buff", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+                        dstruct2 = new StructureDataType("struct bpf_map", 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "skb", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "map", new PointerDataType(dstruct2, 0), 1, SourceType.ANALYSIS);
+                        cmdArg3 = new AddMemoryParameterCommand(func, s.getAddress(), "key", duint, 2, SourceType.ANALYSIS);
+                        cmdArg4 = new AddMemoryParameterCommand(func, s.getAddress(), "flags", dulong, 3, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        cmdArg3.applyTo(program);
+                        cmdArg4.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x37):
+                        //int bpf_sock_map_update(struct bpf_sock_ops *skops, struct bpf_map *map, void *key, u64 flags)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_sock_map_update", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+                        dstruct = new StructureDataType("struct bpf_sock_ops", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+                        dstruct2 = new StructureDataType("struct bpf_map", 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "skops", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "map", new PointerDataType(dstruct2, 0), 1, SourceType.ANALYSIS);
+                        cmdArg3 = new AddMemoryParameterCommand(func, s.getAddress(), "key", dvp, 2, SourceType.ANALYSIS);
+                        cmdArg4 = new AddMemoryParameterCommand(func, s.getAddress(), "flags", dulong, 3, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        cmdArg3.applyTo(program);
+                        cmdArg4.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x38):
+                        //int bpf_xdp_adjust_meta(struct xdp_buff *xdp_md, int delta)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_xdp_adjust_meta", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+                        dstruct = new StructureDataType("struct xdp_buff", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "xdp_md", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "delta", dint, 1, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x39):
+                        //int bpf_perf_event_read_value(struct bpf_map *map, u64 flags, struct bpf_perf_event_value *buf, u32 buf_size)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_perf_event_read_value", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+                        dstruct = new StructureDataType("struct bpf_map", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+                        dstruct2 = new StructureDataType("struct bpf_perf_event_value", 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "map", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "flags", dulong, 1, SourceType.ANALYSIS);
+                        cmdArg3 = new AddMemoryParameterCommand(func, s.getAddress(), "buf", new PointerDataType(dstruct2, 0), 2, SourceType.ANALYSIS);
+                        cmdArg4 = new AddMemoryParameterCommand(func, s.getAddress(), "buf_size", duint, 3, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        cmdArg3.applyTo(program);
+                        cmdArg4.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x3a):
+                        //int bpf_perf_prog_read_value(struct bpf_perf_event_data *ctx, struct bpf_perf_event_value *buf, u32 buf_size)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_perf_prog_read_value", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+                        dstruct = new StructureDataType("struct bpf_perf_event_data", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+                        dstruct2 = new StructureDataType("struct bpf_perf_event_value", 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "ctx", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "buf", new PointerDataType(dstruct2, 0), 1, SourceType.ANALYSIS);
+                        cmdArg3 = new AddMemoryParameterCommand(func, s.getAddress(), "buf_size", duint, 2, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        cmdArg3.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x3b):
+                        //int bpf_getsockopt(void *bpf_socket, int level, int optname, void *optval, int optlen)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_getsockopt", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdVar.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x3c):
+                        //int bpf_override_return(struct pt_regs *regs, u64 rc)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_override_return", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+                        dstruct = new StructureDataType("struct pt_regs", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "regs", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "rc", dulong, 1, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x3d):
+                        //int bpf_sock_ops_cb_flags_set(struct bpf_sock_ops *bpf_sock, int argval)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_sock_ops_cb_flags_set", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+                        dstruct = new StructureDataType("struct bpf_sock_ops", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "bpf_sock", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "argval", dint, 1, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x3e):
+                        //int bpf_msg_redirect_map(struct sk_msg_buff *msg, struct bpf_map *map, u32 key, u64 flags)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_msg_redirect_map", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+                        dstruct = new StructureDataType("struct sk_msg_buff", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+                        dstruct2 = new StructureDataType("struct bpf_map", 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "msg", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "map", new PointerDataType(dstruct2, 0), 1, SourceType.ANALYSIS);
+                        cmdArg3 = new AddMemoryParameterCommand(func, s.getAddress(), "key", duint, 2, SourceType.ANALYSIS);
+                        cmdArg4 = new AddMemoryParameterCommand(func, s.getAddress(), "flags", dulong, 3, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        cmdArg3.applyTo(program);
+                        cmdArg4.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    case (0x3f):
+                        //int bpf_msg_apply_bytes(struct sk_msg_buff *msg, u32 bytes)
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_msg_apply_bytes", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dint, SourceType.ANALYSIS);
+                        dstruct = new StructureDataType("struct sk_msg_buff", 0);
+                        dsp = new PointerDataType(dstruct, 0);
+
+                        cmdArg1 = new AddMemoryParameterCommand(func, s.getAddress(), "msg", dsp, 0, SourceType.ANALYSIS);
+                        cmdArg2 = new AddMemoryParameterCommand(func, s.getAddress(), "bytes", duint, 1, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        cmdArg1.applyTo(program);
+                        cmdArg2.applyTo(program);
+                        program.flushEvents();
+                        break;
+                    default:
+                        //void bpf_undef()
+                        cmdName = new SetFunctionNameCmd(s.getAddress(), "bpf_undef", SourceType.ANALYSIS);
+                        cmdRet = new SetReturnDataTypeCmd(s.getAddress(), dvoid, SourceType.ANALYSIS);
+
+                        cmdName.applyTo(program);
+                        cmdRet.applyTo(program);
+                        program.flushEvents();
+                        break;
+                }
+                bmmanager.setBookmark(s.getAddress(), "Analysis", "eBPF-helpers", "eBPF-helper Identified");
+            }
+        }
+        return resultSet;
+    }
+}
diff --git a/Ghidra/Processors/eBPF/src/main/java/ghidra/app/util/bin/format/elf/extend/eBPF_ElfExtension.java b/Ghidra/Processors/eBPF/src/main/java/ghidra/app/util/bin/format/elf/extend/eBPF_ElfExtension.java
new file mode 100644
index 000000000..7acf1c578
--- /dev/null
+++ b/Ghidra/Processors/eBPF/src/main/java/ghidra/app/util/bin/format/elf/extend/eBPF_ElfExtension.java
@@ -0,0 +1,47 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package ghidra.app.util.bin.format.elf.extend;
+
+import ghidra.app.util.bin.format.elf.*;
+import ghidra.program.model.lang.*;
+import ghidra.util.exception.*;
+import ghidra.util.task.TaskMonitor;
+
+public class eBPF_ElfExtension extends ElfExtension {
+    @Override
+    public boolean canHandle(ElfHeader elf) {
+        return elf.e_machine() == ElfConstants.EM_BPF && elf.is64Bit();
+    }
+
+    @Override
+    public boolean canHandle(ElfLoadHelper elfLoadHelper) {
+        Language language = elfLoadHelper.getProgram().getLanguage();
+        return canHandle(elfLoadHelper.getElfHeader()) && "eBPF".equals(language.getProcessor().toString()) && language.getLanguageDescription().getSize() == 64;
+    }
+
+    @Override
+    public String getDataTypeSuffix() {
+        return "eBPF";
+    }
+
+    @Override
+    public void processGotPlt(ElfLoadHelper elfLoadHelper, TaskMonitor monitor) throws CancelledException {
+        if (!canHandle(elfLoadHelper)) {
+            return;
+        }
+        super.processGotPlt(elfLoadHelper, monitor);
+    }
+}
diff --git a/Ghidra/Processors/eBPF/src/main/java/ghidra/app/util/bin/format/elf/relocation/ElfeBPFRelocationFixupHandler.java b/Ghidra/Processors/eBPF/src/main/java/ghidra/app/util/bin/format/elf/relocation/ElfeBPFRelocationFixupHandler.java
new file mode 100644
index 000000000..d079b3cd9
--- /dev/null
+++ b/Ghidra/Processors/eBPF/src/main/java/ghidra/app/util/bin/format/elf/relocation/ElfeBPFRelocationFixupHandler.java
@@ -0,0 +1,47 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package ghidra.app.util.bin.format.elf.relocation;
+
+import ghidra.app.plugin.core.reloc.RelocationFixupHandler;
+import ghidra.app.util.opinion.ElfLoader;
+import ghidra.program.model.address.Address;
+import ghidra.program.model.lang.Language;
+import ghidra.program.model.lang.Processor;
+import ghidra.program.model.listing.Program;
+import ghidra.program.model.mem.MemoryAccessException;
+import ghidra.program.model.reloc.Relocation;
+import ghidra.program.model.util.CodeUnitInsertionException;
+
+public class ElfeBPFRelocationFixupHandler extends RelocationFixupHandler {
+    @Override
+    public boolean processRelocation(Program program, Relocation relocation, Address oldImageBase,
+            Address newImageBase) throws MemoryAccessException, CodeUnitInsertionException {
+                return process64BitRelocation(program, relocation, oldImageBase, newImageBase);
+    }
+
+    @Override
+    public boolean handlesProgram(Program program) {
+        if (!ElfLoader.ELF_NAME.equals(program.getExecutableFormat())) {
+            return false;
+        }
+        Language language = program.getLanguage();
+        if (language.getLanguageDescription().getSize() != 64) {
+            return false;
+        }
+        Processor processor = language.getProcessor();
+        return (processor.equals(Processor.findOrPossiblyCreateProcessor("eBPF")));
+    }
+}
diff --git a/Ghidra/Processors/eBPF/src/main/java/ghidra/app/util/bin/format/elf/relocation/eBPF_ElfRelocationHandler.java b/Ghidra/Processors/eBPF/src/main/java/ghidra/app/util/bin/format/elf/relocation/eBPF_ElfRelocationHandler.java
new file mode 100644
index 000000000..51c952607
--- /dev/null
+++ b/Ghidra/Processors/eBPF/src/main/java/ghidra/app/util/bin/format/elf/relocation/eBPF_ElfRelocationHandler.java
@@ -0,0 +1,110 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package ghidra.app.util.bin.format.elf.relocation;
+
+import ghidra.app.util.bin.format.elf.*;
+import ghidra.program.model.address.Address;
+import ghidra.program.model.listing.Program;
+import ghidra.program.model.mem.Memory;
+import ghidra.program.model.mem.MemoryAccessException;
+import ghidra.program.model.symbol.SymbolTable;
+import ghidra.util.exception.NotFoundException;
+
+public class eBPF_ElfRelocationHandler extends ElfRelocationHandler {
+    @Override
+    public boolean canRelocate(ElfHeader elf) {
+        return elf.e_machine() == ElfConstants.EM_BPF;
+    }
+
+    @Override
+    public void relocate(ElfRelocationContext elfRelocationContext, ElfRelocation relocation, Address relocationAddress) throws MemoryAccessException, NotFoundException {
+        ElfHeader elf = elfRelocationContext.getElfHeader();
+        if (elf.e_machine() != ElfConstants.EM_BPF) {
+            return;
+        }
+
+        Program program = elfRelocationContext.getProgram();
+        Memory memory = program.getMemory();
+
+        int type = relocation.getType();
+        int symbolIndex = relocation.getSymbolIndex();
+        long value;
+        boolean appliedSymbol = true;
+
+        if (type == 1) {
+            try {
+                int SymbolIndex = relocation.getSymbolIndex();
+                ElfSymbol Symbol = elfRelocationContext.getSymbol(SymbolIndex);
+                String map = Symbol.getNameAsString();
+
+                SymbolTable table = program.getSymbolTable();
+                Address mapAddr = table.getSymbols(map).next().getAddress();
+                String sec_name = elfRelocationContext.relocationTable.getSectionToBeRelocated().getNameAsString();
+                if (sec_name.toString().contains("debug")) {
+                return;
+                }
+
+                value = mapAddr.getAddressableWordOffset();
+                Byte dst = memory.getByte(relocationAddress.add(0x1));
+                memory.setLong(relocationAddress.add(0x4), value);
+                memory.setByte(relocationAddress.add(0x1), (byte)(dst + 0x10));
+            }
+            catch(NullPointerException e) {}
+        } else if (type == 10) {
+            try {
+                int SymbolIndex = relocation.getSymbolIndex();
+                ElfSymbol Symbol = elfRelocationContext.getSymbol(SymbolIndex);
+                String func_or_sec = Symbol.getNameAsString();
+                long instr_next = relocationAddress.add(0x8).getAddressableWordOffset();
+
+                // if we have, e.g, non-static function, it will be marked in the relocation table
+                // and indexed in the symbol table and it's easy to calculate the pc-relative-offset.
+                if (Symbol.isFunction()) {
+                    SymbolTable table = program.getSymbolTable();
+                    Address funcAddr = table.getSymbols(func_or_sec).next().getAddress();
+                    String sec_name = elfRelocationContext.relocationTable.getSectionToBeRelocated().getNameAsString();
+                    if (sec_name.toString().contains("debug")) {
+                        return;
+                    }
+                    value = funcAddr.getAddressableWordOffset();
+                    int offset = (int)(value - instr_next);
+                    memory.setInt(relocationAddress.add(0x4), offset);
+                }
+                // If we're dealing with static function we'll get the section name where it's located
+                else if (Symbol.isSection()) {
+                    if (memory.getInt(relocationAddress) == 0x1085) {
+
+                        ElfSectionHeader sec = elfRelocationContext.getElfHeader().getSection(func_or_sec);
+                        long sec_start = program.getImageBase().getOffset() + sec.getAddress();
+
+                        // getting call instruction offset (current imm)
+                        int current_imm = memory.getInt(relocationAddress.add(0x4));
+
+                        // calculate the call target section offset
+                        // according to formula on "kernel.org" docs: https://www.kernel.org/doc/html/latest/bpf/llvm_reloc.html
+                        int func_sec_offset = (current_imm + 1) * 8;
+                        long func_addr = sec_start + func_sec_offset;
+                        int offset = (int)(func_addr - instr_next);
+                        memory.setInt(relocationAddress.add(0x4), offset);
+                    }
+                }
+            } catch(NullPointerException e) {}
+        }
+        if (appliedSymbol && symbolIndex == 0) {
+            markAsWarning(program, relocationAddress, Long.toString(type), "applied relocation with symbol-index of 0", elfRelocationContext.getLog());
+        }
+    }
+}
-- 
2.39.0

